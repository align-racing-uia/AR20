
src.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000140  00800100  00002482  00002516  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002482  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f3  00800240  00800240  00002656  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002656  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002688  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004f0  00000000  00000000  000026c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cd55  00000000  00000000  00002bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000262d  00000000  00000000  0000f90d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c20  00000000  00000000  00011f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fb8  00000000  00000000  00014b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000318b  00000000  00000000  00015b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005430  00000000  00000000  00018c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000480  00000000  00000000  0001e0cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__vector_16>
      44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      48:	0c 94 9a 08 	jmp	0x1134	; 0x1134 <__vector_18>
      4c:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__vector_19>
      50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      60:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__vector_24>
      64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	73 65       	ori	r23, 0x53	; 83
      6a:	74 20       	and	r7, r4
      6c:	63 61       	ori	r22, 0x13	; 19
      6e:	6c 69       	ori	r22, 0x9C	; 156
      70:	62 72       	andi	r22, 0x22	; 34
      72:	61 74       	andi	r22, 0x41	; 65
      74:	69 6f       	ori	r22, 0xF9	; 249
      76:	6e 00       	.word	0x006e	; ????

00000078 <_ZZN8INA233_S10resetAlarmEvE3__c>:
      78:	72 65 73 65 74 20 61 6c 61 72 6d 00                 reset alarm.

00000084 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_4>:
      84:	55 56 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     UV WARN LIMIT re
      94:	61 64 62 61 63 6b 3a 20 00                          adback: .

0000009d <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_3>:
      9d:	55 56 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     UV WARN LIMIT: .

000000ad <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_2>:
      ad:	4f 56 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     OV WARN LIMIT re
      bd:	61 64 62 61 63 6b 3a 20 00                          adback: .

000000c6 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_1>:
      c6:	4f 56 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     OV WARN LIMIT: .

000000d6 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_0>:
      d6:	4f 43 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     OC WARN LIMIT re
      e6:	61 64 62 61 63 6b 3a 20 00                          adback: .

000000ef <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c>:
      ef:	4f 43 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     OC WARN LIMIT: .

000000ff <digital_pin_to_timer_PGM>:
      ff:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     10f:	00 00 00 00                                         ....

00000113 <digital_pin_to_bit_mask_PGM>:
     113:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     123:	04 08 10 20                                         ... 

00000127 <digital_pin_to_port_PGM>:
     127:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     137:	03 03 03 03                                         ....

0000013b <port_to_output_PGM>:
     13b:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000145 <port_to_mode_PGM>:
     145:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000150 <__ctors_start>:
     150:	b3 04       	cpc	r11, r3
     152:	fc 08       	sbc	r15, r12
     154:	3e 0e       	add	r3, r30

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf ef       	ldi	r28, 0xFF	; 255
     15c:	d8 e0       	ldi	r29, 0x08	; 8
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	12 e0       	ldi	r17, 0x02	; 2
     164:	a0 e0       	ldi	r26, 0x00	; 0
     166:	b1 e0       	ldi	r27, 0x01	; 1
     168:	e2 e8       	ldi	r30, 0x82	; 130
     16a:	f4 e2       	ldi	r31, 0x24	; 36
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x10>
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	a0 34       	cpi	r26, 0x40	; 64
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0xc>

00000178 <__do_clear_bss>:
     178:	24 e0       	ldi	r18, 0x04	; 4
     17a:	a0 e4       	ldi	r26, 0x40	; 64
     17c:	b2 e0       	ldi	r27, 0x02	; 2
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	a3 33       	cpi	r26, 0x33	; 51
     184:	b2 07       	cpc	r27, r18
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>

00000188 <__do_global_ctors>:
     188:	10 e0       	ldi	r17, 0x00	; 0
     18a:	cb ea       	ldi	r28, 0xAB	; 171
     18c:	d0 e0       	ldi	r29, 0x00	; 0
     18e:	04 c0       	rjmp	.+8      	; 0x198 <__do_global_ctors+0x10>
     190:	21 97       	sbiw	r28, 0x01	; 1
     192:	fe 01       	movw	r30, r28
     194:	0e 94 39 12 	call	0x2472	; 0x2472 <__tablejump2__>
     198:	c8 3a       	cpi	r28, 0xA8	; 168
     19a:	d1 07       	cpc	r29, r17
     19c:	c9 f7       	brne	.-14     	; 0x190 <__do_global_ctors+0x8>
     19e:	0e 94 2a 09 	call	0x1254	; 0x1254 <main>
     1a2:	0c 94 3f 12 	jmp	0x247e	; 0x247e <_exit>

000001a6 <__bad_interrupt>:
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <_ZN8INA233_SC1Ehjjh19INA233_Alarm_Config>:
float INA233_S::getVoltage_S()
{
    INA233_Data_Package data = receiveData_(0XD1, 2);
    int16_t dataWord = unpackWord(&data);
    return (25.0 * static_cast<float>(dataWord) / 10000000.0); //Returns shunt voltage reading.
}
     1aa:	0f 93       	push	r16
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
     1b4:	dc 01       	movw	r26, r24
     1b6:	6c 93       	st	X, r22
     1b8:	12 96       	adiw	r26, 0x02	; 2
     1ba:	5c 93       	st	X, r21
     1bc:	4e 93       	st	-X, r20
     1be:	11 97       	sbiw	r26, 0x01	; 1
     1c0:	14 96       	adiw	r26, 0x04	; 4
     1c2:	3c 93       	st	X, r19
     1c4:	2e 93       	st	-X, r18
     1c6:	13 97       	sbiw	r26, 0x03	; 3
     1c8:	15 96       	adiw	r26, 0x05	; 5
     1ca:	0c 93       	st	X, r16
     1cc:	15 97       	sbiw	r26, 0x05	; 5
     1ce:	2c e0       	ldi	r18, 0x0C	; 12
     1d0:	fe 01       	movw	r30, r28
     1d2:	36 96       	adiw	r30, 0x06	; 6
     1d4:	16 96       	adiw	r26, 0x06	; 6
     1d6:	01 90       	ld	r0, Z+
     1d8:	0d 92       	st	X+, r0
     1da:	2a 95       	dec	r18
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <_ZN8INA233_SC1Ehjjh19INA233_Alarm_Config+0x2c>
     1de:	2a e0       	ldi	r18, 0x0A	; 10
     1e0:	fc 01       	movw	r30, r24
     1e2:	72 96       	adiw	r30, 0x12	; 18
     1e4:	df 01       	movw	r26, r30
     1e6:	32 2f       	mov	r19, r18
     1e8:	1d 92       	st	X+, r1
     1ea:	3a 95       	dec	r19
     1ec:	e9 f7       	brne	.-6      	; 0x1e8 <_ZN8INA233_SC1Ehjjh19INA233_Alarm_Config+0x3e>
     1ee:	dc 01       	movw	r26, r24
     1f0:	5c 96       	adiw	r26, 0x1c	; 28
     1f2:	1c 92       	st	X, r1
     1f4:	5c 97       	sbiw	r26, 0x1c	; 28
     1f6:	5d 96       	adiw	r26, 0x1d	; 29
     1f8:	2c 93       	st	X, r18
     1fa:	5d 97       	sbiw	r26, 0x1d	; 29
     1fc:	5e 96       	adiw	r26, 0x1e	; 30
     1fe:	1c 92       	st	X, r1
     200:	5e 97       	sbiw	r26, 0x1e	; 30
     202:	5f 96       	adiw	r26, 0x1f	; 31
     204:	1c 92       	st	X, r1
     206:	5f 97       	sbiw	r26, 0x1f	; 31
     208:	90 96       	adiw	r26, 0x20	; 32
     20a:	1c 92       	st	X, r1
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	0f 91       	pop	r16
     212:	08 95       	ret

00000214 <_ZN8INA233_S15transmitCommandEh>:
     214:	cf 93       	push	r28
     216:	c6 2f       	mov	r28, r22
     218:	fc 01       	movw	r30, r24
     21a:	60 81       	ld	r22, Z
     21c:	89 e6       	ldi	r24, 0x69	; 105
     21e:	93 e0       	ldi	r25, 0x03	; 3
     220:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7TwoWire17beginTransmissionEh>
     224:	6c 2f       	mov	r22, r28
     226:	89 e6       	ldi	r24, 0x69	; 105
     228:	93 e0       	ldi	r25, 0x03	; 3
     22a:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <_ZN7TwoWire5writeEh>
     22e:	89 e6       	ldi	r24, 0x69	; 105
     230:	93 e0       	ldi	r25, 0x03	; 3
     232:	cf 91       	pop	r28
     234:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <_ZN7TwoWire15endTransmissionEv>

00000238 <_ZN8INA233_S10resetAlarmEv>:
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	ec 01       	movw	r28, r24
     23e:	68 e7       	ldi	r22, 0x78	; 120
     240:	70 e0       	ldi	r23, 0x00	; 0
     242:	83 ec       	ldi	r24, 0xC3	; 195
     244:	92 e0       	ldi	r25, 0x02	; 2
     246:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN5Print7printlnEPK19__FlashStringHelper>
     24a:	63 e0       	ldi	r22, 0x03	; 3
     24c:	ce 01       	movw	r24, r28
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	0c 94 0a 01 	jmp	0x214	; 0x214 <_ZN8INA233_S15transmitCommandEh>

00000256 <_ZN8INA233_S9resetChipEv>:
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
     25a:	ec 01       	movw	r28, r24
     25c:	66 e0       	ldi	r22, 0x06	; 6
     25e:	71 e0       	ldi	r23, 0x01	; 1
     260:	83 ec       	ldi	r24, 0xC3	; 195
     262:	92 e0       	ldi	r25, 0x02	; 2
     264:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN5Print7printlnEPKc>
     268:	62 e1       	ldi	r22, 0x12	; 18
     26a:	ce 01       	movw	r24, r28
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	0c 94 0a 01 	jmp	0x214	; 0x214 <_ZN8INA233_S15transmitCommandEh>

00000274 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>:
     274:	1f 93       	push	r17
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	fc 01       	movw	r30, r24
     27c:	eb 01       	movw	r28, r22
     27e:	14 2f       	mov	r17, r20
     280:	9a 85       	ldd	r25, Y+10	; 0x0a
     282:	93 30       	cpi	r25, 0x03	; 3
     284:	18 f0       	brcs	.+6      	; 0x28c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x18>
     286:	61 e1       	ldi	r22, 0x11	; 17
     288:	71 e0       	ldi	r23, 0x01	; 1
     28a:	04 c0       	rjmp	.+8      	; 0x294 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x20>
     28c:	91 11       	cpse	r25, r1
     28e:	0f c0       	rjmp	.+30     	; 0x2ae <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x3a>
     290:	67 e7       	ldi	r22, 0x77	; 119
     292:	71 e0       	ldi	r23, 0x01	; 1
     294:	83 ec       	ldi	r24, 0xC3	; 195
     296:	92 e0       	ldi	r25, 0x02	; 2
     298:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN5Print7printlnEPKc>
     29c:	66 e5       	ldi	r22, 0x56	; 86
     29e:	71 e0       	ldi	r23, 0x01	; 1
     2a0:	83 ec       	ldi	r24, 0xC3	; 195
     2a2:	92 e0       	ldi	r25, 0x02	; 2
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	1f 91       	pop	r17
     2aa:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <_ZN5Print7printlnEPKc>
     2ae:	60 81       	ld	r22, Z
     2b0:	89 e6       	ldi	r24, 0x69	; 105
     2b2:	93 e0       	ldi	r25, 0x03	; 3
     2b4:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7TwoWire17beginTransmissionEh>
     2b8:	61 2f       	mov	r22, r17
     2ba:	89 e6       	ldi	r24, 0x69	; 105
     2bc:	93 e0       	ldi	r25, 0x03	; 3
     2be:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <_ZN7TwoWire5writeEh>
     2c2:	68 81       	ld	r22, Y
     2c4:	89 e6       	ldi	r24, 0x69	; 105
     2c6:	93 e0       	ldi	r25, 0x03	; 3
     2c8:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <_ZN7TwoWire5writeEh>
     2cc:	8a 85       	ldd	r24, Y+10	; 0x0a
     2ce:	82 30       	cpi	r24, 0x02	; 2
     2d0:	29 f4       	brne	.+10     	; 0x2dc <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x68>
     2d2:	69 81       	ldd	r22, Y+1	; 0x01
     2d4:	89 e6       	ldi	r24, 0x69	; 105
     2d6:	93 e0       	ldi	r25, 0x03	; 3
     2d8:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <_ZN7TwoWire5writeEh>
     2dc:	89 e6       	ldi	r24, 0x69	; 105
     2de:	93 e0       	ldi	r25, 0x03	; 3
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	1f 91       	pop	r17
     2e6:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <_ZN7TwoWire15endTransmissionEv>

000002ea <_ZN8INA233_S12receiveData_Ehh>:
     2ea:	ef 92       	push	r14
     2ec:	ff 92       	push	r15
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	ec 01       	movw	r28, r24
     2f8:	7b 01       	movw	r14, r22
     2fa:	02 2f       	mov	r16, r18
     2fc:	8f e0       	ldi	r24, 0x0F	; 15
     2fe:	fe 01       	movw	r30, r28
     300:	11 92       	st	Z+, r1
     302:	8a 95       	dec	r24
     304:	e9 f7       	brne	.-6      	; 0x300 <_ZN8INA233_S12receiveData_Ehh+0x16>
     306:	8a e0       	ldi	r24, 0x0A	; 10
     308:	8b 87       	std	Y+11, r24	; 0x0b
     30a:	64 2f       	mov	r22, r20
     30c:	c7 01       	movw	r24, r14
     30e:	0e 94 0a 01 	call	0x214	; 0x214 <_ZN8INA233_S15transmitCommandEh>
     312:	40 2f       	mov	r20, r16
     314:	f7 01       	movw	r30, r14
     316:	60 81       	ld	r22, Z
     318:	89 e6       	ldi	r24, 0x69	; 105
     31a:	93 e0       	ldi	r25, 0x03	; 3
     31c:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <_ZN7TwoWire11requestFromEhh>
     320:	89 e6       	ldi	r24, 0x69	; 105
     322:	93 e0       	ldi	r25, 0x03	; 3
     324:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <_ZN7TwoWire9availableEv>
     328:	89 2b       	or	r24, r25
     32a:	79 f0       	breq	.+30     	; 0x34a <_ZN8INA233_S12receiveData_Ehh+0x60>
     32c:	1a 85       	ldd	r17, Y+10	; 0x0a
     32e:	89 e6       	ldi	r24, 0x69	; 105
     330:	93 e0       	ldi	r25, 0x03	; 3
     332:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <_ZN7TwoWire4readEv>
     336:	fe 01       	movw	r30, r28
     338:	e1 0f       	add	r30, r17
     33a:	f1 1d       	adc	r31, r1
     33c:	80 83       	st	Z, r24
     33e:	1f 5f       	subi	r17, 0xFF	; 255
     340:	1a 87       	std	Y+10, r17	; 0x0a
     342:	1a 30       	cpi	r17, 0x0A	; 10
     344:	68 f3       	brcs	.-38     	; 0x320 <_ZN8INA233_S12receiveData_Ehh+0x36>
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	8c 87       	std	Y+12, r24	; 0x0c
     34a:	8a 85       	ldd	r24, Y+10	; 0x0a
     34c:	80 17       	cp	r24, r16
     34e:	18 f4       	brcc	.+6      	; 0x356 <_ZN8INA233_S12receiveData_Ehh+0x6c>
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	8d 87       	std	Y+13, r24	; 0x0d
     354:	04 c0       	rjmp	.+8      	; 0x35e <_ZN8INA233_S12receiveData_Ehh+0x74>
     356:	08 17       	cp	r16, r24
     358:	10 f4       	brcc	.+4      	; 0x35e <_ZN8INA233_S12receiveData_Ehh+0x74>
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	8e 87       	std	Y+14, r24	; 0x0e
     35e:	ce 01       	movw	r24, r28
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	08 95       	ret

0000036e <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>:
     36e:	ef 92       	push	r14
     370:	ff 92       	push	r15
     372:	0f 93       	push	r16
     374:	1f 93       	push	r17
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
     37e:	2f 97       	sbiw	r28, 0x0f	; 15
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	f8 94       	cli
     384:	de bf       	out	0x3e, r29	; 62
     386:	0f be       	out	0x3f, r0	; 63
     388:	cd bf       	out	0x3d, r28	; 61
     38a:	8b 01       	movw	r16, r22
     38c:	fb 01       	movw	r30, r22
     38e:	22 85       	ldd	r18, Z+10	; 0x0a
     390:	bc 01       	movw	r22, r24
     392:	ce 01       	movw	r24, r28
     394:	01 96       	adiw	r24, 0x01	; 1
     396:	7c 01       	movw	r14, r24
     398:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN8INA233_S12receiveData_Ehh>
     39c:	f8 01       	movw	r30, r16
     39e:	62 85       	ldd	r22, Z+10	; 0x0a
     3a0:	70 e0       	ldi	r23, 0x00	; 0
     3a2:	a8 01       	movw	r20, r16
     3a4:	d7 01       	movw	r26, r14
     3a6:	c8 01       	movw	r24, r16
     3a8:	9d 01       	movw	r18, r26
     3aa:	2e 19       	sub	r18, r14
     3ac:	3f 09       	sbc	r19, r15
     3ae:	26 17       	cp	r18, r22
     3b0:	37 07       	cpc	r19, r23
     3b2:	48 f4       	brcc	.+18     	; 0x3c6 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x58>
     3b4:	fc 01       	movw	r30, r24
     3b6:	31 91       	ld	r19, Z+
     3b8:	cf 01       	movw	r24, r30
     3ba:	2d 91       	ld	r18, X+
     3bc:	32 17       	cp	r19, r18
     3be:	a1 f3       	breq	.-24     	; 0x3a8 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x3a>
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0b c0       	rjmp	.+22     	; 0x3dc <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x6e>
     3c6:	60 0f       	add	r22, r16
     3c8:	71 1f       	adc	r23, r17
     3ca:	46 17       	cp	r20, r22
     3cc:	57 07       	cpc	r21, r23
     3ce:	21 f0       	breq	.+8      	; 0x3d8 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x6a>
     3d0:	fa 01       	movw	r30, r20
     3d2:	11 92       	st	Z+, r1
     3d4:	af 01       	movw	r20, r30
     3d6:	f9 cf       	rjmp	.-14     	; 0x3ca <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x5c>
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	2f 96       	adiw	r28, 0x0f	; 15
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	f8 94       	cli
     3e2:	de bf       	out	0x3e, r29	; 62
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	cd bf       	out	0x3d, r28	; 61
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	0f 91       	pop	r16
     3f0:	ff 90       	pop	r15
     3f2:	ef 90       	pop	r14
     3f4:	08 95       	ret

000003f6 <_ZN8INA233_S15setADC_SettingsEj>:
     3f6:	ef 92       	push	r14
     3f8:	ff 92       	push	r15
     3fa:	0f 93       	push	r16
     3fc:	1f 93       	push	r17
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
     406:	2f 97       	sbiw	r28, 0x0f	; 15
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	f8 94       	cli
     40c:	de bf       	out	0x3e, r29	; 62
     40e:	0f be       	out	0x3f, r0	; 63
     410:	cd bf       	out	0x3d, r28	; 61
     412:	7c 01       	movw	r14, r24
     414:	8e 01       	movw	r16, r28
     416:	0f 5f       	subi	r16, 0xFF	; 255
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	8f e0       	ldi	r24, 0x0F	; 15
     41c:	f8 01       	movw	r30, r16
     41e:	11 92       	st	Z+, r1
     420:	8a 95       	dec	r24
     422:	e9 f7       	brne	.-6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     424:	8a e0       	ldi	r24, 0x0A	; 10
     426:	8c 87       	std	Y+12, r24	; 0x0c
     428:	69 83       	std	Y+1, r22	; 0x01
     42a:	7a 83       	std	Y+2, r23	; 0x02
     42c:	82 e0       	ldi	r24, 0x02	; 2
     42e:	8b 87       	std	Y+11, r24	; 0x0b
     430:	40 ed       	ldi	r20, 0xD0	; 208
     432:	b8 01       	movw	r22, r16
     434:	c7 01       	movw	r24, r14
     436:	0e 94 3a 01 	call	0x274	; 0x274 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     43a:	40 ed       	ldi	r20, 0xD0	; 208
     43c:	b8 01       	movw	r22, r16
     43e:	c7 01       	movw	r24, r14
     440:	0e 94 b7 01 	call	0x36e	; 0x36e <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>
     444:	2f 96       	adiw	r28, 0x0f	; 15
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	0f 91       	pop	r16
     458:	ff 90       	pop	r15
     45a:	ef 90       	pop	r14
     45c:	08 95       	ret

0000045e <_ZN8INA233_S15setCallibrationEj>:
     45e:	cf 92       	push	r12
     460:	df 92       	push	r13
     462:	ef 92       	push	r14
     464:	ff 92       	push	r15
     466:	0f 93       	push	r16
     468:	1f 93       	push	r17
     46a:	cf 93       	push	r28
     46c:	df 93       	push	r29
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
     472:	2f 97       	sbiw	r28, 0x0f	; 15
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	f8 94       	cli
     478:	de bf       	out	0x3e, r29	; 62
     47a:	0f be       	out	0x3f, r0	; 63
     47c:	cd bf       	out	0x3d, r28	; 61
     47e:	7c 01       	movw	r14, r24
     480:	6b 01       	movw	r12, r22
     482:	68 e6       	ldi	r22, 0x68	; 104
     484:	70 e0       	ldi	r23, 0x00	; 0
     486:	83 ec       	ldi	r24, 0xC3	; 195
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN5Print7printlnEPK19__FlashStringHelper>
     48e:	8e 01       	movw	r16, r28
     490:	0f 5f       	subi	r16, 0xFF	; 255
     492:	1f 4f       	sbci	r17, 0xFF	; 255
     494:	8f e0       	ldi	r24, 0x0F	; 15
     496:	f8 01       	movw	r30, r16
     498:	11 92       	st	Z+, r1
     49a:	8a 95       	dec	r24
     49c:	e9 f7       	brne	.-6      	; 0x498 <_ZN8INA233_S15setCallibrationEj+0x3a>
     49e:	8a e0       	ldi	r24, 0x0A	; 10
     4a0:	8c 87       	std	Y+12, r24	; 0x0c
     4a2:	c9 82       	std	Y+1, r12	; 0x01
     4a4:	da 82       	std	Y+2, r13	; 0x02
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	8b 87       	std	Y+11, r24	; 0x0b
     4aa:	44 ed       	ldi	r20, 0xD4	; 212
     4ac:	b8 01       	movw	r22, r16
     4ae:	c7 01       	movw	r24, r14
     4b0:	0e 94 3a 01 	call	0x274	; 0x274 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     4b4:	44 ed       	ldi	r20, 0xD4	; 212
     4b6:	b8 01       	movw	r22, r16
     4b8:	c7 01       	movw	r24, r14
     4ba:	0e 94 b7 01 	call	0x36e	; 0x36e <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>
     4be:	2f 96       	adiw	r28, 0x0f	; 15
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	f8 94       	cli
     4c4:	de bf       	out	0x3e, r29	; 62
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	cd bf       	out	0x3d, r28	; 61
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	1f 91       	pop	r17
     4d0:	0f 91       	pop	r16
     4d2:	ff 90       	pop	r15
     4d4:	ef 90       	pop	r14
     4d6:	df 90       	pop	r13
     4d8:	cf 90       	pop	r12
     4da:	08 95       	ret

000004dc <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config>:
     4dc:	4f 92       	push	r4
     4de:	5f 92       	push	r5
     4e0:	6f 92       	push	r6
     4e2:	7f 92       	push	r7
     4e4:	af 92       	push	r10
     4e6:	bf 92       	push	r11
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
     4fc:	ae 97       	sbiw	r28, 0x2e	; 46
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	f8 94       	cli
     502:	de bf       	out	0x3e, r29	; 62
     504:	0f be       	out	0x3f, r0	; 63
     506:	cd bf       	out	0x3d, r28	; 61
     508:	5c 01       	movw	r10, r24
     50a:	cf 8e       	std	Y+31, r12	; 0x1f
     50c:	d8 a2       	std	Y+32, r13	; 0x20
     50e:	e9 a2       	std	Y+33, r14	; 0x21
     510:	fa a2       	std	Y+34, r15	; 0x22
     512:	0b a3       	std	Y+35, r16	; 0x23
     514:	1c a3       	std	Y+36, r17	; 0x24
     516:	2d a3       	std	Y+37, r18	; 0x25
     518:	3e a3       	std	Y+38, r19	; 0x26
     51a:	4f a3       	std	Y+39, r20	; 0x27
     51c:	58 a7       	std	Y+40, r21	; 0x28
     51e:	69 a7       	std	Y+41, r22	; 0x29
     520:	7a a7       	std	Y+42, r23	; 0x2a
     522:	cf 8c       	ldd	r12, Y+31	; 0x1f
     524:	d8 a0       	ldd	r13, Y+32	; 0x20
     526:	e9 a0       	ldd	r14, Y+33	; 0x21
     528:	fa a0       	ldd	r15, Y+34	; 0x22
     52a:	8b a1       	ldd	r24, Y+35	; 0x23
     52c:	9c a1       	ldd	r25, Y+36	; 0x24
     52e:	ad a1       	ldd	r26, Y+37	; 0x25
     530:	be a1       	ldd	r27, Y+38	; 0x26
     532:	8b a7       	std	Y+43, r24	; 0x2b
     534:	9c a7       	std	Y+44, r25	; 0x2c
     536:	ad a7       	std	Y+45, r26	; 0x2d
     538:	be a7       	std	Y+46, r27	; 0x2e
     53a:	4f a0       	ldd	r4, Y+39	; 0x27
     53c:	58 a4       	ldd	r5, Y+40	; 0x28
     53e:	69 a4       	ldd	r6, Y+41	; 0x29
     540:	7a a4       	ldd	r7, Y+42	; 0x2a
     542:	63 e9       	ldi	r22, 0x93	; 147
     544:	71 e0       	ldi	r23, 0x01	; 1
     546:	83 ec       	ldi	r24, 0xC3	; 195
     548:	92 e0       	ldi	r25, 0x02	; 2
     54a:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN5Print7printlnEPKc>
     54e:	20 e0       	ldi	r18, 0x00	; 0
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	a9 01       	movw	r20, r18
     554:	c7 01       	movw	r24, r14
     556:	b6 01       	movw	r22, r12
     558:	0e 94 c0 06 	call	0xd80	; 0xd80 <__gesf2>
     55c:	18 16       	cp	r1, r24
     55e:	0c f0       	brlt	.+2      	; 0x562 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x86>
     560:	51 c0       	rjmp	.+162    	; 0x604 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x128>
     562:	d5 01       	movw	r26, r10
     564:	11 96       	adiw	r26, 0x01	; 1
     566:	6d 91       	ld	r22, X+
     568:	7c 91       	ld	r23, X
     56a:	12 97       	sbiw	r26, 0x02	; 2
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0e 94 32 06 	call	0xc64	; 0xc64 <__floatunsisf>
     574:	a7 01       	movw	r20, r14
     576:	96 01       	movw	r18, r12
     578:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__mulsf3>
     57c:	6b 01       	movw	r12, r22
     57e:	7c 01       	movw	r14, r24
     580:	20 e0       	ldi	r18, 0x00	; 0
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	a9 01       	movw	r20, r18
     586:	0e 94 c0 06 	call	0xd80	; 0xd80 <__gesf2>
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	40 e0       	ldi	r20, 0x00	; 0
     590:	5f e3       	ldi	r21, 0x3F	; 63
     592:	87 fd       	sbrc	r24, 7
     594:	05 c0       	rjmp	.+10     	; 0x5a0 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xc4>
     596:	c7 01       	movw	r24, r14
     598:	b6 01       	movw	r22, r12
     59a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__addsf3>
     59e:	04 c0       	rjmp	.+8      	; 0x5a8 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xcc>
     5a0:	c7 01       	movw	r24, r14
     5a2:	b6 01       	movw	r22, r12
     5a4:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__subsf3>
     5a8:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__fixsfsi>
     5ac:	8b 01       	movw	r16, r22
     5ae:	7e 01       	movw	r14, r28
     5b0:	b0 e1       	ldi	r27, 0x10	; 16
     5b2:	eb 0e       	add	r14, r27
     5b4:	f1 1c       	adc	r15, r1
     5b6:	8f e0       	ldi	r24, 0x0F	; 15
     5b8:	f7 01       	movw	r30, r14
     5ba:	11 92       	st	Z+, r1
     5bc:	8a 95       	dec	r24
     5be:	e9 f7       	brne	.-6      	; 0x5ba <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xde>
     5c0:	8a e0       	ldi	r24, 0x0A	; 10
     5c2:	8b 8f       	std	Y+27, r24	; 0x1b
     5c4:	08 8b       	std	Y+16, r16	; 0x10
     5c6:	19 8b       	std	Y+17, r17	; 0x11
     5c8:	82 e0       	ldi	r24, 0x02	; 2
     5ca:	8a 8f       	std	Y+26, r24	; 0x1a
     5cc:	6f ee       	ldi	r22, 0xEF	; 239
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	83 ec       	ldi	r24, 0xC3	; 195
     5d2:	92 e0       	ldi	r25, 0x02	; 2
     5d4:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN5Print7printlnEPK19__FlashStringHelper>
     5d8:	4a e0       	ldi	r20, 0x0A	; 10
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	b8 01       	movw	r22, r16
     5de:	83 ec       	ldi	r24, 0xC3	; 195
     5e0:	92 e0       	ldi	r25, 0x02	; 2
     5e2:	0e 94 29 0a 	call	0x1452	; 0x1452 <_ZN5Print7printlnEji>
     5e6:	4a e4       	ldi	r20, 0x4A	; 74
     5e8:	b7 01       	movw	r22, r14
     5ea:	c5 01       	movw	r24, r10
     5ec:	0e 94 3a 01 	call	0x274	; 0x274 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     5f0:	22 e0       	ldi	r18, 0x02	; 2
     5f2:	4a e4       	ldi	r20, 0x4A	; 74
     5f4:	b5 01       	movw	r22, r10
     5f6:	ce 01       	movw	r24, r28
     5f8:	01 96       	adiw	r24, 0x01	; 1
     5fa:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN8INA233_S12receiveData_Ehh>
     5fe:	66 ed       	ldi	r22, 0xD6	; 214
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	af c0       	rjmp	.+350    	; 0x762 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x286>
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	a9 01       	movw	r20, r18
     60a:	6b a5       	ldd	r22, Y+43	; 0x2b
     60c:	7c a5       	ldd	r23, Y+44	; 0x2c
     60e:	8d a5       	ldd	r24, Y+45	; 0x2d
     610:	9e a5       	ldd	r25, Y+46	; 0x2e
     612:	0e 94 c0 06 	call	0xd80	; 0xd80 <__gesf2>
     616:	18 16       	cp	r1, r24
     618:	0c f0       	brlt	.+2      	; 0x61c <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x140>
     61a:	4e c0       	rjmp	.+156    	; 0x6b8 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x1dc>
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	48 e4       	ldi	r20, 0x48	; 72
     622:	54 e4       	ldi	r21, 0x44	; 68
     624:	6b a5       	ldd	r22, Y+43	; 0x2b
     626:	7c a5       	ldd	r23, Y+44	; 0x2c
     628:	8d a5       	ldd	r24, Y+45	; 0x2d
     62a:	9e a5       	ldd	r25, Y+46	; 0x2e
     62c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__mulsf3>
     630:	6b 01       	movw	r12, r22
     632:	7c 01       	movw	r14, r24
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	a9 01       	movw	r20, r18
     63a:	0e 94 c0 06 	call	0xd80	; 0xd80 <__gesf2>
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	40 e0       	ldi	r20, 0x00	; 0
     644:	5f e3       	ldi	r21, 0x3F	; 63
     646:	87 fd       	sbrc	r24, 7
     648:	05 c0       	rjmp	.+10     	; 0x654 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x178>
     64a:	c7 01       	movw	r24, r14
     64c:	b6 01       	movw	r22, r12
     64e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__addsf3>
     652:	04 c0       	rjmp	.+8      	; 0x65c <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x180>
     654:	c7 01       	movw	r24, r14
     656:	b6 01       	movw	r22, r12
     658:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__subsf3>
     65c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__fixsfsi>
     660:	8b 01       	movw	r16, r22
     662:	7e 01       	movw	r14, r28
     664:	f0 e1       	ldi	r31, 0x10	; 16
     666:	ef 0e       	add	r14, r31
     668:	f1 1c       	adc	r15, r1
     66a:	8f e0       	ldi	r24, 0x0F	; 15
     66c:	d7 01       	movw	r26, r14
     66e:	1d 92       	st	X+, r1
     670:	8a 95       	dec	r24
     672:	e9 f7       	brne	.-6      	; 0x66e <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x192>
     674:	8a e0       	ldi	r24, 0x0A	; 10
     676:	8b 8f       	std	Y+27, r24	; 0x1b
     678:	08 8b       	std	Y+16, r16	; 0x10
     67a:	19 8b       	std	Y+17, r17	; 0x11
     67c:	82 e0       	ldi	r24, 0x02	; 2
     67e:	8a 8f       	std	Y+26, r24	; 0x1a
     680:	66 ec       	ldi	r22, 0xC6	; 198
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	83 ec       	ldi	r24, 0xC3	; 195
     686:	92 e0       	ldi	r25, 0x02	; 2
     688:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN5Print7printlnEPK19__FlashStringHelper>
     68c:	4a e0       	ldi	r20, 0x0A	; 10
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	b8 01       	movw	r22, r16
     692:	83 ec       	ldi	r24, 0xC3	; 195
     694:	92 e0       	ldi	r25, 0x02	; 2
     696:	0e 94 29 0a 	call	0x1452	; 0x1452 <_ZN5Print7printlnEji>
     69a:	47 e5       	ldi	r20, 0x57	; 87
     69c:	b7 01       	movw	r22, r14
     69e:	c5 01       	movw	r24, r10
     6a0:	0e 94 3a 01 	call	0x274	; 0x274 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     6a4:	22 e0       	ldi	r18, 0x02	; 2
     6a6:	47 e5       	ldi	r20, 0x57	; 87
     6a8:	b5 01       	movw	r22, r10
     6aa:	ce 01       	movw	r24, r28
     6ac:	01 96       	adiw	r24, 0x01	; 1
     6ae:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN8INA233_S12receiveData_Ehh>
     6b2:	6d ea       	ldi	r22, 0xAD	; 173
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	55 c0       	rjmp	.+170    	; 0x762 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x286>
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	a9 01       	movw	r20, r18
     6be:	c3 01       	movw	r24, r6
     6c0:	b2 01       	movw	r22, r4
     6c2:	0e 94 c0 06 	call	0xd80	; 0xd80 <__gesf2>
     6c6:	18 16       	cp	r1, r24
     6c8:	0c f0       	brlt	.+2      	; 0x6cc <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x1f0>
     6ca:	5a c0       	rjmp	.+180    	; 0x780 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x2a4>
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	48 e4       	ldi	r20, 0x48	; 72
     6d2:	54 e4       	ldi	r21, 0x44	; 68
     6d4:	c3 01       	movw	r24, r6
     6d6:	b2 01       	movw	r22, r4
     6d8:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__mulsf3>
     6dc:	6b 01       	movw	r12, r22
     6de:	7c 01       	movw	r14, r24
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	a9 01       	movw	r20, r18
     6e6:	0e 94 c0 06 	call	0xd80	; 0xd80 <__gesf2>
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	40 e0       	ldi	r20, 0x00	; 0
     6f0:	5f e3       	ldi	r21, 0x3F	; 63
     6f2:	87 fd       	sbrc	r24, 7
     6f4:	05 c0       	rjmp	.+10     	; 0x700 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x224>
     6f6:	c7 01       	movw	r24, r14
     6f8:	b6 01       	movw	r22, r12
     6fa:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__addsf3>
     6fe:	04 c0       	rjmp	.+8      	; 0x708 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x22c>
     700:	c7 01       	movw	r24, r14
     702:	b6 01       	movw	r22, r12
     704:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__subsf3>
     708:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__fixsfsi>
     70c:	8b 01       	movw	r16, r22
     70e:	7e 01       	movw	r14, r28
     710:	b0 e1       	ldi	r27, 0x10	; 16
     712:	eb 0e       	add	r14, r27
     714:	f1 1c       	adc	r15, r1
     716:	8f e0       	ldi	r24, 0x0F	; 15
     718:	f7 01       	movw	r30, r14
     71a:	11 92       	st	Z+, r1
     71c:	8a 95       	dec	r24
     71e:	e9 f7       	brne	.-6      	; 0x71a <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x23e>
     720:	8a e0       	ldi	r24, 0x0A	; 10
     722:	8b 8f       	std	Y+27, r24	; 0x1b
     724:	08 8b       	std	Y+16, r16	; 0x10
     726:	19 8b       	std	Y+17, r17	; 0x11
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	8a 8f       	std	Y+26, r24	; 0x1a
     72c:	6d e9       	ldi	r22, 0x9D	; 157
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	83 ec       	ldi	r24, 0xC3	; 195
     732:	92 e0       	ldi	r25, 0x02	; 2
     734:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN5Print7printlnEPK19__FlashStringHelper>
     738:	4a e0       	ldi	r20, 0x0A	; 10
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	b8 01       	movw	r22, r16
     73e:	83 ec       	ldi	r24, 0xC3	; 195
     740:	92 e0       	ldi	r25, 0x02	; 2
     742:	0e 94 29 0a 	call	0x1452	; 0x1452 <_ZN5Print7printlnEji>
     746:	48 e5       	ldi	r20, 0x58	; 88
     748:	b7 01       	movw	r22, r14
     74a:	c5 01       	movw	r24, r10
     74c:	0e 94 3a 01 	call	0x274	; 0x274 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     750:	22 e0       	ldi	r18, 0x02	; 2
     752:	48 e5       	ldi	r20, 0x58	; 88
     754:	b5 01       	movw	r22, r10
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN8INA233_S12receiveData_Ehh>
     75e:	64 e8       	ldi	r22, 0x84	; 132
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	83 ec       	ldi	r24, 0xC3	; 195
     764:	92 e0       	ldi	r25, 0x02	; 2
     766:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN5Print7printlnEPK19__FlashStringHelper>
     76a:	69 81       	ldd	r22, Y+1	; 0x01
     76c:	7a 81       	ldd	r23, Y+2	; 0x02
     76e:	4a e0       	ldi	r20, 0x0A	; 10
     770:	50 e0       	ldi	r21, 0x00	; 0
     772:	83 ec       	ldi	r24, 0xC3	; 195
     774:	92 e0       	ldi	r25, 0x02	; 2
     776:	0e 94 8a 0a 	call	0x1514	; 0x1514 <_ZN5Print7printlnEii>
     77a:	8a e0       	ldi	r24, 0x0A	; 10
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	00 c0       	rjmp	.+0      	; 0x780 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x2a4>
     780:	ae 96       	adiw	r28, 0x2e	; 46
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	f8 94       	cli
     786:	de bf       	out	0x3e, r29	; 62
     788:	0f be       	out	0x3f, r0	; 63
     78a:	cd bf       	out	0x3d, r28	; 61
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	1f 91       	pop	r17
     792:	0f 91       	pop	r16
     794:	ff 90       	pop	r15
     796:	ef 90       	pop	r14
     798:	df 90       	pop	r13
     79a:	cf 90       	pop	r12
     79c:	bf 90       	pop	r11
     79e:	af 90       	pop	r10
     7a0:	7f 90       	pop	r7
     7a2:	6f 90       	pop	r6
     7a4:	5f 90       	pop	r5
     7a6:	4f 90       	pop	r4
     7a8:	08 95       	ret

000007aa <_ZN8INA233_S10initializeEv>:
     7aa:	cf 92       	push	r12
     7ac:	df 92       	push	r13
     7ae:	ef 92       	push	r14
     7b0:	ff 92       	push	r15
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	ec 01       	movw	r28, r24
     7bc:	0e 94 2b 01 	call	0x256	; 0x256 <_ZN8INA233_S9resetChipEv>
     7c0:	6b 81       	ldd	r22, Y+3	; 0x03
     7c2:	7c 81       	ldd	r23, Y+4	; 0x04
     7c4:	ce 01       	movw	r24, r28
     7c6:	0e 94 2f 02 	call	0x45e	; 0x45e <_ZN8INA233_S15setCallibrationEj>
     7ca:	81 30       	cpi	r24, 0x01	; 1
     7cc:	91 05       	cpc	r25, r1
     7ce:	c1 f0       	breq	.+48     	; 0x800 <_ZN8INA233_S10initializeEv+0x56>
     7d0:	ce 01       	movw	r24, r28
     7d2:	0e 94 1c 01 	call	0x238	; 0x238 <_ZN8INA233_S10resetAlarmEv>
     7d6:	61 e0       	ldi	r22, 0x01	; 1
     7d8:	8d 81       	ldd	r24, Y+5	; 0x05
     7da:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <pinMode>
     7de:	ce 80       	ldd	r12, Y+6	; 0x06
     7e0:	df 80       	ldd	r13, Y+7	; 0x07
     7e2:	e8 84       	ldd	r14, Y+8	; 0x08
     7e4:	f9 84       	ldd	r15, Y+9	; 0x09
     7e6:	0a 85       	ldd	r16, Y+10	; 0x0a
     7e8:	1b 85       	ldd	r17, Y+11	; 0x0b
     7ea:	2c 85       	ldd	r18, Y+12	; 0x0c
     7ec:	3d 85       	ldd	r19, Y+13	; 0x0d
     7ee:	4e 85       	ldd	r20, Y+14	; 0x0e
     7f0:	5f 85       	ldd	r21, Y+15	; 0x0f
     7f2:	68 89       	ldd	r22, Y+16	; 0x10
     7f4:	79 89       	ldd	r23, Y+17	; 0x11
     7f6:	ce 01       	movw	r24, r28
     7f8:	0e 94 6e 02 	call	0x4dc	; 0x4dc <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config>
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	ff 90       	pop	r15
     80a:	ef 90       	pop	r14
     80c:	df 90       	pop	r13
     80e:	cf 90       	pop	r12
     810:	08 95       	ret

00000812 <_ZN8INA233_S10getCurrentEv>:

float INA233_S::getCurrent()
{
     812:	cf 92       	push	r12
     814:	df 92       	push	r13
     816:	ef 92       	push	r14
     818:	ff 92       	push	r15
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	cd b7       	in	r28, 0x3d	; 61
     824:	de b7       	in	r29, 0x3e	; 62
     826:	2f 97       	sbiw	r28, 0x0f	; 15
     828:	0f b6       	in	r0, 0x3f	; 63
     82a:	f8 94       	cli
     82c:	de bf       	out	0x3e, r29	; 62
     82e:	0f be       	out	0x3f, r0	; 63
     830:	cd bf       	out	0x3d, r28	; 61
     832:	7c 01       	movw	r14, r24
    INA233_Data_Package data = receiveData_(0x89, 2);
     834:	22 e0       	ldi	r18, 0x02	; 2
     836:	49 e8       	ldi	r20, 0x89	; 137
     838:	bc 01       	movw	r22, r24
     83a:	ce 01       	movw	r24, r28
     83c:	01 96       	adiw	r24, 0x01	; 1
     83e:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN8INA233_S12receiveData_Ehh>

int16_t INA233_S::unpackWord(INA233_Data_Package *data)
{
    int16_t word;
    word = static_cast<int>(data->msg[0]);
    word |= (static_cast<int>(data->msg[1]) << 8);
     842:	09 81       	ldd	r16, Y+1	; 0x01
     844:	1a 81       	ldd	r17, Y+2	; 0x02

float INA233_S::getCurrent()
{
    INA233_Data_Package data = receiveData_(0x89, 2);
    int16_t dataWord = unpackWord(&data);
    Serial.print("Current bitsnbuts");
     846:	60 ea       	ldi	r22, 0xA0	; 160
     848:	71 e0       	ldi	r23, 0x01	; 1
     84a:	83 ec       	ldi	r24, 0xC3	; 195
     84c:	92 e0       	ldi	r25, 0x02	; 2
     84e:	0e 94 9c 09 	call	0x1338	; 0x1338 <_ZN5Print5printEPKc>
    Serial.println(dataWord);
     852:	4a e0       	ldi	r20, 0x0A	; 10
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	b8 01       	movw	r22, r16
     858:	83 ec       	ldi	r24, 0xC3	; 195
     85a:	92 e0       	ldi	r25, 0x02	; 2
     85c:	0e 94 8a 0a 	call	0x1514	; 0x1514 <_ZN5Print7printlnEii>
    return (static_cast<float>(dataWord) * (1.0 / m_value_));
     860:	f7 01       	movw	r30, r14
     862:	61 81       	ldd	r22, Z+1	; 0x01
     864:	72 81       	ldd	r23, Z+2	; 0x02
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	0e 94 32 06 	call	0xc64	; 0xc64 <__floatunsisf>
     86e:	9b 01       	movw	r18, r22
     870:	ac 01       	movw	r20, r24
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	80 e8       	ldi	r24, 0x80	; 128
     878:	9f e3       	ldi	r25, 0x3F	; 63
     87a:	0e 94 8a 05 	call	0xb14	; 0xb14 <__divsf3>
     87e:	6b 01       	movw	r12, r22
     880:	7c 01       	movw	r14, r24
     882:	b8 01       	movw	r22, r16
     884:	11 0f       	add	r17, r17
     886:	88 0b       	sbc	r24, r24
     888:	99 0b       	sbc	r25, r25
     88a:	0e 94 34 06 	call	0xc68	; 0xc68 <__floatsisf>
     88e:	9b 01       	movw	r18, r22
     890:	ac 01       	movw	r20, r24
     892:	c7 01       	movw	r24, r14
     894:	b6 01       	movw	r22, r12
     896:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__mulsf3>
}
     89a:	2f 96       	adiw	r28, 0x0f	; 15
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	f8 94       	cli
     8a0:	de bf       	out	0x3e, r29	; 62
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	cd bf       	out	0x3d, r28	; 61
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	1f 91       	pop	r17
     8ac:	0f 91       	pop	r16
     8ae:	ff 90       	pop	r15
     8b0:	ef 90       	pop	r14
     8b2:	df 90       	pop	r13
     8b4:	cf 90       	pop	r12
     8b6:	08 95       	ret

000008b8 <setup>:


mosfet p1(p1_ACM_E_Pin);


void setup() {
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
	Wire.begin();
     8bc:	89 e6       	ldi	r24, 0x69	; 105
     8be:	93 e0       	ldi	r25, 0x03	; 3
     8c0:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <_ZN7TwoWire5beginEv>
	Wire.setClock(10000);
     8c4:	40 e1       	ldi	r20, 0x10	; 16
     8c6:	57 e2       	ldi	r21, 0x27	; 39
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	89 e6       	ldi	r24, 0x69	; 105
     8ce:	93 e0       	ldi	r25, 0x03	; 3
     8d0:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <_ZN7TwoWire8setClockEm>
	
	
	Sensor_1.initialize();
     8d4:	82 e6       	ldi	r24, 0x62	; 98
     8d6:	92 e0       	ldi	r25, 0x02	; 2
     8d8:	0e 94 d5 03 	call	0x7aa	; 0x7aa <_ZN8INA233_S10initializeEv>
	
	
	pinMode(9, OUTPUT);
     8dc:	61 e0       	ldi	r22, 0x01	; 1
     8de:	89 e0       	ldi	r24, 0x09	; 9
     8e0:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <pinMode>
	digitalWrite(9, HIGH);
     8e4:	61 e0       	ldi	r22, 0x01	; 1
     8e6:	89 e0       	ldi	r24, 0x09	; 9
     8e8:	0e 94 a4 0c 	call	0x1948	; 0x1948 <digitalWrite>
     8ec:	c3 e8       	ldi	r28, 0x83	; 131
     8ee:	d2 e0       	ldi	r29, 0x02	; 2
	  
	for(uint8_t ii = 0; ii < 10; ii++){
		timeStamps[ii] = millis();
     8f0:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <millis>
     8f4:	69 93       	st	Y+, r22
     8f6:	79 93       	st	Y+, r23
     8f8:	89 93       	st	Y+, r24
     8fa:	99 93       	st	Y+, r25
	
	
	pinMode(9, OUTPUT);
	digitalWrite(9, HIGH);
	  
	for(uint8_t ii = 0; ii < 10; ii++){
     8fc:	82 e0       	ldi	r24, 0x02	; 2
     8fe:	cb 3a       	cpi	r28, 0xAB	; 171
     900:	d8 07       	cpc	r29, r24
     902:	b1 f7       	brne	.-20     	; 0x8f0 <setup+0x38>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     904:	26 e0       	ldi	r18, 0x06	; 6
     906:	40 e8       	ldi	r20, 0x80	; 128
     908:	55 e2       	ldi	r21, 0x25	; 37
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	83 ec       	ldi	r24, 0xC3	; 195
     910:	92 e0       	ldi	r25, 0x02	; 2
     912:	0e 94 32 08 	call	0x1064	; 0x1064 <_ZN14HardwareSerial5beginEmh>
	}
	
  
	
	Serial.begin(9600);
	Serial.println("Initialization");
     916:	6e ef       	ldi	r22, 0xFE	; 254
     918:	71 e0       	ldi	r23, 0x01	; 1
     91a:	83 ec       	ldi	r24, 0xC3	; 195
     91c:	92 e0       	ldi	r25, 0x02	; 2
     91e:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN5Print7printlnEPKc>
     922:	c0 e0       	ldi	r28, 0x00	; 0
     924:	d1 e0       	ldi	r29, 0x01	; 1
	
	for  (uint8_t ii = 0; ii < 7; ii++){
		SensorList[ii]->setADC_Settings(default_address);
     926:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <default_address>
     92a:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <default_address+0x1>
     92e:	89 91       	ld	r24, Y+
     930:	99 91       	ld	r25, Y+
     932:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN8INA233_S15setADC_SettingsEj>
  
	
	Serial.begin(9600);
	Serial.println("Initialization");
	
	for  (uint8_t ii = 0; ii < 7; ii++){
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	ce 30       	cpi	r28, 0x0E	; 14
     93a:	d8 07       	cpc	r29, r24
     93c:	a1 f7       	brne	.-24     	; 0x926 <__stack+0x27>
  //Sensor1.setAlarmMask (0b11011111);
  //Sensor1.setMFRConfig (0b00000001);
  //expander.setPin (1,true);
  
  
}
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	08 95       	ret

00000944 <loop>:
	void close_MOSFET(){
		digitalWrite(MOSpin_, LOW);
	}

	void open_MOSFET(){
		digitalWrite(MOSpin_, HIGH);
     944:	61 e0       	ldi	r22, 0x01	; 1
     946:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
     94a:	0e 94 a4 0c 	call	0x1948	; 0x1948 <digitalWrite>
	fanControl();
	sendDataOverCan();*/
	
	p1.open_MOSFET();
	
	float current_1 = Sensor_1.getCurrent();
     94e:	82 e6       	ldi	r24, 0x62	; 98
     950:	92 e0       	ldi	r25, 0x02	; 2
     952:	0e 94 09 04 	call	0x812	; 0x812 <_ZN8INA233_S10getCurrentEv>
     956:	ab 01       	movw	r20, r22
     958:	bc 01       	movw	r22, r24
	int test = 1 ;
	
	Serial.println(current_1);
     95a:	22 e0       	ldi	r18, 0x02	; 2
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	83 ec       	ldi	r24, 0xC3	; 195
     960:	92 e0       	ldi	r25, 0x02	; 2
     962:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <_ZN5Print7printlnEdi>

00000966 <_GLOBAL__sub_I_default_address>:
}
     966:	0f 93       	push	r16
};

struct INA233_Alarm_Config
{
  float overCurrent = 0, overVoltage = 0, underVoltage = 0;
  INA233_Alarm_Config(float oc, float ov, float uv) : overCurrent(oc), overVoltage(ov), underVoltage(uv) {}  
     968:	e7 eb       	ldi	r30, 0xB7	; 183
     96a:	f2 e0       	ldi	r31, 0x02	; 2
     96c:	40 e0       	ldi	r20, 0x00	; 0
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	70 e4       	ldi	r23, 0x40	; 64
     974:	40 83       	st	Z, r20
     976:	51 83       	std	Z+1, r21	; 0x01
     978:	62 83       	std	Z+2, r22	; 0x02
     97a:	73 83       	std	Z+3, r23	; 0x03
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	a0 e5       	ldi	r26, 0x50	; 80
     982:	b1 e4       	ldi	r27, 0x41	; 65
     984:	84 83       	std	Z+4, r24	; 0x04
     986:	95 83       	std	Z+5, r25	; 0x05
     988:	a6 83       	std	Z+6, r26	; 0x06
     98a:	b7 83       	std	Z+7, r27	; 0x07
     98c:	10 86       	std	Z+8, r1	; 0x08
     98e:	11 86       	std	Z+9, r1	; 0x09
     990:	12 86       	std	Z+10, r1	; 0x0a
     992:	13 86       	std	Z+11, r1	; 0x0b
     994:	eb ea       	ldi	r30, 0xAB	; 171
     996:	f2 e0       	ldi	r31, 0x02	; 2
     998:	40 83       	st	Z, r20
     99a:	51 83       	std	Z+1, r21	; 0x01
     99c:	62 83       	std	Z+2, r22	; 0x02
     99e:	73 83       	std	Z+3, r23	; 0x03
     9a0:	84 83       	std	Z+4, r24	; 0x04
     9a2:	95 83       	std	Z+5, r25	; 0x05
     9a4:	a6 83       	std	Z+6, r26	; 0x06
     9a6:	b7 83       	std	Z+7, r27	; 0x07
     9a8:	10 86       	std	Z+8, r1	; 0x08
     9aa:	11 86       	std	Z+9, r1	; 0x09
     9ac:	12 86       	std	Z+10, r1	; 0x0a
     9ae:	13 86       	std	Z+11, r1	; 0x0b
void testMOSFET();
ErrorHandler errorHandler();
uint16_t default_address = 0b0100011100100111;
unsigned long timeStamps[10] = {0};

INA233_S Sensor_1(adrSensor1, m_valueSensor1, cal_valueSensor1, p1_ACM_E_Pin, alarmConfigSensor1), 
     9b0:	8d b7       	in	r24, 0x3d	; 61
     9b2:	9e b7       	in	r25, 0x3e	; 62
     9b4:	0c 97       	sbiw	r24, 0x0c	; 12
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	f8 94       	cli
     9ba:	9e bf       	out	0x3e, r25	; 62
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	8d bf       	out	0x3d, r24	; 61
     9c0:	ad b7       	in	r26, 0x3d	; 61
     9c2:	be b7       	in	r27, 0x3e	; 62
     9c4:	11 96       	adiw	r26, 0x01	; 1
     9c6:	8c e0       	ldi	r24, 0x0C	; 12
     9c8:	e7 eb       	ldi	r30, 0xB7	; 183
     9ca:	f2 e0       	ldi	r31, 0x02	; 2
     9cc:	01 90       	ld	r0, Z+
     9ce:	0d 92       	st	X+, r0
     9d0:	8a 95       	dec	r24
     9d2:	e1 f7       	brne	.-8      	; 0x9cc <_GLOBAL__sub_I_default_address+0x66>
     9d4:	03 e0       	ldi	r16, 0x03	; 3
     9d6:	23 e3       	ldi	r18, 0x33	; 51
     9d8:	38 e0       	ldi	r19, 0x08	; 8
     9da:	44 e3       	ldi	r20, 0x34	; 52
     9dc:	53 e0       	ldi	r21, 0x03	; 3
     9de:	60 e4       	ldi	r22, 0x40	; 64
     9e0:	82 e6       	ldi	r24, 0x62	; 98
     9e2:	92 e0       	ldi	r25, 0x02	; 2
     9e4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_ZN8INA233_SC1Ehjjh19INA233_Alarm_Config>
		Sensor_2(adrSensor2, m_valueSensor2, cal_valueSensor2, p2_ACM_E_Pin, alarmConfigSensor2);
     9e8:	8d b7       	in	r24, 0x3d	; 61
     9ea:	9e b7       	in	r25, 0x3e	; 62
     9ec:	0c 97       	sbiw	r24, 0x0c	; 12
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	f8 94       	cli
     9f2:	9e bf       	out	0x3e, r25	; 62
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	8d bf       	out	0x3d, r24	; 61
     9f8:	ad b7       	in	r26, 0x3d	; 61
     9fa:	be b7       	in	r27, 0x3e	; 62
     9fc:	11 96       	adiw	r26, 0x01	; 1
     9fe:	8c e0       	ldi	r24, 0x0C	; 12
     a00:	eb ea       	ldi	r30, 0xAB	; 171
     a02:	f2 e0       	ldi	r31, 0x02	; 2
     a04:	01 90       	ld	r0, Z+
     a06:	0d 92       	st	X+, r0
     a08:	8a 95       	dec	r24
     a0a:	e1 f7       	brne	.-8      	; 0xa04 <_GLOBAL__sub_I_default_address+0x9e>
     a0c:	05 e0       	ldi	r16, 0x05	; 5
     a0e:	23 e3       	ldi	r18, 0x33	; 51
     a10:	38 e0       	ldi	r19, 0x08	; 8
     a12:	44 e3       	ldi	r20, 0x34	; 52
     a14:	53 e0       	ldi	r21, 0x03	; 3
     a16:	61 e4       	ldi	r22, 0x41	; 65
     a18:	81 e4       	ldi	r24, 0x41	; 65
     a1a:	92 e0       	ldi	r25, 0x02	; 2
     a1c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_ZN8INA233_SC1Ehjjh19INA233_Alarm_Config>
//End of Auto generated function prototypes by Atmel Studio

class  mosfet{
public:
	mosfet() = delete;
	mosfet(uint8_t MOSpin) : MOSpin_(MOSpin)
     a20:	83 e0       	ldi	r24, 0x03	; 3
     a22:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__data_end>
	
	float current_1 = Sensor_1.getCurrent();
	int test = 1 ;
	
	Serial.println(current_1);
}
     a26:	8d b7       	in	r24, 0x3d	; 61
     a28:	9e b7       	in	r25, 0x3e	; 62
     a2a:	48 96       	adiw	r24, 0x18	; 24
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	f8 94       	cli
     a30:	9e bf       	out	0x3e, r25	; 62
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	8d bf       	out	0x3d, r24	; 61
     a36:	0f 91       	pop	r16
     a38:	08 95       	ret

00000a3a <__subsf3>:
     a3a:	50 58       	subi	r21, 0x80	; 128

00000a3c <__addsf3>:
     a3c:	bb 27       	eor	r27, r27
     a3e:	aa 27       	eor	r26, r26
     a40:	0e 94 35 05 	call	0xa6a	; 0xa6a <__addsf3x>
     a44:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__fp_round>
     a48:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__fp_pscA>
     a4c:	38 f0       	brcs	.+14     	; 0xa5c <__addsf3+0x20>
     a4e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__fp_pscB>
     a52:	20 f0       	brcs	.+8      	; 0xa5c <__addsf3+0x20>
     a54:	39 f4       	brne	.+14     	; 0xa64 <__addsf3+0x28>
     a56:	9f 3f       	cpi	r25, 0xFF	; 255
     a58:	19 f4       	brne	.+6      	; 0xa60 <__addsf3+0x24>
     a5a:	26 f4       	brtc	.+8      	; 0xa64 <__addsf3+0x28>
     a5c:	0c 94 75 06 	jmp	0xcea	; 0xcea <__fp_nan>
     a60:	0e f4       	brtc	.+2      	; 0xa64 <__addsf3+0x28>
     a62:	e0 95       	com	r30
     a64:	e7 fb       	bst	r30, 7
     a66:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__fp_inf>

00000a6a <__addsf3x>:
     a6a:	e9 2f       	mov	r30, r25
     a6c:	0e 94 97 06 	call	0xd2e	; 0xd2e <__fp_split3>
     a70:	58 f3       	brcs	.-42     	; 0xa48 <__addsf3+0xc>
     a72:	ba 17       	cp	r27, r26
     a74:	62 07       	cpc	r22, r18
     a76:	73 07       	cpc	r23, r19
     a78:	84 07       	cpc	r24, r20
     a7a:	95 07       	cpc	r25, r21
     a7c:	20 f0       	brcs	.+8      	; 0xa86 <__addsf3x+0x1c>
     a7e:	79 f4       	brne	.+30     	; 0xa9e <__addsf3x+0x34>
     a80:	a6 f5       	brtc	.+104    	; 0xaea <__addsf3x+0x80>
     a82:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__fp_zero>
     a86:	0e f4       	brtc	.+2      	; 0xa8a <__addsf3x+0x20>
     a88:	e0 95       	com	r30
     a8a:	0b 2e       	mov	r0, r27
     a8c:	ba 2f       	mov	r27, r26
     a8e:	a0 2d       	mov	r26, r0
     a90:	0b 01       	movw	r0, r22
     a92:	b9 01       	movw	r22, r18
     a94:	90 01       	movw	r18, r0
     a96:	0c 01       	movw	r0, r24
     a98:	ca 01       	movw	r24, r20
     a9a:	a0 01       	movw	r20, r0
     a9c:	11 24       	eor	r1, r1
     a9e:	ff 27       	eor	r31, r31
     aa0:	59 1b       	sub	r21, r25
     aa2:	99 f0       	breq	.+38     	; 0xaca <__addsf3x+0x60>
     aa4:	59 3f       	cpi	r21, 0xF9	; 249
     aa6:	50 f4       	brcc	.+20     	; 0xabc <__addsf3x+0x52>
     aa8:	50 3e       	cpi	r21, 0xE0	; 224
     aaa:	68 f1       	brcs	.+90     	; 0xb06 <__addsf3x+0x9c>
     aac:	1a 16       	cp	r1, r26
     aae:	f0 40       	sbci	r31, 0x00	; 0
     ab0:	a2 2f       	mov	r26, r18
     ab2:	23 2f       	mov	r18, r19
     ab4:	34 2f       	mov	r19, r20
     ab6:	44 27       	eor	r20, r20
     ab8:	58 5f       	subi	r21, 0xF8	; 248
     aba:	f3 cf       	rjmp	.-26     	; 0xaa2 <__addsf3x+0x38>
     abc:	46 95       	lsr	r20
     abe:	37 95       	ror	r19
     ac0:	27 95       	ror	r18
     ac2:	a7 95       	ror	r26
     ac4:	f0 40       	sbci	r31, 0x00	; 0
     ac6:	53 95       	inc	r21
     ac8:	c9 f7       	brne	.-14     	; 0xabc <__addsf3x+0x52>
     aca:	7e f4       	brtc	.+30     	; 0xaea <__addsf3x+0x80>
     acc:	1f 16       	cp	r1, r31
     ace:	ba 0b       	sbc	r27, r26
     ad0:	62 0b       	sbc	r22, r18
     ad2:	73 0b       	sbc	r23, r19
     ad4:	84 0b       	sbc	r24, r20
     ad6:	ba f0       	brmi	.+46     	; 0xb06 <__addsf3x+0x9c>
     ad8:	91 50       	subi	r25, 0x01	; 1
     ada:	a1 f0       	breq	.+40     	; 0xb04 <__addsf3x+0x9a>
     adc:	ff 0f       	add	r31, r31
     ade:	bb 1f       	adc	r27, r27
     ae0:	66 1f       	adc	r22, r22
     ae2:	77 1f       	adc	r23, r23
     ae4:	88 1f       	adc	r24, r24
     ae6:	c2 f7       	brpl	.-16     	; 0xad8 <__addsf3x+0x6e>
     ae8:	0e c0       	rjmp	.+28     	; 0xb06 <__addsf3x+0x9c>
     aea:	ba 0f       	add	r27, r26
     aec:	62 1f       	adc	r22, r18
     aee:	73 1f       	adc	r23, r19
     af0:	84 1f       	adc	r24, r20
     af2:	48 f4       	brcc	.+18     	; 0xb06 <__addsf3x+0x9c>
     af4:	87 95       	ror	r24
     af6:	77 95       	ror	r23
     af8:	67 95       	ror	r22
     afa:	b7 95       	ror	r27
     afc:	f7 95       	ror	r31
     afe:	9e 3f       	cpi	r25, 0xFE	; 254
     b00:	08 f0       	brcs	.+2      	; 0xb04 <__addsf3x+0x9a>
     b02:	b0 cf       	rjmp	.-160    	; 0xa64 <__addsf3+0x28>
     b04:	93 95       	inc	r25
     b06:	88 0f       	add	r24, r24
     b08:	08 f0       	brcs	.+2      	; 0xb0c <__addsf3x+0xa2>
     b0a:	99 27       	eor	r25, r25
     b0c:	ee 0f       	add	r30, r30
     b0e:	97 95       	ror	r25
     b10:	87 95       	ror	r24
     b12:	08 95       	ret

00000b14 <__divsf3>:
     b14:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__divsf3x>
     b18:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__fp_round>
     b1c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__fp_pscB>
     b20:	58 f0       	brcs	.+22     	; 0xb38 <__divsf3+0x24>
     b22:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__fp_pscA>
     b26:	40 f0       	brcs	.+16     	; 0xb38 <__divsf3+0x24>
     b28:	29 f4       	brne	.+10     	; 0xb34 <__divsf3+0x20>
     b2a:	5f 3f       	cpi	r21, 0xFF	; 255
     b2c:	29 f0       	breq	.+10     	; 0xb38 <__divsf3+0x24>
     b2e:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__fp_inf>
     b32:	51 11       	cpse	r21, r1
     b34:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__fp_szero>
     b38:	0c 94 75 06 	jmp	0xcea	; 0xcea <__fp_nan>

00000b3c <__divsf3x>:
     b3c:	0e 94 97 06 	call	0xd2e	; 0xd2e <__fp_split3>
     b40:	68 f3       	brcs	.-38     	; 0xb1c <__divsf3+0x8>

00000b42 <__divsf3_pse>:
     b42:	99 23       	and	r25, r25
     b44:	b1 f3       	breq	.-20     	; 0xb32 <__divsf3+0x1e>
     b46:	55 23       	and	r21, r21
     b48:	91 f3       	breq	.-28     	; 0xb2e <__divsf3+0x1a>
     b4a:	95 1b       	sub	r25, r21
     b4c:	55 0b       	sbc	r21, r21
     b4e:	bb 27       	eor	r27, r27
     b50:	aa 27       	eor	r26, r26
     b52:	62 17       	cp	r22, r18
     b54:	73 07       	cpc	r23, r19
     b56:	84 07       	cpc	r24, r20
     b58:	38 f0       	brcs	.+14     	; 0xb68 <__divsf3_pse+0x26>
     b5a:	9f 5f       	subi	r25, 0xFF	; 255
     b5c:	5f 4f       	sbci	r21, 0xFF	; 255
     b5e:	22 0f       	add	r18, r18
     b60:	33 1f       	adc	r19, r19
     b62:	44 1f       	adc	r20, r20
     b64:	aa 1f       	adc	r26, r26
     b66:	a9 f3       	breq	.-22     	; 0xb52 <__divsf3_pse+0x10>
     b68:	35 d0       	rcall	.+106    	; 0xbd4 <__divsf3_pse+0x92>
     b6a:	0e 2e       	mov	r0, r30
     b6c:	3a f0       	brmi	.+14     	; 0xb7c <__divsf3_pse+0x3a>
     b6e:	e0 e8       	ldi	r30, 0x80	; 128
     b70:	32 d0       	rcall	.+100    	; 0xbd6 <__divsf3_pse+0x94>
     b72:	91 50       	subi	r25, 0x01	; 1
     b74:	50 40       	sbci	r21, 0x00	; 0
     b76:	e6 95       	lsr	r30
     b78:	00 1c       	adc	r0, r0
     b7a:	ca f7       	brpl	.-14     	; 0xb6e <__divsf3_pse+0x2c>
     b7c:	2b d0       	rcall	.+86     	; 0xbd4 <__divsf3_pse+0x92>
     b7e:	fe 2f       	mov	r31, r30
     b80:	29 d0       	rcall	.+82     	; 0xbd4 <__divsf3_pse+0x92>
     b82:	66 0f       	add	r22, r22
     b84:	77 1f       	adc	r23, r23
     b86:	88 1f       	adc	r24, r24
     b88:	bb 1f       	adc	r27, r27
     b8a:	26 17       	cp	r18, r22
     b8c:	37 07       	cpc	r19, r23
     b8e:	48 07       	cpc	r20, r24
     b90:	ab 07       	cpc	r26, r27
     b92:	b0 e8       	ldi	r27, 0x80	; 128
     b94:	09 f0       	breq	.+2      	; 0xb98 <__divsf3_pse+0x56>
     b96:	bb 0b       	sbc	r27, r27
     b98:	80 2d       	mov	r24, r0
     b9a:	bf 01       	movw	r22, r30
     b9c:	ff 27       	eor	r31, r31
     b9e:	93 58       	subi	r25, 0x83	; 131
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	3a f0       	brmi	.+14     	; 0xbb2 <__divsf3_pse+0x70>
     ba4:	9e 3f       	cpi	r25, 0xFE	; 254
     ba6:	51 05       	cpc	r21, r1
     ba8:	78 f0       	brcs	.+30     	; 0xbc8 <__divsf3_pse+0x86>
     baa:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__fp_inf>
     bae:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__fp_szero>
     bb2:	5f 3f       	cpi	r21, 0xFF	; 255
     bb4:	e4 f3       	brlt	.-8      	; 0xbae <__divsf3_pse+0x6c>
     bb6:	98 3e       	cpi	r25, 0xE8	; 232
     bb8:	d4 f3       	brlt	.-12     	; 0xbae <__divsf3_pse+0x6c>
     bba:	86 95       	lsr	r24
     bbc:	77 95       	ror	r23
     bbe:	67 95       	ror	r22
     bc0:	b7 95       	ror	r27
     bc2:	f7 95       	ror	r31
     bc4:	9f 5f       	subi	r25, 0xFF	; 255
     bc6:	c9 f7       	brne	.-14     	; 0xbba <__divsf3_pse+0x78>
     bc8:	88 0f       	add	r24, r24
     bca:	91 1d       	adc	r25, r1
     bcc:	96 95       	lsr	r25
     bce:	87 95       	ror	r24
     bd0:	97 f9       	bld	r25, 7
     bd2:	08 95       	ret
     bd4:	e1 e0       	ldi	r30, 0x01	; 1
     bd6:	66 0f       	add	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	88 1f       	adc	r24, r24
     bdc:	bb 1f       	adc	r27, r27
     bde:	62 17       	cp	r22, r18
     be0:	73 07       	cpc	r23, r19
     be2:	84 07       	cpc	r24, r20
     be4:	ba 07       	cpc	r27, r26
     be6:	20 f0       	brcs	.+8      	; 0xbf0 <__divsf3_pse+0xae>
     be8:	62 1b       	sub	r22, r18
     bea:	73 0b       	sbc	r23, r19
     bec:	84 0b       	sbc	r24, r20
     bee:	ba 0b       	sbc	r27, r26
     bf0:	ee 1f       	adc	r30, r30
     bf2:	88 f7       	brcc	.-30     	; 0xbd6 <__divsf3_pse+0x94>
     bf4:	e0 95       	com	r30
     bf6:	08 95       	ret

00000bf8 <__fixsfsi>:
     bf8:	0e 94 03 06 	call	0xc06	; 0xc06 <__fixunssfsi>
     bfc:	68 94       	set
     bfe:	b1 11       	cpse	r27, r1
     c00:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__fp_szero>
     c04:	08 95       	ret

00000c06 <__fixunssfsi>:
     c06:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fp_splitA>
     c0a:	88 f0       	brcs	.+34     	; 0xc2e <__fixunssfsi+0x28>
     c0c:	9f 57       	subi	r25, 0x7F	; 127
     c0e:	98 f0       	brcs	.+38     	; 0xc36 <__fixunssfsi+0x30>
     c10:	b9 2f       	mov	r27, r25
     c12:	99 27       	eor	r25, r25
     c14:	b7 51       	subi	r27, 0x17	; 23
     c16:	b0 f0       	brcs	.+44     	; 0xc44 <__fixunssfsi+0x3e>
     c18:	e1 f0       	breq	.+56     	; 0xc52 <__fixunssfsi+0x4c>
     c1a:	66 0f       	add	r22, r22
     c1c:	77 1f       	adc	r23, r23
     c1e:	88 1f       	adc	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	1a f0       	brmi	.+6      	; 0xc2a <__fixunssfsi+0x24>
     c24:	ba 95       	dec	r27
     c26:	c9 f7       	brne	.-14     	; 0xc1a <__fixunssfsi+0x14>
     c28:	14 c0       	rjmp	.+40     	; 0xc52 <__fixunssfsi+0x4c>
     c2a:	b1 30       	cpi	r27, 0x01	; 1
     c2c:	91 f0       	breq	.+36     	; 0xc52 <__fixunssfsi+0x4c>
     c2e:	0e 94 b9 06 	call	0xd72	; 0xd72 <__fp_zero>
     c32:	b1 e0       	ldi	r27, 0x01	; 1
     c34:	08 95       	ret
     c36:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__fp_zero>
     c3a:	67 2f       	mov	r22, r23
     c3c:	78 2f       	mov	r23, r24
     c3e:	88 27       	eor	r24, r24
     c40:	b8 5f       	subi	r27, 0xF8	; 248
     c42:	39 f0       	breq	.+14     	; 0xc52 <__fixunssfsi+0x4c>
     c44:	b9 3f       	cpi	r27, 0xF9	; 249
     c46:	cc f3       	brlt	.-14     	; 0xc3a <__fixunssfsi+0x34>
     c48:	86 95       	lsr	r24
     c4a:	77 95       	ror	r23
     c4c:	67 95       	ror	r22
     c4e:	b3 95       	inc	r27
     c50:	d9 f7       	brne	.-10     	; 0xc48 <__fixunssfsi+0x42>
     c52:	3e f4       	brtc	.+14     	; 0xc62 <__fixunssfsi+0x5c>
     c54:	90 95       	com	r25
     c56:	80 95       	com	r24
     c58:	70 95       	com	r23
     c5a:	61 95       	neg	r22
     c5c:	7f 4f       	sbci	r23, 0xFF	; 255
     c5e:	8f 4f       	sbci	r24, 0xFF	; 255
     c60:	9f 4f       	sbci	r25, 0xFF	; 255
     c62:	08 95       	ret

00000c64 <__floatunsisf>:
     c64:	e8 94       	clt
     c66:	09 c0       	rjmp	.+18     	; 0xc7a <__floatsisf+0x12>

00000c68 <__floatsisf>:
     c68:	97 fb       	bst	r25, 7
     c6a:	3e f4       	brtc	.+14     	; 0xc7a <__floatsisf+0x12>
     c6c:	90 95       	com	r25
     c6e:	80 95       	com	r24
     c70:	70 95       	com	r23
     c72:	61 95       	neg	r22
     c74:	7f 4f       	sbci	r23, 0xFF	; 255
     c76:	8f 4f       	sbci	r24, 0xFF	; 255
     c78:	9f 4f       	sbci	r25, 0xFF	; 255
     c7a:	99 23       	and	r25, r25
     c7c:	a9 f0       	breq	.+42     	; 0xca8 <__floatsisf+0x40>
     c7e:	f9 2f       	mov	r31, r25
     c80:	96 e9       	ldi	r25, 0x96	; 150
     c82:	bb 27       	eor	r27, r27
     c84:	93 95       	inc	r25
     c86:	f6 95       	lsr	r31
     c88:	87 95       	ror	r24
     c8a:	77 95       	ror	r23
     c8c:	67 95       	ror	r22
     c8e:	b7 95       	ror	r27
     c90:	f1 11       	cpse	r31, r1
     c92:	f8 cf       	rjmp	.-16     	; 0xc84 <__floatsisf+0x1c>
     c94:	fa f4       	brpl	.+62     	; 0xcd4 <__floatsisf+0x6c>
     c96:	bb 0f       	add	r27, r27
     c98:	11 f4       	brne	.+4      	; 0xc9e <__floatsisf+0x36>
     c9a:	60 ff       	sbrs	r22, 0
     c9c:	1b c0       	rjmp	.+54     	; 0xcd4 <__floatsisf+0x6c>
     c9e:	6f 5f       	subi	r22, 0xFF	; 255
     ca0:	7f 4f       	sbci	r23, 0xFF	; 255
     ca2:	8f 4f       	sbci	r24, 0xFF	; 255
     ca4:	9f 4f       	sbci	r25, 0xFF	; 255
     ca6:	16 c0       	rjmp	.+44     	; 0xcd4 <__floatsisf+0x6c>
     ca8:	88 23       	and	r24, r24
     caa:	11 f0       	breq	.+4      	; 0xcb0 <__floatsisf+0x48>
     cac:	96 e9       	ldi	r25, 0x96	; 150
     cae:	11 c0       	rjmp	.+34     	; 0xcd2 <__floatsisf+0x6a>
     cb0:	77 23       	and	r23, r23
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__floatsisf+0x54>
     cb4:	9e e8       	ldi	r25, 0x8E	; 142
     cb6:	87 2f       	mov	r24, r23
     cb8:	76 2f       	mov	r23, r22
     cba:	05 c0       	rjmp	.+10     	; 0xcc6 <__floatsisf+0x5e>
     cbc:	66 23       	and	r22, r22
     cbe:	71 f0       	breq	.+28     	; 0xcdc <__floatsisf+0x74>
     cc0:	96 e8       	ldi	r25, 0x86	; 134
     cc2:	86 2f       	mov	r24, r22
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	2a f0       	brmi	.+10     	; 0xcd4 <__floatsisf+0x6c>
     cca:	9a 95       	dec	r25
     ccc:	66 0f       	add	r22, r22
     cce:	77 1f       	adc	r23, r23
     cd0:	88 1f       	adc	r24, r24
     cd2:	da f7       	brpl	.-10     	; 0xcca <__floatsisf+0x62>
     cd4:	88 0f       	add	r24, r24
     cd6:	96 95       	lsr	r25
     cd8:	87 95       	ror	r24
     cda:	97 f9       	bld	r25, 7
     cdc:	08 95       	ret

00000cde <__fp_inf>:
     cde:	97 f9       	bld	r25, 7
     ce0:	9f 67       	ori	r25, 0x7F	; 127
     ce2:	80 e8       	ldi	r24, 0x80	; 128
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	08 95       	ret

00000cea <__fp_nan>:
     cea:	9f ef       	ldi	r25, 0xFF	; 255
     cec:	80 ec       	ldi	r24, 0xC0	; 192
     cee:	08 95       	ret

00000cf0 <__fp_pscA>:
     cf0:	00 24       	eor	r0, r0
     cf2:	0a 94       	dec	r0
     cf4:	16 16       	cp	r1, r22
     cf6:	17 06       	cpc	r1, r23
     cf8:	18 06       	cpc	r1, r24
     cfa:	09 06       	cpc	r0, r25
     cfc:	08 95       	ret

00000cfe <__fp_pscB>:
     cfe:	00 24       	eor	r0, r0
     d00:	0a 94       	dec	r0
     d02:	12 16       	cp	r1, r18
     d04:	13 06       	cpc	r1, r19
     d06:	14 06       	cpc	r1, r20
     d08:	05 06       	cpc	r0, r21
     d0a:	08 95       	ret

00000d0c <__fp_round>:
     d0c:	09 2e       	mov	r0, r25
     d0e:	03 94       	inc	r0
     d10:	00 0c       	add	r0, r0
     d12:	11 f4       	brne	.+4      	; 0xd18 <__fp_round+0xc>
     d14:	88 23       	and	r24, r24
     d16:	52 f0       	brmi	.+20     	; 0xd2c <__fp_round+0x20>
     d18:	bb 0f       	add	r27, r27
     d1a:	40 f4       	brcc	.+16     	; 0xd2c <__fp_round+0x20>
     d1c:	bf 2b       	or	r27, r31
     d1e:	11 f4       	brne	.+4      	; 0xd24 <__fp_round+0x18>
     d20:	60 ff       	sbrs	r22, 0
     d22:	04 c0       	rjmp	.+8      	; 0xd2c <__fp_round+0x20>
     d24:	6f 5f       	subi	r22, 0xFF	; 255
     d26:	7f 4f       	sbci	r23, 0xFF	; 255
     d28:	8f 4f       	sbci	r24, 0xFF	; 255
     d2a:	9f 4f       	sbci	r25, 0xFF	; 255
     d2c:	08 95       	ret

00000d2e <__fp_split3>:
     d2e:	57 fd       	sbrc	r21, 7
     d30:	90 58       	subi	r25, 0x80	; 128
     d32:	44 0f       	add	r20, r20
     d34:	55 1f       	adc	r21, r21
     d36:	59 f0       	breq	.+22     	; 0xd4e <__fp_splitA+0x10>
     d38:	5f 3f       	cpi	r21, 0xFF	; 255
     d3a:	71 f0       	breq	.+28     	; 0xd58 <__fp_splitA+0x1a>
     d3c:	47 95       	ror	r20

00000d3e <__fp_splitA>:
     d3e:	88 0f       	add	r24, r24
     d40:	97 fb       	bst	r25, 7
     d42:	99 1f       	adc	r25, r25
     d44:	61 f0       	breq	.+24     	; 0xd5e <__fp_splitA+0x20>
     d46:	9f 3f       	cpi	r25, 0xFF	; 255
     d48:	79 f0       	breq	.+30     	; 0xd68 <__fp_splitA+0x2a>
     d4a:	87 95       	ror	r24
     d4c:	08 95       	ret
     d4e:	12 16       	cp	r1, r18
     d50:	13 06       	cpc	r1, r19
     d52:	14 06       	cpc	r1, r20
     d54:	55 1f       	adc	r21, r21
     d56:	f2 cf       	rjmp	.-28     	; 0xd3c <__fp_split3+0xe>
     d58:	46 95       	lsr	r20
     d5a:	f1 df       	rcall	.-30     	; 0xd3e <__fp_splitA>
     d5c:	08 c0       	rjmp	.+16     	; 0xd6e <__fp_splitA+0x30>
     d5e:	16 16       	cp	r1, r22
     d60:	17 06       	cpc	r1, r23
     d62:	18 06       	cpc	r1, r24
     d64:	99 1f       	adc	r25, r25
     d66:	f1 cf       	rjmp	.-30     	; 0xd4a <__fp_splitA+0xc>
     d68:	86 95       	lsr	r24
     d6a:	71 05       	cpc	r23, r1
     d6c:	61 05       	cpc	r22, r1
     d6e:	08 94       	sec
     d70:	08 95       	ret

00000d72 <__fp_zero>:
     d72:	e8 94       	clt

00000d74 <__fp_szero>:
     d74:	bb 27       	eor	r27, r27
     d76:	66 27       	eor	r22, r22
     d78:	77 27       	eor	r23, r23
     d7a:	cb 01       	movw	r24, r22
     d7c:	97 f9       	bld	r25, 7
     d7e:	08 95       	ret

00000d80 <__gesf2>:
     d80:	0e 94 32 07 	call	0xe64	; 0xe64 <__fp_cmp>
     d84:	08 f4       	brcc	.+2      	; 0xd88 <__gesf2+0x8>
     d86:	8f ef       	ldi	r24, 0xFF	; 255
     d88:	08 95       	ret

00000d8a <__mulsf3>:
     d8a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__mulsf3x>
     d8e:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__fp_round>
     d92:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__fp_pscA>
     d96:	38 f0       	brcs	.+14     	; 0xda6 <__mulsf3+0x1c>
     d98:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__fp_pscB>
     d9c:	20 f0       	brcs	.+8      	; 0xda6 <__mulsf3+0x1c>
     d9e:	95 23       	and	r25, r21
     da0:	11 f0       	breq	.+4      	; 0xda6 <__mulsf3+0x1c>
     da2:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__fp_inf>
     da6:	0c 94 75 06 	jmp	0xcea	; 0xcea <__fp_nan>
     daa:	11 24       	eor	r1, r1
     dac:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__fp_szero>

00000db0 <__mulsf3x>:
     db0:	0e 94 97 06 	call	0xd2e	; 0xd2e <__fp_split3>
     db4:	70 f3       	brcs	.-36     	; 0xd92 <__mulsf3+0x8>

00000db6 <__mulsf3_pse>:
     db6:	95 9f       	mul	r25, r21
     db8:	c1 f3       	breq	.-16     	; 0xdaa <__mulsf3+0x20>
     dba:	95 0f       	add	r25, r21
     dbc:	50 e0       	ldi	r21, 0x00	; 0
     dbe:	55 1f       	adc	r21, r21
     dc0:	62 9f       	mul	r22, r18
     dc2:	f0 01       	movw	r30, r0
     dc4:	72 9f       	mul	r23, r18
     dc6:	bb 27       	eor	r27, r27
     dc8:	f0 0d       	add	r31, r0
     dca:	b1 1d       	adc	r27, r1
     dcc:	63 9f       	mul	r22, r19
     dce:	aa 27       	eor	r26, r26
     dd0:	f0 0d       	add	r31, r0
     dd2:	b1 1d       	adc	r27, r1
     dd4:	aa 1f       	adc	r26, r26
     dd6:	64 9f       	mul	r22, r20
     dd8:	66 27       	eor	r22, r22
     dda:	b0 0d       	add	r27, r0
     ddc:	a1 1d       	adc	r26, r1
     dde:	66 1f       	adc	r22, r22
     de0:	82 9f       	mul	r24, r18
     de2:	22 27       	eor	r18, r18
     de4:	b0 0d       	add	r27, r0
     de6:	a1 1d       	adc	r26, r1
     de8:	62 1f       	adc	r22, r18
     dea:	73 9f       	mul	r23, r19
     dec:	b0 0d       	add	r27, r0
     dee:	a1 1d       	adc	r26, r1
     df0:	62 1f       	adc	r22, r18
     df2:	83 9f       	mul	r24, r19
     df4:	a0 0d       	add	r26, r0
     df6:	61 1d       	adc	r22, r1
     df8:	22 1f       	adc	r18, r18
     dfa:	74 9f       	mul	r23, r20
     dfc:	33 27       	eor	r19, r19
     dfe:	a0 0d       	add	r26, r0
     e00:	61 1d       	adc	r22, r1
     e02:	23 1f       	adc	r18, r19
     e04:	84 9f       	mul	r24, r20
     e06:	60 0d       	add	r22, r0
     e08:	21 1d       	adc	r18, r1
     e0a:	82 2f       	mov	r24, r18
     e0c:	76 2f       	mov	r23, r22
     e0e:	6a 2f       	mov	r22, r26
     e10:	11 24       	eor	r1, r1
     e12:	9f 57       	subi	r25, 0x7F	; 127
     e14:	50 40       	sbci	r21, 0x00	; 0
     e16:	9a f0       	brmi	.+38     	; 0xe3e <__mulsf3_pse+0x88>
     e18:	f1 f0       	breq	.+60     	; 0xe56 <__mulsf3_pse+0xa0>
     e1a:	88 23       	and	r24, r24
     e1c:	4a f0       	brmi	.+18     	; 0xe30 <__mulsf3_pse+0x7a>
     e1e:	ee 0f       	add	r30, r30
     e20:	ff 1f       	adc	r31, r31
     e22:	bb 1f       	adc	r27, r27
     e24:	66 1f       	adc	r22, r22
     e26:	77 1f       	adc	r23, r23
     e28:	88 1f       	adc	r24, r24
     e2a:	91 50       	subi	r25, 0x01	; 1
     e2c:	50 40       	sbci	r21, 0x00	; 0
     e2e:	a9 f7       	brne	.-22     	; 0xe1a <__mulsf3_pse+0x64>
     e30:	9e 3f       	cpi	r25, 0xFE	; 254
     e32:	51 05       	cpc	r21, r1
     e34:	80 f0       	brcs	.+32     	; 0xe56 <__mulsf3_pse+0xa0>
     e36:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__fp_inf>
     e3a:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__fp_szero>
     e3e:	5f 3f       	cpi	r21, 0xFF	; 255
     e40:	e4 f3       	brlt	.-8      	; 0xe3a <__mulsf3_pse+0x84>
     e42:	98 3e       	cpi	r25, 0xE8	; 232
     e44:	d4 f3       	brlt	.-12     	; 0xe3a <__mulsf3_pse+0x84>
     e46:	86 95       	lsr	r24
     e48:	77 95       	ror	r23
     e4a:	67 95       	ror	r22
     e4c:	b7 95       	ror	r27
     e4e:	f7 95       	ror	r31
     e50:	e7 95       	ror	r30
     e52:	9f 5f       	subi	r25, 0xFF	; 255
     e54:	c1 f7       	brne	.-16     	; 0xe46 <__mulsf3_pse+0x90>
     e56:	fe 2b       	or	r31, r30
     e58:	88 0f       	add	r24, r24
     e5a:	91 1d       	adc	r25, r1
     e5c:	96 95       	lsr	r25
     e5e:	87 95       	ror	r24
     e60:	97 f9       	bld	r25, 7
     e62:	08 95       	ret

00000e64 <__fp_cmp>:
     e64:	99 0f       	add	r25, r25
     e66:	00 08       	sbc	r0, r0
     e68:	55 0f       	add	r21, r21
     e6a:	aa 0b       	sbc	r26, r26
     e6c:	e0 e8       	ldi	r30, 0x80	; 128
     e6e:	fe ef       	ldi	r31, 0xFE	; 254
     e70:	16 16       	cp	r1, r22
     e72:	17 06       	cpc	r1, r23
     e74:	e8 07       	cpc	r30, r24
     e76:	f9 07       	cpc	r31, r25
     e78:	c0 f0       	brcs	.+48     	; 0xeaa <__fp_cmp+0x46>
     e7a:	12 16       	cp	r1, r18
     e7c:	13 06       	cpc	r1, r19
     e7e:	e4 07       	cpc	r30, r20
     e80:	f5 07       	cpc	r31, r21
     e82:	98 f0       	brcs	.+38     	; 0xeaa <__fp_cmp+0x46>
     e84:	62 1b       	sub	r22, r18
     e86:	73 0b       	sbc	r23, r19
     e88:	84 0b       	sbc	r24, r20
     e8a:	95 0b       	sbc	r25, r21
     e8c:	39 f4       	brne	.+14     	; 0xe9c <__fp_cmp+0x38>
     e8e:	0a 26       	eor	r0, r26
     e90:	61 f0       	breq	.+24     	; 0xeaa <__fp_cmp+0x46>
     e92:	23 2b       	or	r18, r19
     e94:	24 2b       	or	r18, r20
     e96:	25 2b       	or	r18, r21
     e98:	21 f4       	brne	.+8      	; 0xea2 <__fp_cmp+0x3e>
     e9a:	08 95       	ret
     e9c:	0a 26       	eor	r0, r26
     e9e:	09 f4       	brne	.+2      	; 0xea2 <__fp_cmp+0x3e>
     ea0:	a1 40       	sbci	r26, 0x01	; 1
     ea2:	a6 95       	lsr	r26
     ea4:	8f ef       	ldi	r24, 0xFF	; 255
     ea6:	81 1d       	adc	r24, r1
     ea8:	81 1d       	adc	r24, r1
     eaa:	08 95       	ret

00000eac <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     eac:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     eae:	91 8d       	ldd	r25, Z+25	; 0x19
     eb0:	22 8d       	ldd	r18, Z+26	; 0x1a
     eb2:	89 2f       	mov	r24, r25
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	80 5c       	subi	r24, 0xC0	; 192
     eb8:	9f 4f       	sbci	r25, 0xFF	; 255
     eba:	82 1b       	sub	r24, r18
     ebc:	91 09       	sbc	r25, r1
}
     ebe:	8f 73       	andi	r24, 0x3F	; 63
     ec0:	99 27       	eor	r25, r25
     ec2:	08 95       	ret

00000ec4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     ec4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     ec6:	91 8d       	ldd	r25, Z+25	; 0x19
     ec8:	82 8d       	ldd	r24, Z+26	; 0x1a
     eca:	98 17       	cp	r25, r24
     ecc:	31 f0       	breq	.+12     	; 0xeda <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     ece:	82 8d       	ldd	r24, Z+26	; 0x1a
     ed0:	e8 0f       	add	r30, r24
     ed2:	f1 1d       	adc	r31, r1
     ed4:	85 8d       	ldd	r24, Z+29	; 0x1d
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     eda:	8f ef       	ldi	r24, 0xFF	; 255
     edc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     ede:	08 95       	ret

00000ee0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     ee0:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     ee2:	91 8d       	ldd	r25, Z+25	; 0x19
     ee4:	82 8d       	ldd	r24, Z+26	; 0x1a
     ee6:	98 17       	cp	r25, r24
     ee8:	61 f0       	breq	.+24     	; 0xf02 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     eea:	82 8d       	ldd	r24, Z+26	; 0x1a
     eec:	df 01       	movw	r26, r30
     eee:	a8 0f       	add	r26, r24
     ef0:	b1 1d       	adc	r27, r1
     ef2:	5d 96       	adiw	r26, 0x1d	; 29
     ef4:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     ef6:	92 8d       	ldd	r25, Z+26	; 0x1a
     ef8:	9f 5f       	subi	r25, 0xFF	; 255
     efa:	9f 73       	andi	r25, 0x3F	; 63
     efc:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     f02:	8f ef       	ldi	r24, 0xFF	; 255
     f04:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     f06:	08 95       	ret

00000f08 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     f08:	fc 01       	movw	r30, r24
     f0a:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     f0c:	44 8d       	ldd	r20, Z+28	; 0x1c
     f0e:	25 2f       	mov	r18, r21
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	84 2f       	mov	r24, r20
     f14:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     f16:	82 1b       	sub	r24, r18
     f18:	93 0b       	sbc	r25, r19
     f1a:	54 17       	cp	r21, r20
     f1c:	10 f0       	brcs	.+4      	; 0xf22 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     f1e:	cf 96       	adiw	r24, 0x3f	; 63
     f20:	08 95       	ret
  return tail - head - 1;
     f22:	01 97       	sbiw	r24, 0x01	; 1
}
     f24:	08 95       	ret

00000f26 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     f26:	82 ef       	ldi	r24, 0xF2	; 242
     f28:	98 e0       	ldi	r25, 0x08	; 8
     f2a:	89 2b       	or	r24, r25
     f2c:	49 f0       	breq	.+18     	; 0xf40 <_Z14serialEventRunv+0x1a>
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	89 2b       	or	r24, r25
     f34:	29 f0       	breq	.+10     	; 0xf40 <_Z14serialEventRunv+0x1a>
     f36:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_Z17Serial0_availablev>
     f3a:	81 11       	cpse	r24, r1
     f3c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     f40:	08 95       	ret

00000f42 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     f42:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     f44:	84 8d       	ldd	r24, Z+28	; 0x1c
     f46:	df 01       	movw	r26, r30
     f48:	a8 0f       	add	r26, r24
     f4a:	b1 1d       	adc	r27, r1
     f4c:	a3 5a       	subi	r26, 0xA3	; 163
     f4e:	bf 4f       	sbci	r27, 0xFF	; 255
     f50:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     f52:	84 8d       	ldd	r24, Z+28	; 0x1c
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	8f 73       	andi	r24, 0x3F	; 63
     f5a:	99 27       	eor	r25, r25
     f5c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     f5e:	a6 89       	ldd	r26, Z+22	; 0x16
     f60:	b7 89       	ldd	r27, Z+23	; 0x17
     f62:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     f64:	a0 89       	ldd	r26, Z+16	; 0x10
     f66:	b1 89       	ldd	r27, Z+17	; 0x11
     f68:	8c 91       	ld	r24, X
     f6a:	83 70       	andi	r24, 0x03	; 3
     f6c:	80 64       	ori	r24, 0x40	; 64
     f6e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     f70:	93 8d       	ldd	r25, Z+27	; 0x1b
     f72:	84 8d       	ldd	r24, Z+28	; 0x1c
     f74:	98 13       	cpse	r25, r24
     f76:	06 c0       	rjmp	.+12     	; 0xf84 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     f78:	02 88       	ldd	r0, Z+18	; 0x12
     f7a:	f3 89       	ldd	r31, Z+19	; 0x13
     f7c:	e0 2d       	mov	r30, r0
     f7e:	80 81       	ld	r24, Z
     f80:	8f 7d       	andi	r24, 0xDF	; 223
     f82:	80 83       	st	Z, r24
     f84:	08 95       	ret

00000f86 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     f86:	ef 92       	push	r14
     f88:	ff 92       	push	r15
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	ec 01       	movw	r28, r24
  _written = true;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     f98:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f9a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f9c:	98 13       	cpse	r25, r24
     f9e:	05 c0       	rjmp	.+10     	; 0xfaa <_ZN14HardwareSerial5writeEh+0x24>
     fa0:	e8 89       	ldd	r30, Y+16	; 0x10
     fa2:	f9 89       	ldd	r31, Y+17	; 0x11
     fa4:	80 81       	ld	r24, Z
     fa6:	85 fd       	sbrc	r24, 5
     fa8:	26 c0       	rjmp	.+76     	; 0xff6 <_ZN14HardwareSerial5writeEh+0x70>
     faa:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     fac:	0b 8d       	ldd	r16, Y+27	; 0x1b
     fae:	10 e0       	ldi	r17, 0x00	; 0
     fb0:	0f 5f       	subi	r16, 0xFF	; 255
     fb2:	1f 4f       	sbci	r17, 0xFF	; 255
     fb4:	0f 73       	andi	r16, 0x3F	; 63
     fb6:	11 27       	eor	r17, r17
     fb8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     fba:	8c 8d       	ldd	r24, Y+28	; 0x1c
     fbc:	e8 12       	cpse	r14, r24
     fbe:	0c c0       	rjmp	.+24     	; 0xfd8 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	07 fc       	sbrc	r0, 7
     fc4:	fa cf       	rjmp	.-12     	; 0xfba <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     fc6:	e8 89       	ldd	r30, Y+16	; 0x10
     fc8:	f9 89       	ldd	r31, Y+17	; 0x11
     fca:	80 81       	ld	r24, Z
     fcc:	85 ff       	sbrs	r24, 5
     fce:	f5 cf       	rjmp	.-22     	; 0xfba <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     fd0:	ce 01       	movw	r24, r28
     fd2:	0e 94 a1 07 	call	0xf42	; 0xf42 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     fd6:	f1 cf       	rjmp	.-30     	; 0xfba <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     fd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fda:	fe 01       	movw	r30, r28
     fdc:	e8 0f       	add	r30, r24
     fde:	f1 1d       	adc	r31, r1
     fe0:	e3 5a       	subi	r30, 0xA3	; 163
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     fe6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fe8:	f8 94       	cli
    _tx_buffer_head = i;
     fea:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     fec:	ea 89       	ldd	r30, Y+18	; 0x12
     fee:	fb 89       	ldd	r31, Y+19	; 0x13
     ff0:	80 81       	ld	r24, Z
     ff2:	80 62       	ori	r24, 0x20	; 32
     ff4:	0a c0       	rjmp	.+20     	; 0x100a <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     ff6:	9f b7       	in	r25, 0x3f	; 63
     ff8:	f8 94       	cli
      *_udr = c;
     ffa:	ee 89       	ldd	r30, Y+22	; 0x16
     ffc:	ff 89       	ldd	r31, Y+23	; 0x17
     ffe:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1000:	e8 89       	ldd	r30, Y+16	; 0x10
    1002:	f9 89       	ldd	r31, Y+17	; 0x11
    1004:	80 81       	ld	r24, Z
    1006:	83 70       	andi	r24, 0x03	; 3
    1008:	80 64       	ori	r24, 0x40	; 64
    100a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    100c:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	ff 90       	pop	r15
    101c:	ef 90       	pop	r14
    101e:	08 95       	ret

00001020 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
    1024:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1026:	88 8d       	ldd	r24, Y+24	; 0x18
    1028:	88 23       	and	r24, r24
    102a:	c9 f0       	breq	.+50     	; 0x105e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    102c:	ea 89       	ldd	r30, Y+18	; 0x12
    102e:	fb 89       	ldd	r31, Y+19	; 0x13
    1030:	80 81       	ld	r24, Z
    1032:	85 fd       	sbrc	r24, 5
    1034:	05 c0       	rjmp	.+10     	; 0x1040 <_ZN14HardwareSerial5flushEv+0x20>
    1036:	a8 89       	ldd	r26, Y+16	; 0x10
    1038:	b9 89       	ldd	r27, Y+17	; 0x11
    103a:	8c 91       	ld	r24, X
    103c:	86 fd       	sbrc	r24, 6
    103e:	0f c0       	rjmp	.+30     	; 0x105e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	07 fc       	sbrc	r0, 7
    1044:	f5 cf       	rjmp	.-22     	; 0x1030 <_ZN14HardwareSerial5flushEv+0x10>
    1046:	80 81       	ld	r24, Z
    1048:	85 ff       	sbrs	r24, 5
    104a:	f2 cf       	rjmp	.-28     	; 0x1030 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    104c:	a8 89       	ldd	r26, Y+16	; 0x10
    104e:	b9 89       	ldd	r27, Y+17	; 0x11
    1050:	8c 91       	ld	r24, X
    1052:	85 ff       	sbrs	r24, 5
    1054:	ed cf       	rjmp	.-38     	; 0x1030 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1056:	ce 01       	movw	r24, r28
    1058:	0e 94 a1 07 	call	0xf42	; 0xf42 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    105c:	e7 cf       	rjmp	.-50     	; 0x102c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	08 95       	ret

00001064 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1064:	cf 92       	push	r12
    1066:	df 92       	push	r13
    1068:	ef 92       	push	r14
    106a:	ff 92       	push	r15
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	ec 01       	movw	r28, r24
    1074:	6a 01       	movw	r12, r20
    1076:	7b 01       	movw	r14, r22
    1078:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    107a:	e8 89       	ldd	r30, Y+16	; 0x10
    107c:	f9 89       	ldd	r31, Y+17	; 0x11
    107e:	82 e0       	ldi	r24, 0x02	; 2
    1080:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1082:	41 15       	cp	r20, r1
    1084:	51 4e       	sbci	r21, 0xE1	; 225
    1086:	61 05       	cpc	r22, r1
    1088:	71 05       	cpc	r23, r1
    108a:	b1 f0       	breq	.+44     	; 0x10b8 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	79 e0       	ldi	r23, 0x09	; 9
    1090:	8d e3       	ldi	r24, 0x3D	; 61
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	a7 01       	movw	r20, r14
    1096:	96 01       	movw	r18, r12
    1098:	0e 94 17 12 	call	0x242e	; 0x242e <__udivmodsi4>
    109c:	da 01       	movw	r26, r20
    109e:	c9 01       	movw	r24, r18
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	a1 09       	sbc	r26, r1
    10a4:	b1 09       	sbc	r27, r1
    10a6:	b6 95       	lsr	r27
    10a8:	a7 95       	ror	r26
    10aa:	97 95       	ror	r25
    10ac:	87 95       	ror	r24
    10ae:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    10b0:	21 15       	cp	r18, r1
    10b2:	80 e1       	ldi	r24, 0x10	; 16
    10b4:	38 07       	cpc	r19, r24
    10b6:	a8 f0       	brcs	.+42     	; 0x10e2 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    10b8:	e8 89       	ldd	r30, Y+16	; 0x10
    10ba:	f9 89       	ldd	r31, Y+17	; 0x11
    10bc:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    10be:	60 e8       	ldi	r22, 0x80	; 128
    10c0:	74 e8       	ldi	r23, 0x84	; 132
    10c2:	8e e1       	ldi	r24, 0x1E	; 30
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	a7 01       	movw	r20, r14
    10c8:	96 01       	movw	r18, r12
    10ca:	0e 94 17 12 	call	0x242e	; 0x242e <__udivmodsi4>
    10ce:	da 01       	movw	r26, r20
    10d0:	c9 01       	movw	r24, r18
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	a1 09       	sbc	r26, r1
    10d6:	b1 09       	sbc	r27, r1
    10d8:	b6 95       	lsr	r27
    10da:	a7 95       	ror	r26
    10dc:	97 95       	ror	r25
    10de:	87 95       	ror	r24
    10e0:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    10e2:	ec 85       	ldd	r30, Y+12	; 0x0c
    10e4:	fd 85       	ldd	r31, Y+13	; 0x0d
    10e6:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    10e8:	ee 85       	ldd	r30, Y+14	; 0x0e
    10ea:	ff 85       	ldd	r31, Y+15	; 0x0f
    10ec:	20 83       	st	Z, r18

  _written = false;
    10ee:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    10f0:	ec 89       	ldd	r30, Y+20	; 0x14
    10f2:	fd 89       	ldd	r31, Y+21	; 0x15
    10f4:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    10f6:	ea 89       	ldd	r30, Y+18	; 0x12
    10f8:	fb 89       	ldd	r31, Y+19	; 0x13
    10fa:	80 81       	ld	r24, Z
    10fc:	80 61       	ori	r24, 0x10	; 16
    10fe:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1100:	ea 89       	ldd	r30, Y+18	; 0x12
    1102:	fb 89       	ldd	r31, Y+19	; 0x13
    1104:	80 81       	ld	r24, Z
    1106:	88 60       	ori	r24, 0x08	; 8
    1108:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    110a:	ea 89       	ldd	r30, Y+18	; 0x12
    110c:	fb 89       	ldd	r31, Y+19	; 0x13
    110e:	80 81       	ld	r24, Z
    1110:	80 68       	ori	r24, 0x80	; 128
    1112:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1114:	ea 89       	ldd	r30, Y+18	; 0x12
    1116:	fb 89       	ldd	r31, Y+19	; 0x13
    1118:	80 81       	ld	r24, Z
    111a:	8f 7d       	andi	r24, 0xDF	; 223
    111c:	80 83       	st	Z, r24
}
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	1f 91       	pop	r17
    1124:	ff 90       	pop	r15
    1126:	ef 90       	pop	r14
    1128:	df 90       	pop	r13
    112a:	cf 90       	pop	r12
    112c:	08 95       	ret

0000112e <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	08 95       	ret

00001134 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1134:	1f 92       	push	r1
    1136:	0f 92       	push	r0
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	0f 92       	push	r0
    113c:	11 24       	eor	r1, r1
    113e:	2f 93       	push	r18
    1140:	8f 93       	push	r24
    1142:	9f 93       	push	r25
    1144:	ef 93       	push	r30
    1146:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1148:	e0 91 d3 02 	lds	r30, 0x02D3	; 0x8002d3 <Serial+0x10>
    114c:	f0 91 d4 02 	lds	r31, 0x02D4	; 0x8002d4 <Serial+0x11>
    1150:	80 81       	ld	r24, Z
    1152:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <Serial+0x16>
    1156:	f0 91 da 02 	lds	r31, 0x02DA	; 0x8002da <Serial+0x17>
    115a:	82 fd       	sbrc	r24, 2
    115c:	12 c0       	rjmp	.+36     	; 0x1182 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    115e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1160:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <Serial+0x19>
    1164:	8f 5f       	subi	r24, 0xFF	; 255
    1166:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1168:	20 91 dd 02 	lds	r18, 0x02DD	; 0x8002dd <Serial+0x1a>
    116c:	82 17       	cp	r24, r18
    116e:	51 f0       	breq	.+20     	; 0x1184 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1170:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <Serial+0x19>
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	ed 53       	subi	r30, 0x3D	; 61
    1178:	fd 4f       	sbci	r31, 0xFD	; 253
    117a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    117c:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <Serial+0x19>
    1180:	01 c0       	rjmp	.+2      	; 0x1184 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1182:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1184:	ff 91       	pop	r31
    1186:	ef 91       	pop	r30
    1188:	9f 91       	pop	r25
    118a:	8f 91       	pop	r24
    118c:	2f 91       	pop	r18
    118e:	0f 90       	pop	r0
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	0f 90       	pop	r0
    1194:	1f 90       	pop	r1
    1196:	18 95       	reti

00001198 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1198:	1f 92       	push	r1
    119a:	0f 92       	push	r0
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	0f 92       	push	r0
    11a0:	11 24       	eor	r1, r1
    11a2:	2f 93       	push	r18
    11a4:	3f 93       	push	r19
    11a6:	4f 93       	push	r20
    11a8:	5f 93       	push	r21
    11aa:	6f 93       	push	r22
    11ac:	7f 93       	push	r23
    11ae:	8f 93       	push	r24
    11b0:	9f 93       	push	r25
    11b2:	af 93       	push	r26
    11b4:	bf 93       	push	r27
    11b6:	ef 93       	push	r30
    11b8:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    11ba:	83 ec       	ldi	r24, 0xC3	; 195
    11bc:	92 e0       	ldi	r25, 0x02	; 2
    11be:	0e 94 a1 07 	call	0xf42	; 0xf42 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    11c2:	ff 91       	pop	r31
    11c4:	ef 91       	pop	r30
    11c6:	bf 91       	pop	r27
    11c8:	af 91       	pop	r26
    11ca:	9f 91       	pop	r25
    11cc:	8f 91       	pop	r24
    11ce:	7f 91       	pop	r23
    11d0:	6f 91       	pop	r22
    11d2:	5f 91       	pop	r21
    11d4:	4f 91       	pop	r20
    11d6:	3f 91       	pop	r19
    11d8:	2f 91       	pop	r18
    11da:	0f 90       	pop	r0
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	0f 90       	pop	r0
    11e0:	1f 90       	pop	r1
    11e2:	18 95       	reti

000011e4 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    11e4:	83 ec       	ldi	r24, 0xC3	; 195
    11e6:	92 e0       	ldi	r25, 0x02	; 2
    11e8:	0e 94 56 07 	call	0xeac	; 0xeac <_ZN14HardwareSerial9availableEv>
    11ec:	21 e0       	ldi	r18, 0x01	; 1
    11ee:	89 2b       	or	r24, r25
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <_Z17Serial0_availablev+0x10>
    11f2:	20 e0       	ldi	r18, 0x00	; 0
}
    11f4:	82 2f       	mov	r24, r18
    11f6:	08 95       	ret

000011f8 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    11f8:	e3 ec       	ldi	r30, 0xC3	; 195
    11fa:	f2 e0       	ldi	r31, 0x02	; 2
    11fc:	13 82       	std	Z+3, r1	; 0x03
    11fe:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1200:	88 ee       	ldi	r24, 0xE8	; 232
    1202:	93 e0       	ldi	r25, 0x03	; 3
    1204:	a0 e0       	ldi	r26, 0x00	; 0
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	84 83       	std	Z+4, r24	; 0x04
    120a:	95 83       	std	Z+5, r25	; 0x05
    120c:	a6 83       	std	Z+6, r26	; 0x06
    120e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1210:	81 e1       	ldi	r24, 0x11	; 17
    1212:	92 e0       	ldi	r25, 0x02	; 2
    1214:	91 83       	std	Z+1, r25	; 0x01
    1216:	80 83       	st	Z, r24
    1218:	85 ec       	ldi	r24, 0xC5	; 197
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	95 87       	std	Z+13, r25	; 0x0d
    121e:	84 87       	std	Z+12, r24	; 0x0c
    1220:	84 ec       	ldi	r24, 0xC4	; 196
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	97 87       	std	Z+15, r25	; 0x0f
    1226:	86 87       	std	Z+14, r24	; 0x0e
    1228:	80 ec       	ldi	r24, 0xC0	; 192
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	91 8b       	std	Z+17, r25	; 0x11
    122e:	80 8b       	std	Z+16, r24	; 0x10
    1230:	81 ec       	ldi	r24, 0xC1	; 193
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	93 8b       	std	Z+19, r25	; 0x13
    1236:	82 8b       	std	Z+18, r24	; 0x12
    1238:	82 ec       	ldi	r24, 0xC2	; 194
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	95 8b       	std	Z+21, r25	; 0x15
    123e:	84 8b       	std	Z+20, r24	; 0x14
    1240:	86 ec       	ldi	r24, 0xC6	; 198
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	97 8b       	std	Z+23, r25	; 0x17
    1246:	86 8b       	std	Z+22, r24	; 0x16
    1248:	11 8e       	std	Z+25, r1	; 0x19
    124a:	12 8e       	std	Z+26, r1	; 0x1a
    124c:	13 8e       	std	Z+27, r1	; 0x1b
    124e:	14 8e       	std	Z+28, r1	; 0x1c
    1250:	08 95       	ret

00001252 <initVariant>:
    1252:	08 95       	ret

00001254 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1254:	0e 94 04 0c 	call	0x1808	; 0x1808 <init>

	initVariant();
    1258:	0e 94 29 09 	call	0x1252	; 0x1252 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    125c:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1260:	c3 e9       	ldi	r28, 0x93	; 147
    1262:	d7 e0       	ldi	r29, 0x07	; 7
#endif
	
	setup();
    
	for (;;) {
		loop();
    1264:	0e 94 a2 04 	call	0x944	; 0x944 <loop>
		if (serialEventRun) serialEventRun();
    1268:	20 97       	sbiw	r28, 0x00	; 0
    126a:	e1 f3       	breq	.-8      	; 0x1264 <main+0x10>
    126c:	0e 94 93 07 	call	0xf26	; 0xf26 <_Z14serialEventRunv>
    1270:	f9 cf       	rjmp	.-14     	; 0x1264 <main+0x10>

00001272 <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1272:	cf 92       	push	r12
    1274:	df 92       	push	r13
    1276:	ef 92       	push	r14
    1278:	ff 92       	push	r15
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	6c 01       	movw	r12, r24
    1284:	7a 01       	movw	r14, r20
    1286:	8b 01       	movw	r16, r22
    1288:	c0 e0       	ldi	r28, 0x00	; 0
    128a:	d0 e0       	ldi	r29, 0x00	; 0
    128c:	ce 15       	cp	r28, r14
    128e:	df 05       	cpc	r29, r15
    1290:	81 f0       	breq	.+32     	; 0x12b2 <_ZN5Print5writeEPKhj+0x40>
    1292:	d8 01       	movw	r26, r16
    1294:	6d 91       	ld	r22, X+
    1296:	8d 01       	movw	r16, r26
    1298:	d6 01       	movw	r26, r12
    129a:	ed 91       	ld	r30, X+
    129c:	fc 91       	ld	r31, X
    129e:	01 90       	ld	r0, Z+
    12a0:	f0 81       	ld	r31, Z
    12a2:	e0 2d       	mov	r30, r0
    12a4:	c6 01       	movw	r24, r12
    12a6:	09 95       	icall
    12a8:	89 2b       	or	r24, r25
    12aa:	11 f0       	breq	.+4      	; 0x12b0 <_ZN5Print5writeEPKhj+0x3e>
    12ac:	21 96       	adiw	r28, 0x01	; 1
    12ae:	ee cf       	rjmp	.-36     	; 0x128c <_ZN5Print5writeEPKhj+0x1a>
    12b0:	7e 01       	movw	r14, r28
    12b2:	c7 01       	movw	r24, r14
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	1f 91       	pop	r17
    12ba:	0f 91       	pop	r16
    12bc:	ff 90       	pop	r15
    12be:	ef 90       	pop	r14
    12c0:	df 90       	pop	r13
    12c2:	cf 90       	pop	r12
    12c4:	08 95       	ret

000012c6 <_ZN5Print5writeEPKc>:
    12c6:	61 15       	cp	r22, r1
    12c8:	71 05       	cpc	r23, r1
    12ca:	79 f0       	breq	.+30     	; 0x12ea <_ZN5Print5writeEPKc+0x24>
    12cc:	fb 01       	movw	r30, r22
    12ce:	01 90       	ld	r0, Z+
    12d0:	00 20       	and	r0, r0
    12d2:	e9 f7       	brne	.-6      	; 0x12ce <_ZN5Print5writeEPKc+0x8>
    12d4:	31 97       	sbiw	r30, 0x01	; 1
    12d6:	af 01       	movw	r20, r30
    12d8:	46 1b       	sub	r20, r22
    12da:	57 0b       	sbc	r21, r23
    12dc:	dc 01       	movw	r26, r24
    12de:	ed 91       	ld	r30, X+
    12e0:	fc 91       	ld	r31, X
    12e2:	02 80       	ldd	r0, Z+2	; 0x02
    12e4:	f3 81       	ldd	r31, Z+3	; 0x03
    12e6:	e0 2d       	mov	r30, r0
    12e8:	09 94       	ijmp
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	08 95       	ret

000012f0 <_ZN5Print5printEPK19__FlashStringHelper>:
    12f0:	ef 92       	push	r14
    12f2:	ff 92       	push	r15
    12f4:	0f 93       	push	r16
    12f6:	1f 93       	push	r17
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
    12fc:	8c 01       	movw	r16, r24
    12fe:	7b 01       	movw	r14, r22
    1300:	c0 e0       	ldi	r28, 0x00	; 0
    1302:	d0 e0       	ldi	r29, 0x00	; 0
    1304:	f7 01       	movw	r30, r14
    1306:	ec 0f       	add	r30, r28
    1308:	fd 1f       	adc	r31, r29
    130a:	64 91       	lpm	r22, Z
    130c:	66 23       	and	r22, r22
    130e:	61 f0       	breq	.+24     	; 0x1328 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1310:	d8 01       	movw	r26, r16
    1312:	ed 91       	ld	r30, X+
    1314:	fc 91       	ld	r31, X
    1316:	01 90       	ld	r0, Z+
    1318:	f0 81       	ld	r31, Z
    131a:	e0 2d       	mov	r30, r0
    131c:	c8 01       	movw	r24, r16
    131e:	09 95       	icall
    1320:	89 2b       	or	r24, r25
    1322:	11 f0       	breq	.+4      	; 0x1328 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1324:	21 96       	adiw	r28, 0x01	; 1
    1326:	ee cf       	rjmp	.-36     	; 0x1304 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    1328:	ce 01       	movw	r24, r28
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	ff 90       	pop	r15
    1334:	ef 90       	pop	r14
    1336:	08 95       	ret

00001338 <_ZN5Print5printEPKc>:
    1338:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <_ZN5Print5writeEPKc>

0000133c <_ZN5Print5printEc>:
    133c:	dc 01       	movw	r26, r24
    133e:	ed 91       	ld	r30, X+
    1340:	fc 91       	ld	r31, X
    1342:	01 90       	ld	r0, Z+
    1344:	f0 81       	ld	r31, Z
    1346:	e0 2d       	mov	r30, r0
    1348:	09 94       	ijmp

0000134a <_ZN5Print7printlnEv>:
    134a:	6f e1       	ldi	r22, 0x1F	; 31
    134c:	72 e0       	ldi	r23, 0x02	; 2
    134e:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <_ZN5Print5writeEPKc>

00001352 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	ec 01       	movw	r28, r24
    135c:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN5Print5printEPK19__FlashStringHelper>
    1360:	8c 01       	movw	r16, r24
    1362:	ce 01       	movw	r24, r28
    1364:	0e 94 a5 09 	call	0x134a	; 0x134a <_ZN5Print7printlnEv>
    1368:	80 0f       	add	r24, r16
    136a:	91 1f       	adc	r25, r17
    136c:	df 91       	pop	r29
    136e:	cf 91       	pop	r28
    1370:	1f 91       	pop	r17
    1372:	0f 91       	pop	r16
    1374:	08 95       	ret

00001376 <_ZN5Print7printlnEPKc>:
    1376:	0f 93       	push	r16
    1378:	1f 93       	push	r17
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	ec 01       	movw	r28, r24
    1380:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN5Print5writeEPKc>
    1384:	8c 01       	movw	r16, r24
    1386:	ce 01       	movw	r24, r28
    1388:	0e 94 a5 09 	call	0x134a	; 0x134a <_ZN5Print7printlnEv>
    138c:	80 0f       	add	r24, r16
    138e:	91 1f       	adc	r25, r17
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	1f 91       	pop	r17
    1396:	0f 91       	pop	r16
    1398:	08 95       	ret

0000139a <_ZN5Print11printNumberEmh>:
    139a:	8f 92       	push	r8
    139c:	9f 92       	push	r9
    139e:	af 92       	push	r10
    13a0:	bf 92       	push	r11
    13a2:	ef 92       	push	r14
    13a4:	ff 92       	push	r15
    13a6:	0f 93       	push	r16
    13a8:	1f 93       	push	r17
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	a1 97       	sbiw	r28, 0x21	; 33
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	cd bf       	out	0x3d, r28	; 61
    13be:	7c 01       	movw	r14, r24
    13c0:	fa 01       	movw	r30, r20
    13c2:	cb 01       	movw	r24, r22
    13c4:	19 a2       	std	Y+33, r1	; 0x21
    13c6:	22 30       	cpi	r18, 0x02	; 2
    13c8:	08 f4       	brcc	.+2      	; 0x13cc <_ZN5Print11printNumberEmh+0x32>
    13ca:	2a e0       	ldi	r18, 0x0A	; 10
    13cc:	8e 01       	movw	r16, r28
    13ce:	0f 5d       	subi	r16, 0xDF	; 223
    13d0:	1f 4f       	sbci	r17, 0xFF	; 255
    13d2:	82 2e       	mov	r8, r18
    13d4:	91 2c       	mov	r9, r1
    13d6:	a1 2c       	mov	r10, r1
    13d8:	b1 2c       	mov	r11, r1
    13da:	bf 01       	movw	r22, r30
    13dc:	a5 01       	movw	r20, r10
    13de:	94 01       	movw	r18, r8
    13e0:	0e 94 17 12 	call	0x242e	; 0x242e <__udivmodsi4>
    13e4:	f9 01       	movw	r30, r18
    13e6:	ca 01       	movw	r24, r20
    13e8:	01 50       	subi	r16, 0x01	; 1
    13ea:	11 09       	sbc	r17, r1
    13ec:	6a 30       	cpi	r22, 0x0A	; 10
    13ee:	10 f4       	brcc	.+4      	; 0x13f4 <_ZN5Print11printNumberEmh+0x5a>
    13f0:	60 5d       	subi	r22, 0xD0	; 208
    13f2:	01 c0       	rjmp	.+2      	; 0x13f6 <_ZN5Print11printNumberEmh+0x5c>
    13f4:	69 5c       	subi	r22, 0xC9	; 201
    13f6:	d8 01       	movw	r26, r16
    13f8:	6c 93       	st	X, r22
    13fa:	23 2b       	or	r18, r19
    13fc:	24 2b       	or	r18, r20
    13fe:	25 2b       	or	r18, r21
    1400:	61 f7       	brne	.-40     	; 0x13da <_ZN5Print11printNumberEmh+0x40>
    1402:	b8 01       	movw	r22, r16
    1404:	c7 01       	movw	r24, r14
    1406:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN5Print5writeEPKc>
    140a:	a1 96       	adiw	r28, 0x21	; 33
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	0f 91       	pop	r16
    141e:	ff 90       	pop	r15
    1420:	ef 90       	pop	r14
    1422:	bf 90       	pop	r11
    1424:	af 90       	pop	r10
    1426:	9f 90       	pop	r9
    1428:	8f 90       	pop	r8
    142a:	08 95       	ret

0000142c <_ZN5Print5printEmi>:
    142c:	21 15       	cp	r18, r1
    142e:	31 05       	cpc	r19, r1
    1430:	41 f4       	brne	.+16     	; 0x1442 <_ZN5Print5printEmi+0x16>
    1432:	dc 01       	movw	r26, r24
    1434:	ed 91       	ld	r30, X+
    1436:	fc 91       	ld	r31, X
    1438:	01 90       	ld	r0, Z+
    143a:	f0 81       	ld	r31, Z
    143c:	e0 2d       	mov	r30, r0
    143e:	64 2f       	mov	r22, r20
    1440:	09 94       	ijmp
    1442:	0c 94 cd 09 	jmp	0x139a	; 0x139a <_ZN5Print11printNumberEmh>

00001446 <_ZN5Print5printEji>:
    1446:	9a 01       	movw	r18, r20
    1448:	ab 01       	movw	r20, r22
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	0c 94 16 0a 	jmp	0x142c	; 0x142c <_ZN5Print5printEmi>

00001452 <_ZN5Print7printlnEji>:
    1452:	0f 93       	push	r16
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	ec 01       	movw	r28, r24
    145c:	0e 94 23 0a 	call	0x1446	; 0x1446 <_ZN5Print5printEji>
    1460:	8c 01       	movw	r16, r24
    1462:	ce 01       	movw	r24, r28
    1464:	0e 94 a5 09 	call	0x134a	; 0x134a <_ZN5Print7printlnEv>
    1468:	80 0f       	add	r24, r16
    146a:	91 1f       	adc	r25, r17
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	1f 91       	pop	r17
    1472:	0f 91       	pop	r16
    1474:	08 95       	ret

00001476 <_ZN5Print5printEli>:
    1476:	cf 92       	push	r12
    1478:	df 92       	push	r13
    147a:	ef 92       	push	r14
    147c:	ff 92       	push	r15
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	21 15       	cp	r18, r1
    1488:	31 05       	cpc	r19, r1
    148a:	81 f4       	brne	.+32     	; 0x14ac <_ZN5Print5printEli+0x36>
    148c:	dc 01       	movw	r26, r24
    148e:	ed 91       	ld	r30, X+
    1490:	fc 91       	ld	r31, X
    1492:	01 90       	ld	r0, Z+
    1494:	f0 81       	ld	r31, Z
    1496:	e0 2d       	mov	r30, r0
    1498:	64 2f       	mov	r22, r20
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	1f 91       	pop	r17
    14a0:	0f 91       	pop	r16
    14a2:	ff 90       	pop	r15
    14a4:	ef 90       	pop	r14
    14a6:	df 90       	pop	r13
    14a8:	cf 90       	pop	r12
    14aa:	09 94       	ijmp
    14ac:	2a 30       	cpi	r18, 0x0A	; 10
    14ae:	31 05       	cpc	r19, r1
    14b0:	01 f5       	brne	.+64     	; 0x14f2 <_ZN5Print5printEli+0x7c>
    14b2:	77 ff       	sbrs	r23, 7
    14b4:	1d c0       	rjmp	.+58     	; 0x14f0 <_ZN5Print5printEli+0x7a>
    14b6:	6a 01       	movw	r12, r20
    14b8:	7b 01       	movw	r14, r22
    14ba:	ec 01       	movw	r28, r24
    14bc:	6d e2       	ldi	r22, 0x2D	; 45
    14be:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN5Print5printEc>
    14c2:	8c 01       	movw	r16, r24
    14c4:	44 27       	eor	r20, r20
    14c6:	55 27       	eor	r21, r21
    14c8:	ba 01       	movw	r22, r20
    14ca:	4c 19       	sub	r20, r12
    14cc:	5d 09       	sbc	r21, r13
    14ce:	6e 09       	sbc	r22, r14
    14d0:	7f 09       	sbc	r23, r15
    14d2:	2a e0       	ldi	r18, 0x0A	; 10
    14d4:	ce 01       	movw	r24, r28
    14d6:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN5Print11printNumberEmh>
    14da:	80 0f       	add	r24, r16
    14dc:	91 1f       	adc	r25, r17
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	1f 91       	pop	r17
    14e4:	0f 91       	pop	r16
    14e6:	ff 90       	pop	r15
    14e8:	ef 90       	pop	r14
    14ea:	df 90       	pop	r13
    14ec:	cf 90       	pop	r12
    14ee:	08 95       	ret
    14f0:	2a e0       	ldi	r18, 0x0A	; 10
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	1f 91       	pop	r17
    14f8:	0f 91       	pop	r16
    14fa:	ff 90       	pop	r15
    14fc:	ef 90       	pop	r14
    14fe:	df 90       	pop	r13
    1500:	cf 90       	pop	r12
    1502:	0c 94 cd 09 	jmp	0x139a	; 0x139a <_ZN5Print11printNumberEmh>

00001506 <_ZN5Print5printEii>:
    1506:	9a 01       	movw	r18, r20
    1508:	ab 01       	movw	r20, r22
    150a:	77 0f       	add	r23, r23
    150c:	66 0b       	sbc	r22, r22
    150e:	77 0b       	sbc	r23, r23
    1510:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <_ZN5Print5printEli>

00001514 <_ZN5Print7printlnEii>:
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	ec 01       	movw	r28, r24
    151e:	0e 94 83 0a 	call	0x1506	; 0x1506 <_ZN5Print5printEii>
    1522:	8c 01       	movw	r16, r24
    1524:	ce 01       	movw	r24, r28
    1526:	0e 94 a5 09 	call	0x134a	; 0x134a <_ZN5Print7printlnEv>
    152a:	80 0f       	add	r24, r16
    152c:	91 1f       	adc	r25, r17
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	1f 91       	pop	r17
    1534:	0f 91       	pop	r16
    1536:	08 95       	ret

00001538 <_ZN5Print10printFloatEdh>:
    1538:	7f 92       	push	r7
    153a:	8f 92       	push	r8
    153c:	9f 92       	push	r9
    153e:	af 92       	push	r10
    1540:	bf 92       	push	r11
    1542:	cf 92       	push	r12
    1544:	df 92       	push	r13
    1546:	ef 92       	push	r14
    1548:	ff 92       	push	r15
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	8c 01       	movw	r16, r24
    1554:	6a 01       	movw	r12, r20
    1556:	7b 01       	movw	r14, r22
    1558:	72 2e       	mov	r7, r18
    155a:	9a 01       	movw	r18, r20
    155c:	ab 01       	movw	r20, r22
    155e:	c7 01       	movw	r24, r14
    1560:	b6 01       	movw	r22, r12
    1562:	0e 94 12 12 	call	0x2424	; 0x2424 <__unordsf2>
    1566:	88 23       	and	r24, r24
    1568:	19 f0       	breq	.+6      	; 0x1570 <_ZN5Print10printFloatEdh+0x38>
    156a:	62 e2       	ldi	r22, 0x22	; 34
    156c:	72 e0       	ldi	r23, 0x02	; 2
    156e:	27 c0       	rjmp	.+78     	; 0x15be <_ZN5Print10printFloatEdh+0x86>
    1570:	46 01       	movw	r8, r12
    1572:	57 01       	movw	r10, r14
    1574:	e8 94       	clt
    1576:	b7 f8       	bld	r11, 7
    1578:	2f ef       	ldi	r18, 0xFF	; 255
    157a:	3f ef       	ldi	r19, 0xFF	; 255
    157c:	4f e7       	ldi	r20, 0x7F	; 127
    157e:	5f e7       	ldi	r21, 0x7F	; 127
    1580:	c5 01       	movw	r24, r10
    1582:	b4 01       	movw	r22, r8
    1584:	0e 94 12 12 	call	0x2424	; 0x2424 <__unordsf2>
    1588:	81 11       	cpse	r24, r1
    158a:	0d c0       	rjmp	.+26     	; 0x15a6 <_ZN5Print10printFloatEdh+0x6e>
    158c:	2f ef       	ldi	r18, 0xFF	; 255
    158e:	3f ef       	ldi	r19, 0xFF	; 255
    1590:	4f e7       	ldi	r20, 0x7F	; 127
    1592:	5f e7       	ldi	r21, 0x7F	; 127
    1594:	c5 01       	movw	r24, r10
    1596:	b4 01       	movw	r22, r8
    1598:	0e 94 0d 12 	call	0x241a	; 0x241a <__cmpsf2>
    159c:	18 16       	cp	r1, r24
    159e:	1c f4       	brge	.+6      	; 0x15a6 <_ZN5Print10printFloatEdh+0x6e>
    15a0:	66 e2       	ldi	r22, 0x26	; 38
    15a2:	72 e0       	ldi	r23, 0x02	; 2
    15a4:	0c c0       	rjmp	.+24     	; 0x15be <_ZN5Print10printFloatEdh+0x86>
    15a6:	2f ef       	ldi	r18, 0xFF	; 255
    15a8:	3f ef       	ldi	r19, 0xFF	; 255
    15aa:	4f e7       	ldi	r20, 0x7F	; 127
    15ac:	5f e4       	ldi	r21, 0x4F	; 79
    15ae:	c7 01       	movw	r24, r14
    15b0:	b6 01       	movw	r22, r12
    15b2:	0e 94 c0 06 	call	0xd80	; 0xd80 <__gesf2>
    15b6:	18 16       	cp	r1, r24
    15b8:	94 f4       	brge	.+36     	; 0x15de <_ZN5Print10printFloatEdh+0xa6>
    15ba:	6a e2       	ldi	r22, 0x2A	; 42
    15bc:	72 e0       	ldi	r23, 0x02	; 2
    15be:	c8 01       	movw	r24, r16
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	ff 90       	pop	r15
    15ca:	ef 90       	pop	r14
    15cc:	df 90       	pop	r13
    15ce:	cf 90       	pop	r12
    15d0:	bf 90       	pop	r11
    15d2:	af 90       	pop	r10
    15d4:	9f 90       	pop	r9
    15d6:	8f 90       	pop	r8
    15d8:	7f 90       	pop	r7
    15da:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <_ZN5Print5writeEPKc>
    15de:	2f ef       	ldi	r18, 0xFF	; 255
    15e0:	3f ef       	ldi	r19, 0xFF	; 255
    15e2:	4f e7       	ldi	r20, 0x7F	; 127
    15e4:	5f ec       	ldi	r21, 0xCF	; 207
    15e6:	c7 01       	movw	r24, r14
    15e8:	b6 01       	movw	r22, r12
    15ea:	0e 94 0d 12 	call	0x241a	; 0x241a <__cmpsf2>
    15ee:	87 fd       	sbrc	r24, 7
    15f0:	e4 cf       	rjmp	.-56     	; 0x15ba <_ZN5Print10printFloatEdh+0x82>
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	a9 01       	movw	r20, r18
    15f8:	c7 01       	movw	r24, r14
    15fa:	b6 01       	movw	r22, r12
    15fc:	0e 94 0d 12 	call	0x241a	; 0x241a <__cmpsf2>
    1600:	87 ff       	sbrs	r24, 7
    1602:	0a c0       	rjmp	.+20     	; 0x1618 <_ZN5Print10printFloatEdh+0xe0>
    1604:	6d e2       	ldi	r22, 0x2D	; 45
    1606:	c8 01       	movw	r24, r16
    1608:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN5Print5printEc>
    160c:	ec 01       	movw	r28, r24
    160e:	f7 fa       	bst	r15, 7
    1610:	f0 94       	com	r15
    1612:	f7 f8       	bld	r15, 7
    1614:	f0 94       	com	r15
    1616:	02 c0       	rjmp	.+4      	; 0x161c <_ZN5Print10printFloatEdh+0xe4>
    1618:	c0 e0       	ldi	r28, 0x00	; 0
    161a:	d0 e0       	ldi	r29, 0x00	; 0
    161c:	b1 2c       	mov	r11, r1
    161e:	60 e0       	ldi	r22, 0x00	; 0
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	9f e3       	ldi	r25, 0x3F	; 63
    1626:	7b 14       	cp	r7, r11
    1628:	41 f0       	breq	.+16     	; 0x163a <_ZN5Print10printFloatEdh+0x102>
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	40 e2       	ldi	r20, 0x20	; 32
    1630:	51 e4       	ldi	r21, 0x41	; 65
    1632:	0e 94 8a 05 	call	0xb14	; 0xb14 <__divsf3>
    1636:	b3 94       	inc	r11
    1638:	f6 cf       	rjmp	.-20     	; 0x1626 <_ZN5Print10printFloatEdh+0xee>
    163a:	a7 01       	movw	r20, r14
    163c:	96 01       	movw	r18, r12
    163e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__addsf3>
    1642:	6b 01       	movw	r12, r22
    1644:	7c 01       	movw	r14, r24
    1646:	0e 94 03 06 	call	0xc06	; 0xc06 <__fixunssfsi>
    164a:	4b 01       	movw	r8, r22
    164c:	5c 01       	movw	r10, r24
    164e:	2a e0       	ldi	r18, 0x0A	; 10
    1650:	ab 01       	movw	r20, r22
    1652:	bc 01       	movw	r22, r24
    1654:	c8 01       	movw	r24, r16
    1656:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN5Print11printNumberEmh>
    165a:	c8 0f       	add	r28, r24
    165c:	d9 1f       	adc	r29, r25
    165e:	77 20       	and	r7, r7
    1660:	b9 f1       	breq	.+110    	; 0x16d0 <_ZN5Print10printFloatEdh+0x198>
    1662:	c5 01       	movw	r24, r10
    1664:	b4 01       	movw	r22, r8
    1666:	0e 94 32 06 	call	0xc64	; 0xc64 <__floatunsisf>
    166a:	9b 01       	movw	r18, r22
    166c:	ac 01       	movw	r20, r24
    166e:	c7 01       	movw	r24, r14
    1670:	b6 01       	movw	r22, r12
    1672:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__subsf3>
    1676:	6b 01       	movw	r12, r22
    1678:	7c 01       	movw	r14, r24
    167a:	6e e2       	ldi	r22, 0x2E	; 46
    167c:	c8 01       	movw	r24, r16
    167e:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN5Print5printEc>
    1682:	c8 0f       	add	r28, r24
    1684:	d9 1f       	adc	r29, r25
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e2       	ldi	r20, 0x20	; 32
    168c:	51 e4       	ldi	r21, 0x41	; 65
    168e:	c7 01       	movw	r24, r14
    1690:	b6 01       	movw	r22, r12
    1692:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__mulsf3>
    1696:	4b 01       	movw	r8, r22
    1698:	5c 01       	movw	r10, r24
    169a:	0e 94 03 06 	call	0xc06	; 0xc06 <__fixunssfsi>
    169e:	6b 01       	movw	r12, r22
    16a0:	7c 01       	movw	r14, r24
    16a2:	4a e0       	ldi	r20, 0x0A	; 10
    16a4:	50 e0       	ldi	r21, 0x00	; 0
    16a6:	c8 01       	movw	r24, r16
    16a8:	0e 94 23 0a 	call	0x1446	; 0x1446 <_ZN5Print5printEji>
    16ac:	c8 0f       	add	r28, r24
    16ae:	d9 1f       	adc	r29, r25
    16b0:	b6 01       	movw	r22, r12
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 94 32 06 	call	0xc64	; 0xc64 <__floatunsisf>
    16ba:	9b 01       	movw	r18, r22
    16bc:	ac 01       	movw	r20, r24
    16be:	c5 01       	movw	r24, r10
    16c0:	b4 01       	movw	r22, r8
    16c2:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__subsf3>
    16c6:	6b 01       	movw	r12, r22
    16c8:	7c 01       	movw	r14, r24
    16ca:	7a 94       	dec	r7
    16cc:	71 10       	cpse	r7, r1
    16ce:	db cf       	rjmp	.-74     	; 0x1686 <_ZN5Print10printFloatEdh+0x14e>
    16d0:	ce 01       	movw	r24, r28
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	ff 90       	pop	r15
    16dc:	ef 90       	pop	r14
    16de:	df 90       	pop	r13
    16e0:	cf 90       	pop	r12
    16e2:	bf 90       	pop	r11
    16e4:	af 90       	pop	r10
    16e6:	9f 90       	pop	r9
    16e8:	8f 90       	pop	r8
    16ea:	7f 90       	pop	r7
    16ec:	08 95       	ret

000016ee <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    16ee:	0f 93       	push	r16
    16f0:	1f 93       	push	r17
    16f2:	cf 93       	push	r28
    16f4:	df 93       	push	r29
    16f6:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    16f8:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_ZN5Print10printFloatEdh>
    16fc:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    16fe:	ce 01       	movw	r24, r28
    1700:	0e 94 a5 09 	call	0x134a	; 0x134a <_ZN5Print7printlnEv>
  return n;
}
    1704:	80 0f       	add	r24, r16
    1706:	91 1f       	adc	r25, r17
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	08 95       	ret

00001712 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1712:	1f 92       	push	r1
    1714:	0f 92       	push	r0
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	0f 92       	push	r0
    171a:	11 24       	eor	r1, r1
    171c:	2f 93       	push	r18
    171e:	3f 93       	push	r19
    1720:	8f 93       	push	r24
    1722:	9f 93       	push	r25
    1724:	af 93       	push	r26
    1726:	bf 93       	push	r27
    1728:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <timer0_millis>
    172c:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <timer0_millis+0x1>
    1730:	a0 91 63 03 	lds	r26, 0x0363	; 0x800363 <timer0_millis+0x2>
    1734:	b0 91 64 03 	lds	r27, 0x0364	; 0x800364 <timer0_millis+0x3>
    1738:	30 91 60 03 	lds	r19, 0x0360	; 0x800360 <timer0_fract>
    173c:	23 e0       	ldi	r18, 0x03	; 3
    173e:	23 0f       	add	r18, r19
    1740:	2d 37       	cpi	r18, 0x7D	; 125
    1742:	20 f4       	brcc	.+8      	; 0x174c <__vector_16+0x3a>
    1744:	01 96       	adiw	r24, 0x01	; 1
    1746:	a1 1d       	adc	r26, r1
    1748:	b1 1d       	adc	r27, r1
    174a:	05 c0       	rjmp	.+10     	; 0x1756 <__vector_16+0x44>
    174c:	26 e8       	ldi	r18, 0x86	; 134
    174e:	23 0f       	add	r18, r19
    1750:	02 96       	adiw	r24, 0x02	; 2
    1752:	a1 1d       	adc	r26, r1
    1754:	b1 1d       	adc	r27, r1
    1756:	20 93 60 03 	sts	0x0360, r18	; 0x800360 <timer0_fract>
    175a:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <timer0_millis>
    175e:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <timer0_millis+0x1>
    1762:	a0 93 63 03 	sts	0x0363, r26	; 0x800363 <timer0_millis+0x2>
    1766:	b0 93 64 03 	sts	0x0364, r27	; 0x800364 <timer0_millis+0x3>
    176a:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <timer0_overflow_count>
    176e:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <timer0_overflow_count+0x1>
    1772:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <timer0_overflow_count+0x2>
    1776:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <timer0_overflow_count+0x3>
    177a:	01 96       	adiw	r24, 0x01	; 1
    177c:	a1 1d       	adc	r26, r1
    177e:	b1 1d       	adc	r27, r1
    1780:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <timer0_overflow_count>
    1784:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <timer0_overflow_count+0x1>
    1788:	a0 93 67 03 	sts	0x0367, r26	; 0x800367 <timer0_overflow_count+0x2>
    178c:	b0 93 68 03 	sts	0x0368, r27	; 0x800368 <timer0_overflow_count+0x3>
    1790:	bf 91       	pop	r27
    1792:	af 91       	pop	r26
    1794:	9f 91       	pop	r25
    1796:	8f 91       	pop	r24
    1798:	3f 91       	pop	r19
    179a:	2f 91       	pop	r18
    179c:	0f 90       	pop	r0
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	0f 90       	pop	r0
    17a2:	1f 90       	pop	r1
    17a4:	18 95       	reti

000017a6 <millis>:
    17a6:	2f b7       	in	r18, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	60 91 61 03 	lds	r22, 0x0361	; 0x800361 <timer0_millis>
    17ae:	70 91 62 03 	lds	r23, 0x0362	; 0x800362 <timer0_millis+0x1>
    17b2:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <timer0_millis+0x2>
    17b6:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <timer0_millis+0x3>
    17ba:	2f bf       	out	0x3f, r18	; 63
    17bc:	08 95       	ret

000017be <micros>:
    17be:	3f b7       	in	r19, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <timer0_overflow_count>
    17c6:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <timer0_overflow_count+0x1>
    17ca:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <timer0_overflow_count+0x2>
    17ce:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <timer0_overflow_count+0x3>
    17d2:	26 b5       	in	r18, 0x26	; 38
    17d4:	a8 9b       	sbis	0x15, 0	; 21
    17d6:	05 c0       	rjmp	.+10     	; 0x17e2 <micros+0x24>
    17d8:	2f 3f       	cpi	r18, 0xFF	; 255
    17da:	19 f0       	breq	.+6      	; 0x17e2 <micros+0x24>
    17dc:	01 96       	adiw	r24, 0x01	; 1
    17de:	a1 1d       	adc	r26, r1
    17e0:	b1 1d       	adc	r27, r1
    17e2:	3f bf       	out	0x3f, r19	; 63
    17e4:	ba 2f       	mov	r27, r26
    17e6:	a9 2f       	mov	r26, r25
    17e8:	98 2f       	mov	r25, r24
    17ea:	88 27       	eor	r24, r24
    17ec:	82 0f       	add	r24, r18
    17ee:	91 1d       	adc	r25, r1
    17f0:	a1 1d       	adc	r26, r1
    17f2:	b1 1d       	adc	r27, r1
    17f4:	bc 01       	movw	r22, r24
    17f6:	cd 01       	movw	r24, r26
    17f8:	42 e0       	ldi	r20, 0x02	; 2
    17fa:	66 0f       	add	r22, r22
    17fc:	77 1f       	adc	r23, r23
    17fe:	88 1f       	adc	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	4a 95       	dec	r20
    1804:	d1 f7       	brne	.-12     	; 0x17fa <micros+0x3c>
    1806:	08 95       	ret

00001808 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1808:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    180a:	84 b5       	in	r24, 0x24	; 36
    180c:	82 60       	ori	r24, 0x02	; 2
    180e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1810:	84 b5       	in	r24, 0x24	; 36
    1812:	81 60       	ori	r24, 0x01	; 1
    1814:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1816:	85 b5       	in	r24, 0x25	; 37
    1818:	82 60       	ori	r24, 0x02	; 2
    181a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    181c:	85 b5       	in	r24, 0x25	; 37
    181e:	81 60       	ori	r24, 0x01	; 1
    1820:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1822:	ee e6       	ldi	r30, 0x6E	; 110
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	81 60       	ori	r24, 0x01	; 1
    182a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    182c:	e1 e8       	ldi	r30, 0x81	; 129
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1832:	80 81       	ld	r24, Z
    1834:	82 60       	ori	r24, 0x02	; 2
    1836:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1838:	80 81       	ld	r24, Z
    183a:	81 60       	ori	r24, 0x01	; 1
    183c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    183e:	e0 e8       	ldi	r30, 0x80	; 128
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	81 60       	ori	r24, 0x01	; 1
    1846:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1848:	e1 eb       	ldi	r30, 0xB1	; 177
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	84 60       	ori	r24, 0x04	; 4
    1850:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1852:	e0 eb       	ldi	r30, 0xB0	; 176
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	81 60       	ori	r24, 0x01	; 1
    185a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    185c:	ea e7       	ldi	r30, 0x7A	; 122
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	84 60       	ori	r24, 0x04	; 4
    1864:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1866:	80 81       	ld	r24, Z
    1868:	82 60       	ori	r24, 0x02	; 2
    186a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    186c:	80 81       	ld	r24, Z
    186e:	81 60       	ori	r24, 0x01	; 1
    1870:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1872:	80 81       	ld	r24, Z
    1874:	80 68       	ori	r24, 0x80	; 128
    1876:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1878:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    187c:	08 95       	ret

0000187e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    187e:	83 30       	cpi	r24, 0x03	; 3
    1880:	81 f0       	breq	.+32     	; 0x18a2 <turnOffPWM+0x24>
    1882:	28 f4       	brcc	.+10     	; 0x188e <turnOffPWM+0x10>
    1884:	81 30       	cpi	r24, 0x01	; 1
    1886:	99 f0       	breq	.+38     	; 0x18ae <turnOffPWM+0x30>
    1888:	82 30       	cpi	r24, 0x02	; 2
    188a:	a1 f0       	breq	.+40     	; 0x18b4 <turnOffPWM+0x36>
    188c:	08 95       	ret
    188e:	87 30       	cpi	r24, 0x07	; 7
    1890:	a9 f0       	breq	.+42     	; 0x18bc <turnOffPWM+0x3e>
    1892:	88 30       	cpi	r24, 0x08	; 8
    1894:	b9 f0       	breq	.+46     	; 0x18c4 <turnOffPWM+0x46>
    1896:	84 30       	cpi	r24, 0x04	; 4
    1898:	d1 f4       	brne	.+52     	; 0x18ce <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    189a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    189e:	8f 7d       	andi	r24, 0xDF	; 223
    18a0:	03 c0       	rjmp	.+6      	; 0x18a8 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    18a2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    18a6:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    18a8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    18ac:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    18ae:	84 b5       	in	r24, 0x24	; 36
    18b0:	8f 77       	andi	r24, 0x7F	; 127
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    18b4:	84 b5       	in	r24, 0x24	; 36
    18b6:	8f 7d       	andi	r24, 0xDF	; 223
    18b8:	84 bd       	out	0x24, r24	; 36
    18ba:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    18bc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    18c0:	8f 77       	andi	r24, 0x7F	; 127
    18c2:	03 c0       	rjmp	.+6      	; 0x18ca <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    18c4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    18c8:	8f 7d       	andi	r24, 0xDF	; 223
    18ca:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    18ce:	08 95       	ret

000018d0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	fc 01       	movw	r30, r24
    18d8:	ed 5e       	subi	r30, 0xED	; 237
    18da:	fe 4f       	sbci	r31, 0xFE	; 254
    18dc:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    18de:	fc 01       	movw	r30, r24
    18e0:	e9 5d       	subi	r30, 0xD9	; 217
    18e2:	fe 4f       	sbci	r31, 0xFE	; 254
    18e4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    18e6:	88 23       	and	r24, r24
    18e8:	61 f1       	breq	.+88     	; 0x1942 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	fc 01       	movw	r30, r24
    18f2:	eb 5b       	subi	r30, 0xBB	; 187
    18f4:	fe 4f       	sbci	r31, 0xFE	; 254
    18f6:	c5 91       	lpm	r28, Z+
    18f8:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    18fa:	fc 01       	movw	r30, r24
    18fc:	e5 5c       	subi	r30, 0xC5	; 197
    18fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1900:	a5 91       	lpm	r26, Z+
    1902:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1904:	61 11       	cpse	r22, r1
    1906:	09 c0       	rjmp	.+18     	; 0x191a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1908:	9f b7       	in	r25, 0x3f	; 63
                cli();
    190a:	f8 94       	cli
		*reg &= ~bit;
    190c:	88 81       	ld	r24, Y
    190e:	20 95       	com	r18
    1910:	82 23       	and	r24, r18
    1912:	88 83       	st	Y, r24
		*out &= ~bit;
    1914:	ec 91       	ld	r30, X
    1916:	2e 23       	and	r18, r30
    1918:	0b c0       	rjmp	.+22     	; 0x1930 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    191a:	62 30       	cpi	r22, 0x02	; 2
    191c:	61 f4       	brne	.+24     	; 0x1936 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    191e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1920:	f8 94       	cli
		*reg &= ~bit;
    1922:	88 81       	ld	r24, Y
    1924:	32 2f       	mov	r19, r18
    1926:	30 95       	com	r19
    1928:	83 23       	and	r24, r19
    192a:	88 83       	st	Y, r24
		*out |= bit;
    192c:	ec 91       	ld	r30, X
    192e:	2e 2b       	or	r18, r30
    1930:	2c 93       	st	X, r18
		SREG = oldSREG;
    1932:	9f bf       	out	0x3f, r25	; 63
    1934:	06 c0       	rjmp	.+12     	; 0x1942 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1936:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1938:	f8 94       	cli
		*reg |= bit;
    193a:	e8 81       	ld	r30, Y
    193c:	2e 2b       	or	r18, r30
    193e:	28 83       	st	Y, r18
		SREG = oldSREG;
    1940:	8f bf       	out	0x3f, r24	; 63
	}
}
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	08 95       	ret

00001948 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1948:	1f 93       	push	r17
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	f9 01       	movw	r30, r18
    1954:	e1 50       	subi	r30, 0x01	; 1
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    195a:	f9 01       	movw	r30, r18
    195c:	ed 5e       	subi	r30, 0xED	; 237
    195e:	fe 4f       	sbci	r31, 0xFE	; 254
    1960:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1962:	f9 01       	movw	r30, r18
    1964:	e9 5d       	subi	r30, 0xD9	; 217
    1966:	fe 4f       	sbci	r31, 0xFE	; 254
    1968:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    196a:	cc 23       	and	r28, r28
    196c:	c1 f0       	breq	.+48     	; 0x199e <digitalWrite+0x56>
    196e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1970:	81 11       	cpse	r24, r1
    1972:	0e 94 3f 0c 	call	0x187e	; 0x187e <turnOffPWM>

	out = portOutputRegister(port);
    1976:	ec 2f       	mov	r30, r28
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	ee 0f       	add	r30, r30
    197c:	ff 1f       	adc	r31, r31
    197e:	e5 5c       	subi	r30, 0xC5	; 197
    1980:	fe 4f       	sbci	r31, 0xFE	; 254
    1982:	a5 91       	lpm	r26, Z+
    1984:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1986:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1988:	f8 94       	cli

	if (val == LOW) {
    198a:	11 11       	cpse	r17, r1
    198c:	04 c0       	rjmp	.+8      	; 0x1996 <digitalWrite+0x4e>
		*out &= ~bit;
    198e:	8c 91       	ld	r24, X
    1990:	d0 95       	com	r29
    1992:	d8 23       	and	r29, r24
    1994:	02 c0       	rjmp	.+4      	; 0x199a <digitalWrite+0x52>
	} else {
		*out |= bit;
    1996:	ec 91       	ld	r30, X
    1998:	de 2b       	or	r29, r30
    199a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    199c:	9f bf       	out	0x3f, r25	; 63
}
    199e:	df 91       	pop	r29
    19a0:	cf 91       	pop	r28
    19a2:	1f 91       	pop	r17
    19a4:	08 95       	ret

000019a6 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    19a6:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <_ZN7TwoWire14rxBufferLengthE>
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	20 91 9e 03 	lds	r18, 0x039E	; 0x80039e <_ZN7TwoWire13rxBufferIndexE>
    19b0:	82 1b       	sub	r24, r18
    19b2:	91 09       	sbc	r25, r1
    19b4:	08 95       	ret

000019b6 <_ZN7TwoWire4readEv>:
    19b6:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <_ZN7TwoWire13rxBufferIndexE>
    19ba:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <_ZN7TwoWire14rxBufferLengthE>
    19be:	98 17       	cp	r25, r24
    19c0:	50 f4       	brcc	.+20     	; 0x19d6 <_ZN7TwoWire4readEv+0x20>
    19c2:	e9 2f       	mov	r30, r25
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	e1 56       	subi	r30, 0x61	; 97
    19c8:	fc 4f       	sbci	r31, 0xFC	; 252
    19ca:	20 81       	ld	r18, Z
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	9f 5f       	subi	r25, 0xFF	; 255
    19d0:	90 93 9e 03 	sts	0x039E, r25	; 0x80039e <_ZN7TwoWire13rxBufferIndexE>
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <_ZN7TwoWire4readEv+0x24>
    19d6:	2f ef       	ldi	r18, 0xFF	; 255
    19d8:	3f ef       	ldi	r19, 0xFF	; 255
    19da:	c9 01       	movw	r24, r18
    19dc:	08 95       	ret

000019de <_ZN7TwoWire4peekEv>:
    19de:	e0 91 9e 03 	lds	r30, 0x039E	; 0x80039e <_ZN7TwoWire13rxBufferIndexE>
    19e2:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <_ZN7TwoWire14rxBufferLengthE>
    19e6:	e8 17       	cp	r30, r24
    19e8:	30 f4       	brcc	.+12     	; 0x19f6 <_ZN7TwoWire4peekEv+0x18>
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	e1 56       	subi	r30, 0x61	; 97
    19ee:	fc 4f       	sbci	r31, 0xFC	; 252
    19f0:	80 81       	ld	r24, Z
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	08 95       	ret
    19f6:	8f ef       	ldi	r24, 0xFF	; 255
    19f8:	9f ef       	ldi	r25, 0xFF	; 255
    19fa:	08 95       	ret

000019fc <_ZN7TwoWire5flushEv>:
    19fc:	08 95       	ret

000019fe <_ZN7TwoWire16onReceiveServiceEPhi>:
    19fe:	cf 93       	push	r28
    1a00:	df 93       	push	r29
    1a02:	ec 01       	movw	r28, r24
    1a04:	e0 91 75 03 	lds	r30, 0x0375	; 0x800375 <_ZN7TwoWire14user_onReceiveE>
    1a08:	f0 91 76 03 	lds	r31, 0x0376	; 0x800376 <_ZN7TwoWire14user_onReceiveE+0x1>
    1a0c:	30 97       	sbiw	r30, 0x00	; 0
    1a0e:	f1 f0       	breq	.+60     	; 0x1a4c <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1a10:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <_ZN7TwoWire13rxBufferIndexE>
    1a14:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <_ZN7TwoWire14rxBufferLengthE>
    1a18:	98 17       	cp	r25, r24
    1a1a:	c0 f0       	brcs	.+48     	; 0x1a4c <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	29 2f       	mov	r18, r25
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	26 17       	cp	r18, r22
    1a24:	37 07       	cpc	r19, r23
    1a26:	54 f4       	brge	.+20     	; 0x1a3c <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1a28:	de 01       	movw	r26, r28
    1a2a:	a2 0f       	add	r26, r18
    1a2c:	b3 1f       	adc	r27, r19
    1a2e:	4c 91       	ld	r20, X
    1a30:	d9 01       	movw	r26, r18
    1a32:	a1 56       	subi	r26, 0x61	; 97
    1a34:	bc 4f       	sbci	r27, 0xFC	; 252
    1a36:	4c 93       	st	X, r20
    1a38:	9f 5f       	subi	r25, 0xFF	; 255
    1a3a:	f1 cf       	rjmp	.-30     	; 0x1a1e <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1a3c:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <_ZN7TwoWire13rxBufferIndexE>
    1a40:	60 93 9d 03 	sts	0x039D, r22	; 0x80039d <_ZN7TwoWire14rxBufferLengthE>
    1a44:	cb 01       	movw	r24, r22
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	09 94       	ijmp
    1a4c:	df 91       	pop	r29
    1a4e:	cf 91       	pop	r28
    1a50:	08 95       	ret

00001a52 <_ZN7TwoWire16onRequestServiceEv>:
    1a52:	e0 91 77 03 	lds	r30, 0x0377	; 0x800377 <_ZN7TwoWire14user_onRequestE>
    1a56:	f0 91 78 03 	lds	r31, 0x0378	; 0x800378 <_ZN7TwoWire14user_onRequestE+0x1>
    1a5a:	30 97       	sbiw	r30, 0x00	; 0
    1a5c:	29 f0       	breq	.+10     	; 0x1a68 <_ZN7TwoWire16onRequestServiceEv+0x16>
    1a5e:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <_ZN7TwoWire13txBufferIndexE>
    1a62:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <_ZN7TwoWire14txBufferLengthE>
    1a66:	09 94       	ijmp
    1a68:	08 95       	ret

00001a6a <_ZN7TwoWire5writeEPKhj>:
    1a6a:	cf 92       	push	r12
    1a6c:	df 92       	push	r13
    1a6e:	ef 92       	push	r14
    1a70:	ff 92       	push	r15
    1a72:	0f 93       	push	r16
    1a74:	1f 93       	push	r17
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	7c 01       	movw	r14, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	8a 01       	movw	r16, r20
    1a80:	20 91 79 03 	lds	r18, 0x0379	; 0x800379 <_ZN7TwoWire12transmittingE>
    1a84:	22 23       	and	r18, r18
    1a86:	89 f0       	breq	.+34     	; 0x1aaa <_ZN7TwoWire5writeEPKhj+0x40>
    1a88:	eb 01       	movw	r28, r22
    1a8a:	6b 01       	movw	r12, r22
    1a8c:	c4 0e       	add	r12, r20
    1a8e:	d5 1e       	adc	r13, r21
    1a90:	cc 15       	cp	r28, r12
    1a92:	dd 05       	cpc	r29, r13
    1a94:	69 f0       	breq	.+26     	; 0x1ab0 <_ZN7TwoWire5writeEPKhj+0x46>
    1a96:	69 91       	ld	r22, Y+
    1a98:	d7 01       	movw	r26, r14
    1a9a:	ed 91       	ld	r30, X+
    1a9c:	fc 91       	ld	r31, X
    1a9e:	01 90       	ld	r0, Z+
    1aa0:	f0 81       	ld	r31, Z
    1aa2:	e0 2d       	mov	r30, r0
    1aa4:	c7 01       	movw	r24, r14
    1aa6:	09 95       	icall
    1aa8:	f3 cf       	rjmp	.-26     	; 0x1a90 <_ZN7TwoWire5writeEPKhj+0x26>
    1aaa:	64 2f       	mov	r22, r20
    1aac:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <twi_transmit>
    1ab0:	c8 01       	movw	r24, r16
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	1f 91       	pop	r17
    1ab8:	0f 91       	pop	r16
    1aba:	ff 90       	pop	r15
    1abc:	ef 90       	pop	r14
    1abe:	df 90       	pop	r13
    1ac0:	cf 90       	pop	r12
    1ac2:	08 95       	ret

00001ac4 <_ZN7TwoWire5writeEh>:
    1ac4:	cf 93       	push	r28
    1ac6:	df 93       	push	r29
    1ac8:	1f 92       	push	r1
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	69 83       	std	Y+1, r22	; 0x01
    1ad0:	20 91 79 03 	lds	r18, 0x0379	; 0x800379 <_ZN7TwoWire12transmittingE>
    1ad4:	22 23       	and	r18, r18
    1ad6:	d1 f0       	breq	.+52     	; 0x1b0c <_ZN7TwoWire5writeEh+0x48>
    1ad8:	20 91 7a 03 	lds	r18, 0x037A	; 0x80037a <_ZN7TwoWire14txBufferLengthE>
    1adc:	20 32       	cpi	r18, 0x20	; 32
    1ade:	40 f0       	brcs	.+16     	; 0x1af0 <_ZN7TwoWire5writeEh+0x2c>
    1ae0:	21 e0       	ldi	r18, 0x01	; 1
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	33 83       	std	Z+3, r19	; 0x03
    1ae8:	22 83       	std	Z+2, r18	; 0x02
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	15 c0       	rjmp	.+42     	; 0x1b1a <_ZN7TwoWire5writeEh+0x56>
    1af0:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <_ZN7TwoWire13txBufferIndexE>
    1af4:	e8 2f       	mov	r30, r24
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	e4 58       	subi	r30, 0x84	; 132
    1afa:	fc 4f       	sbci	r31, 0xFC	; 252
    1afc:	99 81       	ldd	r25, Y+1	; 0x01
    1afe:	90 83       	st	Z, r25
    1b00:	8f 5f       	subi	r24, 0xFF	; 255
    1b02:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <_ZN7TwoWire13txBufferIndexE>
    1b06:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <_ZN7TwoWire14txBufferLengthE>
    1b0a:	05 c0       	rjmp	.+10     	; 0x1b16 <_ZN7TwoWire5writeEh+0x52>
    1b0c:	61 e0       	ldi	r22, 0x01	; 1
    1b0e:	ce 01       	movw	r24, r28
    1b10:	01 96       	adiw	r24, 0x01	; 1
    1b12:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <twi_transmit>
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	0f 90       	pop	r0
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	08 95       	ret

00001b22 <_ZN7TwoWireC1Ev>:
    1b22:	fc 01       	movw	r30, r24
    1b24:	13 82       	std	Z+3, r1	; 0x03
    1b26:	12 82       	std	Z+2, r1	; 0x02
    1b28:	88 ee       	ldi	r24, 0xE8	; 232
    1b2a:	93 e0       	ldi	r25, 0x03	; 3
    1b2c:	a0 e0       	ldi	r26, 0x00	; 0
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	84 83       	std	Z+4, r24	; 0x04
    1b32:	95 83       	std	Z+5, r25	; 0x05
    1b34:	a6 83       	std	Z+6, r26	; 0x06
    1b36:	b7 83       	std	Z+7, r27	; 0x07
    1b38:	82 e3       	ldi	r24, 0x32	; 50
    1b3a:	92 e0       	ldi	r25, 0x02	; 2
    1b3c:	91 83       	std	Z+1, r25	; 0x01
    1b3e:	80 83       	st	Z, r24
    1b40:	08 95       	ret

00001b42 <_ZN7TwoWire5beginEv>:
    1b42:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <_ZN7TwoWire13rxBufferIndexE>
    1b46:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <_ZN7TwoWire14rxBufferLengthE>
    1b4a:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <_ZN7TwoWire13txBufferIndexE>
    1b4e:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <_ZN7TwoWire14txBufferLengthE>
    1b52:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <twi_init>
    1b56:	89 e2       	ldi	r24, 0x29	; 41
    1b58:	9d e0       	ldi	r25, 0x0D	; 13
    1b5a:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <twi_attachSlaveTxEvent>
    1b5e:	8f ef       	ldi	r24, 0xFF	; 255
    1b60:	9c e0       	ldi	r25, 0x0C	; 12
    1b62:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <twi_attachSlaveRxEvent>

00001b66 <_ZN7TwoWire8setClockEm>:
    1b66:	cb 01       	movw	r24, r22
    1b68:	ba 01       	movw	r22, r20
    1b6a:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <twi_setFrequency>

00001b6e <_ZN7TwoWire17beginTransmissionEh>:
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <_ZN7TwoWire12transmittingE>
    1b74:	60 93 9c 03 	sts	0x039C, r22	; 0x80039c <_ZN7TwoWire9txAddressE>
    1b78:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <_ZN7TwoWire13txBufferIndexE>
    1b7c:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <_ZN7TwoWire14txBufferLengthE>
    1b80:	08 95       	ret

00001b82 <_ZN7TwoWire15endTransmissionEh>:
    1b82:	0f 93       	push	r16
    1b84:	06 2f       	mov	r16, r22
    1b86:	21 e0       	ldi	r18, 0x01	; 1
    1b88:	40 91 7a 03 	lds	r20, 0x037A	; 0x80037a <_ZN7TwoWire14txBufferLengthE>
    1b8c:	6c e7       	ldi	r22, 0x7C	; 124
    1b8e:	73 e0       	ldi	r23, 0x03	; 3
    1b90:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <_ZN7TwoWire9txAddressE>
    1b94:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <twi_writeTo>
    1b98:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <_ZN7TwoWire13txBufferIndexE>
    1b9c:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <_ZN7TwoWire14txBufferLengthE>
    1ba0:	10 92 79 03 	sts	0x0379, r1	; 0x800379 <_ZN7TwoWire12transmittingE>
    1ba4:	0f 91       	pop	r16
    1ba6:	08 95       	ret

00001ba8 <_ZN7TwoWire11requestFromEhhmhh>:
    1ba8:	4f 92       	push	r4
    1baa:	5f 92       	push	r5
    1bac:	6f 92       	push	r6
    1bae:	7f 92       	push	r7
    1bb0:	af 92       	push	r10
    1bb2:	bf 92       	push	r11
    1bb4:	cf 92       	push	r12
    1bb6:	ef 92       	push	r14
    1bb8:	ff 92       	push	r15
    1bba:	0f 93       	push	r16
    1bbc:	1f 93       	push	r17
    1bbe:	cf 93       	push	r28
    1bc0:	df 93       	push	r29
    1bc2:	5c 01       	movw	r10, r24
    1bc4:	f6 2e       	mov	r15, r22
    1bc6:	d4 2f       	mov	r29, r20
    1bc8:	28 01       	movw	r4, r16
    1bca:	39 01       	movw	r6, r18
    1bcc:	ee 20       	and	r14, r14
    1bce:	21 f1       	breq	.+72     	; 0x1c18 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1bd0:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7TwoWire17beginTransmissionEh>
    1bd4:	ce 2d       	mov	r28, r14
    1bd6:	c4 30       	cpi	r28, 0x04	; 4
    1bd8:	08 f0       	brcs	.+2      	; 0x1bdc <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1bda:	c3 e0       	ldi	r28, 0x03	; 3
    1bdc:	c1 50       	subi	r28, 0x01	; 1
    1bde:	c0 f0       	brcs	.+48     	; 0x1c10 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1be0:	28 e0       	ldi	r18, 0x08	; 8
    1be2:	c2 9f       	mul	r28, r18
    1be4:	c0 01       	movw	r24, r0
    1be6:	11 24       	eor	r1, r1
    1be8:	a3 01       	movw	r20, r6
    1bea:	92 01       	movw	r18, r4
    1bec:	04 c0       	rjmp	.+8      	; 0x1bf6 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    1bee:	56 95       	lsr	r21
    1bf0:	47 95       	ror	r20
    1bf2:	37 95       	ror	r19
    1bf4:	27 95       	ror	r18
    1bf6:	8a 95       	dec	r24
    1bf8:	d2 f7       	brpl	.-12     	; 0x1bee <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1bfa:	ca 01       	movw	r24, r20
    1bfc:	b9 01       	movw	r22, r18
    1bfe:	d5 01       	movw	r26, r10
    1c00:	ed 91       	ld	r30, X+
    1c02:	fc 91       	ld	r31, X
    1c04:	01 90       	ld	r0, Z+
    1c06:	f0 81       	ld	r31, Z
    1c08:	e0 2d       	mov	r30, r0
    1c0a:	c5 01       	movw	r24, r10
    1c0c:	09 95       	icall
    1c0e:	e6 cf       	rjmp	.-52     	; 0x1bdc <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1c10:	60 e0       	ldi	r22, 0x00	; 0
    1c12:	c5 01       	movw	r24, r10
    1c14:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <_ZN7TwoWire15endTransmissionEh>
    1c18:	4d 2f       	mov	r20, r29
    1c1a:	d1 32       	cpi	r29, 0x21	; 33
    1c1c:	08 f0       	brcs	.+2      	; 0x1c20 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1c1e:	40 e2       	ldi	r20, 0x20	; 32
    1c20:	2c 2d       	mov	r18, r12
    1c22:	6f e9       	ldi	r22, 0x9F	; 159
    1c24:	73 e0       	ldi	r23, 0x03	; 3
    1c26:	8f 2d       	mov	r24, r15
    1c28:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <twi_readFrom>
    1c2c:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <_ZN7TwoWire13rxBufferIndexE>
    1c30:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <_ZN7TwoWire14rxBufferLengthE>
    1c34:	df 91       	pop	r29
    1c36:	cf 91       	pop	r28
    1c38:	1f 91       	pop	r17
    1c3a:	0f 91       	pop	r16
    1c3c:	ff 90       	pop	r15
    1c3e:	ef 90       	pop	r14
    1c40:	cf 90       	pop	r12
    1c42:	bf 90       	pop	r11
    1c44:	af 90       	pop	r10
    1c46:	7f 90       	pop	r7
    1c48:	6f 90       	pop	r6
    1c4a:	5f 90       	pop	r5
    1c4c:	4f 90       	pop	r4
    1c4e:	08 95       	ret

00001c50 <_ZN7TwoWire11requestFromEhhh>:
    1c50:	cf 92       	push	r12
    1c52:	ef 92       	push	r14
    1c54:	0f 93       	push	r16
    1c56:	1f 93       	push	r17
    1c58:	c2 2e       	mov	r12, r18
    1c5a:	e1 2c       	mov	r14, r1
    1c5c:	00 e0       	ldi	r16, 0x00	; 0
    1c5e:	10 e0       	ldi	r17, 0x00	; 0
    1c60:	98 01       	movw	r18, r16
    1c62:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <_ZN7TwoWire11requestFromEhhmhh>
    1c66:	1f 91       	pop	r17
    1c68:	0f 91       	pop	r16
    1c6a:	ef 90       	pop	r14
    1c6c:	cf 90       	pop	r12
    1c6e:	08 95       	ret

00001c70 <_ZN7TwoWire11requestFromEhh>:
    1c70:	21 e0       	ldi	r18, 0x01	; 1
    1c72:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <_ZN7TwoWire11requestFromEhhh>

00001c76 <_ZN7TwoWire15endTransmissionEv>:
    1c76:	61 e0       	ldi	r22, 0x01	; 1
    1c78:	0c 94 c1 0d 	jmp	0x1b82	; 0x1b82 <_ZN7TwoWire15endTransmissionEh>

00001c7c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1c7c:	89 e6       	ldi	r24, 0x69	; 105
    1c7e:	93 e0       	ldi	r25, 0x03	; 3
    1c80:	0c 94 91 0d 	jmp	0x1b22	; 0x1b22 <_ZN7TwoWireC1Ev>

00001c84 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    1c84:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <twi_state>
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <twi_sendStop>
    1c8e:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <twi_inRepStart>
    1c92:	61 e0       	ldi	r22, 0x01	; 1
    1c94:	82 e1       	ldi	r24, 0x12	; 18
    1c96:	0e 94 a4 0c 	call	0x1948	; 0x1948 <digitalWrite>
    1c9a:	61 e0       	ldi	r22, 0x01	; 1
    1c9c:	83 e1       	ldi	r24, 0x13	; 19
    1c9e:	0e 94 a4 0c 	call	0x1948	; 0x1948 <digitalWrite>
    1ca2:	e9 eb       	ldi	r30, 0xB9	; 185
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	8e 7f       	andi	r24, 0xFE	; 254
    1caa:	80 83       	st	Z, r24
    1cac:	80 81       	ld	r24, Z
    1cae:	8d 7f       	andi	r24, 0xFD	; 253
    1cb0:	80 83       	st	Z, r24
    1cb2:	88 e4       	ldi	r24, 0x48	; 72
    1cb4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1cb8:	85 e4       	ldi	r24, 0x45	; 69
    1cba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1cbe:	08 95       	ret

00001cc0 <twi_disable>:
    1cc0:	ec eb       	ldi	r30, 0xBC	; 188
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	8a 7b       	andi	r24, 0xBA	; 186
    1cc8:	80 83       	st	Z, r24
    1cca:	60 e0       	ldi	r22, 0x00	; 0
    1ccc:	82 e1       	ldi	r24, 0x12	; 18
    1cce:	0e 94 a4 0c 	call	0x1948	; 0x1948 <digitalWrite>
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	83 e1       	ldi	r24, 0x13	; 19
    1cd6:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <digitalWrite>

00001cda <twi_setFrequency>:
    1cda:	9b 01       	movw	r18, r22
    1cdc:	ac 01       	movw	r20, r24
    1cde:	60 e0       	ldi	r22, 0x00	; 0
    1ce0:	74 e2       	ldi	r23, 0x24	; 36
    1ce2:	84 ef       	ldi	r24, 0xF4	; 244
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	0e 94 17 12 	call	0x242e	; 0x242e <__udivmodsi4>
    1cea:	da 01       	movw	r26, r20
    1cec:	c9 01       	movw	r24, r18
    1cee:	40 97       	sbiw	r24, 0x10	; 16
    1cf0:	a1 09       	sbc	r26, r1
    1cf2:	b1 09       	sbc	r27, r1
    1cf4:	b6 95       	lsr	r27
    1cf6:	a7 95       	ror	r26
    1cf8:	97 95       	ror	r25
    1cfa:	87 95       	ror	r24
    1cfc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1d00:	08 95       	ret

00001d02 <twi_transmit>:
    1d02:	40 91 e1 03 	lds	r20, 0x03E1	; 0x8003e1 <twi_txBufferLength>
    1d06:	26 2f       	mov	r18, r22
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	24 0f       	add	r18, r20
    1d0c:	31 1d       	adc	r19, r1
    1d0e:	21 32       	cpi	r18, 0x21	; 33
    1d10:	31 05       	cpc	r19, r1
    1d12:	dc f4       	brge	.+54     	; 0x1d4a <twi_transmit+0x48>
    1d14:	20 91 32 04 	lds	r18, 0x0432	; 0x800432 <twi_state>
    1d18:	24 30       	cpi	r18, 0x04	; 4
    1d1a:	c9 f4       	brne	.+50     	; 0x1d4e <twi_transmit+0x4c>
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	86 17       	cp	r24, r22
    1d24:	58 f4       	brcc	.+22     	; 0x1d3c <twi_transmit+0x3a>
    1d26:	30 91 e1 03 	lds	r19, 0x03E1	; 0x8003e1 <twi_txBufferLength>
    1d2a:	21 91       	ld	r18, Z+
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	ad 51       	subi	r26, 0x1D	; 29
    1d30:	bc 4f       	sbci	r27, 0xFC	; 252
    1d32:	a3 0f       	add	r26, r19
    1d34:	b1 1d       	adc	r27, r1
    1d36:	2c 93       	st	X, r18
    1d38:	01 96       	adiw	r24, 0x01	; 1
    1d3a:	f3 cf       	rjmp	.-26     	; 0x1d22 <twi_transmit+0x20>
    1d3c:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <twi_txBufferLength>
    1d40:	68 0f       	add	r22, r24
    1d42:	60 93 e1 03 	sts	0x03E1, r22	; 0x8003e1 <twi_txBufferLength>
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	08 95       	ret
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	08 95       	ret
    1d4e:	82 e0       	ldi	r24, 0x02	; 2
    1d50:	08 95       	ret

00001d52 <twi_attachSlaveRxEvent>:
    1d52:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <twi_onSlaveReceive+0x1>
    1d56:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <twi_onSlaveReceive>
    1d5a:	08 95       	ret

00001d5c <twi_attachSlaveTxEvent>:
    1d5c:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <twi_onSlaveTransmit+0x1>
    1d60:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <twi_onSlaveTransmit>
    1d64:	08 95       	ret

00001d66 <twi_releaseBus>:
    1d66:	85 ec       	ldi	r24, 0xC5	; 197
    1d68:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1d6c:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <twi_state>
    1d70:	08 95       	ret

00001d72 <twi_handleTimeout>:
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	91 e0       	ldi	r25, 0x01	; 1
    1d78:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <twi_timed_out_flag>
    1d7c:	88 23       	and	r24, r24
    1d7e:	61 f0       	breq	.+24     	; 0x1d98 <twi_handleTimeout+0x26>
    1d80:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1d84:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
    1d88:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <twi_disable>
    1d8c:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <twi_init>
    1d90:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
    1d94:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1d98:	df 91       	pop	r29
    1d9a:	cf 91       	pop	r28
    1d9c:	08 95       	ret

00001d9e <twi_readFrom>:
    1d9e:	4f 92       	push	r4
    1da0:	5f 92       	push	r5
    1da2:	6f 92       	push	r6
    1da4:	7f 92       	push	r7
    1da6:	8f 92       	push	r8
    1da8:	9f 92       	push	r9
    1daa:	af 92       	push	r10
    1dac:	bf 92       	push	r11
    1dae:	cf 92       	push	r12
    1db0:	df 92       	push	r13
    1db2:	ef 92       	push	r14
    1db4:	ff 92       	push	r15
    1db6:	0f 93       	push	r16
    1db8:	1f 93       	push	r17
    1dba:	cf 93       	push	r28
    1dbc:	df 93       	push	r29
    1dbe:	f8 2e       	mov	r15, r24
    1dc0:	16 2f       	mov	r17, r22
    1dc2:	07 2f       	mov	r16, r23
    1dc4:	c4 2f       	mov	r28, r20
    1dc6:	e2 2e       	mov	r14, r18
    1dc8:	41 32       	cpi	r20, 0x21	; 33
    1dca:	08 f0       	brcs	.+2      	; 0x1dce <twi_readFrom+0x30>
    1dcc:	be c0       	rjmp	.+380    	; 0x1f4a <twi_readFrom+0x1ac>
    1dce:	0e 94 df 0b 	call	0x17be	; 0x17be <micros>
    1dd2:	4b 01       	movw	r8, r22
    1dd4:	5c 01       	movw	r10, r24
    1dd6:	d0 91 32 04 	lds	r29, 0x0432	; 0x800432 <twi_state>
    1dda:	dd 23       	and	r29, r29
    1ddc:	31 f1       	breq	.+76     	; 0x1e2a <twi_readFrom+0x8c>
    1dde:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <twi_timeout_us>
    1de2:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <twi_timeout_us+0x1>
    1de6:	a0 91 2d 04 	lds	r26, 0x042D	; 0x80042d <twi_timeout_us+0x2>
    1dea:	b0 91 2e 04 	lds	r27, 0x042E	; 0x80042e <twi_timeout_us+0x3>
    1dee:	89 2b       	or	r24, r25
    1df0:	8a 2b       	or	r24, r26
    1df2:	8b 2b       	or	r24, r27
    1df4:	81 f3       	breq	.-32     	; 0x1dd6 <twi_readFrom+0x38>
    1df6:	0e 94 df 0b 	call	0x17be	; 0x17be <micros>
    1dfa:	40 90 2b 04 	lds	r4, 0x042B	; 0x80042b <twi_timeout_us>
    1dfe:	50 90 2c 04 	lds	r5, 0x042C	; 0x80042c <twi_timeout_us+0x1>
    1e02:	60 90 2d 04 	lds	r6, 0x042D	; 0x80042d <twi_timeout_us+0x2>
    1e06:	70 90 2e 04 	lds	r7, 0x042E	; 0x80042e <twi_timeout_us+0x3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	88 19       	sub	r24, r8
    1e10:	99 09       	sbc	r25, r9
    1e12:	aa 09       	sbc	r26, r10
    1e14:	bb 09       	sbc	r27, r11
    1e16:	48 16       	cp	r4, r24
    1e18:	59 06       	cpc	r5, r25
    1e1a:	6a 06       	cpc	r6, r26
    1e1c:	7b 06       	cpc	r7, r27
    1e1e:	d8 f6       	brcc	.-74     	; 0x1dd6 <twi_readFrom+0x38>
    1e20:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <twi_do_reset_on_timeout>
    1e24:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <twi_handleTimeout>
    1e28:	90 c0       	rjmp	.+288    	; 0x1f4a <twi_readFrom+0x1ac>
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <twi_state>
    1e30:	e0 92 30 04 	sts	0x0430, r14	; 0x800430 <twi_sendStop>
    1e34:	9f ef       	ldi	r25, 0xFF	; 255
    1e36:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <twi_error>
    1e3a:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <twi_masterBufferIndex>
    1e3e:	9c 0f       	add	r25, r28
    1e40:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <twi_masterBufferLength>
    1e44:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <twi_slarw>
    1e48:	90 91 31 04 	lds	r25, 0x0431	; 0x800431 <twi_slarw>
    1e4c:	8f 2d       	mov	r24, r15
    1e4e:	88 0f       	add	r24, r24
    1e50:	89 2b       	or	r24, r25
    1e52:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <twi_slarw>
    1e56:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <twi_inRepStart>
    1e5a:	81 30       	cpi	r24, 0x01	; 1
    1e5c:	89 f5       	brne	.+98     	; 0x1ec0 <twi_readFrom+0x122>
    1e5e:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <twi_inRepStart>
    1e62:	0e 94 df 0b 	call	0x17be	; 0x17be <micros>
    1e66:	6b 01       	movw	r12, r22
    1e68:	7c 01       	movw	r14, r24
    1e6a:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <twi_slarw>
    1e6e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1e72:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <twi_timeout_us>
    1e76:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <twi_timeout_us+0x1>
    1e7a:	a0 91 2d 04 	lds	r26, 0x042D	; 0x80042d <twi_timeout_us+0x2>
    1e7e:	b0 91 2e 04 	lds	r27, 0x042E	; 0x80042e <twi_timeout_us+0x3>
    1e82:	89 2b       	or	r24, r25
    1e84:	8a 2b       	or	r24, r26
    1e86:	8b 2b       	or	r24, r27
    1e88:	a9 f0       	breq	.+42     	; 0x1eb4 <twi_readFrom+0x116>
    1e8a:	0e 94 df 0b 	call	0x17be	; 0x17be <micros>
    1e8e:	80 90 2b 04 	lds	r8, 0x042B	; 0x80042b <twi_timeout_us>
    1e92:	90 90 2c 04 	lds	r9, 0x042C	; 0x80042c <twi_timeout_us+0x1>
    1e96:	a0 90 2d 04 	lds	r10, 0x042D	; 0x80042d <twi_timeout_us+0x2>
    1e9a:	b0 90 2e 04 	lds	r11, 0x042E	; 0x80042e <twi_timeout_us+0x3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	8c 19       	sub	r24, r12
    1ea4:	9d 09       	sbc	r25, r13
    1ea6:	ae 09       	sbc	r26, r14
    1ea8:	bf 09       	sbc	r27, r15
    1eaa:	88 16       	cp	r8, r24
    1eac:	99 06       	cpc	r9, r25
    1eae:	aa 06       	cpc	r10, r26
    1eb0:	bb 06       	cpc	r11, r27
    1eb2:	90 f1       	brcs	.+100    	; 0x1f18 <twi_readFrom+0x17a>
    1eb4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1eb8:	83 fd       	sbrc	r24, 3
    1eba:	d7 cf       	rjmp	.-82     	; 0x1e6a <twi_readFrom+0xcc>
    1ebc:	85 ec       	ldi	r24, 0xC5	; 197
    1ebe:	01 c0       	rjmp	.+2      	; 0x1ec2 <twi_readFrom+0x124>
    1ec0:	85 ee       	ldi	r24, 0xE5	; 229
    1ec2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1ec6:	0e 94 df 0b 	call	0x17be	; 0x17be <micros>
    1eca:	6b 01       	movw	r12, r22
    1ecc:	7c 01       	movw	r14, r24
    1ece:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <twi_state>
    1ed2:	81 30       	cpi	r24, 0x01	; 1
    1ed4:	31 f5       	brne	.+76     	; 0x1f22 <twi_readFrom+0x184>
    1ed6:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <twi_timeout_us>
    1eda:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <twi_timeout_us+0x1>
    1ede:	a0 91 2d 04 	lds	r26, 0x042D	; 0x80042d <twi_timeout_us+0x2>
    1ee2:	b0 91 2e 04 	lds	r27, 0x042E	; 0x80042e <twi_timeout_us+0x3>
    1ee6:	89 2b       	or	r24, r25
    1ee8:	8a 2b       	or	r24, r26
    1eea:	8b 2b       	or	r24, r27
    1eec:	81 f3       	breq	.-32     	; 0x1ece <twi_readFrom+0x130>
    1eee:	0e 94 df 0b 	call	0x17be	; 0x17be <micros>
    1ef2:	80 90 2b 04 	lds	r8, 0x042B	; 0x80042b <twi_timeout_us>
    1ef6:	90 90 2c 04 	lds	r9, 0x042C	; 0x80042c <twi_timeout_us+0x1>
    1efa:	a0 90 2d 04 	lds	r10, 0x042D	; 0x80042d <twi_timeout_us+0x2>
    1efe:	b0 90 2e 04 	lds	r11, 0x042E	; 0x80042e <twi_timeout_us+0x3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	8c 19       	sub	r24, r12
    1f08:	9d 09       	sbc	r25, r13
    1f0a:	ae 09       	sbc	r26, r14
    1f0c:	bf 09       	sbc	r27, r15
    1f0e:	88 16       	cp	r8, r24
    1f10:	99 06       	cpc	r9, r25
    1f12:	aa 06       	cpc	r10, r26
    1f14:	bb 06       	cpc	r11, r27
    1f16:	d8 f6       	brcc	.-74     	; 0x1ece <twi_readFrom+0x130>
    1f18:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <twi_do_reset_on_timeout>
    1f1c:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <twi_handleTimeout>
    1f20:	15 c0       	rjmp	.+42     	; 0x1f4c <twi_readFrom+0x1ae>
    1f22:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <twi_masterBufferIndex>
    1f26:	8c 17       	cp	r24, r28
    1f28:	10 f4       	brcc	.+4      	; 0x1f2e <twi_readFrom+0x190>
    1f2a:	c0 91 04 04 	lds	r28, 0x0404	; 0x800404 <twi_masterBufferIndex>
    1f2e:	a5 e0       	ldi	r26, 0x05	; 5
    1f30:	b4 e0       	ldi	r27, 0x04	; 4
    1f32:	91 2f       	mov	r25, r17
    1f34:	e1 2f       	mov	r30, r17
    1f36:	f0 2f       	mov	r31, r16
    1f38:	8e 2f       	mov	r24, r30
    1f3a:	89 1b       	sub	r24, r25
    1f3c:	8c 17       	cp	r24, r28
    1f3e:	18 f4       	brcc	.+6      	; 0x1f46 <twi_readFrom+0x1a8>
    1f40:	8d 91       	ld	r24, X+
    1f42:	81 93       	st	Z+, r24
    1f44:	f9 cf       	rjmp	.-14     	; 0x1f38 <twi_readFrom+0x19a>
    1f46:	dc 2f       	mov	r29, r28
    1f48:	01 c0       	rjmp	.+2      	; 0x1f4c <twi_readFrom+0x1ae>
    1f4a:	d0 e0       	ldi	r29, 0x00	; 0
    1f4c:	8d 2f       	mov	r24, r29
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	1f 91       	pop	r17
    1f54:	0f 91       	pop	r16
    1f56:	ff 90       	pop	r15
    1f58:	ef 90       	pop	r14
    1f5a:	df 90       	pop	r13
    1f5c:	cf 90       	pop	r12
    1f5e:	bf 90       	pop	r11
    1f60:	af 90       	pop	r10
    1f62:	9f 90       	pop	r9
    1f64:	8f 90       	pop	r8
    1f66:	7f 90       	pop	r7
    1f68:	6f 90       	pop	r6
    1f6a:	5f 90       	pop	r5
    1f6c:	4f 90       	pop	r4
    1f6e:	08 95       	ret

00001f70 <twi_writeTo>:
    1f70:	4f 92       	push	r4
    1f72:	5f 92       	push	r5
    1f74:	6f 92       	push	r6
    1f76:	7f 92       	push	r7
    1f78:	8f 92       	push	r8
    1f7a:	9f 92       	push	r9
    1f7c:	af 92       	push	r10
    1f7e:	bf 92       	push	r11
    1f80:	cf 92       	push	r12
    1f82:	df 92       	push	r13
    1f84:	ef 92       	push	r14
    1f86:	ff 92       	push	r15
    1f88:	0f 93       	push	r16
    1f8a:	1f 93       	push	r17
    1f8c:	cf 93       	push	r28
    1f8e:	df 93       	push	r29
    1f90:	41 32       	cpi	r20, 0x21	; 33
    1f92:	08 f0       	brcs	.+2      	; 0x1f96 <twi_writeTo+0x26>
    1f94:	c6 c0       	rjmp	.+396    	; 0x2122 <twi_writeTo+0x1b2>
    1f96:	12 2f       	mov	r17, r18
    1f98:	f4 2e       	mov	r15, r20
    1f9a:	d7 2e       	mov	r13, r23
    1f9c:	e6 2e       	mov	r14, r22
    1f9e:	d8 2f       	mov	r29, r24
    1fa0:	0e 94 df 0b 	call	0x17be	; 0x17be <micros>
    1fa4:	4b 01       	movw	r8, r22
    1fa6:	5c 01       	movw	r10, r24
    1fa8:	c0 91 32 04 	lds	r28, 0x0432	; 0x800432 <twi_state>
    1fac:	cc 23       	and	r28, r28
    1fae:	11 f1       	breq	.+68     	; 0x1ff4 <twi_writeTo+0x84>
    1fb0:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <twi_timeout_us>
    1fb4:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <twi_timeout_us+0x1>
    1fb8:	a0 91 2d 04 	lds	r26, 0x042D	; 0x80042d <twi_timeout_us+0x2>
    1fbc:	b0 91 2e 04 	lds	r27, 0x042E	; 0x80042e <twi_timeout_us+0x3>
    1fc0:	89 2b       	or	r24, r25
    1fc2:	8a 2b       	or	r24, r26
    1fc4:	8b 2b       	or	r24, r27
    1fc6:	81 f3       	breq	.-32     	; 0x1fa8 <twi_writeTo+0x38>
    1fc8:	0e 94 df 0b 	call	0x17be	; 0x17be <micros>
    1fcc:	40 90 2b 04 	lds	r4, 0x042B	; 0x80042b <twi_timeout_us>
    1fd0:	50 90 2c 04 	lds	r5, 0x042C	; 0x80042c <twi_timeout_us+0x1>
    1fd4:	60 90 2d 04 	lds	r6, 0x042D	; 0x80042d <twi_timeout_us+0x2>
    1fd8:	70 90 2e 04 	lds	r7, 0x042E	; 0x80042e <twi_timeout_us+0x3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	88 19       	sub	r24, r8
    1fe2:	99 09       	sbc	r25, r9
    1fe4:	aa 09       	sbc	r26, r10
    1fe6:	bb 09       	sbc	r27, r11
    1fe8:	48 16       	cp	r4, r24
    1fea:	59 06       	cpc	r5, r25
    1fec:	6a 06       	cpc	r6, r26
    1fee:	7b 06       	cpc	r7, r27
    1ff0:	d8 f6       	brcc	.-74     	; 0x1fa8 <twi_writeTo+0x38>
    1ff2:	83 c0       	rjmp	.+262    	; 0x20fa <twi_writeTo+0x18a>
    1ff4:	82 e0       	ldi	r24, 0x02	; 2
    1ff6:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <twi_state>
    1ffa:	00 93 30 04 	sts	0x0430, r16	; 0x800430 <twi_sendStop>
    1ffe:	8f ef       	ldi	r24, 0xFF	; 255
    2000:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <twi_error>
    2004:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <twi_masterBufferIndex>
    2008:	f0 92 03 04 	sts	0x0403, r15	; 0x800403 <twi_masterBufferLength>
    200c:	9e 2d       	mov	r25, r14
    200e:	a5 e0       	ldi	r26, 0x05	; 5
    2010:	b4 e0       	ldi	r27, 0x04	; 4
    2012:	ee 2d       	mov	r30, r14
    2014:	fd 2d       	mov	r31, r13
    2016:	8e 2f       	mov	r24, r30
    2018:	89 1b       	sub	r24, r25
    201a:	8f 15       	cp	r24, r15
    201c:	18 f4       	brcc	.+6      	; 0x2024 <twi_writeTo+0xb4>
    201e:	81 91       	ld	r24, Z+
    2020:	8d 93       	st	X+, r24
    2022:	f9 cf       	rjmp	.-14     	; 0x2016 <twi_writeTo+0xa6>
    2024:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <twi_slarw>
    2028:	90 91 31 04 	lds	r25, 0x0431	; 0x800431 <twi_slarw>
    202c:	dd 0f       	add	r29, r29
    202e:	d9 2b       	or	r29, r25
    2030:	d0 93 31 04 	sts	0x0431, r29	; 0x800431 <twi_slarw>
    2034:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <twi_inRepStart>
    2038:	81 30       	cpi	r24, 0x01	; 1
    203a:	89 f5       	brne	.+98     	; 0x209e <twi_writeTo+0x12e>
    203c:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <twi_inRepStart>
    2040:	0e 94 df 0b 	call	0x17be	; 0x17be <micros>
    2044:	6b 01       	movw	r12, r22
    2046:	7c 01       	movw	r14, r24
    2048:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <twi_slarw>
    204c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2050:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <twi_timeout_us>
    2054:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <twi_timeout_us+0x1>
    2058:	a0 91 2d 04 	lds	r26, 0x042D	; 0x80042d <twi_timeout_us+0x2>
    205c:	b0 91 2e 04 	lds	r27, 0x042E	; 0x80042e <twi_timeout_us+0x3>
    2060:	89 2b       	or	r24, r25
    2062:	8a 2b       	or	r24, r26
    2064:	8b 2b       	or	r24, r27
    2066:	a9 f0       	breq	.+42     	; 0x2092 <twi_writeTo+0x122>
    2068:	0e 94 df 0b 	call	0x17be	; 0x17be <micros>
    206c:	80 90 2b 04 	lds	r8, 0x042B	; 0x80042b <twi_timeout_us>
    2070:	90 90 2c 04 	lds	r9, 0x042C	; 0x80042c <twi_timeout_us+0x1>
    2074:	a0 90 2d 04 	lds	r10, 0x042D	; 0x80042d <twi_timeout_us+0x2>
    2078:	b0 90 2e 04 	lds	r11, 0x042E	; 0x80042e <twi_timeout_us+0x3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	8c 19       	sub	r24, r12
    2082:	9d 09       	sbc	r25, r13
    2084:	ae 09       	sbc	r26, r14
    2086:	bf 09       	sbc	r27, r15
    2088:	88 16       	cp	r8, r24
    208a:	99 06       	cpc	r9, r25
    208c:	aa 06       	cpc	r10, r26
    208e:	bb 06       	cpc	r11, r27
    2090:	a0 f1       	brcs	.+104    	; 0x20fa <twi_writeTo+0x18a>
    2092:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2096:	83 fd       	sbrc	r24, 3
    2098:	d7 cf       	rjmp	.-82     	; 0x2048 <twi_writeTo+0xd8>
    209a:	85 ec       	ldi	r24, 0xC5	; 197
    209c:	01 c0       	rjmp	.+2      	; 0x20a0 <twi_writeTo+0x130>
    209e:	85 ee       	ldi	r24, 0xE5	; 229
    20a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    20a4:	0e 94 df 0b 	call	0x17be	; 0x17be <micros>
    20a8:	6b 01       	movw	r12, r22
    20aa:	7c 01       	movw	r14, r24
    20ac:	11 23       	and	r17, r17
    20ae:	59 f1       	breq	.+86     	; 0x2106 <twi_writeTo+0x196>
    20b0:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <twi_state>
    20b4:	82 30       	cpi	r24, 0x02	; 2
    20b6:	39 f5       	brne	.+78     	; 0x2106 <twi_writeTo+0x196>
    20b8:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <twi_timeout_us>
    20bc:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <twi_timeout_us+0x1>
    20c0:	a0 91 2d 04 	lds	r26, 0x042D	; 0x80042d <twi_timeout_us+0x2>
    20c4:	b0 91 2e 04 	lds	r27, 0x042E	; 0x80042e <twi_timeout_us+0x3>
    20c8:	89 2b       	or	r24, r25
    20ca:	8a 2b       	or	r24, r26
    20cc:	8b 2b       	or	r24, r27
    20ce:	71 f3       	breq	.-36     	; 0x20ac <twi_writeTo+0x13c>
    20d0:	0e 94 df 0b 	call	0x17be	; 0x17be <micros>
    20d4:	80 90 2b 04 	lds	r8, 0x042B	; 0x80042b <twi_timeout_us>
    20d8:	90 90 2c 04 	lds	r9, 0x042C	; 0x80042c <twi_timeout_us+0x1>
    20dc:	a0 90 2d 04 	lds	r10, 0x042D	; 0x80042d <twi_timeout_us+0x2>
    20e0:	b0 90 2e 04 	lds	r11, 0x042E	; 0x80042e <twi_timeout_us+0x3>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	8c 19       	sub	r24, r12
    20ea:	9d 09       	sbc	r25, r13
    20ec:	ae 09       	sbc	r26, r14
    20ee:	bf 09       	sbc	r27, r15
    20f0:	88 16       	cp	r8, r24
    20f2:	99 06       	cpc	r9, r25
    20f4:	aa 06       	cpc	r10, r26
    20f6:	bb 06       	cpc	r11, r27
    20f8:	c8 f6       	brcc	.-78     	; 0x20ac <twi_writeTo+0x13c>
    20fa:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <twi_do_reset_on_timeout>
    20fe:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <twi_handleTimeout>
    2102:	c5 e0       	ldi	r28, 0x05	; 5
    2104:	13 c0       	rjmp	.+38     	; 0x212c <twi_writeTo+0x1bc>
    2106:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <twi_error>
    210a:	8f 3f       	cpi	r24, 0xFF	; 255
    210c:	79 f0       	breq	.+30     	; 0x212c <twi_writeTo+0x1bc>
    210e:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <twi_error>
    2112:	80 32       	cpi	r24, 0x20	; 32
    2114:	41 f0       	breq	.+16     	; 0x2126 <twi_writeTo+0x1b6>
    2116:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <twi_error>
    211a:	80 33       	cpi	r24, 0x30	; 48
    211c:	31 f0       	breq	.+12     	; 0x212a <twi_writeTo+0x1ba>
    211e:	c4 e0       	ldi	r28, 0x04	; 4
    2120:	05 c0       	rjmp	.+10     	; 0x212c <twi_writeTo+0x1bc>
    2122:	c1 e0       	ldi	r28, 0x01	; 1
    2124:	03 c0       	rjmp	.+6      	; 0x212c <twi_writeTo+0x1bc>
    2126:	c2 e0       	ldi	r28, 0x02	; 2
    2128:	01 c0       	rjmp	.+2      	; 0x212c <twi_writeTo+0x1bc>
    212a:	c3 e0       	ldi	r28, 0x03	; 3
    212c:	8c 2f       	mov	r24, r28
    212e:	df 91       	pop	r29
    2130:	cf 91       	pop	r28
    2132:	1f 91       	pop	r17
    2134:	0f 91       	pop	r16
    2136:	ff 90       	pop	r15
    2138:	ef 90       	pop	r14
    213a:	df 90       	pop	r13
    213c:	cf 90       	pop	r12
    213e:	bf 90       	pop	r11
    2140:	af 90       	pop	r10
    2142:	9f 90       	pop	r9
    2144:	8f 90       	pop	r8
    2146:	7f 90       	pop	r7
    2148:	6f 90       	pop	r6
    214a:	5f 90       	pop	r5
    214c:	4f 90       	pop	r4
    214e:	08 95       	ret

00002150 <twi_stop>:
    2150:	85 ed       	ldi	r24, 0xD5	; 213
    2152:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2156:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <twi_timeout_us>
    215a:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <twi_timeout_us+0x1>
    215e:	a0 91 2d 04 	lds	r26, 0x042D	; 0x80042d <twi_timeout_us+0x2>
    2162:	b0 91 2e 04 	lds	r27, 0x042E	; 0x80042e <twi_timeout_us+0x3>
    2166:	07 96       	adiw	r24, 0x07	; 7
    2168:	a1 1d       	adc	r26, r1
    216a:	b1 1d       	adc	r27, r1
    216c:	23 e0       	ldi	r18, 0x03	; 3
    216e:	b6 95       	lsr	r27
    2170:	a7 95       	ror	r26
    2172:	97 95       	ror	r25
    2174:	87 95       	ror	r24
    2176:	2a 95       	dec	r18
    2178:	d1 f7       	brne	.-12     	; 0x216e <twi_stop+0x1e>
    217a:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    217e:	24 ff       	sbrs	r18, 4
    2180:	1c c0       	rjmp	.+56     	; 0x21ba <twi_stop+0x6a>
    2182:	40 91 2b 04 	lds	r20, 0x042B	; 0x80042b <twi_timeout_us>
    2186:	50 91 2c 04 	lds	r21, 0x042C	; 0x80042c <twi_timeout_us+0x1>
    218a:	60 91 2d 04 	lds	r22, 0x042D	; 0x80042d <twi_timeout_us+0x2>
    218e:	70 91 2e 04 	lds	r23, 0x042E	; 0x80042e <twi_timeout_us+0x3>
    2192:	45 2b       	or	r20, r21
    2194:	46 2b       	or	r20, r22
    2196:	47 2b       	or	r20, r23
    2198:	81 f3       	breq	.-32     	; 0x217a <twi_stop+0x2a>
    219a:	00 97       	sbiw	r24, 0x00	; 0
    219c:	a1 05       	cpc	r26, r1
    219e:	b1 05       	cpc	r27, r1
    21a0:	41 f0       	breq	.+16     	; 0x21b2 <twi_stop+0x62>
    21a2:	25 e3       	ldi	r18, 0x35	; 53
    21a4:	2a 95       	dec	r18
    21a6:	f1 f7       	brne	.-4      	; 0x21a4 <twi_stop+0x54>
    21a8:	00 00       	nop
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	a1 09       	sbc	r26, r1
    21ae:	b1 09       	sbc	r27, r1
    21b0:	e4 cf       	rjmp	.-56     	; 0x217a <twi_stop+0x2a>
    21b2:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <twi_do_reset_on_timeout>
    21b6:	0c 94 b9 0e 	jmp	0x1d72	; 0x1d72 <twi_handleTimeout>
    21ba:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <twi_state>
    21be:	08 95       	ret

000021c0 <__vector_24>:

ISR(TWI_vect)
{
    21c0:	1f 92       	push	r1
    21c2:	0f 92       	push	r0
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	0f 92       	push	r0
    21c8:	11 24       	eor	r1, r1
    21ca:	2f 93       	push	r18
    21cc:	3f 93       	push	r19
    21ce:	4f 93       	push	r20
    21d0:	5f 93       	push	r21
    21d2:	6f 93       	push	r22
    21d4:	7f 93       	push	r23
    21d6:	8f 93       	push	r24
    21d8:	9f 93       	push	r25
    21da:	af 93       	push	r26
    21dc:	bf 93       	push	r27
    21de:	ef 93       	push	r30
    21e0:	ff 93       	push	r31
  switch(TW_STATUS){
    21e2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    21e6:	88 7f       	andi	r24, 0xF8	; 248
    21e8:	80 36       	cpi	r24, 0x60	; 96
    21ea:	09 f4       	brne	.+2      	; 0x21ee <__vector_24+0x2e>
    21ec:	9e c0       	rjmp	.+316    	; 0x232a <__vector_24+0x16a>
    21ee:	78 f5       	brcc	.+94     	; 0x224e <__vector_24+0x8e>
    21f0:	88 32       	cpi	r24, 0x28	; 40
    21f2:	09 f4       	brne	.+2      	; 0x21f6 <__vector_24+0x36>
    21f4:	5d c0       	rjmp	.+186    	; 0x22b0 <__vector_24+0xf0>
    21f6:	90 f4       	brcc	.+36     	; 0x221c <__vector_24+0x5c>
    21f8:	80 31       	cpi	r24, 0x10	; 16
    21fa:	09 f4       	brne	.+2      	; 0x21fe <__vector_24+0x3e>
    21fc:	56 c0       	rjmp	.+172    	; 0x22aa <__vector_24+0xea>
    21fe:	38 f4       	brcc	.+14     	; 0x220e <__vector_24+0x4e>
    2200:	88 23       	and	r24, r24
    2202:	09 f4       	brne	.+2      	; 0x2206 <__vector_24+0x46>
    2204:	f5 c0       	rjmp	.+490    	; 0x23f0 <__vector_24+0x230>
    2206:	88 30       	cpi	r24, 0x08	; 8
    2208:	09 f4       	brne	.+2      	; 0x220c <__vector_24+0x4c>
    220a:	4f c0       	rjmp	.+158    	; 0x22aa <__vector_24+0xea>
    220c:	f5 c0       	rjmp	.+490    	; 0x23f8 <__vector_24+0x238>
    220e:	88 31       	cpi	r24, 0x18	; 24
    2210:	09 f4       	brne	.+2      	; 0x2214 <__vector_24+0x54>
    2212:	4e c0       	rjmp	.+156    	; 0x22b0 <__vector_24+0xf0>
    2214:	80 32       	cpi	r24, 0x20	; 32
    2216:	09 f4       	brne	.+2      	; 0x221a <__vector_24+0x5a>
    2218:	5f c0       	rjmp	.+190    	; 0x22d8 <__vector_24+0x118>
    221a:	ee c0       	rjmp	.+476    	; 0x23f8 <__vector_24+0x238>
    221c:	80 34       	cpi	r24, 0x40	; 64
    221e:	09 f4       	brne	.+2      	; 0x2222 <__vector_24+0x62>
    2220:	6a c0       	rjmp	.+212    	; 0x22f6 <__vector_24+0x136>
    2222:	58 f4       	brcc	.+22     	; 0x223a <__vector_24+0x7a>
    2224:	80 33       	cpi	r24, 0x30	; 48
    2226:	09 f4       	brne	.+2      	; 0x222a <__vector_24+0x6a>
    2228:	57 c0       	rjmp	.+174    	; 0x22d8 <__vector_24+0x118>
    222a:	88 33       	cpi	r24, 0x38	; 56
    222c:	09 f0       	breq	.+2      	; 0x2230 <__vector_24+0x70>
    222e:	e4 c0       	rjmp	.+456    	; 0x23f8 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2230:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <twi_error>
      twi_releaseBus();
    2234:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <twi_releaseBus>
      break;
    2238:	df c0       	rjmp	.+446    	; 0x23f8 <__vector_24+0x238>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    223a:	80 35       	cpi	r24, 0x50	; 80
    223c:	09 f4       	brne	.+2      	; 0x2240 <__vector_24+0x80>
    223e:	4f c0       	rjmp	.+158    	; 0x22de <__vector_24+0x11e>
    2240:	88 35       	cpi	r24, 0x58	; 88
    2242:	09 f4       	brne	.+2      	; 0x2246 <__vector_24+0x86>
    2244:	5d c0       	rjmp	.+186    	; 0x2300 <__vector_24+0x140>
    2246:	88 34       	cpi	r24, 0x48	; 72
    2248:	09 f0       	breq	.+2      	; 0x224c <__vector_24+0x8c>
    224a:	d6 c0       	rjmp	.+428    	; 0x23f8 <__vector_24+0x238>
    224c:	d3 c0       	rjmp	.+422    	; 0x23f4 <__vector_24+0x234>
    224e:	88 39       	cpi	r24, 0x98	; 152
    2250:	09 f4       	brne	.+2      	; 0x2254 <__vector_24+0x94>
    2252:	c4 c0       	rjmp	.+392    	; 0x23dc <__vector_24+0x21c>
    2254:	a8 f4       	brcc	.+42     	; 0x2280 <__vector_24+0xc0>
    2256:	88 37       	cpi	r24, 0x78	; 120
    2258:	09 f4       	brne	.+2      	; 0x225c <__vector_24+0x9c>
    225a:	67 c0       	rjmp	.+206    	; 0x232a <__vector_24+0x16a>
    225c:	38 f4       	brcc	.+14     	; 0x226c <__vector_24+0xac>
    225e:	88 36       	cpi	r24, 0x68	; 104
    2260:	09 f4       	brne	.+2      	; 0x2264 <__vector_24+0xa4>
    2262:	63 c0       	rjmp	.+198    	; 0x232a <__vector_24+0x16a>
    2264:	80 37       	cpi	r24, 0x70	; 112
    2266:	09 f4       	brne	.+2      	; 0x226a <__vector_24+0xaa>
    2268:	60 c0       	rjmp	.+192    	; 0x232a <__vector_24+0x16a>
    226a:	c6 c0       	rjmp	.+396    	; 0x23f8 <__vector_24+0x238>
    226c:	88 38       	cpi	r24, 0x88	; 136
    226e:	09 f4       	brne	.+2      	; 0x2272 <__vector_24+0xb2>
    2270:	b5 c0       	rjmp	.+362    	; 0x23dc <__vector_24+0x21c>
    2272:	80 39       	cpi	r24, 0x90	; 144
    2274:	09 f4       	brne	.+2      	; 0x2278 <__vector_24+0xb8>
    2276:	5f c0       	rjmp	.+190    	; 0x2336 <__vector_24+0x176>
    2278:	80 38       	cpi	r24, 0x80	; 128
    227a:	09 f0       	breq	.+2      	; 0x227e <__vector_24+0xbe>
    227c:	bd c0       	rjmp	.+378    	; 0x23f8 <__vector_24+0x238>
    227e:	5b c0       	rjmp	.+182    	; 0x2336 <__vector_24+0x176>
    2280:	80 3b       	cpi	r24, 0xB0	; 176
    2282:	09 f4       	brne	.+2      	; 0x2286 <__vector_24+0xc6>
    2284:	83 c0       	rjmp	.+262    	; 0x238c <__vector_24+0x1cc>
    2286:	38 f4       	brcc	.+14     	; 0x2296 <__vector_24+0xd6>
    2288:	80 3a       	cpi	r24, 0xA0	; 160
    228a:	09 f4       	brne	.+2      	; 0x228e <__vector_24+0xce>
    228c:	66 c0       	rjmp	.+204    	; 0x235a <__vector_24+0x19a>
    228e:	88 3a       	cpi	r24, 0xA8	; 168
    2290:	09 f4       	brne	.+2      	; 0x2294 <__vector_24+0xd4>
    2292:	7c c0       	rjmp	.+248    	; 0x238c <__vector_24+0x1cc>
    2294:	b1 c0       	rjmp	.+354    	; 0x23f8 <__vector_24+0x238>
    2296:	80 3c       	cpi	r24, 0xC0	; 192
    2298:	09 f4       	brne	.+2      	; 0x229c <__vector_24+0xdc>
    229a:	a4 c0       	rjmp	.+328    	; 0x23e4 <__vector_24+0x224>
    229c:	88 3c       	cpi	r24, 0xC8	; 200
    229e:	09 f4       	brne	.+2      	; 0x22a2 <__vector_24+0xe2>
    22a0:	a1 c0       	rjmp	.+322    	; 0x23e4 <__vector_24+0x224>
    22a2:	88 3b       	cpi	r24, 0xB8	; 184
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <__vector_24+0xe8>
    22a6:	87 c0       	rjmp	.+270    	; 0x23b6 <__vector_24+0x1f6>
    22a8:	a7 c0       	rjmp	.+334    	; 0x23f8 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    22aa:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <twi_slarw>
    22ae:	10 c0       	rjmp	.+32     	; 0x22d0 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    22b0:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <twi_masterBufferIndex>
    22b4:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <twi_masterBufferLength>
    22b8:	98 17       	cp	r25, r24
    22ba:	70 f5       	brcc	.+92     	; 0x2318 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    22bc:	e0 91 04 04 	lds	r30, 0x0404	; 0x800404 <twi_masterBufferIndex>
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	8e 0f       	add	r24, r30
    22c4:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <twi_masterBufferIndex>
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	eb 5f       	subi	r30, 0xFB	; 251
    22cc:	fb 4f       	sbci	r31, 0xFB	; 251
    22ce:	80 81       	ld	r24, Z
    22d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    22d4:	85 ec       	ldi	r24, 0xC5	; 197
    22d6:	83 c0       	rjmp	.+262    	; 0x23de <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    22d8:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <twi_error>
    22dc:	8b c0       	rjmp	.+278    	; 0x23f4 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    22de:	e0 91 04 04 	lds	r30, 0x0404	; 0x800404 <twi_masterBufferIndex>
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	8e 0f       	add	r24, r30
    22e6:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <twi_masterBufferIndex>
    22ea:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	eb 5f       	subi	r30, 0xFB	; 251
    22f2:	fb 4f       	sbci	r31, 0xFB	; 251
    22f4:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    22f6:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <twi_masterBufferIndex>
    22fa:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <twi_masterBufferLength>
    22fe:	6b c0       	rjmp	.+214    	; 0x23d6 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2300:	e0 91 04 04 	lds	r30, 0x0404	; 0x800404 <twi_masterBufferIndex>
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	8e 0f       	add	r24, r30
    2308:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <twi_masterBufferIndex>
    230c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	eb 5f       	subi	r30, 0xFB	; 251
    2314:	fb 4f       	sbci	r31, 0xFB	; 251
    2316:	80 83       	st	Z, r24
      if (twi_sendStop){
    2318:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <twi_sendStop>
    231c:	81 11       	cpse	r24, r1
    231e:	6a c0       	rjmp	.+212    	; 0x23f4 <__vector_24+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2326:	84 ea       	ldi	r24, 0xA4	; 164
    2328:	5e c0       	rjmp	.+188    	; 0x23e6 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    232a:	83 e0       	ldi	r24, 0x03	; 3
    232c:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2330:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <twi_rxBufferIndex>
    2334:	cf cf       	rjmp	.-98     	; 0x22d4 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2336:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <twi_rxBufferIndex>
    233a:	80 32       	cpi	r24, 0x20	; 32
    233c:	08 f0       	brcs	.+2      	; 0x2340 <__vector_24+0x180>
    233e:	4e c0       	rjmp	.+156    	; 0x23dc <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2340:	e0 91 c0 03 	lds	r30, 0x03C0	; 0x8003c0 <twi_rxBufferIndex>
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	8e 0f       	add	r24, r30
    2348:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <twi_rxBufferIndex>
    234c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	ef 53       	subi	r30, 0x3F	; 63
    2354:	fc 4f       	sbci	r31, 0xFC	; 252
    2356:	80 83       	st	Z, r24
    2358:	bd cf       	rjmp	.-134    	; 0x22d4 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    235a:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    235e:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <twi_rxBufferIndex>
    2362:	80 32       	cpi	r24, 0x20	; 32
    2364:	30 f4       	brcc	.+12     	; 0x2372 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2366:	e0 91 c0 03 	lds	r30, 0x03C0	; 0x8003c0 <twi_rxBufferIndex>
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	ef 53       	subi	r30, 0x3F	; 63
    236e:	fc 4f       	sbci	r31, 0xFC	; 252
    2370:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2372:	60 91 c0 03 	lds	r22, 0x03C0	; 0x8003c0 <twi_rxBufferIndex>
    2376:	70 e0       	ldi	r23, 0x00	; 0
    2378:	e0 91 25 04 	lds	r30, 0x0425	; 0x800425 <twi_onSlaveReceive>
    237c:	f0 91 26 04 	lds	r31, 0x0426	; 0x800426 <twi_onSlaveReceive+0x1>
    2380:	81 ec       	ldi	r24, 0xC1	; 193
    2382:	93 e0       	ldi	r25, 0x03	; 3
    2384:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2386:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <twi_rxBufferIndex>
      break;
    238a:	36 c0       	rjmp	.+108    	; 0x23f8 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    238c:	84 e0       	ldi	r24, 0x04	; 4
    238e:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2392:	10 92 e2 03 	sts	0x03E2, r1	; 0x8003e2 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2396:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    239a:	e0 91 27 04 	lds	r30, 0x0427	; 0x800427 <twi_onSlaveTransmit>
    239e:	f0 91 28 04 	lds	r31, 0x0428	; 0x800428 <twi_onSlaveTransmit+0x1>
    23a2:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    23a4:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <twi_txBufferLength>
    23a8:	81 11       	cpse	r24, r1
    23aa:	05 c0       	rjmp	.+10     	; 0x23b6 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    23b2:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    23b6:	e0 91 e2 03 	lds	r30, 0x03E2	; 0x8003e2 <twi_txBufferIndex>
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	8e 0f       	add	r24, r30
    23be:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <twi_txBufferIndex>
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	ed 51       	subi	r30, 0x1D	; 29
    23c6:	fc 4f       	sbci	r31, 0xFC	; 252
    23c8:	80 81       	ld	r24, Z
    23ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    23ce:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <twi_txBufferIndex>
    23d2:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <twi_txBufferLength>
    23d6:	98 17       	cp	r25, r24
    23d8:	08 f4       	brcc	.+2      	; 0x23dc <__vector_24+0x21c>
    23da:	7c cf       	rjmp	.-264    	; 0x22d4 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    23dc:	85 e8       	ldi	r24, 0x85	; 133
    23de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    23e2:	0a c0       	rjmp	.+20     	; 0x23f8 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    23e4:	85 ec       	ldi	r24, 0xC5	; 197
    23e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    23ea:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <twi_state>
      break;
    23ee:	04 c0       	rjmp	.+8      	; 0x23f8 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    23f0:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <twi_error>
      twi_stop();
    23f4:	0e 94 a8 10 	call	0x2150	; 0x2150 <twi_stop>
      break;
  }
}
    23f8:	ff 91       	pop	r31
    23fa:	ef 91       	pop	r30
    23fc:	bf 91       	pop	r27
    23fe:	af 91       	pop	r26
    2400:	9f 91       	pop	r25
    2402:	8f 91       	pop	r24
    2404:	7f 91       	pop	r23
    2406:	6f 91       	pop	r22
    2408:	5f 91       	pop	r21
    240a:	4f 91       	pop	r20
    240c:	3f 91       	pop	r19
    240e:	2f 91       	pop	r18
    2410:	0f 90       	pop	r0
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	0f 90       	pop	r0
    2416:	1f 90       	pop	r1
    2418:	18 95       	reti

0000241a <__cmpsf2>:
    241a:	0e 94 32 07 	call	0xe64	; 0xe64 <__fp_cmp>
    241e:	08 f4       	brcc	.+2      	; 0x2422 <__cmpsf2+0x8>
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	08 95       	ret

00002424 <__unordsf2>:
    2424:	0e 94 32 07 	call	0xe64	; 0xe64 <__fp_cmp>
    2428:	88 0b       	sbc	r24, r24
    242a:	99 0b       	sbc	r25, r25
    242c:	08 95       	ret

0000242e <__udivmodsi4>:
    242e:	a1 e2       	ldi	r26, 0x21	; 33
    2430:	1a 2e       	mov	r1, r26
    2432:	aa 1b       	sub	r26, r26
    2434:	bb 1b       	sub	r27, r27
    2436:	fd 01       	movw	r30, r26
    2438:	0d c0       	rjmp	.+26     	; 0x2454 <__udivmodsi4_ep>

0000243a <__udivmodsi4_loop>:
    243a:	aa 1f       	adc	r26, r26
    243c:	bb 1f       	adc	r27, r27
    243e:	ee 1f       	adc	r30, r30
    2440:	ff 1f       	adc	r31, r31
    2442:	a2 17       	cp	r26, r18
    2444:	b3 07       	cpc	r27, r19
    2446:	e4 07       	cpc	r30, r20
    2448:	f5 07       	cpc	r31, r21
    244a:	20 f0       	brcs	.+8      	; 0x2454 <__udivmodsi4_ep>
    244c:	a2 1b       	sub	r26, r18
    244e:	b3 0b       	sbc	r27, r19
    2450:	e4 0b       	sbc	r30, r20
    2452:	f5 0b       	sbc	r31, r21

00002454 <__udivmodsi4_ep>:
    2454:	66 1f       	adc	r22, r22
    2456:	77 1f       	adc	r23, r23
    2458:	88 1f       	adc	r24, r24
    245a:	99 1f       	adc	r25, r25
    245c:	1a 94       	dec	r1
    245e:	69 f7       	brne	.-38     	; 0x243a <__udivmodsi4_loop>
    2460:	60 95       	com	r22
    2462:	70 95       	com	r23
    2464:	80 95       	com	r24
    2466:	90 95       	com	r25
    2468:	9b 01       	movw	r18, r22
    246a:	ac 01       	movw	r20, r24
    246c:	bd 01       	movw	r22, r26
    246e:	cf 01       	movw	r24, r30
    2470:	08 95       	ret

00002472 <__tablejump2__>:
    2472:	ee 0f       	add	r30, r30
    2474:	ff 1f       	adc	r31, r31
    2476:	05 90       	lpm	r0, Z+
    2478:	f4 91       	lpm	r31, Z
    247a:	e0 2d       	mov	r30, r0
    247c:	09 94       	ijmp

0000247e <_exit>:
    247e:	f8 94       	cli

00002480 <__stop_program>:
    2480:	ff cf       	rjmp	.-2      	; 0x2480 <__stop_program>
