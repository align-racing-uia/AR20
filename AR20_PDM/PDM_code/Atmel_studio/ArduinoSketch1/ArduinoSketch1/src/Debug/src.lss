
src.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000170  00800100  000029ec  00002a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002af  00800270  00800270  00002bf0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002bf0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000540  00000000  00000000  00002c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d327  00000000  00000000  000031a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000267b  00000000  00000000  000104c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002e70  00000000  00000000  00012b42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000104c  00000000  00000000  000159b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000315a  00000000  00000000  00016a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000578c  00000000  00000000  00019b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004c8  00000000  00000000  0001f2e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__ctors_end>
       4:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
       8:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
       c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      10:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      14:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      18:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      1c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      20:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      24:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      28:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      2c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      30:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      34:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      38:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      3c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      40:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <__vector_16>
      44:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      48:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__vector_18>
      4c:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <__vector_19>
      50:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      54:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      58:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      5c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      60:	0c 94 95 13 	jmp	0x272a	; 0x272a <__vector_24>
      64:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	73 65       	ori	r23, 0x53	; 83
      6a:	74 20       	and	r7, r4
      6c:	63 61       	ori	r22, 0x13	; 19
      6e:	6c 69       	ori	r22, 0x9C	; 156
      70:	62 72       	andi	r22, 0x22	; 34
      72:	61 74       	andi	r22, 0x41	; 65
      74:	69 6f       	ori	r22, 0xF9	; 249
      76:	6e 00       	.word	0x006e	; ????

00000078 <_ZZN8INA233_S10resetAlarmEvE3__c>:
      78:	72 65 73 65 74 20 61 6c 61 72 6d 00                 reset alarm.

00000084 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_4>:
      84:	55 56 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     UV WARN LIMIT re
      94:	61 64 62 61 63 6b 3a 20 00                          adback: .

0000009d <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_3>:
      9d:	55 56 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     UV WARN LIMIT: .

000000ad <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_2>:
      ad:	4f 56 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     OV WARN LIMIT re
      bd:	61 64 62 61 63 6b 3a 20 00                          adback: .

000000c6 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_1>:
      c6:	4f 56 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     OV WARN LIMIT: .

000000d6 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_0>:
      d6:	4f 43 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     OC WARN LIMIT re
      e6:	61 64 62 61 63 6b 3a 20 00                          adback: .

000000ef <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c>:
      ef:	4f 43 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     OC WARN LIMIT: .

000000ff <_ZZ4loopE3__c_0>:
      ff:	66 72 65 65 4d 65 6d 6f 72 79 28 29 3d 00           freeMemory()=.

0000010d <_ZZ4loopE3__c>:
     10d:	6c 6f 6f 70 69 6e 67 00                             looping.

00000115 <_ZZ5setupE3__c>:
     115:	66 72 65 65 4d 65 6d 6f 72 79 28 29 3d 00           freeMemory()=.

00000123 <digital_pin_to_timer_PGM>:
     123:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     133:	00 00 00 00                                         ....

00000137 <digital_pin_to_bit_mask_PGM>:
     137:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     147:	04 08 10 20                                         ... 

0000014b <digital_pin_to_port_PGM>:
     14b:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     15b:	03 03 03 03                                         ....

0000015f <port_to_output_PGM>:
     15f:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000169 <port_to_mode_PGM>:
     169:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000174 <__ctors_start>:
     174:	27 06       	cpc	r2, r23
     176:	4b 0b       	sbc	r20, r27
     178:	f2 10       	cpse	r15, r2

0000017a <__ctors_end>:
     17a:	11 24       	eor	r1, r1
     17c:	1f be       	out	0x3f, r1	; 63
     17e:	cf ef       	ldi	r28, 0xFF	; 255
     180:	d8 e0       	ldi	r29, 0x08	; 8
     182:	de bf       	out	0x3e, r29	; 62
     184:	cd bf       	out	0x3d, r28	; 61

00000186 <__do_copy_data>:
     186:	12 e0       	ldi	r17, 0x02	; 2
     188:	a0 e0       	ldi	r26, 0x00	; 0
     18a:	b1 e0       	ldi	r27, 0x01	; 1
     18c:	ec ee       	ldi	r30, 0xEC	; 236
     18e:	f9 e2       	ldi	r31, 0x29	; 41
     190:	02 c0       	rjmp	.+4      	; 0x196 <__do_copy_data+0x10>
     192:	05 90       	lpm	r0, Z+
     194:	0d 92       	st	X+, r0
     196:	a0 37       	cpi	r26, 0x70	; 112
     198:	b1 07       	cpc	r27, r17
     19a:	d9 f7       	brne	.-10     	; 0x192 <__do_copy_data+0xc>

0000019c <__do_clear_bss>:
     19c:	25 e0       	ldi	r18, 0x05	; 5
     19e:	a0 e7       	ldi	r26, 0x70	; 112
     1a0:	b2 e0       	ldi	r27, 0x02	; 2
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <.do_clear_bss_start>

000001a4 <.do_clear_bss_loop>:
     1a4:	1d 92       	st	X+, r1

000001a6 <.do_clear_bss_start>:
     1a6:	af 31       	cpi	r26, 0x1F	; 31
     1a8:	b2 07       	cpc	r27, r18
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <.do_clear_bss_loop>

000001ac <__do_global_ctors>:
     1ac:	10 e0       	ldi	r17, 0x00	; 0
     1ae:	cd eb       	ldi	r28, 0xBD	; 189
     1b0:	d0 e0       	ldi	r29, 0x00	; 0
     1b2:	04 c0       	rjmp	.+8      	; 0x1bc <__do_global_ctors+0x10>
     1b4:	21 97       	sbiw	r28, 0x01	; 1
     1b6:	fe 01       	movw	r30, r28
     1b8:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__tablejump2__>
     1bc:	ca 3b       	cpi	r28, 0xBA	; 186
     1be:	d1 07       	cpc	r29, r17
     1c0:	c9 f7       	brne	.-14     	; 0x1b4 <__do_global_ctors+0x8>
     1c2:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <main>
     1c6:	0c 94 f4 14 	jmp	0x29e8	; 0x29e8 <_exit>

000001ca <__bad_interrupt>:
     1ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ce <_ZN8INA233_S12close_MOSFETEv>:
    INA233_Data_Package readback = receiveData_(0xD5, 1);
    Serial.print(F("mfr config Readback: "));
    Serial.println(readback.msg[0], BIN);
	
	return 10;
}
     1ce:	60 e0       	ldi	r22, 0x00	; 0
     1d0:	fc 01       	movw	r30, r24
     1d2:	85 81       	ldd	r24, Z+5	; 0x05
     1d4:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <digitalWrite>

000001d8 <_ZN8INA233_S15transmitCommandEh>:
     1d8:	cf 93       	push	r28
     1da:	c6 2f       	mov	r28, r22
     1dc:	fc 01       	movw	r30, r24
     1de:	60 81       	ld	r22, Z
     1e0:	81 e5       	ldi	r24, 0x51	; 81
     1e2:	94 e0       	ldi	r25, 0x04	; 4
     1e4:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <_ZN7TwoWire17beginTransmissionEh>
     1e8:	6c 2f       	mov	r22, r28
     1ea:	81 e5       	ldi	r24, 0x51	; 81
     1ec:	94 e0       	ldi	r25, 0x04	; 4
     1ee:	0e 94 16 10 	call	0x202c	; 0x202c <_ZN7TwoWire5writeEh>
     1f2:	81 e5       	ldi	r24, 0x51	; 81
     1f4:	94 e0       	ldi	r25, 0x04	; 4
     1f6:	cf 91       	pop	r28
     1f8:	0c 94 ef 10 	jmp	0x21de	; 0x21de <_ZN7TwoWire15endTransmissionEv>

000001fc <_ZN8INA233_S10resetAlarmEv>:
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	ec 01       	movw	r28, r24
     202:	68 e7       	ldi	r22, 0x78	; 120
     204:	70 e0       	ldi	r23, 0x00	; 0
     206:	8b ea       	ldi	r24, 0xAB	; 171
     208:	93 e0       	ldi	r25, 0x03	; 3
     20a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <_ZN5Print7printlnEPK19__FlashStringHelper>
     20e:	63 e0       	ldi	r22, 0x03	; 3
     210:	ce 01       	movw	r24, r28
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_ZN8INA233_S15transmitCommandEh>

0000021a <_ZN8INA233_S9resetChipEv>:
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	ec 01       	movw	r28, r24
     220:	69 e0       	ldi	r22, 0x09	; 9
     222:	71 e0       	ldi	r23, 0x01	; 1
     224:	8b ea       	ldi	r24, 0xAB	; 171
     226:	93 e0       	ldi	r25, 0x03	; 3
     228:	0e 94 0a 0c 	call	0x1814	; 0x1814 <_ZN5Print7printlnEPKc>
     22c:	62 e1       	ldi	r22, 0x12	; 18
     22e:	ce 01       	movw	r24, r28
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_ZN8INA233_S15transmitCommandEh>

00000238 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>:
     238:	1f 93       	push	r17
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	fc 01       	movw	r30, r24
     240:	eb 01       	movw	r28, r22
     242:	14 2f       	mov	r17, r20
     244:	9a 85       	ldd	r25, Y+10	; 0x0a
     246:	93 30       	cpi	r25, 0x03	; 3
     248:	18 f0       	brcs	.+6      	; 0x250 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x18>
     24a:	64 e1       	ldi	r22, 0x14	; 20
     24c:	71 e0       	ldi	r23, 0x01	; 1
     24e:	04 c0       	rjmp	.+8      	; 0x258 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x20>
     250:	91 11       	cpse	r25, r1
     252:	0f c0       	rjmp	.+30     	; 0x272 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x3a>
     254:	6a e7       	ldi	r22, 0x7A	; 122
     256:	71 e0       	ldi	r23, 0x01	; 1
     258:	8b ea       	ldi	r24, 0xAB	; 171
     25a:	93 e0       	ldi	r25, 0x03	; 3
     25c:	0e 94 0a 0c 	call	0x1814	; 0x1814 <_ZN5Print7printlnEPKc>
     260:	69 e5       	ldi	r22, 0x59	; 89
     262:	71 e0       	ldi	r23, 0x01	; 1
     264:	8b ea       	ldi	r24, 0xAB	; 171
     266:	93 e0       	ldi	r25, 0x03	; 3
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	1f 91       	pop	r17
     26e:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <_ZN5Print7printlnEPKc>
     272:	60 81       	ld	r22, Z
     274:	81 e5       	ldi	r24, 0x51	; 81
     276:	94 e0       	ldi	r25, 0x04	; 4
     278:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <_ZN7TwoWire17beginTransmissionEh>
     27c:	61 2f       	mov	r22, r17
     27e:	81 e5       	ldi	r24, 0x51	; 81
     280:	94 e0       	ldi	r25, 0x04	; 4
     282:	0e 94 16 10 	call	0x202c	; 0x202c <_ZN7TwoWire5writeEh>
     286:	68 81       	ld	r22, Y
     288:	81 e5       	ldi	r24, 0x51	; 81
     28a:	94 e0       	ldi	r25, 0x04	; 4
     28c:	0e 94 16 10 	call	0x202c	; 0x202c <_ZN7TwoWire5writeEh>
     290:	8a 85       	ldd	r24, Y+10	; 0x0a
     292:	82 30       	cpi	r24, 0x02	; 2
     294:	29 f4       	brne	.+10     	; 0x2a0 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x68>
     296:	69 81       	ldd	r22, Y+1	; 0x01
     298:	81 e5       	ldi	r24, 0x51	; 81
     29a:	94 e0       	ldi	r25, 0x04	; 4
     29c:	0e 94 16 10 	call	0x202c	; 0x202c <_ZN7TwoWire5writeEh>
     2a0:	81 e5       	ldi	r24, 0x51	; 81
     2a2:	94 e0       	ldi	r25, 0x04	; 4
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	1f 91       	pop	r17
     2aa:	0c 94 ef 10 	jmp	0x21de	; 0x21de <_ZN7TwoWire15endTransmissionEv>

000002ae <_ZN8INA233_S12receiveData_Ehh>:
     2ae:	ef 92       	push	r14
     2b0:	ff 92       	push	r15
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	ec 01       	movw	r28, r24
     2bc:	7b 01       	movw	r14, r22
     2be:	02 2f       	mov	r16, r18
     2c0:	8f e0       	ldi	r24, 0x0F	; 15
     2c2:	fe 01       	movw	r30, r28
     2c4:	11 92       	st	Z+, r1
     2c6:	8a 95       	dec	r24
     2c8:	e9 f7       	brne	.-6      	; 0x2c4 <_ZN8INA233_S12receiveData_Ehh+0x16>
     2ca:	8a e0       	ldi	r24, 0x0A	; 10
     2cc:	8b 87       	std	Y+11, r24	; 0x0b
     2ce:	64 2f       	mov	r22, r20
     2d0:	c7 01       	movw	r24, r14
     2d2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <_ZN8INA233_S15transmitCommandEh>
     2d6:	40 2f       	mov	r20, r16
     2d8:	f7 01       	movw	r30, r14
     2da:	60 81       	ld	r22, Z
     2dc:	81 e5       	ldi	r24, 0x51	; 81
     2de:	94 e0       	ldi	r25, 0x04	; 4
     2e0:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <_ZN7TwoWire11requestFromEhh>
     2e4:	81 e5       	ldi	r24, 0x51	; 81
     2e6:	94 e0       	ldi	r25, 0x04	; 4
     2e8:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <_ZN7TwoWire9availableEv>
     2ec:	89 2b       	or	r24, r25
     2ee:	79 f0       	breq	.+30     	; 0x30e <_ZN8INA233_S12receiveData_Ehh+0x60>
     2f0:	1a 85       	ldd	r17, Y+10	; 0x0a
     2f2:	81 e5       	ldi	r24, 0x51	; 81
     2f4:	94 e0       	ldi	r25, 0x04	; 4
     2f6:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN7TwoWire4readEv>
     2fa:	fe 01       	movw	r30, r28
     2fc:	e1 0f       	add	r30, r17
     2fe:	f1 1d       	adc	r31, r1
     300:	80 83       	st	Z, r24
     302:	1f 5f       	subi	r17, 0xFF	; 255
     304:	1a 87       	std	Y+10, r17	; 0x0a
     306:	1a 30       	cpi	r17, 0x0A	; 10
     308:	68 f3       	brcs	.-38     	; 0x2e4 <_ZN8INA233_S12receiveData_Ehh+0x36>
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	8c 87       	std	Y+12, r24	; 0x0c
     30e:	8a 85       	ldd	r24, Y+10	; 0x0a
     310:	80 17       	cp	r24, r16
     312:	18 f4       	brcc	.+6      	; 0x31a <_ZN8INA233_S12receiveData_Ehh+0x6c>
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	8d 87       	std	Y+13, r24	; 0x0d
     318:	04 c0       	rjmp	.+8      	; 0x322 <_ZN8INA233_S12receiveData_Ehh+0x74>
     31a:	08 17       	cp	r16, r24
     31c:	10 f4       	brcc	.+4      	; 0x322 <_ZN8INA233_S12receiveData_Ehh+0x74>
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	8e 87       	std	Y+14, r24	; 0x0e
     322:	ce 01       	movw	r24, r28
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	1f 91       	pop	r17
     32a:	0f 91       	pop	r16
     32c:	ff 90       	pop	r15
     32e:	ef 90       	pop	r14
     330:	08 95       	ret

00000332 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>:
     332:	ef 92       	push	r14
     334:	ff 92       	push	r15
     336:	0f 93       	push	r16
     338:	1f 93       	push	r17
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	cd b7       	in	r28, 0x3d	; 61
     340:	de b7       	in	r29, 0x3e	; 62
     342:	2f 97       	sbiw	r28, 0x0f	; 15
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	f8 94       	cli
     348:	de bf       	out	0x3e, r29	; 62
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	cd bf       	out	0x3d, r28	; 61
     34e:	8b 01       	movw	r16, r22
     350:	fb 01       	movw	r30, r22
     352:	22 85       	ldd	r18, Z+10	; 0x0a
     354:	bc 01       	movw	r22, r24
     356:	ce 01       	movw	r24, r28
     358:	01 96       	adiw	r24, 0x01	; 1
     35a:	7c 01       	movw	r14, r24
     35c:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN8INA233_S12receiveData_Ehh>
     360:	f8 01       	movw	r30, r16
     362:	62 85       	ldd	r22, Z+10	; 0x0a
     364:	70 e0       	ldi	r23, 0x00	; 0
     366:	a8 01       	movw	r20, r16
     368:	d7 01       	movw	r26, r14
     36a:	c8 01       	movw	r24, r16
     36c:	9d 01       	movw	r18, r26
     36e:	2e 19       	sub	r18, r14
     370:	3f 09       	sbc	r19, r15
     372:	26 17       	cp	r18, r22
     374:	37 07       	cpc	r19, r23
     376:	48 f4       	brcc	.+18     	; 0x38a <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x58>
     378:	fc 01       	movw	r30, r24
     37a:	31 91       	ld	r19, Z+
     37c:	cf 01       	movw	r24, r30
     37e:	2d 91       	ld	r18, X+
     380:	32 17       	cp	r19, r18
     382:	a1 f3       	breq	.-24     	; 0x36c <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x3a>
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0b c0       	rjmp	.+22     	; 0x3a0 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x6e>
     38a:	60 0f       	add	r22, r16
     38c:	71 1f       	adc	r23, r17
     38e:	46 17       	cp	r20, r22
     390:	57 07       	cpc	r21, r23
     392:	21 f0       	breq	.+8      	; 0x39c <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x6a>
     394:	fa 01       	movw	r30, r20
     396:	11 92       	st	Z+, r1
     398:	af 01       	movw	r20, r30
     39a:	f9 cf       	rjmp	.-14     	; 0x38e <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x5c>
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	2f 96       	adiw	r28, 0x0f	; 15
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	ff 90       	pop	r15
     3b6:	ef 90       	pop	r14
     3b8:	08 95       	ret

000003ba <_ZN8INA233_S15setADC_SettingsEj>:
     3ba:	ef 92       	push	r14
     3bc:	ff 92       	push	r15
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
     3ca:	2f 97       	sbiw	r28, 0x0f	; 15
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	f8 94       	cli
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	0f be       	out	0x3f, r0	; 63
     3d4:	cd bf       	out	0x3d, r28	; 61
     3d6:	7c 01       	movw	r14, r24
     3d8:	8e 01       	movw	r16, r28
     3da:	0f 5f       	subi	r16, 0xFF	; 255
     3dc:	1f 4f       	sbci	r17, 0xFF	; 255
     3de:	8f e0       	ldi	r24, 0x0F	; 15
     3e0:	f8 01       	movw	r30, r16
     3e2:	11 92       	st	Z+, r1
     3e4:	8a 95       	dec	r24
     3e6:	e9 f7       	brne	.-6      	; 0x3e2 <_ZN8INA233_S15setADC_SettingsEj+0x28>
     3e8:	8a e0       	ldi	r24, 0x0A	; 10
     3ea:	8c 87       	std	Y+12, r24	; 0x0c
     3ec:	69 83       	std	Y+1, r22	; 0x01
     3ee:	7a 83       	std	Y+2, r23	; 0x02
     3f0:	82 e0       	ldi	r24, 0x02	; 2
     3f2:	8b 87       	std	Y+11, r24	; 0x0b
     3f4:	40 ed       	ldi	r20, 0xD0	; 208
     3f6:	b8 01       	movw	r22, r16
     3f8:	c7 01       	movw	r24, r14
     3fa:	0e 94 1c 01 	call	0x238	; 0x238 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     3fe:	40 ed       	ldi	r20, 0xD0	; 208
     400:	b8 01       	movw	r22, r16
     402:	c7 01       	movw	r24, r14
     404:	0e 94 99 01 	call	0x332	; 0x332 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>
     408:	2f 96       	adiw	r28, 0x0f	; 15
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	f8 94       	cli
     40e:	de bf       	out	0x3e, r29	; 62
     410:	0f be       	out	0x3f, r0	; 63
     412:	cd bf       	out	0x3d, r28	; 61
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	1f 91       	pop	r17
     41a:	0f 91       	pop	r16
     41c:	ff 90       	pop	r15
     41e:	ef 90       	pop	r14
     420:	08 95       	ret

00000422 <_ZN8INA233_S15setCallibrationEj>:
     422:	cf 92       	push	r12
     424:	df 92       	push	r13
     426:	ef 92       	push	r14
     428:	ff 92       	push	r15
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62
     436:	2f 97       	sbiw	r28, 0x0f	; 15
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	f8 94       	cli
     43c:	de bf       	out	0x3e, r29	; 62
     43e:	0f be       	out	0x3f, r0	; 63
     440:	cd bf       	out	0x3d, r28	; 61
     442:	7c 01       	movw	r14, r24
     444:	6b 01       	movw	r12, r22
     446:	68 e6       	ldi	r22, 0x68	; 104
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	8b ea       	ldi	r24, 0xAB	; 171
     44c:	93 e0       	ldi	r25, 0x03	; 3
     44e:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <_ZN5Print7printlnEPK19__FlashStringHelper>
     452:	8e 01       	movw	r16, r28
     454:	0f 5f       	subi	r16, 0xFF	; 255
     456:	1f 4f       	sbci	r17, 0xFF	; 255
     458:	8f e0       	ldi	r24, 0x0F	; 15
     45a:	f8 01       	movw	r30, r16
     45c:	11 92       	st	Z+, r1
     45e:	8a 95       	dec	r24
     460:	e9 f7       	brne	.-6      	; 0x45c <_ZN8INA233_S15setCallibrationEj+0x3a>
     462:	8a e0       	ldi	r24, 0x0A	; 10
     464:	8c 87       	std	Y+12, r24	; 0x0c
     466:	c9 82       	std	Y+1, r12	; 0x01
     468:	da 82       	std	Y+2, r13	; 0x02
     46a:	82 e0       	ldi	r24, 0x02	; 2
     46c:	8b 87       	std	Y+11, r24	; 0x0b
     46e:	44 ed       	ldi	r20, 0xD4	; 212
     470:	b8 01       	movw	r22, r16
     472:	c7 01       	movw	r24, r14
     474:	0e 94 1c 01 	call	0x238	; 0x238 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     478:	44 ed       	ldi	r20, 0xD4	; 212
     47a:	b8 01       	movw	r22, r16
     47c:	c7 01       	movw	r24, r14
     47e:	0e 94 99 01 	call	0x332	; 0x332 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>
     482:	2f 96       	adiw	r28, 0x0f	; 15
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	1f 91       	pop	r17
     494:	0f 91       	pop	r16
     496:	ff 90       	pop	r15
     498:	ef 90       	pop	r14
     49a:	df 90       	pop	r13
     49c:	cf 90       	pop	r12
     49e:	08 95       	ret

000004a0 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config>:
     4a0:	4f 92       	push	r4
     4a2:	5f 92       	push	r5
     4a4:	6f 92       	push	r6
     4a6:	7f 92       	push	r7
     4a8:	af 92       	push	r10
     4aa:	bf 92       	push	r11
     4ac:	cf 92       	push	r12
     4ae:	df 92       	push	r13
     4b0:	ef 92       	push	r14
     4b2:	ff 92       	push	r15
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
     4c0:	ae 97       	sbiw	r28, 0x2e	; 46
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	f8 94       	cli
     4c6:	de bf       	out	0x3e, r29	; 62
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	cd bf       	out	0x3d, r28	; 61
     4cc:	5c 01       	movw	r10, r24
     4ce:	cf 8e       	std	Y+31, r12	; 0x1f
     4d0:	d8 a2       	std	Y+32, r13	; 0x20
     4d2:	e9 a2       	std	Y+33, r14	; 0x21
     4d4:	fa a2       	std	Y+34, r15	; 0x22
     4d6:	0b a3       	std	Y+35, r16	; 0x23
     4d8:	1c a3       	std	Y+36, r17	; 0x24
     4da:	2d a3       	std	Y+37, r18	; 0x25
     4dc:	3e a3       	std	Y+38, r19	; 0x26
     4de:	4f a3       	std	Y+39, r20	; 0x27
     4e0:	58 a7       	std	Y+40, r21	; 0x28
     4e2:	69 a7       	std	Y+41, r22	; 0x29
     4e4:	7a a7       	std	Y+42, r23	; 0x2a
     4e6:	cf 8c       	ldd	r12, Y+31	; 0x1f
     4e8:	d8 a0       	ldd	r13, Y+32	; 0x20
     4ea:	e9 a0       	ldd	r14, Y+33	; 0x21
     4ec:	fa a0       	ldd	r15, Y+34	; 0x22
     4ee:	8b a1       	ldd	r24, Y+35	; 0x23
     4f0:	9c a1       	ldd	r25, Y+36	; 0x24
     4f2:	ad a1       	ldd	r26, Y+37	; 0x25
     4f4:	be a1       	ldd	r27, Y+38	; 0x26
     4f6:	8b a7       	std	Y+43, r24	; 0x2b
     4f8:	9c a7       	std	Y+44, r25	; 0x2c
     4fa:	ad a7       	std	Y+45, r26	; 0x2d
     4fc:	be a7       	std	Y+46, r27	; 0x2e
     4fe:	4f a0       	ldd	r4, Y+39	; 0x27
     500:	58 a4       	ldd	r5, Y+40	; 0x28
     502:	69 a4       	ldd	r6, Y+41	; 0x29
     504:	7a a4       	ldd	r7, Y+42	; 0x2a
     506:	66 e9       	ldi	r22, 0x96	; 150
     508:	71 e0       	ldi	r23, 0x01	; 1
     50a:	8b ea       	ldi	r24, 0xAB	; 171
     50c:	93 e0       	ldi	r25, 0x03	; 3
     50e:	0e 94 0a 0c 	call	0x1814	; 0x1814 <_ZN5Print7printlnEPKc>
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	a9 01       	movw	r20, r18
     518:	c7 01       	movw	r24, r14
     51a:	b6 01       	movw	r22, r12
     51c:	0e 94 0f 09 	call	0x121e	; 0x121e <__gesf2>
     520:	18 16       	cp	r1, r24
     522:	0c f0       	brlt	.+2      	; 0x526 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x86>
     524:	51 c0       	rjmp	.+162    	; 0x5c8 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x128>
     526:	d5 01       	movw	r26, r10
     528:	11 96       	adiw	r26, 0x01	; 1
     52a:	6d 91       	ld	r22, X+
     52c:	7c 91       	ld	r23, X
     52e:	12 97       	sbiw	r26, 0x02	; 2
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 81 08 	call	0x1102	; 0x1102 <__floatunsisf>
     538:	a7 01       	movw	r20, r14
     53a:	96 01       	movw	r18, r12
     53c:	0e 94 14 09 	call	0x1228	; 0x1228 <__mulsf3>
     540:	6b 01       	movw	r12, r22
     542:	7c 01       	movw	r14, r24
     544:	20 e0       	ldi	r18, 0x00	; 0
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	a9 01       	movw	r20, r18
     54a:	0e 94 0f 09 	call	0x121e	; 0x121e <__gesf2>
     54e:	20 e0       	ldi	r18, 0x00	; 0
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	40 e0       	ldi	r20, 0x00	; 0
     554:	5f e3       	ldi	r21, 0x3F	; 63
     556:	87 fd       	sbrc	r24, 7
     558:	05 c0       	rjmp	.+10     	; 0x564 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xc4>
     55a:	c7 01       	movw	r24, r14
     55c:	b6 01       	movw	r22, r12
     55e:	0e 94 6d 07 	call	0xeda	; 0xeda <__addsf3>
     562:	04 c0       	rjmp	.+8      	; 0x56c <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xcc>
     564:	c7 01       	movw	r24, r14
     566:	b6 01       	movw	r22, r12
     568:	0e 94 6c 07 	call	0xed8	; 0xed8 <__subsf3>
     56c:	0e 94 4b 08 	call	0x1096	; 0x1096 <__fixsfsi>
     570:	8b 01       	movw	r16, r22
     572:	7e 01       	movw	r14, r28
     574:	b0 e1       	ldi	r27, 0x10	; 16
     576:	eb 0e       	add	r14, r27
     578:	f1 1c       	adc	r15, r1
     57a:	8f e0       	ldi	r24, 0x0F	; 15
     57c:	f7 01       	movw	r30, r14
     57e:	11 92       	st	Z+, r1
     580:	8a 95       	dec	r24
     582:	e9 f7       	brne	.-6      	; 0x57e <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xde>
     584:	8a e0       	ldi	r24, 0x0A	; 10
     586:	8b 8f       	std	Y+27, r24	; 0x1b
     588:	08 8b       	std	Y+16, r16	; 0x10
     58a:	19 8b       	std	Y+17, r17	; 0x11
     58c:	82 e0       	ldi	r24, 0x02	; 2
     58e:	8a 8f       	std	Y+26, r24	; 0x1a
     590:	6f ee       	ldi	r22, 0xEF	; 239
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	8b ea       	ldi	r24, 0xAB	; 171
     596:	93 e0       	ldi	r25, 0x03	; 3
     598:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <_ZN5Print7printlnEPK19__FlashStringHelper>
     59c:	4a e0       	ldi	r20, 0x0A	; 10
     59e:	50 e0       	ldi	r21, 0x00	; 0
     5a0:	b8 01       	movw	r22, r16
     5a2:	8b ea       	ldi	r24, 0xAB	; 171
     5a4:	93 e0       	ldi	r25, 0x03	; 3
     5a6:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN5Print7printlnEji>
     5aa:	4a e4       	ldi	r20, 0x4A	; 74
     5ac:	b7 01       	movw	r22, r14
     5ae:	c5 01       	movw	r24, r10
     5b0:	0e 94 1c 01 	call	0x238	; 0x238 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     5b4:	22 e0       	ldi	r18, 0x02	; 2
     5b6:	4a e4       	ldi	r20, 0x4A	; 74
     5b8:	b5 01       	movw	r22, r10
     5ba:	ce 01       	movw	r24, r28
     5bc:	01 96       	adiw	r24, 0x01	; 1
     5be:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN8INA233_S12receiveData_Ehh>
     5c2:	66 ed       	ldi	r22, 0xD6	; 214
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	af c0       	rjmp	.+350    	; 0x726 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x286>
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	a9 01       	movw	r20, r18
     5ce:	6b a5       	ldd	r22, Y+43	; 0x2b
     5d0:	7c a5       	ldd	r23, Y+44	; 0x2c
     5d2:	8d a5       	ldd	r24, Y+45	; 0x2d
     5d4:	9e a5       	ldd	r25, Y+46	; 0x2e
     5d6:	0e 94 0f 09 	call	0x121e	; 0x121e <__gesf2>
     5da:	18 16       	cp	r1, r24
     5dc:	0c f0       	brlt	.+2      	; 0x5e0 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x140>
     5de:	4e c0       	rjmp	.+156    	; 0x67c <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x1dc>
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	48 e4       	ldi	r20, 0x48	; 72
     5e6:	54 e4       	ldi	r21, 0x44	; 68
     5e8:	6b a5       	ldd	r22, Y+43	; 0x2b
     5ea:	7c a5       	ldd	r23, Y+44	; 0x2c
     5ec:	8d a5       	ldd	r24, Y+45	; 0x2d
     5ee:	9e a5       	ldd	r25, Y+46	; 0x2e
     5f0:	0e 94 14 09 	call	0x1228	; 0x1228 <__mulsf3>
     5f4:	6b 01       	movw	r12, r22
     5f6:	7c 01       	movw	r14, r24
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	a9 01       	movw	r20, r18
     5fe:	0e 94 0f 09 	call	0x121e	; 0x121e <__gesf2>
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	40 e0       	ldi	r20, 0x00	; 0
     608:	5f e3       	ldi	r21, 0x3F	; 63
     60a:	87 fd       	sbrc	r24, 7
     60c:	05 c0       	rjmp	.+10     	; 0x618 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x178>
     60e:	c7 01       	movw	r24, r14
     610:	b6 01       	movw	r22, r12
     612:	0e 94 6d 07 	call	0xeda	; 0xeda <__addsf3>
     616:	04 c0       	rjmp	.+8      	; 0x620 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x180>
     618:	c7 01       	movw	r24, r14
     61a:	b6 01       	movw	r22, r12
     61c:	0e 94 6c 07 	call	0xed8	; 0xed8 <__subsf3>
     620:	0e 94 4b 08 	call	0x1096	; 0x1096 <__fixsfsi>
     624:	8b 01       	movw	r16, r22
     626:	7e 01       	movw	r14, r28
     628:	f0 e1       	ldi	r31, 0x10	; 16
     62a:	ef 0e       	add	r14, r31
     62c:	f1 1c       	adc	r15, r1
     62e:	8f e0       	ldi	r24, 0x0F	; 15
     630:	d7 01       	movw	r26, r14
     632:	1d 92       	st	X+, r1
     634:	8a 95       	dec	r24
     636:	e9 f7       	brne	.-6      	; 0x632 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x192>
     638:	8a e0       	ldi	r24, 0x0A	; 10
     63a:	8b 8f       	std	Y+27, r24	; 0x1b
     63c:	08 8b       	std	Y+16, r16	; 0x10
     63e:	19 8b       	std	Y+17, r17	; 0x11
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	8a 8f       	std	Y+26, r24	; 0x1a
     644:	66 ec       	ldi	r22, 0xC6	; 198
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	8b ea       	ldi	r24, 0xAB	; 171
     64a:	93 e0       	ldi	r25, 0x03	; 3
     64c:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <_ZN5Print7printlnEPK19__FlashStringHelper>
     650:	4a e0       	ldi	r20, 0x0A	; 10
     652:	50 e0       	ldi	r21, 0x00	; 0
     654:	b8 01       	movw	r22, r16
     656:	8b ea       	ldi	r24, 0xAB	; 171
     658:	93 e0       	ldi	r25, 0x03	; 3
     65a:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN5Print7printlnEji>
     65e:	47 e5       	ldi	r20, 0x57	; 87
     660:	b7 01       	movw	r22, r14
     662:	c5 01       	movw	r24, r10
     664:	0e 94 1c 01 	call	0x238	; 0x238 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     668:	22 e0       	ldi	r18, 0x02	; 2
     66a:	47 e5       	ldi	r20, 0x57	; 87
     66c:	b5 01       	movw	r22, r10
     66e:	ce 01       	movw	r24, r28
     670:	01 96       	adiw	r24, 0x01	; 1
     672:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN8INA233_S12receiveData_Ehh>
     676:	6d ea       	ldi	r22, 0xAD	; 173
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	55 c0       	rjmp	.+170    	; 0x726 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x286>
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	a9 01       	movw	r20, r18
     682:	c3 01       	movw	r24, r6
     684:	b2 01       	movw	r22, r4
     686:	0e 94 0f 09 	call	0x121e	; 0x121e <__gesf2>
     68a:	18 16       	cp	r1, r24
     68c:	0c f0       	brlt	.+2      	; 0x690 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x1f0>
     68e:	5a c0       	rjmp	.+180    	; 0x744 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x2a4>
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	48 e4       	ldi	r20, 0x48	; 72
     696:	54 e4       	ldi	r21, 0x44	; 68
     698:	c3 01       	movw	r24, r6
     69a:	b2 01       	movw	r22, r4
     69c:	0e 94 14 09 	call	0x1228	; 0x1228 <__mulsf3>
     6a0:	6b 01       	movw	r12, r22
     6a2:	7c 01       	movw	r14, r24
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	a9 01       	movw	r20, r18
     6aa:	0e 94 0f 09 	call	0x121e	; 0x121e <__gesf2>
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	5f e3       	ldi	r21, 0x3F	; 63
     6b6:	87 fd       	sbrc	r24, 7
     6b8:	05 c0       	rjmp	.+10     	; 0x6c4 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x224>
     6ba:	c7 01       	movw	r24, r14
     6bc:	b6 01       	movw	r22, r12
     6be:	0e 94 6d 07 	call	0xeda	; 0xeda <__addsf3>
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x22c>
     6c4:	c7 01       	movw	r24, r14
     6c6:	b6 01       	movw	r22, r12
     6c8:	0e 94 6c 07 	call	0xed8	; 0xed8 <__subsf3>
     6cc:	0e 94 4b 08 	call	0x1096	; 0x1096 <__fixsfsi>
     6d0:	8b 01       	movw	r16, r22
     6d2:	7e 01       	movw	r14, r28
     6d4:	b0 e1       	ldi	r27, 0x10	; 16
     6d6:	eb 0e       	add	r14, r27
     6d8:	f1 1c       	adc	r15, r1
     6da:	8f e0       	ldi	r24, 0x0F	; 15
     6dc:	f7 01       	movw	r30, r14
     6de:	11 92       	st	Z+, r1
     6e0:	8a 95       	dec	r24
     6e2:	e9 f7       	brne	.-6      	; 0x6de <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x23e>
     6e4:	8a e0       	ldi	r24, 0x0A	; 10
     6e6:	8b 8f       	std	Y+27, r24	; 0x1b
     6e8:	08 8b       	std	Y+16, r16	; 0x10
     6ea:	19 8b       	std	Y+17, r17	; 0x11
     6ec:	82 e0       	ldi	r24, 0x02	; 2
     6ee:	8a 8f       	std	Y+26, r24	; 0x1a
     6f0:	6d e9       	ldi	r22, 0x9D	; 157
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	8b ea       	ldi	r24, 0xAB	; 171
     6f6:	93 e0       	ldi	r25, 0x03	; 3
     6f8:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <_ZN5Print7printlnEPK19__FlashStringHelper>
     6fc:	4a e0       	ldi	r20, 0x0A	; 10
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	b8 01       	movw	r22, r16
     702:	8b ea       	ldi	r24, 0xAB	; 171
     704:	93 e0       	ldi	r25, 0x03	; 3
     706:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN5Print7printlnEji>
     70a:	48 e5       	ldi	r20, 0x58	; 88
     70c:	b7 01       	movw	r22, r14
     70e:	c5 01       	movw	r24, r10
     710:	0e 94 1c 01 	call	0x238	; 0x238 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     714:	22 e0       	ldi	r18, 0x02	; 2
     716:	48 e5       	ldi	r20, 0x58	; 88
     718:	b5 01       	movw	r22, r10
     71a:	ce 01       	movw	r24, r28
     71c:	01 96       	adiw	r24, 0x01	; 1
     71e:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN8INA233_S12receiveData_Ehh>
     722:	64 e8       	ldi	r22, 0x84	; 132
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	8b ea       	ldi	r24, 0xAB	; 171
     728:	93 e0       	ldi	r25, 0x03	; 3
     72a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <_ZN5Print7printlnEPK19__FlashStringHelper>
     72e:	69 81       	ldd	r22, Y+1	; 0x01
     730:	7a 81       	ldd	r23, Y+2	; 0x02
     732:	4a e0       	ldi	r20, 0x0A	; 10
     734:	50 e0       	ldi	r21, 0x00	; 0
     736:	8b ea       	ldi	r24, 0xAB	; 171
     738:	93 e0       	ldi	r25, 0x03	; 3
     73a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <_ZN5Print7printlnEii>
     73e:	8a e0       	ldi	r24, 0x0A	; 10
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	00 c0       	rjmp	.+0      	; 0x744 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x2a4>
     744:	ae 96       	adiw	r28, 0x2e	; 46
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	f8 94       	cli
     74a:	de bf       	out	0x3e, r29	; 62
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	cd bf       	out	0x3d, r28	; 61
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	ff 90       	pop	r15
     75a:	ef 90       	pop	r14
     75c:	df 90       	pop	r13
     75e:	cf 90       	pop	r12
     760:	bf 90       	pop	r11
     762:	af 90       	pop	r10
     764:	7f 90       	pop	r7
     766:	6f 90       	pop	r6
     768:	5f 90       	pop	r5
     76a:	4f 90       	pop	r4
     76c:	08 95       	ret

0000076e <_ZN8INA233_S12getVoltage_LEv>:

float INA233_S::getVoltage_L()
{
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	cd b7       	in	r28, 0x3d	; 61
     774:	de b7       	in	r29, 0x3e	; 62
     776:	2f 97       	sbiw	r28, 0x0f	; 15
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	de bf       	out	0x3e, r29	; 62
     77e:	0f be       	out	0x3f, r0	; 63
     780:	cd bf       	out	0x3d, r28	; 61
    INA233_Data_Package data = receiveData_(0x88, 2);
     782:	22 e0       	ldi	r18, 0x02	; 2
     784:	48 e8       	ldi	r20, 0x88	; 136
     786:	bc 01       	movw	r22, r24
     788:	ce 01       	movw	r24, r28
     78a:	01 96       	adiw	r24, 0x01	; 1
     78c:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN8INA233_S12receiveData_Ehh>
    int16_t dataWord = unpackWord(&data);
    return (static_cast<float>(dataWord) * 1.0 / 800.0);
     790:	69 81       	ldd	r22, Y+1	; 0x01
     792:	7a 81       	ldd	r23, Y+2	; 0x02
     794:	07 2e       	mov	r0, r23
     796:	00 0c       	add	r0, r0
     798:	88 0b       	sbc	r24, r24
     79a:	99 0b       	sbc	r25, r25
     79c:	0e 94 83 08 	call	0x1106	; 0x1106 <__floatsisf>
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	48 e4       	ldi	r20, 0x48	; 72
     7a6:	54 e4       	ldi	r21, 0x44	; 68
     7a8:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__divsf3>
}
     7ac:	2f 96       	adiw	r28, 0x0f	; 15
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	de bf       	out	0x3e, r29	; 62
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	cd bf       	out	0x3d, r28	; 61
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <_ZN8INA233_S12getVoltage_SEv>:

float INA233_S::getVoltage_S()
{
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
     7c6:	2f 97       	sbiw	r28, 0x0f	; 15
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	cd bf       	out	0x3d, r28	; 61
    INA233_Data_Package data = receiveData_(0XD1, 2);
     7d2:	22 e0       	ldi	r18, 0x02	; 2
     7d4:	41 ed       	ldi	r20, 0xD1	; 209
     7d6:	bc 01       	movw	r22, r24
     7d8:	ce 01       	movw	r24, r28
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN8INA233_S12receiveData_Ehh>
    int16_t dataWord = unpackWord(&data);
    return (25.0 * static_cast<float>(dataWord) / 10000000.0); //Returns shunt voltage reading.
     7e0:	69 81       	ldd	r22, Y+1	; 0x01
     7e2:	7a 81       	ldd	r23, Y+2	; 0x02
     7e4:	07 2e       	mov	r0, r23
     7e6:	00 0c       	add	r0, r0
     7e8:	88 0b       	sbc	r24, r24
     7ea:	99 0b       	sbc	r25, r25
     7ec:	0e 94 83 08 	call	0x1106	; 0x1106 <__floatsisf>
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	48 ec       	ldi	r20, 0xC8	; 200
     7f6:	51 e4       	ldi	r21, 0x41	; 65
     7f8:	0e 94 14 09 	call	0x1228	; 0x1228 <__mulsf3>
     7fc:	20 e8       	ldi	r18, 0x80	; 128
     7fe:	36 e9       	ldi	r19, 0x96	; 150
     800:	48 e1       	ldi	r20, 0x18	; 24
     802:	5b e4       	ldi	r21, 0x4B	; 75
     804:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__divsf3>
}
     808:	2f 96       	adiw	r28, 0x0f	; 15
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	f8 94       	cli
     80e:	de bf       	out	0x3e, r29	; 62
     810:	0f be       	out	0x3f, r0	; 63
     812:	cd bf       	out	0x3d, r28	; 61
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	08 95       	ret

0000081a <_ZN8INA233_S10getCurrentEv>:

float INA233_S::getCurrent()
{
     81a:	cf 92       	push	r12
     81c:	df 92       	push	r13
     81e:	ef 92       	push	r14
     820:	ff 92       	push	r15
     822:	0f 93       	push	r16
     824:	1f 93       	push	r17
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	cd b7       	in	r28, 0x3d	; 61
     82c:	de b7       	in	r29, 0x3e	; 62
     82e:	2f 97       	sbiw	r28, 0x0f	; 15
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	f8 94       	cli
     834:	de bf       	out	0x3e, r29	; 62
     836:	0f be       	out	0x3f, r0	; 63
     838:	cd bf       	out	0x3d, r28	; 61
     83a:	7c 01       	movw	r14, r24
    INA233_Data_Package data = receiveData_(0x89, 2);
     83c:	22 e0       	ldi	r18, 0x02	; 2
     83e:	49 e8       	ldi	r20, 0x89	; 137
     840:	bc 01       	movw	r22, r24
     842:	ce 01       	movw	r24, r28
     844:	01 96       	adiw	r24, 0x01	; 1
     846:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN8INA233_S12receiveData_Ehh>

int16_t INA233_S::unpackWord(INA233_Data_Package *data)
{
    int16_t word;
    word = static_cast<int>(data->msg[0]);
    word |= (static_cast<int>(data->msg[1]) << 8);
     84a:	09 81       	ldd	r16, Y+1	; 0x01
     84c:	1a 81       	ldd	r17, Y+2	; 0x02

float INA233_S::getCurrent()
{
    INA233_Data_Package data = receiveData_(0x89, 2);
    int16_t dataWord = unpackWord(&data);
    Serial.print("Current bitsnbuts");
     84e:	63 ea       	ldi	r22, 0xA3	; 163
     850:	71 e0       	ldi	r23, 0x01	; 1
     852:	8b ea       	ldi	r24, 0xAB	; 171
     854:	93 e0       	ldi	r25, 0x03	; 3
     856:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_ZN5Print5printEPKc>
    Serial.println(dataWord);
     85a:	4a e0       	ldi	r20, 0x0A	; 10
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	b8 01       	movw	r22, r16
     860:	8b ea       	ldi	r24, 0xAB	; 171
     862:	93 e0       	ldi	r25, 0x03	; 3
     864:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <_ZN5Print7printlnEii>
    return (static_cast<float>(dataWord) * (1.0 / m_value_));
     868:	f7 01       	movw	r30, r14
     86a:	61 81       	ldd	r22, Z+1	; 0x01
     86c:	72 81       	ldd	r23, Z+2	; 0x02
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 81 08 	call	0x1102	; 0x1102 <__floatunsisf>
     876:	9b 01       	movw	r18, r22
     878:	ac 01       	movw	r20, r24
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	80 e8       	ldi	r24, 0x80	; 128
     880:	9f e3       	ldi	r25, 0x3F	; 63
     882:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__divsf3>
     886:	6b 01       	movw	r12, r22
     888:	7c 01       	movw	r14, r24
     88a:	b8 01       	movw	r22, r16
     88c:	11 0f       	add	r17, r17
     88e:	88 0b       	sbc	r24, r24
     890:	99 0b       	sbc	r25, r25
     892:	0e 94 83 08 	call	0x1106	; 0x1106 <__floatsisf>
     896:	9b 01       	movw	r18, r22
     898:	ac 01       	movw	r20, r24
     89a:	c7 01       	movw	r24, r14
     89c:	b6 01       	movw	r22, r12
     89e:	0e 94 14 09 	call	0x1228	; 0x1228 <__mulsf3>
}
     8a2:	2f 96       	adiw	r28, 0x0f	; 15
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	f8 94       	cli
     8a8:	de bf       	out	0x3e, r29	; 62
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	cd bf       	out	0x3d, r28	; 61
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	1f 91       	pop	r17
     8b4:	0f 91       	pop	r16
     8b6:	ff 90       	pop	r15
     8b8:	ef 90       	pop	r14
     8ba:	df 90       	pop	r13
     8bc:	cf 90       	pop	r12
     8be:	08 95       	ret

000008c0 <_ZN8INA233_S8getAlarmEv>:

void INA233_S::getAlarm()
{
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
     8c8:	2f 97       	sbiw	r28, 0x0f	; 15
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	cd bf       	out	0x3d, r28	; 61
    INA233_Data_Package data = receiveData_(0x7C, 1);
     8d4:	21 e0       	ldi	r18, 0x01	; 1
     8d6:	4c e7       	ldi	r20, 0x7C	; 124
     8d8:	bc 01       	movw	r22, r24
     8da:	ce 01       	movw	r24, r28
     8dc:	01 96       	adiw	r24, 0x01	; 1
     8de:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN8INA233_S12receiveData_Ehh>
    Serial.print("status input: ");
     8e2:	65 eb       	ldi	r22, 0xB5	; 181
     8e4:	71 e0       	ldi	r23, 0x01	; 1
     8e6:	8b ea       	ldi	r24, 0xAB	; 171
     8e8:	93 e0       	ldi	r25, 0x03	; 3
     8ea:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_ZN5Print5printEPKc>
    Serial.println(data.msg[0], BIN);
     8ee:	42 e0       	ldi	r20, 0x02	; 2
     8f0:	50 e0       	ldi	r21, 0x00	; 0
     8f2:	69 81       	ldd	r22, Y+1	; 0x01
     8f4:	8b ea       	ldi	r24, 0xAB	; 171
     8f6:	93 e0       	ldi	r25, 0x03	; 3
}
     8f8:	2f 96       	adiw	r28, 0x0f	; 15
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	f8 94       	cli
     8fe:	de bf       	out	0x3e, r29	; 62
     900:	0f be       	out	0x3f, r0	; 63
     902:	cd bf       	out	0x3d, r28	; 61
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28

void INA233_S::getAlarm()
{
    INA233_Data_Package data = receiveData_(0x7C, 1);
    Serial.print("status input: ");
    Serial.println(data.msg[0], BIN);
     908:	0c 94 79 0c 	jmp	0x18f2	; 0x18f2 <_ZN5Print7printlnEhi>

0000090c <_ZN8INA233_S17testCommunicationEv>:
{
    Serial.println("reset chip");
    transmitCommand(0x12);
}
int INA233_S::testCommunication()
{
     90c:	af 92       	push	r10
     90e:	bf 92       	push	r11
     910:	df 92       	push	r13
     912:	ef 92       	push	r14
     914:	ff 92       	push	r15
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
     922:	66 97       	sbiw	r28, 0x16	; 22
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	f8 94       	cli
     928:	de bf       	out	0x3e, r29	; 62
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	cd bf       	out	0x3d, r28	; 61
     92e:	8c 01       	movw	r16, r24
    Serial.println("test communications");
     930:	64 ec       	ldi	r22, 0xC4	; 196
     932:	71 e0       	ldi	r23, 0x01	; 1
     934:	8b ea       	ldi	r24, 0xAB	; 171
     936:	93 e0       	ldi	r25, 0x03	; 3
     938:	0e 94 0a 0c 	call	0x1814	; 0x1814 <_ZN5Print7printlnEPKc>
    // TO DO ! Read MFR_MODEL, compare if correct.
    // Is there a way in wire.h to check for communications?
    INA233_Data_Package data = receiveData_(0x12, 7);
     93c:	27 e0       	ldi	r18, 0x07	; 7
     93e:	42 e1       	ldi	r20, 0x12	; 18
     940:	b8 01       	movw	r22, r16
     942:	ce 01       	movw	r24, r28
     944:	01 96       	adiw	r24, 0x01	; 1
     946:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN8INA233_S12receiveData_Ehh>
    uint8_t compare[7]{
        0x06, 0x49, 0x4E, 0x41, 0x32, 0x33, 0x33};
     94a:	87 e0       	ldi	r24, 0x07	; 7
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	f1 e0       	ldi	r31, 0x01	; 1
     950:	de 01       	movw	r26, r28
     952:	50 96       	adiw	r26, 0x10	; 16
     954:	01 90       	ld	r0, Z+
     956:	0d 92       	st	X+, r0
     958:	8a 95       	dec	r24
     95a:	e1 f7       	brne	.-8      	; 0x954 <_ZN8INA233_S17testCommunicationEv+0x48>
     95c:	8e 01       	movw	r16, r28
     95e:	0f 5f       	subi	r16, 0xFF	; 255
     960:	1f 4f       	sbci	r17, 0xFF	; 255
     962:	7e 01       	movw	r14, r28
     964:	80 e1       	ldi	r24, 0x10	; 16
     966:	e8 0e       	add	r14, r24
     968:	f1 1c       	adc	r15, r1
     96a:	5e 01       	movw	r10, r28
     96c:	e8 e0       	ldi	r30, 0x08	; 8
     96e:	ae 0e       	add	r10, r30
     970:	b1 1c       	adc	r11, r1

    for (int ii = 0; ii <= 6; ii++)
    {
        Serial.print("Readback MFR_MODEL: ");
     972:	68 ed       	ldi	r22, 0xD8	; 216
     974:	71 e0       	ldi	r23, 0x01	; 1
     976:	8b ea       	ldi	r24, 0xAB	; 171
     978:	93 e0       	ldi	r25, 0x03	; 3
     97a:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_ZN5Print5printEPKc>
        Serial.print(data.msg[ii]);
     97e:	f8 01       	movw	r30, r16
     980:	d1 90       	ld	r13, Z+
     982:	8f 01       	movw	r16, r30
     984:	4a e0       	ldi	r20, 0x0A	; 10
     986:	50 e0       	ldi	r21, 0x00	; 0
     988:	6d 2d       	mov	r22, r13
     98a:	8b ea       	ldi	r24, 0xAB	; 171
     98c:	93 e0       	ldi	r25, 0x03	; 3
     98e:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <_ZN5Print5printEhi>
        if (compare[ii] != data.msg[ii])
     992:	f7 01       	movw	r30, r14
     994:	81 91       	ld	r24, Z+
     996:	7f 01       	movw	r14, r30
     998:	d8 16       	cp	r13, r24
     99a:	49 f0       	breq	.+18     	; 0x9ae <_ZN8INA233_S17testCommunicationEv+0xa2>
        {
            Serial.println("Communication error");
     99c:	6d ee       	ldi	r22, 0xED	; 237
     99e:	71 e0       	ldi	r23, 0x01	; 1
     9a0:	8b ea       	ldi	r24, 0xAB	; 171
     9a2:	93 e0       	ldi	r25, 0x03	; 3
     9a4:	0e 94 0a 0c 	call	0x1814	; 0x1814 <_ZN5Print7printlnEPKc>
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	05 c0       	rjmp	.+10     	; 0x9b8 <_ZN8INA233_S17testCommunicationEv+0xac>
    // Is there a way in wire.h to check for communications?
    INA233_Data_Package data = receiveData_(0x12, 7);
    uint8_t compare[7]{
        0x06, 0x49, 0x4E, 0x41, 0x32, 0x33, 0x33};

    for (int ii = 0; ii <= 6; ii++)
     9ae:	0a 15       	cp	r16, r10
     9b0:	1b 05       	cpc	r17, r11
     9b2:	f9 f6       	brne	.-66     	; 0x972 <_ZN8INA233_S17testCommunicationEv+0x66>
            Serial.println("Communication error");
			return 1;
        }
    }
	
	return 0;
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	90 e0       	ldi	r25, 0x00	; 0
}
     9b8:	66 96       	adiw	r28, 0x16	; 22
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	f8 94       	cli
     9be:	de bf       	out	0x3e, r29	; 62
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	cd bf       	out	0x3d, r28	; 61
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	ff 90       	pop	r15
     9ce:	ef 90       	pop	r14
     9d0:	df 90       	pop	r13
     9d2:	bf 90       	pop	r11
     9d4:	af 90       	pop	r10
     9d6:	08 95       	ret

000009d8 <_ZN8INA233_S10initializeEv>:
{
	initialize();
}

int INA233_S::initialize()
{
     9d8:	cf 92       	push	r12
     9da:	df 92       	push	r13
     9dc:	ef 92       	push	r14
     9de:	ff 92       	push	r15
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	ec 01       	movw	r28, r24
    testCommunication();
     9ea:	0e 94 86 04 	call	0x90c	; 0x90c <_ZN8INA233_S17testCommunicationEv>
    resetChip();
     9ee:	ce 01       	movw	r24, r28
     9f0:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN8INA233_S9resetChipEv>
    if(setCallibration(cal_value_) == 1){
     9f4:	6b 81       	ldd	r22, Y+3	; 0x03
     9f6:	7c 81       	ldd	r23, Y+4	; 0x04
     9f8:	ce 01       	movw	r24, r28
     9fa:	0e 94 11 02 	call	0x422	; 0x422 <_ZN8INA233_S15setCallibrationEj>
     9fe:	81 30       	cpi	r24, 0x01	; 1
     a00:	91 05       	cpc	r25, r1
     a02:	d9 f0       	breq	.+54     	; 0xa3a <_ZN8INA233_S10initializeEv+0x62>
		return 1;	
	}
    resetAlarm();
     a04:	ce 01       	movw	r24, r28
     a06:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_ZN8INA233_S10resetAlarmEv>
	
	pinMode(MOSpin_, OUTPUT);
     a0a:	61 e0       	ldi	r22, 0x01	; 1
     a0c:	8d 81       	ldd	r24, Y+5	; 0x05
     a0e:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <pinMode>
	close_MOSFET();
     a12:	ce 01       	movw	r24, r28
     a14:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN8INA233_S12close_MOSFETEv>
	setAlarmLimits(alarmConfigSensor_);
     a18:	ce 80       	ldd	r12, Y+6	; 0x06
     a1a:	df 80       	ldd	r13, Y+7	; 0x07
     a1c:	e8 84       	ldd	r14, Y+8	; 0x08
     a1e:	f9 84       	ldd	r15, Y+9	; 0x09
     a20:	0a 85       	ldd	r16, Y+10	; 0x0a
     a22:	1b 85       	ldd	r17, Y+11	; 0x0b
     a24:	2c 85       	ldd	r18, Y+12	; 0x0c
     a26:	3d 85       	ldd	r19, Y+13	; 0x0d
     a28:	4e 85       	ldd	r20, Y+14	; 0x0e
     a2a:	5f 85       	ldd	r21, Y+15	; 0x0f
     a2c:	68 89       	ldd	r22, Y+16	; 0x10
     a2e:	79 89       	ldd	r23, Y+17	; 0x11
     a30:	ce 01       	movw	r24, r28
     a32:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config>
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	90 e0       	ldi	r25, 0x00	; 0
	return 0;
}
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	ff 90       	pop	r15
     a44:	ef 90       	pop	r14
     a46:	df 90       	pop	r13
     a48:	cf 90       	pop	r12
     a4a:	08 95       	ret

00000a4c <_ZN8INA233_SC1Ehjjh19INA233_Alarm_Config>:
#include "INA233.h"

INA233_S::INA233_S(uint8_t address, uint16_t m_value, uint16_t cal_value, uint8_t MOSpin, INA233_Alarm_Config alarmConfigSensor) : address_(address), m_value_(m_value), cal_value_(cal_value), MOSpin_(MOSpin), alarmConfigSensor_(alarmConfigSensor)
     a4c:	0f 93       	push	r16
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
     a56:	dc 01       	movw	r26, r24
     a58:	6c 93       	st	X, r22
     a5a:	12 96       	adiw	r26, 0x02	; 2
     a5c:	5c 93       	st	X, r21
     a5e:	4e 93       	st	-X, r20
     a60:	11 97       	sbiw	r26, 0x01	; 1
     a62:	14 96       	adiw	r26, 0x04	; 4
     a64:	3c 93       	st	X, r19
     a66:	2e 93       	st	-X, r18
     a68:	13 97       	sbiw	r26, 0x03	; 3
     a6a:	15 96       	adiw	r26, 0x05	; 5
     a6c:	0c 93       	st	X, r16
     a6e:	15 97       	sbiw	r26, 0x05	; 5
     a70:	2c e0       	ldi	r18, 0x0C	; 12
     a72:	fe 01       	movw	r30, r28
     a74:	36 96       	adiw	r30, 0x06	; 6
     a76:	16 96       	adiw	r26, 0x06	; 6
     a78:	01 90       	ld	r0, Z+
     a7a:	0d 92       	st	X+, r0
     a7c:	2a 95       	dec	r18
     a7e:	e1 f7       	brne	.-8      	; 0xa78 <_ZN8INA233_SC1Ehjjh19INA233_Alarm_Config+0x2c>
#define INA233

#include "Arduino.h"
#include <Wire.h>

struct INA233_Data_Package
     a80:	2a e0       	ldi	r18, 0x0A	; 10
     a82:	fc 01       	movw	r30, r24
     a84:	72 96       	adiw	r30, 0x12	; 18
     a86:	df 01       	movw	r26, r30
     a88:	32 2f       	mov	r19, r18
     a8a:	1d 92       	st	X+, r1
     a8c:	3a 95       	dec	r19
     a8e:	e9 f7       	brne	.-6      	; 0xa8a <_ZN8INA233_SC1Ehjjh19INA233_Alarm_Config+0x3e>
     a90:	dc 01       	movw	r26, r24
     a92:	5c 96       	adiw	r26, 0x1c	; 28
     a94:	1c 92       	st	X, r1
     a96:	5c 97       	sbiw	r26, 0x1c	; 28
     a98:	5d 96       	adiw	r26, 0x1d	; 29
     a9a:	2c 93       	st	X, r18
     a9c:	5d 97       	sbiw	r26, 0x1d	; 29
     a9e:	5e 96       	adiw	r26, 0x1e	; 30
     aa0:	1c 92       	st	X, r1
     aa2:	5e 97       	sbiw	r26, 0x1e	; 30
     aa4:	5f 96       	adiw	r26, 0x1f	; 31
     aa6:	1c 92       	st	X, r1
     aa8:	5f 97       	sbiw	r26, 0x1f	; 31
     aaa:	90 96       	adiw	r26, 0x20	; 32
     aac:	1c 92       	st	X, r1
{
	initialize();
}
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	0f 91       	pop	r16
#include "INA233.h"

INA233_S::INA233_S(uint8_t address, uint16_t m_value, uint16_t cal_value, uint8_t MOSpin, INA233_Alarm_Config alarmConfigSensor) : address_(address), m_value_(m_value), cal_value_(cal_value), MOSpin_(MOSpin), alarmConfigSensor_(alarmConfigSensor)
{
	initialize();
     ab4:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <_ZN8INA233_S10initializeEv>

00000ab8 <setup>:
INA233_S Sensor7(adrSensor7, m_valueSensor7, cal_valueSensor7, p7_ACM_E_Pin, alarmConfigSensor7);
//TI_TCA6424A_S expander (adrExpander);

void setup() {
  
  Wire.begin();
     ab8:	81 e5       	ldi	r24, 0x51	; 81
     aba:	94 e0       	ldi	r25, 0x04	; 4
     abc:	0e 94 55 10 	call	0x20aa	; 0x20aa <_ZN7TwoWire5beginEv>
  Wire.setClock(10000);
     ac0:	40 e1       	ldi	r20, 0x10	; 16
     ac2:	57 e2       	ldi	r21, 0x27	; 39
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	81 e5       	ldi	r24, 0x51	; 81
     aca:	94 e0       	ldi	r25, 0x04	; 4
     acc:	0e 94 67 10 	call	0x20ce	; 0x20ce <_ZN7TwoWire8setClockEm>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     ad0:	26 e0       	ldi	r18, 0x06	; 6
     ad2:	40 e8       	ldi	r20, 0x80	; 128
     ad4:	55 e2       	ldi	r21, 0x25	; 37
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	8b ea       	ldi	r24, 0xAB	; 171
     adc:	93 e0       	ldi	r25, 0x03	; 3
     ade:	0e 94 81 0a 	call	0x1502	; 0x1502 <_ZN14HardwareSerial5beginEmh>
  Serial.begin(9600);  
  Serial.println("Initialization");
     ae2:	61 e0       	ldi	r22, 0x01	; 1
     ae4:	72 e0       	ldi	r23, 0x02	; 2
     ae6:	8b ea       	ldi	r24, 0xAB	; 171
     ae8:	93 e0       	ldi	r25, 0x03	; 3
     aea:	0e 94 0a 0c 	call	0x1814	; 0x1814 <_ZN5Print7printlnEPKc>

  Sensor1.setADC_Settings(default_address);
     aee:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     af2:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     af6:	86 e3       	ldi	r24, 0x36	; 54
     af8:	93 e0       	ldi	r25, 0x03	; 3
     afa:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8INA233_S15setADC_SettingsEj>
  
  Sensor2.setADC_Settings(default_address);
     afe:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     b02:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     b06:	85 e1       	ldi	r24, 0x15	; 21
     b08:	93 e0       	ldi	r25, 0x03	; 3
     b0a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8INA233_S15setADC_SettingsEj>
 
 Sensor3.setADC_Settings(default_address);
     b0e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     b12:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     b16:	84 ef       	ldi	r24, 0xF4	; 244
     b18:	92 e0       	ldi	r25, 0x02	; 2
     b1a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8INA233_S15setADC_SettingsEj>


 Sensor4.setADC_Settings(default_address);
     b1e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     b22:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     b26:	83 ed       	ldi	r24, 0xD3	; 211
     b28:	92 e0       	ldi	r25, 0x02	; 2
     b2a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8INA233_S15setADC_SettingsEj>


  Sensor5.setADC_Settings(default_address);
     b2e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     b32:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     b36:	82 eb       	ldi	r24, 0xB2	; 178
     b38:	92 e0       	ldi	r25, 0x02	; 2
     b3a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8INA233_S15setADC_SettingsEj>


  Sensor6.setADC_Settings(default_address);
     b3e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     b42:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     b46:	81 e9       	ldi	r24, 0x91	; 145
     b48:	92 e0       	ldi	r25, 0x02	; 2
     b4a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8INA233_S15setADC_SettingsEj>

  Sensor7.setADC_Settings(default_address);
     b4e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     b52:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     b56:	80 e7       	ldi	r24, 0x70	; 112
     b58:	92 e0       	ldi	r25, 0x02	; 2
     b5a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN8INA233_S15setADC_SettingsEj>


  Serial.print(F("freeMemory()="));
     b5e:	65 e1       	ldi	r22, 0x15	; 21
     b60:	71 e0       	ldi	r23, 0x01	; 1
     b62:	8b ea       	ldi	r24, 0xAB	; 171
     b64:	93 e0       	ldi	r25, 0x03	; 3
     b66:	0e 94 c7 0b 	call	0x178e	; 0x178e <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(freeMemory());
     b6a:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <freeMemory>
     b6e:	4a e0       	ldi	r20, 0x0A	; 10
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	bc 01       	movw	r22, r24
     b74:	8b ea       	ldi	r24, 0xAB	; 171
     b76:	93 e0       	ldi	r25, 0x03	; 3
     b78:	0c 94 f2 0c 	jmp	0x19e4	; 0x19e4 <_ZN5Print7printlnEii>

00000b7c <loop>:
  //expander.setPin (1,true);
  
}


void loop() {
     b7c:	cf 92       	push	r12
     b7e:	df 92       	push	r13
     b80:	ef 92       	push	r14
     b82:	ff 92       	push	r15
  Serial.println(F("looping"));
     b84:	6d e0       	ldi	r22, 0x0D	; 13
     b86:	71 e0       	ldi	r23, 0x01	; 1
     b88:	8b ea       	ldi	r24, 0xAB	; 171
     b8a:	93 e0       	ldi	r25, 0x03	; 3
     b8c:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.print(F("freeMemory()="));
     b90:	6f ef       	ldi	r22, 0xFF	; 255
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	8b ea       	ldi	r24, 0xAB	; 171
     b96:	93 e0       	ldi	r25, 0x03	; 3
     b98:	0e 94 c7 0b 	call	0x178e	; 0x178e <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(freeMemory());
     b9c:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <freeMemory>
     ba0:	4a e0       	ldi	r20, 0x0A	; 10
     ba2:	50 e0       	ldi	r21, 0x00	; 0
     ba4:	bc 01       	movw	r22, r24
     ba6:	8b ea       	ldi	r24, 0xAB	; 171
     ba8:	93 e0       	ldi	r25, 0x03	; 3
     baa:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <_ZN5Print7printlnEii>

  float voltage_s;
  float voltage_l;
  float current;

  Serial.println("Looping 2");
     bae:	60 e1       	ldi	r22, 0x10	; 16
     bb0:	72 e0       	ldi	r23, 0x02	; 2
     bb2:	8b ea       	ldi	r24, 0xAB	; 171
     bb4:	93 e0       	ldi	r25, 0x03	; 3
     bb6:	0e 94 0a 0c 	call	0x1814	; 0x1814 <_ZN5Print7printlnEPKc>

  voltage_s = Sensor2.getVoltage_S();
     bba:	85 e1       	ldi	r24, 0x15	; 21
     bbc:	93 e0       	ldi	r25, 0x03	; 3
     bbe:	0e 94 df 03 	call	0x7be	; 0x7be <_ZN8INA233_S12getVoltage_SEv>
     bc2:	6b 01       	movw	r12, r22
     bc4:	7c 01       	movw	r14, r24
  Serial.print("Voltage S: ");
     bc6:	6a e1       	ldi	r22, 0x1A	; 26
     bc8:	72 e0       	ldi	r23, 0x02	; 2
     bca:	8b ea       	ldi	r24, 0xAB	; 171
     bcc:	93 e0       	ldi	r25, 0x03	; 3
     bce:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_ZN5Print5printEPKc>
  Serial.println(voltage_s, 5);
     bd2:	25 e0       	ldi	r18, 0x05	; 5
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	b7 01       	movw	r22, r14
     bd8:	a6 01       	movw	r20, r12
     bda:	8b ea       	ldi	r24, 0xAB	; 171
     bdc:	93 e0       	ldi	r25, 0x03	; 3
     bde:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <_ZN5Print7printlnEdi>

  voltage_l = Sensor2.getVoltage_L();
     be2:	85 e1       	ldi	r24, 0x15	; 21
     be4:	93 e0       	ldi	r25, 0x03	; 3
     be6:	0e 94 b7 03 	call	0x76e	; 0x76e <_ZN8INA233_S12getVoltage_LEv>
     bea:	6b 01       	movw	r12, r22
     bec:	7c 01       	movw	r14, r24
  Serial.print("Voltage L: ");
     bee:	66 e2       	ldi	r22, 0x26	; 38
     bf0:	72 e0       	ldi	r23, 0x02	; 2
     bf2:	8b ea       	ldi	r24, 0xAB	; 171
     bf4:	93 e0       	ldi	r25, 0x03	; 3
     bf6:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_ZN5Print5printEPKc>
  Serial.println(voltage_l, 5);
     bfa:	25 e0       	ldi	r18, 0x05	; 5
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	b7 01       	movw	r22, r14
     c00:	a6 01       	movw	r20, r12
     c02:	8b ea       	ldi	r24, 0xAB	; 171
     c04:	93 e0       	ldi	r25, 0x03	; 3
     c06:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <_ZN5Print7printlnEdi>

  current = Sensor2.getCurrent();
     c0a:	85 e1       	ldi	r24, 0x15	; 21
     c0c:	93 e0       	ldi	r25, 0x03	; 3
     c0e:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN8INA233_S10getCurrentEv>
     c12:	6b 01       	movw	r12, r22
     c14:	7c 01       	movw	r14, r24
  Serial.print("Current: ");
     c16:	62 e3       	ldi	r22, 0x32	; 50
     c18:	72 e0       	ldi	r23, 0x02	; 2
     c1a:	8b ea       	ldi	r24, 0xAB	; 171
     c1c:	93 e0       	ldi	r25, 0x03	; 3
     c1e:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_ZN5Print5printEPKc>
  Serial.println(current, 5);
     c22:	25 e0       	ldi	r18, 0x05	; 5
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	b7 01       	movw	r22, r14
     c28:	a6 01       	movw	r20, r12
     c2a:	8b ea       	ldi	r24, 0xAB	; 171
     c2c:	93 e0       	ldi	r25, 0x03	; 3
     c2e:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <_ZN5Print7printlnEdi>

  Sensor2.getAlarm(); 
     c32:	85 e1       	ldi	r24, 0x15	; 21
     c34:	93 e0       	ldi	r25, 0x03	; 3
     c36:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN8INA233_S8getAlarmEv>


  delay(700);
     c3a:	6c eb       	ldi	r22, 0xBC	; 188
     c3c:	72 e0       	ldi	r23, 0x02	; 2
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	90 e0       	ldi	r25, 0x00	; 0
}
     c42:	ff 90       	pop	r15
     c44:	ef 90       	pop	r14
     c46:	df 90       	pop	r13
     c48:	cf 90       	pop	r12
  Serial.println(current, 5);

  Sensor2.getAlarm(); 


  delay(700);
     c4a:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <delay>

00000c4e <_GLOBAL__sub_I_default_address>:
}
     c4e:	0f 93       	push	r16
};

struct INA233_Alarm_Config
{
  float overCurrent = 0, overVoltage = 0, underVoltage = 0;
  INA233_Alarm_Config(float oc, float ov, float uv) : overCurrent(oc), overVoltage(ov), underVoltage(uv) {}  
     c50:	ef e9       	ldi	r30, 0x9F	; 159
     c52:	f3 e0       	ldi	r31, 0x03	; 3
     c54:	40 e0       	ldi	r20, 0x00	; 0
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	70 e4       	ldi	r23, 0x40	; 64
     c5c:	40 83       	st	Z, r20
     c5e:	51 83       	std	Z+1, r21	; 0x01
     c60:	62 83       	std	Z+2, r22	; 0x02
     c62:	73 83       	std	Z+3, r23	; 0x03
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	a0 e5       	ldi	r26, 0x50	; 80
     c6a:	b1 e4       	ldi	r27, 0x41	; 65
     c6c:	84 83       	std	Z+4, r24	; 0x04
     c6e:	95 83       	std	Z+5, r25	; 0x05
     c70:	a6 83       	std	Z+6, r26	; 0x06
     c72:	b7 83       	std	Z+7, r27	; 0x07
     c74:	10 86       	std	Z+8, r1	; 0x08
     c76:	11 86       	std	Z+9, r1	; 0x09
     c78:	12 86       	std	Z+10, r1	; 0x0a
     c7a:	13 86       	std	Z+11, r1	; 0x0b
     c7c:	e3 e9       	ldi	r30, 0x93	; 147
     c7e:	f3 e0       	ldi	r31, 0x03	; 3
     c80:	40 83       	st	Z, r20
     c82:	51 83       	std	Z+1, r21	; 0x01
     c84:	62 83       	std	Z+2, r22	; 0x02
     c86:	73 83       	std	Z+3, r23	; 0x03
     c88:	84 83       	std	Z+4, r24	; 0x04
     c8a:	95 83       	std	Z+5, r25	; 0x05
     c8c:	a6 83       	std	Z+6, r26	; 0x06
     c8e:	b7 83       	std	Z+7, r27	; 0x07
     c90:	10 86       	std	Z+8, r1	; 0x08
     c92:	11 86       	std	Z+9, r1	; 0x09
     c94:	12 86       	std	Z+10, r1	; 0x0a
     c96:	13 86       	std	Z+11, r1	; 0x0b
     c98:	e7 e8       	ldi	r30, 0x87	; 135
     c9a:	f3 e0       	ldi	r31, 0x03	; 3
     c9c:	40 83       	st	Z, r20
     c9e:	51 83       	std	Z+1, r21	; 0x01
     ca0:	62 83       	std	Z+2, r22	; 0x02
     ca2:	73 83       	std	Z+3, r23	; 0x03
     ca4:	84 83       	std	Z+4, r24	; 0x04
     ca6:	95 83       	std	Z+5, r25	; 0x05
     ca8:	a6 83       	std	Z+6, r26	; 0x06
     caa:	b7 83       	std	Z+7, r27	; 0x07
     cac:	10 86       	std	Z+8, r1	; 0x08
     cae:	11 86       	std	Z+9, r1	; 0x09
     cb0:	12 86       	std	Z+10, r1	; 0x0a
     cb2:	13 86       	std	Z+11, r1	; 0x0b
     cb4:	eb e7       	ldi	r30, 0x7B	; 123
     cb6:	f3 e0       	ldi	r31, 0x03	; 3
     cb8:	40 83       	st	Z, r20
     cba:	51 83       	std	Z+1, r21	; 0x01
     cbc:	62 83       	std	Z+2, r22	; 0x02
     cbe:	73 83       	std	Z+3, r23	; 0x03
     cc0:	84 83       	std	Z+4, r24	; 0x04
     cc2:	95 83       	std	Z+5, r25	; 0x05
     cc4:	a6 83       	std	Z+6, r26	; 0x06
     cc6:	b7 83       	std	Z+7, r27	; 0x07
     cc8:	10 86       	std	Z+8, r1	; 0x08
     cca:	11 86       	std	Z+9, r1	; 0x09
     ccc:	12 86       	std	Z+10, r1	; 0x0a
     cce:	13 86       	std	Z+11, r1	; 0x0b
     cd0:	ef e6       	ldi	r30, 0x6F	; 111
     cd2:	f3 e0       	ldi	r31, 0x03	; 3
     cd4:	40 83       	st	Z, r20
     cd6:	51 83       	std	Z+1, r21	; 0x01
     cd8:	62 83       	std	Z+2, r22	; 0x02
     cda:	73 83       	std	Z+3, r23	; 0x03
     cdc:	84 83       	std	Z+4, r24	; 0x04
     cde:	95 83       	std	Z+5, r25	; 0x05
     ce0:	a6 83       	std	Z+6, r26	; 0x06
     ce2:	b7 83       	std	Z+7, r27	; 0x07
     ce4:	10 86       	std	Z+8, r1	; 0x08
     ce6:	11 86       	std	Z+9, r1	; 0x09
     ce8:	12 86       	std	Z+10, r1	; 0x0a
     cea:	13 86       	std	Z+11, r1	; 0x0b
     cec:	e3 e6       	ldi	r30, 0x63	; 99
     cee:	f3 e0       	ldi	r31, 0x03	; 3
     cf0:	40 83       	st	Z, r20
     cf2:	51 83       	std	Z+1, r21	; 0x01
     cf4:	62 83       	std	Z+2, r22	; 0x02
     cf6:	73 83       	std	Z+3, r23	; 0x03
     cf8:	84 83       	std	Z+4, r24	; 0x04
     cfa:	95 83       	std	Z+5, r25	; 0x05
     cfc:	a6 83       	std	Z+6, r26	; 0x06
     cfe:	b7 83       	std	Z+7, r27	; 0x07
     d00:	10 86       	std	Z+8, r1	; 0x08
     d02:	11 86       	std	Z+9, r1	; 0x09
     d04:	12 86       	std	Z+10, r1	; 0x0a
     d06:	13 86       	std	Z+11, r1	; 0x0b
     d08:	e7 e5       	ldi	r30, 0x57	; 87
     d0a:	f3 e0       	ldi	r31, 0x03	; 3
     d0c:	40 83       	st	Z, r20
     d0e:	51 83       	std	Z+1, r21	; 0x01
     d10:	62 83       	std	Z+2, r22	; 0x02
     d12:	73 83       	std	Z+3, r23	; 0x03
     d14:	84 83       	std	Z+4, r24	; 0x04
     d16:	95 83       	std	Z+5, r25	; 0x05
     d18:	a6 83       	std	Z+6, r26	; 0x06
     d1a:	b7 83       	std	Z+7, r27	; 0x07
     d1c:	10 86       	std	Z+8, r1	; 0x08
     d1e:	11 86       	std	Z+9, r1	; 0x09
     d20:	12 86       	std	Z+10, r1	; 0x0a
     d22:	13 86       	std	Z+11, r1	; 0x0b
//End of Auto generated function prototypes by Atmel Studio

ErrorHandler errorHandler();
uint16_t default_address = 0b0100011100100111;

INA233_S Sensor1(adrSensor1, m_valueSensor1, cal_valueSensor1, p1_ACM_E_Pin, alarmConfigSensor1);
     d24:	8d b7       	in	r24, 0x3d	; 61
     d26:	9e b7       	in	r25, 0x3e	; 62
     d28:	0c 97       	sbiw	r24, 0x0c	; 12
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	9e bf       	out	0x3e, r25	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	8d bf       	out	0x3d, r24	; 61
     d34:	ad b7       	in	r26, 0x3d	; 61
     d36:	be b7       	in	r27, 0x3e	; 62
     d38:	11 96       	adiw	r26, 0x01	; 1
     d3a:	8c e0       	ldi	r24, 0x0C	; 12
     d3c:	ef e9       	ldi	r30, 0x9F	; 159
     d3e:	f3 e0       	ldi	r31, 0x03	; 3
     d40:	01 90       	ld	r0, Z+
     d42:	0d 92       	st	X+, r0
     d44:	8a 95       	dec	r24
     d46:	e1 f7       	brne	.-8      	; 0xd40 <_GLOBAL__sub_I_default_address+0xf2>
     d48:	04 e1       	ldi	r16, 0x14	; 20
     d4a:	23 e3       	ldi	r18, 0x33	; 51
     d4c:	38 e0       	ldi	r19, 0x08	; 8
     d4e:	44 e3       	ldi	r20, 0x34	; 52
     d50:	53 e0       	ldi	r21, 0x03	; 3
     d52:	60 e4       	ldi	r22, 0x40	; 64
     d54:	86 e3       	ldi	r24, 0x36	; 54
     d56:	93 e0       	ldi	r25, 0x03	; 3
     d58:	0e 94 26 05 	call	0xa4c	; 0xa4c <_ZN8INA233_SC1Ehjjh19INA233_Alarm_Config>
INA233_S Sensor2(adrSensor2, m_valueSensor2, cal_valueSensor2, p2_ACM_E_Pin, alarmConfigSensor2);
     d5c:	8d b7       	in	r24, 0x3d	; 61
     d5e:	9e b7       	in	r25, 0x3e	; 62
     d60:	0c 97       	sbiw	r24, 0x0c	; 12
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	9e bf       	out	0x3e, r25	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	8d bf       	out	0x3d, r24	; 61
     d6c:	ad b7       	in	r26, 0x3d	; 61
     d6e:	be b7       	in	r27, 0x3e	; 62
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	8c e0       	ldi	r24, 0x0C	; 12
     d74:	e3 e9       	ldi	r30, 0x93	; 147
     d76:	f3 e0       	ldi	r31, 0x03	; 3
     d78:	01 90       	ld	r0, Z+
     d7a:	0d 92       	st	X+, r0
     d7c:	8a 95       	dec	r24
     d7e:	e1 f7       	brne	.-8      	; 0xd78 <_GLOBAL__sub_I_default_address+0x12a>
     d80:	09 e1       	ldi	r16, 0x19	; 25
     d82:	23 e3       	ldi	r18, 0x33	; 51
     d84:	38 e0       	ldi	r19, 0x08	; 8
     d86:	44 e3       	ldi	r20, 0x34	; 52
     d88:	53 e0       	ldi	r21, 0x03	; 3
     d8a:	61 e4       	ldi	r22, 0x41	; 65
     d8c:	85 e1       	ldi	r24, 0x15	; 21
     d8e:	93 e0       	ldi	r25, 0x03	; 3
     d90:	0e 94 26 05 	call	0xa4c	; 0xa4c <_ZN8INA233_SC1Ehjjh19INA233_Alarm_Config>
INA233_S Sensor3(adrSensor3, m_valueSensor3, cal_valueSensor3, p3_ACM_E_Pin, alarmConfigSensor3);
     d94:	8d b7       	in	r24, 0x3d	; 61
     d96:	9e b7       	in	r25, 0x3e	; 62
     d98:	0c 97       	sbiw	r24, 0x0c	; 12
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	9e bf       	out	0x3e, r25	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	8d bf       	out	0x3d, r24	; 61
     da4:	ad b7       	in	r26, 0x3d	; 61
     da6:	be b7       	in	r27, 0x3e	; 62
     da8:	11 96       	adiw	r26, 0x01	; 1
     daa:	8c e0       	ldi	r24, 0x0C	; 12
     dac:	e7 e8       	ldi	r30, 0x87	; 135
     dae:	f3 e0       	ldi	r31, 0x03	; 3
     db0:	01 90       	ld	r0, Z+
     db2:	0d 92       	st	X+, r0
     db4:	8a 95       	dec	r24
     db6:	e1 f7       	brne	.-8      	; 0xdb0 <_GLOBAL__sub_I_default_address+0x162>
     db8:	07 e1       	ldi	r16, 0x17	; 23
     dba:	23 e3       	ldi	r18, 0x33	; 51
     dbc:	38 e0       	ldi	r19, 0x08	; 8
     dbe:	44 e3       	ldi	r20, 0x34	; 52
     dc0:	53 e0       	ldi	r21, 0x03	; 3
     dc2:	62 e4       	ldi	r22, 0x42	; 66
     dc4:	84 ef       	ldi	r24, 0xF4	; 244
     dc6:	92 e0       	ldi	r25, 0x02	; 2
     dc8:	0e 94 26 05 	call	0xa4c	; 0xa4c <_ZN8INA233_SC1Ehjjh19INA233_Alarm_Config>
INA233_S Sensor4(adrSensor4, m_valueSensor4, cal_valueSensor4, p4_ACM_E_Pin, alarmConfigSensor4);
     dcc:	8d b7       	in	r24, 0x3d	; 61
     dce:	9e b7       	in	r25, 0x3e	; 62
     dd0:	84 96       	adiw	r24, 0x24	; 36
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	9e bf       	out	0x3e, r25	; 62
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	8d bf       	out	0x3d, r24	; 61
     ddc:	0c 97       	sbiw	r24, 0x0c	; 12
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	9e bf       	out	0x3e, r25	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	8d bf       	out	0x3d, r24	; 61
     de8:	ad b7       	in	r26, 0x3d	; 61
     dea:	be b7       	in	r27, 0x3e	; 62
     dec:	11 96       	adiw	r26, 0x01	; 1
     dee:	8c e0       	ldi	r24, 0x0C	; 12
     df0:	eb e7       	ldi	r30, 0x7B	; 123
     df2:	f3 e0       	ldi	r31, 0x03	; 3
     df4:	01 90       	ld	r0, Z+
     df6:	0d 92       	st	X+, r0
     df8:	8a 95       	dec	r24
     dfa:	e1 f7       	brne	.-8      	; 0xdf4 <_GLOBAL__sub_I_default_address+0x1a6>
     dfc:	01 e1       	ldi	r16, 0x11	; 17
     dfe:	23 e3       	ldi	r18, 0x33	; 51
     e00:	38 e0       	ldi	r19, 0x08	; 8
     e02:	44 e3       	ldi	r20, 0x34	; 52
     e04:	53 e0       	ldi	r21, 0x03	; 3
     e06:	63 e4       	ldi	r22, 0x43	; 67
     e08:	83 ed       	ldi	r24, 0xD3	; 211
     e0a:	92 e0       	ldi	r25, 0x02	; 2
     e0c:	0e 94 26 05 	call	0xa4c	; 0xa4c <_ZN8INA233_SC1Ehjjh19INA233_Alarm_Config>
INA233_S Sensor5(adrSensor5, m_valueSensor5, cal_valueSensor5, p5_ACM_E_Pin, alarmConfigSensor5);
     e10:	8d b7       	in	r24, 0x3d	; 61
     e12:	9e b7       	in	r25, 0x3e	; 62
     e14:	0c 97       	sbiw	r24, 0x0c	; 12
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	9e bf       	out	0x3e, r25	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	8d bf       	out	0x3d, r24	; 61
     e20:	ad b7       	in	r26, 0x3d	; 61
     e22:	be b7       	in	r27, 0x3e	; 62
     e24:	11 96       	adiw	r26, 0x01	; 1
     e26:	8c e0       	ldi	r24, 0x0C	; 12
     e28:	ef e6       	ldi	r30, 0x6F	; 111
     e2a:	f3 e0       	ldi	r31, 0x03	; 3
     e2c:	01 90       	ld	r0, Z+
     e2e:	0d 92       	st	X+, r0
     e30:	8a 95       	dec	r24
     e32:	e1 f7       	brne	.-8      	; 0xe2c <_GLOBAL__sub_I_default_address+0x1de>
     e34:	03 e0       	ldi	r16, 0x03	; 3
     e36:	23 e3       	ldi	r18, 0x33	; 51
     e38:	38 e0       	ldi	r19, 0x08	; 8
     e3a:	44 e3       	ldi	r20, 0x34	; 52
     e3c:	53 e0       	ldi	r21, 0x03	; 3
     e3e:	64 e4       	ldi	r22, 0x44	; 68
     e40:	82 eb       	ldi	r24, 0xB2	; 178
     e42:	92 e0       	ldi	r25, 0x02	; 2
     e44:	0e 94 26 05 	call	0xa4c	; 0xa4c <_ZN8INA233_SC1Ehjjh19INA233_Alarm_Config>
INA233_S Sensor6(adrSensor6, m_valueSensor6, cal_valueSensor6, p6_ACM_E_Pin, alarmConfigSensor6);
     e48:	8d b7       	in	r24, 0x3d	; 61
     e4a:	9e b7       	in	r25, 0x3e	; 62
     e4c:	0c 97       	sbiw	r24, 0x0c	; 12
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	9e bf       	out	0x3e, r25	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	8d bf       	out	0x3d, r24	; 61
     e58:	ad b7       	in	r26, 0x3d	; 61
     e5a:	be b7       	in	r27, 0x3e	; 62
     e5c:	11 96       	adiw	r26, 0x01	; 1
     e5e:	8c e0       	ldi	r24, 0x0C	; 12
     e60:	e3 e6       	ldi	r30, 0x63	; 99
     e62:	f3 e0       	ldi	r31, 0x03	; 3
     e64:	01 90       	ld	r0, Z+
     e66:	0d 92       	st	X+, r0
     e68:	8a 95       	dec	r24
     e6a:	e1 f7       	brne	.-8      	; 0xe64 <_GLOBAL__sub_I_default_address+0x216>
     e6c:	02 e0       	ldi	r16, 0x02	; 2
     e6e:	23 e3       	ldi	r18, 0x33	; 51
     e70:	38 e0       	ldi	r19, 0x08	; 8
     e72:	44 e3       	ldi	r20, 0x34	; 52
     e74:	53 e0       	ldi	r21, 0x03	; 3
     e76:	65 e4       	ldi	r22, 0x45	; 69
     e78:	81 e9       	ldi	r24, 0x91	; 145
     e7a:	92 e0       	ldi	r25, 0x02	; 2
     e7c:	0e 94 26 05 	call	0xa4c	; 0xa4c <_ZN8INA233_SC1Ehjjh19INA233_Alarm_Config>
INA233_S Sensor7(adrSensor7, m_valueSensor7, cal_valueSensor7, p7_ACM_E_Pin, alarmConfigSensor7);
     e80:	8d b7       	in	r24, 0x3d	; 61
     e82:	9e b7       	in	r25, 0x3e	; 62
     e84:	84 96       	adiw	r24, 0x24	; 36
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	9e bf       	out	0x3e, r25	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	8d bf       	out	0x3d, r24	; 61
     e90:	0c 97       	sbiw	r24, 0x0c	; 12
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	f8 94       	cli
     e96:	9e bf       	out	0x3e, r25	; 62
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	8d bf       	out	0x3d, r24	; 61
     e9c:	ad b7       	in	r26, 0x3d	; 61
     e9e:	be b7       	in	r27, 0x3e	; 62
     ea0:	11 96       	adiw	r26, 0x01	; 1
     ea2:	8c e0       	ldi	r24, 0x0C	; 12
     ea4:	e7 e5       	ldi	r30, 0x57	; 87
     ea6:	f3 e0       	ldi	r31, 0x03	; 3
     ea8:	01 90       	ld	r0, Z+
     eaa:	0d 92       	st	X+, r0
     eac:	8a 95       	dec	r24
     eae:	e1 f7       	brne	.-8      	; 0xea8 <_GLOBAL__sub_I_default_address+0x25a>
     eb0:	04 e0       	ldi	r16, 0x04	; 4
     eb2:	23 e3       	ldi	r18, 0x33	; 51
     eb4:	38 e0       	ldi	r19, 0x08	; 8
     eb6:	44 e3       	ldi	r20, 0x34	; 52
     eb8:	53 e0       	ldi	r21, 0x03	; 3
     eba:	66 e4       	ldi	r22, 0x46	; 70
     ebc:	80 e7       	ldi	r24, 0x70	; 112
     ebe:	92 e0       	ldi	r25, 0x02	; 2
     ec0:	0e 94 26 05 	call	0xa4c	; 0xa4c <_ZN8INA233_SC1Ehjjh19INA233_Alarm_Config>

  Sensor2.getAlarm(); 


  delay(700);
}
     ec4:	8d b7       	in	r24, 0x3d	; 61
     ec6:	9e b7       	in	r25, 0x3e	; 62
     ec8:	0c 96       	adiw	r24, 0x0c	; 12
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	9e bf       	out	0x3e, r25	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	8d bf       	out	0x3d, r24	; 61
     ed4:	0f 91       	pop	r16
     ed6:	08 95       	ret

00000ed8 <__subsf3>:
     ed8:	50 58       	subi	r21, 0x80	; 128

00000eda <__addsf3>:
     eda:	bb 27       	eor	r27, r27
     edc:	aa 27       	eor	r26, r26
     ede:	0e 94 84 07 	call	0xf08	; 0xf08 <__addsf3x>
     ee2:	0c 94 d5 08 	jmp	0x11aa	; 0x11aa <__fp_round>
     ee6:	0e 94 c7 08 	call	0x118e	; 0x118e <__fp_pscA>
     eea:	38 f0       	brcs	.+14     	; 0xefa <__addsf3+0x20>
     eec:	0e 94 ce 08 	call	0x119c	; 0x119c <__fp_pscB>
     ef0:	20 f0       	brcs	.+8      	; 0xefa <__addsf3+0x20>
     ef2:	39 f4       	brne	.+14     	; 0xf02 <__addsf3+0x28>
     ef4:	9f 3f       	cpi	r25, 0xFF	; 255
     ef6:	19 f4       	brne	.+6      	; 0xefe <__addsf3+0x24>
     ef8:	26 f4       	brtc	.+8      	; 0xf02 <__addsf3+0x28>
     efa:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <__fp_nan>
     efe:	0e f4       	brtc	.+2      	; 0xf02 <__addsf3+0x28>
     f00:	e0 95       	com	r30
     f02:	e7 fb       	bst	r30, 7
     f04:	0c 94 be 08 	jmp	0x117c	; 0x117c <__fp_inf>

00000f08 <__addsf3x>:
     f08:	e9 2f       	mov	r30, r25
     f0a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__fp_split3>
     f0e:	58 f3       	brcs	.-42     	; 0xee6 <__addsf3+0xc>
     f10:	ba 17       	cp	r27, r26
     f12:	62 07       	cpc	r22, r18
     f14:	73 07       	cpc	r23, r19
     f16:	84 07       	cpc	r24, r20
     f18:	95 07       	cpc	r25, r21
     f1a:	20 f0       	brcs	.+8      	; 0xf24 <__addsf3x+0x1c>
     f1c:	79 f4       	brne	.+30     	; 0xf3c <__addsf3x+0x34>
     f1e:	a6 f5       	brtc	.+104    	; 0xf88 <__addsf3x+0x80>
     f20:	0c 94 08 09 	jmp	0x1210	; 0x1210 <__fp_zero>
     f24:	0e f4       	brtc	.+2      	; 0xf28 <__addsf3x+0x20>
     f26:	e0 95       	com	r30
     f28:	0b 2e       	mov	r0, r27
     f2a:	ba 2f       	mov	r27, r26
     f2c:	a0 2d       	mov	r26, r0
     f2e:	0b 01       	movw	r0, r22
     f30:	b9 01       	movw	r22, r18
     f32:	90 01       	movw	r18, r0
     f34:	0c 01       	movw	r0, r24
     f36:	ca 01       	movw	r24, r20
     f38:	a0 01       	movw	r20, r0
     f3a:	11 24       	eor	r1, r1
     f3c:	ff 27       	eor	r31, r31
     f3e:	59 1b       	sub	r21, r25
     f40:	99 f0       	breq	.+38     	; 0xf68 <__addsf3x+0x60>
     f42:	59 3f       	cpi	r21, 0xF9	; 249
     f44:	50 f4       	brcc	.+20     	; 0xf5a <__addsf3x+0x52>
     f46:	50 3e       	cpi	r21, 0xE0	; 224
     f48:	68 f1       	brcs	.+90     	; 0xfa4 <__addsf3x+0x9c>
     f4a:	1a 16       	cp	r1, r26
     f4c:	f0 40       	sbci	r31, 0x00	; 0
     f4e:	a2 2f       	mov	r26, r18
     f50:	23 2f       	mov	r18, r19
     f52:	34 2f       	mov	r19, r20
     f54:	44 27       	eor	r20, r20
     f56:	58 5f       	subi	r21, 0xF8	; 248
     f58:	f3 cf       	rjmp	.-26     	; 0xf40 <__addsf3x+0x38>
     f5a:	46 95       	lsr	r20
     f5c:	37 95       	ror	r19
     f5e:	27 95       	ror	r18
     f60:	a7 95       	ror	r26
     f62:	f0 40       	sbci	r31, 0x00	; 0
     f64:	53 95       	inc	r21
     f66:	c9 f7       	brne	.-14     	; 0xf5a <__addsf3x+0x52>
     f68:	7e f4       	brtc	.+30     	; 0xf88 <__addsf3x+0x80>
     f6a:	1f 16       	cp	r1, r31
     f6c:	ba 0b       	sbc	r27, r26
     f6e:	62 0b       	sbc	r22, r18
     f70:	73 0b       	sbc	r23, r19
     f72:	84 0b       	sbc	r24, r20
     f74:	ba f0       	brmi	.+46     	; 0xfa4 <__addsf3x+0x9c>
     f76:	91 50       	subi	r25, 0x01	; 1
     f78:	a1 f0       	breq	.+40     	; 0xfa2 <__addsf3x+0x9a>
     f7a:	ff 0f       	add	r31, r31
     f7c:	bb 1f       	adc	r27, r27
     f7e:	66 1f       	adc	r22, r22
     f80:	77 1f       	adc	r23, r23
     f82:	88 1f       	adc	r24, r24
     f84:	c2 f7       	brpl	.-16     	; 0xf76 <__addsf3x+0x6e>
     f86:	0e c0       	rjmp	.+28     	; 0xfa4 <__addsf3x+0x9c>
     f88:	ba 0f       	add	r27, r26
     f8a:	62 1f       	adc	r22, r18
     f8c:	73 1f       	adc	r23, r19
     f8e:	84 1f       	adc	r24, r20
     f90:	48 f4       	brcc	.+18     	; 0xfa4 <__addsf3x+0x9c>
     f92:	87 95       	ror	r24
     f94:	77 95       	ror	r23
     f96:	67 95       	ror	r22
     f98:	b7 95       	ror	r27
     f9a:	f7 95       	ror	r31
     f9c:	9e 3f       	cpi	r25, 0xFE	; 254
     f9e:	08 f0       	brcs	.+2      	; 0xfa2 <__addsf3x+0x9a>
     fa0:	b0 cf       	rjmp	.-160    	; 0xf02 <__addsf3+0x28>
     fa2:	93 95       	inc	r25
     fa4:	88 0f       	add	r24, r24
     fa6:	08 f0       	brcs	.+2      	; 0xfaa <__addsf3x+0xa2>
     fa8:	99 27       	eor	r25, r25
     faa:	ee 0f       	add	r30, r30
     fac:	97 95       	ror	r25
     fae:	87 95       	ror	r24
     fb0:	08 95       	ret

00000fb2 <__divsf3>:
     fb2:	0e 94 ed 07 	call	0xfda	; 0xfda <__divsf3x>
     fb6:	0c 94 d5 08 	jmp	0x11aa	; 0x11aa <__fp_round>
     fba:	0e 94 ce 08 	call	0x119c	; 0x119c <__fp_pscB>
     fbe:	58 f0       	brcs	.+22     	; 0xfd6 <__divsf3+0x24>
     fc0:	0e 94 c7 08 	call	0x118e	; 0x118e <__fp_pscA>
     fc4:	40 f0       	brcs	.+16     	; 0xfd6 <__divsf3+0x24>
     fc6:	29 f4       	brne	.+10     	; 0xfd2 <__divsf3+0x20>
     fc8:	5f 3f       	cpi	r21, 0xFF	; 255
     fca:	29 f0       	breq	.+10     	; 0xfd6 <__divsf3+0x24>
     fcc:	0c 94 be 08 	jmp	0x117c	; 0x117c <__fp_inf>
     fd0:	51 11       	cpse	r21, r1
     fd2:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__fp_szero>
     fd6:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <__fp_nan>

00000fda <__divsf3x>:
     fda:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__fp_split3>
     fde:	68 f3       	brcs	.-38     	; 0xfba <__divsf3+0x8>

00000fe0 <__divsf3_pse>:
     fe0:	99 23       	and	r25, r25
     fe2:	b1 f3       	breq	.-20     	; 0xfd0 <__divsf3+0x1e>
     fe4:	55 23       	and	r21, r21
     fe6:	91 f3       	breq	.-28     	; 0xfcc <__divsf3+0x1a>
     fe8:	95 1b       	sub	r25, r21
     fea:	55 0b       	sbc	r21, r21
     fec:	bb 27       	eor	r27, r27
     fee:	aa 27       	eor	r26, r26
     ff0:	62 17       	cp	r22, r18
     ff2:	73 07       	cpc	r23, r19
     ff4:	84 07       	cpc	r24, r20
     ff6:	38 f0       	brcs	.+14     	; 0x1006 <__divsf3_pse+0x26>
     ff8:	9f 5f       	subi	r25, 0xFF	; 255
     ffa:	5f 4f       	sbci	r21, 0xFF	; 255
     ffc:	22 0f       	add	r18, r18
     ffe:	33 1f       	adc	r19, r19
    1000:	44 1f       	adc	r20, r20
    1002:	aa 1f       	adc	r26, r26
    1004:	a9 f3       	breq	.-22     	; 0xff0 <__divsf3_pse+0x10>
    1006:	35 d0       	rcall	.+106    	; 0x1072 <__divsf3_pse+0x92>
    1008:	0e 2e       	mov	r0, r30
    100a:	3a f0       	brmi	.+14     	; 0x101a <__divsf3_pse+0x3a>
    100c:	e0 e8       	ldi	r30, 0x80	; 128
    100e:	32 d0       	rcall	.+100    	; 0x1074 <__divsf3_pse+0x94>
    1010:	91 50       	subi	r25, 0x01	; 1
    1012:	50 40       	sbci	r21, 0x00	; 0
    1014:	e6 95       	lsr	r30
    1016:	00 1c       	adc	r0, r0
    1018:	ca f7       	brpl	.-14     	; 0x100c <__divsf3_pse+0x2c>
    101a:	2b d0       	rcall	.+86     	; 0x1072 <__divsf3_pse+0x92>
    101c:	fe 2f       	mov	r31, r30
    101e:	29 d0       	rcall	.+82     	; 0x1072 <__divsf3_pse+0x92>
    1020:	66 0f       	add	r22, r22
    1022:	77 1f       	adc	r23, r23
    1024:	88 1f       	adc	r24, r24
    1026:	bb 1f       	adc	r27, r27
    1028:	26 17       	cp	r18, r22
    102a:	37 07       	cpc	r19, r23
    102c:	48 07       	cpc	r20, r24
    102e:	ab 07       	cpc	r26, r27
    1030:	b0 e8       	ldi	r27, 0x80	; 128
    1032:	09 f0       	breq	.+2      	; 0x1036 <__divsf3_pse+0x56>
    1034:	bb 0b       	sbc	r27, r27
    1036:	80 2d       	mov	r24, r0
    1038:	bf 01       	movw	r22, r30
    103a:	ff 27       	eor	r31, r31
    103c:	93 58       	subi	r25, 0x83	; 131
    103e:	5f 4f       	sbci	r21, 0xFF	; 255
    1040:	3a f0       	brmi	.+14     	; 0x1050 <__divsf3_pse+0x70>
    1042:	9e 3f       	cpi	r25, 0xFE	; 254
    1044:	51 05       	cpc	r21, r1
    1046:	78 f0       	brcs	.+30     	; 0x1066 <__divsf3_pse+0x86>
    1048:	0c 94 be 08 	jmp	0x117c	; 0x117c <__fp_inf>
    104c:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__fp_szero>
    1050:	5f 3f       	cpi	r21, 0xFF	; 255
    1052:	e4 f3       	brlt	.-8      	; 0x104c <__divsf3_pse+0x6c>
    1054:	98 3e       	cpi	r25, 0xE8	; 232
    1056:	d4 f3       	brlt	.-12     	; 0x104c <__divsf3_pse+0x6c>
    1058:	86 95       	lsr	r24
    105a:	77 95       	ror	r23
    105c:	67 95       	ror	r22
    105e:	b7 95       	ror	r27
    1060:	f7 95       	ror	r31
    1062:	9f 5f       	subi	r25, 0xFF	; 255
    1064:	c9 f7       	brne	.-14     	; 0x1058 <__divsf3_pse+0x78>
    1066:	88 0f       	add	r24, r24
    1068:	91 1d       	adc	r25, r1
    106a:	96 95       	lsr	r25
    106c:	87 95       	ror	r24
    106e:	97 f9       	bld	r25, 7
    1070:	08 95       	ret
    1072:	e1 e0       	ldi	r30, 0x01	; 1
    1074:	66 0f       	add	r22, r22
    1076:	77 1f       	adc	r23, r23
    1078:	88 1f       	adc	r24, r24
    107a:	bb 1f       	adc	r27, r27
    107c:	62 17       	cp	r22, r18
    107e:	73 07       	cpc	r23, r19
    1080:	84 07       	cpc	r24, r20
    1082:	ba 07       	cpc	r27, r26
    1084:	20 f0       	brcs	.+8      	; 0x108e <__divsf3_pse+0xae>
    1086:	62 1b       	sub	r22, r18
    1088:	73 0b       	sbc	r23, r19
    108a:	84 0b       	sbc	r24, r20
    108c:	ba 0b       	sbc	r27, r26
    108e:	ee 1f       	adc	r30, r30
    1090:	88 f7       	brcc	.-30     	; 0x1074 <__divsf3_pse+0x94>
    1092:	e0 95       	com	r30
    1094:	08 95       	ret

00001096 <__fixsfsi>:
    1096:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__fixunssfsi>
    109a:	68 94       	set
    109c:	b1 11       	cpse	r27, r1
    109e:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__fp_szero>
    10a2:	08 95       	ret

000010a4 <__fixunssfsi>:
    10a4:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__fp_splitA>
    10a8:	88 f0       	brcs	.+34     	; 0x10cc <__fixunssfsi+0x28>
    10aa:	9f 57       	subi	r25, 0x7F	; 127
    10ac:	98 f0       	brcs	.+38     	; 0x10d4 <__fixunssfsi+0x30>
    10ae:	b9 2f       	mov	r27, r25
    10b0:	99 27       	eor	r25, r25
    10b2:	b7 51       	subi	r27, 0x17	; 23
    10b4:	b0 f0       	brcs	.+44     	; 0x10e2 <__fixunssfsi+0x3e>
    10b6:	e1 f0       	breq	.+56     	; 0x10f0 <__fixunssfsi+0x4c>
    10b8:	66 0f       	add	r22, r22
    10ba:	77 1f       	adc	r23, r23
    10bc:	88 1f       	adc	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	1a f0       	brmi	.+6      	; 0x10c8 <__fixunssfsi+0x24>
    10c2:	ba 95       	dec	r27
    10c4:	c9 f7       	brne	.-14     	; 0x10b8 <__fixunssfsi+0x14>
    10c6:	14 c0       	rjmp	.+40     	; 0x10f0 <__fixunssfsi+0x4c>
    10c8:	b1 30       	cpi	r27, 0x01	; 1
    10ca:	91 f0       	breq	.+36     	; 0x10f0 <__fixunssfsi+0x4c>
    10cc:	0e 94 08 09 	call	0x1210	; 0x1210 <__fp_zero>
    10d0:	b1 e0       	ldi	r27, 0x01	; 1
    10d2:	08 95       	ret
    10d4:	0c 94 08 09 	jmp	0x1210	; 0x1210 <__fp_zero>
    10d8:	67 2f       	mov	r22, r23
    10da:	78 2f       	mov	r23, r24
    10dc:	88 27       	eor	r24, r24
    10de:	b8 5f       	subi	r27, 0xF8	; 248
    10e0:	39 f0       	breq	.+14     	; 0x10f0 <__fixunssfsi+0x4c>
    10e2:	b9 3f       	cpi	r27, 0xF9	; 249
    10e4:	cc f3       	brlt	.-14     	; 0x10d8 <__fixunssfsi+0x34>
    10e6:	86 95       	lsr	r24
    10e8:	77 95       	ror	r23
    10ea:	67 95       	ror	r22
    10ec:	b3 95       	inc	r27
    10ee:	d9 f7       	brne	.-10     	; 0x10e6 <__fixunssfsi+0x42>
    10f0:	3e f4       	brtc	.+14     	; 0x1100 <__fixunssfsi+0x5c>
    10f2:	90 95       	com	r25
    10f4:	80 95       	com	r24
    10f6:	70 95       	com	r23
    10f8:	61 95       	neg	r22
    10fa:	7f 4f       	sbci	r23, 0xFF	; 255
    10fc:	8f 4f       	sbci	r24, 0xFF	; 255
    10fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1100:	08 95       	ret

00001102 <__floatunsisf>:
    1102:	e8 94       	clt
    1104:	09 c0       	rjmp	.+18     	; 0x1118 <__floatsisf+0x12>

00001106 <__floatsisf>:
    1106:	97 fb       	bst	r25, 7
    1108:	3e f4       	brtc	.+14     	; 0x1118 <__floatsisf+0x12>
    110a:	90 95       	com	r25
    110c:	80 95       	com	r24
    110e:	70 95       	com	r23
    1110:	61 95       	neg	r22
    1112:	7f 4f       	sbci	r23, 0xFF	; 255
    1114:	8f 4f       	sbci	r24, 0xFF	; 255
    1116:	9f 4f       	sbci	r25, 0xFF	; 255
    1118:	99 23       	and	r25, r25
    111a:	a9 f0       	breq	.+42     	; 0x1146 <__floatsisf+0x40>
    111c:	f9 2f       	mov	r31, r25
    111e:	96 e9       	ldi	r25, 0x96	; 150
    1120:	bb 27       	eor	r27, r27
    1122:	93 95       	inc	r25
    1124:	f6 95       	lsr	r31
    1126:	87 95       	ror	r24
    1128:	77 95       	ror	r23
    112a:	67 95       	ror	r22
    112c:	b7 95       	ror	r27
    112e:	f1 11       	cpse	r31, r1
    1130:	f8 cf       	rjmp	.-16     	; 0x1122 <__floatsisf+0x1c>
    1132:	fa f4       	brpl	.+62     	; 0x1172 <__floatsisf+0x6c>
    1134:	bb 0f       	add	r27, r27
    1136:	11 f4       	brne	.+4      	; 0x113c <__floatsisf+0x36>
    1138:	60 ff       	sbrs	r22, 0
    113a:	1b c0       	rjmp	.+54     	; 0x1172 <__floatsisf+0x6c>
    113c:	6f 5f       	subi	r22, 0xFF	; 255
    113e:	7f 4f       	sbci	r23, 0xFF	; 255
    1140:	8f 4f       	sbci	r24, 0xFF	; 255
    1142:	9f 4f       	sbci	r25, 0xFF	; 255
    1144:	16 c0       	rjmp	.+44     	; 0x1172 <__floatsisf+0x6c>
    1146:	88 23       	and	r24, r24
    1148:	11 f0       	breq	.+4      	; 0x114e <__floatsisf+0x48>
    114a:	96 e9       	ldi	r25, 0x96	; 150
    114c:	11 c0       	rjmp	.+34     	; 0x1170 <__floatsisf+0x6a>
    114e:	77 23       	and	r23, r23
    1150:	21 f0       	breq	.+8      	; 0x115a <__floatsisf+0x54>
    1152:	9e e8       	ldi	r25, 0x8E	; 142
    1154:	87 2f       	mov	r24, r23
    1156:	76 2f       	mov	r23, r22
    1158:	05 c0       	rjmp	.+10     	; 0x1164 <__floatsisf+0x5e>
    115a:	66 23       	and	r22, r22
    115c:	71 f0       	breq	.+28     	; 0x117a <__floatsisf+0x74>
    115e:	96 e8       	ldi	r25, 0x86	; 134
    1160:	86 2f       	mov	r24, r22
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	60 e0       	ldi	r22, 0x00	; 0
    1166:	2a f0       	brmi	.+10     	; 0x1172 <__floatsisf+0x6c>
    1168:	9a 95       	dec	r25
    116a:	66 0f       	add	r22, r22
    116c:	77 1f       	adc	r23, r23
    116e:	88 1f       	adc	r24, r24
    1170:	da f7       	brpl	.-10     	; 0x1168 <__floatsisf+0x62>
    1172:	88 0f       	add	r24, r24
    1174:	96 95       	lsr	r25
    1176:	87 95       	ror	r24
    1178:	97 f9       	bld	r25, 7
    117a:	08 95       	ret

0000117c <__fp_inf>:
    117c:	97 f9       	bld	r25, 7
    117e:	9f 67       	ori	r25, 0x7F	; 127
    1180:	80 e8       	ldi	r24, 0x80	; 128
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	08 95       	ret

00001188 <__fp_nan>:
    1188:	9f ef       	ldi	r25, 0xFF	; 255
    118a:	80 ec       	ldi	r24, 0xC0	; 192
    118c:	08 95       	ret

0000118e <__fp_pscA>:
    118e:	00 24       	eor	r0, r0
    1190:	0a 94       	dec	r0
    1192:	16 16       	cp	r1, r22
    1194:	17 06       	cpc	r1, r23
    1196:	18 06       	cpc	r1, r24
    1198:	09 06       	cpc	r0, r25
    119a:	08 95       	ret

0000119c <__fp_pscB>:
    119c:	00 24       	eor	r0, r0
    119e:	0a 94       	dec	r0
    11a0:	12 16       	cp	r1, r18
    11a2:	13 06       	cpc	r1, r19
    11a4:	14 06       	cpc	r1, r20
    11a6:	05 06       	cpc	r0, r21
    11a8:	08 95       	ret

000011aa <__fp_round>:
    11aa:	09 2e       	mov	r0, r25
    11ac:	03 94       	inc	r0
    11ae:	00 0c       	add	r0, r0
    11b0:	11 f4       	brne	.+4      	; 0x11b6 <__fp_round+0xc>
    11b2:	88 23       	and	r24, r24
    11b4:	52 f0       	brmi	.+20     	; 0x11ca <__fp_round+0x20>
    11b6:	bb 0f       	add	r27, r27
    11b8:	40 f4       	brcc	.+16     	; 0x11ca <__fp_round+0x20>
    11ba:	bf 2b       	or	r27, r31
    11bc:	11 f4       	brne	.+4      	; 0x11c2 <__fp_round+0x18>
    11be:	60 ff       	sbrs	r22, 0
    11c0:	04 c0       	rjmp	.+8      	; 0x11ca <__fp_round+0x20>
    11c2:	6f 5f       	subi	r22, 0xFF	; 255
    11c4:	7f 4f       	sbci	r23, 0xFF	; 255
    11c6:	8f 4f       	sbci	r24, 0xFF	; 255
    11c8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ca:	08 95       	ret

000011cc <__fp_split3>:
    11cc:	57 fd       	sbrc	r21, 7
    11ce:	90 58       	subi	r25, 0x80	; 128
    11d0:	44 0f       	add	r20, r20
    11d2:	55 1f       	adc	r21, r21
    11d4:	59 f0       	breq	.+22     	; 0x11ec <__fp_splitA+0x10>
    11d6:	5f 3f       	cpi	r21, 0xFF	; 255
    11d8:	71 f0       	breq	.+28     	; 0x11f6 <__fp_splitA+0x1a>
    11da:	47 95       	ror	r20

000011dc <__fp_splitA>:
    11dc:	88 0f       	add	r24, r24
    11de:	97 fb       	bst	r25, 7
    11e0:	99 1f       	adc	r25, r25
    11e2:	61 f0       	breq	.+24     	; 0x11fc <__fp_splitA+0x20>
    11e4:	9f 3f       	cpi	r25, 0xFF	; 255
    11e6:	79 f0       	breq	.+30     	; 0x1206 <__fp_splitA+0x2a>
    11e8:	87 95       	ror	r24
    11ea:	08 95       	ret
    11ec:	12 16       	cp	r1, r18
    11ee:	13 06       	cpc	r1, r19
    11f0:	14 06       	cpc	r1, r20
    11f2:	55 1f       	adc	r21, r21
    11f4:	f2 cf       	rjmp	.-28     	; 0x11da <__fp_split3+0xe>
    11f6:	46 95       	lsr	r20
    11f8:	f1 df       	rcall	.-30     	; 0x11dc <__fp_splitA>
    11fa:	08 c0       	rjmp	.+16     	; 0x120c <__fp_splitA+0x30>
    11fc:	16 16       	cp	r1, r22
    11fe:	17 06       	cpc	r1, r23
    1200:	18 06       	cpc	r1, r24
    1202:	99 1f       	adc	r25, r25
    1204:	f1 cf       	rjmp	.-30     	; 0x11e8 <__fp_splitA+0xc>
    1206:	86 95       	lsr	r24
    1208:	71 05       	cpc	r23, r1
    120a:	61 05       	cpc	r22, r1
    120c:	08 94       	sec
    120e:	08 95       	ret

00001210 <__fp_zero>:
    1210:	e8 94       	clt

00001212 <__fp_szero>:
    1212:	bb 27       	eor	r27, r27
    1214:	66 27       	eor	r22, r22
    1216:	77 27       	eor	r23, r23
    1218:	cb 01       	movw	r24, r22
    121a:	97 f9       	bld	r25, 7
    121c:	08 95       	ret

0000121e <__gesf2>:
    121e:	0e 94 81 09 	call	0x1302	; 0x1302 <__fp_cmp>
    1222:	08 f4       	brcc	.+2      	; 0x1226 <__gesf2+0x8>
    1224:	8f ef       	ldi	r24, 0xFF	; 255
    1226:	08 95       	ret

00001228 <__mulsf3>:
    1228:	0e 94 27 09 	call	0x124e	; 0x124e <__mulsf3x>
    122c:	0c 94 d5 08 	jmp	0x11aa	; 0x11aa <__fp_round>
    1230:	0e 94 c7 08 	call	0x118e	; 0x118e <__fp_pscA>
    1234:	38 f0       	brcs	.+14     	; 0x1244 <__mulsf3+0x1c>
    1236:	0e 94 ce 08 	call	0x119c	; 0x119c <__fp_pscB>
    123a:	20 f0       	brcs	.+8      	; 0x1244 <__mulsf3+0x1c>
    123c:	95 23       	and	r25, r21
    123e:	11 f0       	breq	.+4      	; 0x1244 <__mulsf3+0x1c>
    1240:	0c 94 be 08 	jmp	0x117c	; 0x117c <__fp_inf>
    1244:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <__fp_nan>
    1248:	11 24       	eor	r1, r1
    124a:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__fp_szero>

0000124e <__mulsf3x>:
    124e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__fp_split3>
    1252:	70 f3       	brcs	.-36     	; 0x1230 <__mulsf3+0x8>

00001254 <__mulsf3_pse>:
    1254:	95 9f       	mul	r25, r21
    1256:	c1 f3       	breq	.-16     	; 0x1248 <__mulsf3+0x20>
    1258:	95 0f       	add	r25, r21
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	55 1f       	adc	r21, r21
    125e:	62 9f       	mul	r22, r18
    1260:	f0 01       	movw	r30, r0
    1262:	72 9f       	mul	r23, r18
    1264:	bb 27       	eor	r27, r27
    1266:	f0 0d       	add	r31, r0
    1268:	b1 1d       	adc	r27, r1
    126a:	63 9f       	mul	r22, r19
    126c:	aa 27       	eor	r26, r26
    126e:	f0 0d       	add	r31, r0
    1270:	b1 1d       	adc	r27, r1
    1272:	aa 1f       	adc	r26, r26
    1274:	64 9f       	mul	r22, r20
    1276:	66 27       	eor	r22, r22
    1278:	b0 0d       	add	r27, r0
    127a:	a1 1d       	adc	r26, r1
    127c:	66 1f       	adc	r22, r22
    127e:	82 9f       	mul	r24, r18
    1280:	22 27       	eor	r18, r18
    1282:	b0 0d       	add	r27, r0
    1284:	a1 1d       	adc	r26, r1
    1286:	62 1f       	adc	r22, r18
    1288:	73 9f       	mul	r23, r19
    128a:	b0 0d       	add	r27, r0
    128c:	a1 1d       	adc	r26, r1
    128e:	62 1f       	adc	r22, r18
    1290:	83 9f       	mul	r24, r19
    1292:	a0 0d       	add	r26, r0
    1294:	61 1d       	adc	r22, r1
    1296:	22 1f       	adc	r18, r18
    1298:	74 9f       	mul	r23, r20
    129a:	33 27       	eor	r19, r19
    129c:	a0 0d       	add	r26, r0
    129e:	61 1d       	adc	r22, r1
    12a0:	23 1f       	adc	r18, r19
    12a2:	84 9f       	mul	r24, r20
    12a4:	60 0d       	add	r22, r0
    12a6:	21 1d       	adc	r18, r1
    12a8:	82 2f       	mov	r24, r18
    12aa:	76 2f       	mov	r23, r22
    12ac:	6a 2f       	mov	r22, r26
    12ae:	11 24       	eor	r1, r1
    12b0:	9f 57       	subi	r25, 0x7F	; 127
    12b2:	50 40       	sbci	r21, 0x00	; 0
    12b4:	9a f0       	brmi	.+38     	; 0x12dc <__mulsf3_pse+0x88>
    12b6:	f1 f0       	breq	.+60     	; 0x12f4 <__mulsf3_pse+0xa0>
    12b8:	88 23       	and	r24, r24
    12ba:	4a f0       	brmi	.+18     	; 0x12ce <__mulsf3_pse+0x7a>
    12bc:	ee 0f       	add	r30, r30
    12be:	ff 1f       	adc	r31, r31
    12c0:	bb 1f       	adc	r27, r27
    12c2:	66 1f       	adc	r22, r22
    12c4:	77 1f       	adc	r23, r23
    12c6:	88 1f       	adc	r24, r24
    12c8:	91 50       	subi	r25, 0x01	; 1
    12ca:	50 40       	sbci	r21, 0x00	; 0
    12cc:	a9 f7       	brne	.-22     	; 0x12b8 <__mulsf3_pse+0x64>
    12ce:	9e 3f       	cpi	r25, 0xFE	; 254
    12d0:	51 05       	cpc	r21, r1
    12d2:	80 f0       	brcs	.+32     	; 0x12f4 <__mulsf3_pse+0xa0>
    12d4:	0c 94 be 08 	jmp	0x117c	; 0x117c <__fp_inf>
    12d8:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__fp_szero>
    12dc:	5f 3f       	cpi	r21, 0xFF	; 255
    12de:	e4 f3       	brlt	.-8      	; 0x12d8 <__mulsf3_pse+0x84>
    12e0:	98 3e       	cpi	r25, 0xE8	; 232
    12e2:	d4 f3       	brlt	.-12     	; 0x12d8 <__mulsf3_pse+0x84>
    12e4:	86 95       	lsr	r24
    12e6:	77 95       	ror	r23
    12e8:	67 95       	ror	r22
    12ea:	b7 95       	ror	r27
    12ec:	f7 95       	ror	r31
    12ee:	e7 95       	ror	r30
    12f0:	9f 5f       	subi	r25, 0xFF	; 255
    12f2:	c1 f7       	brne	.-16     	; 0x12e4 <__mulsf3_pse+0x90>
    12f4:	fe 2b       	or	r31, r30
    12f6:	88 0f       	add	r24, r24
    12f8:	91 1d       	adc	r25, r1
    12fa:	96 95       	lsr	r25
    12fc:	87 95       	ror	r24
    12fe:	97 f9       	bld	r25, 7
    1300:	08 95       	ret

00001302 <__fp_cmp>:
    1302:	99 0f       	add	r25, r25
    1304:	00 08       	sbc	r0, r0
    1306:	55 0f       	add	r21, r21
    1308:	aa 0b       	sbc	r26, r26
    130a:	e0 e8       	ldi	r30, 0x80	; 128
    130c:	fe ef       	ldi	r31, 0xFE	; 254
    130e:	16 16       	cp	r1, r22
    1310:	17 06       	cpc	r1, r23
    1312:	e8 07       	cpc	r30, r24
    1314:	f9 07       	cpc	r31, r25
    1316:	c0 f0       	brcs	.+48     	; 0x1348 <__fp_cmp+0x46>
    1318:	12 16       	cp	r1, r18
    131a:	13 06       	cpc	r1, r19
    131c:	e4 07       	cpc	r30, r20
    131e:	f5 07       	cpc	r31, r21
    1320:	98 f0       	brcs	.+38     	; 0x1348 <__fp_cmp+0x46>
    1322:	62 1b       	sub	r22, r18
    1324:	73 0b       	sbc	r23, r19
    1326:	84 0b       	sbc	r24, r20
    1328:	95 0b       	sbc	r25, r21
    132a:	39 f4       	brne	.+14     	; 0x133a <__fp_cmp+0x38>
    132c:	0a 26       	eor	r0, r26
    132e:	61 f0       	breq	.+24     	; 0x1348 <__fp_cmp+0x46>
    1330:	23 2b       	or	r18, r19
    1332:	24 2b       	or	r18, r20
    1334:	25 2b       	or	r18, r21
    1336:	21 f4       	brne	.+8      	; 0x1340 <__fp_cmp+0x3e>
    1338:	08 95       	ret
    133a:	0a 26       	eor	r0, r26
    133c:	09 f4       	brne	.+2      	; 0x1340 <__fp_cmp+0x3e>
    133e:	a1 40       	sbci	r26, 0x01	; 1
    1340:	a6 95       	lsr	r26
    1342:	8f ef       	ldi	r24, 0xFF	; 255
    1344:	81 1d       	adc	r24, r1
    1346:	81 1d       	adc	r24, r1
    1348:	08 95       	ret

0000134a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    134a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    134c:	91 8d       	ldd	r25, Z+25	; 0x19
    134e:	22 8d       	ldd	r18, Z+26	; 0x1a
    1350:	89 2f       	mov	r24, r25
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	80 5c       	subi	r24, 0xC0	; 192
    1356:	9f 4f       	sbci	r25, 0xFF	; 255
    1358:	82 1b       	sub	r24, r18
    135a:	91 09       	sbc	r25, r1
}
    135c:	8f 73       	andi	r24, 0x3F	; 63
    135e:	99 27       	eor	r25, r25
    1360:	08 95       	ret

00001362 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1362:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1364:	91 8d       	ldd	r25, Z+25	; 0x19
    1366:	82 8d       	ldd	r24, Z+26	; 0x1a
    1368:	98 17       	cp	r25, r24
    136a:	31 f0       	breq	.+12     	; 0x1378 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    136c:	82 8d       	ldd	r24, Z+26	; 0x1a
    136e:	e8 0f       	add	r30, r24
    1370:	f1 1d       	adc	r31, r1
    1372:	85 8d       	ldd	r24, Z+29	; 0x1d
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1378:	8f ef       	ldi	r24, 0xFF	; 255
    137a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    137c:	08 95       	ret

0000137e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    137e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1380:	91 8d       	ldd	r25, Z+25	; 0x19
    1382:	82 8d       	ldd	r24, Z+26	; 0x1a
    1384:	98 17       	cp	r25, r24
    1386:	61 f0       	breq	.+24     	; 0x13a0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1388:	82 8d       	ldd	r24, Z+26	; 0x1a
    138a:	df 01       	movw	r26, r30
    138c:	a8 0f       	add	r26, r24
    138e:	b1 1d       	adc	r27, r1
    1390:	5d 96       	adiw	r26, 0x1d	; 29
    1392:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1394:	92 8d       	ldd	r25, Z+26	; 0x1a
    1396:	9f 5f       	subi	r25, 0xFF	; 255
    1398:	9f 73       	andi	r25, 0x3F	; 63
    139a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    13a0:	8f ef       	ldi	r24, 0xFF	; 255
    13a2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    13a4:	08 95       	ret

000013a6 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    13a6:	fc 01       	movw	r30, r24
    13a8:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    13aa:	44 8d       	ldd	r20, Z+28	; 0x1c
    13ac:	25 2f       	mov	r18, r21
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	84 2f       	mov	r24, r20
    13b2:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    13b4:	82 1b       	sub	r24, r18
    13b6:	93 0b       	sbc	r25, r19
    13b8:	54 17       	cp	r21, r20
    13ba:	10 f0       	brcs	.+4      	; 0x13c0 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    13bc:	cf 96       	adiw	r24, 0x3f	; 63
    13be:	08 95       	ret
  return tail - head - 1;
    13c0:	01 97       	sbiw	r24, 0x01	; 1
}
    13c2:	08 95       	ret

000013c4 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    13c4:	81 e4       	ldi	r24, 0x41	; 65
    13c6:	9b e0       	ldi	r25, 0x0B	; 11
    13c8:	89 2b       	or	r24, r25
    13ca:	49 f0       	breq	.+18     	; 0x13de <_Z14serialEventRunv+0x1a>
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	89 2b       	or	r24, r25
    13d2:	29 f0       	breq	.+10     	; 0x13de <_Z14serialEventRunv+0x1a>
    13d4:	0e 94 41 0b 	call	0x1682	; 0x1682 <_Z17Serial0_availablev>
    13d8:	81 11       	cpse	r24, r1
    13da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    13de:	08 95       	ret

000013e0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    13e0:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    13e2:	84 8d       	ldd	r24, Z+28	; 0x1c
    13e4:	df 01       	movw	r26, r30
    13e6:	a8 0f       	add	r26, r24
    13e8:	b1 1d       	adc	r27, r1
    13ea:	a3 5a       	subi	r26, 0xA3	; 163
    13ec:	bf 4f       	sbci	r27, 0xFF	; 255
    13ee:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    13f0:	84 8d       	ldd	r24, Z+28	; 0x1c
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	01 96       	adiw	r24, 0x01	; 1
    13f6:	8f 73       	andi	r24, 0x3F	; 63
    13f8:	99 27       	eor	r25, r25
    13fa:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    13fc:	a6 89       	ldd	r26, Z+22	; 0x16
    13fe:	b7 89       	ldd	r27, Z+23	; 0x17
    1400:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1402:	a0 89       	ldd	r26, Z+16	; 0x10
    1404:	b1 89       	ldd	r27, Z+17	; 0x11
    1406:	8c 91       	ld	r24, X
    1408:	83 70       	andi	r24, 0x03	; 3
    140a:	80 64       	ori	r24, 0x40	; 64
    140c:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    140e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1410:	84 8d       	ldd	r24, Z+28	; 0x1c
    1412:	98 13       	cpse	r25, r24
    1414:	06 c0       	rjmp	.+12     	; 0x1422 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1416:	02 88       	ldd	r0, Z+18	; 0x12
    1418:	f3 89       	ldd	r31, Z+19	; 0x13
    141a:	e0 2d       	mov	r30, r0
    141c:	80 81       	ld	r24, Z
    141e:	8f 7d       	andi	r24, 0xDF	; 223
    1420:	80 83       	st	Z, r24
    1422:	08 95       	ret

00001424 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1424:	ef 92       	push	r14
    1426:	ff 92       	push	r15
    1428:	0f 93       	push	r16
    142a:	1f 93       	push	r17
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	ec 01       	movw	r28, r24
  _written = true;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1436:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1438:	8c 8d       	ldd	r24, Y+28	; 0x1c
    143a:	98 13       	cpse	r25, r24
    143c:	05 c0       	rjmp	.+10     	; 0x1448 <_ZN14HardwareSerial5writeEh+0x24>
    143e:	e8 89       	ldd	r30, Y+16	; 0x10
    1440:	f9 89       	ldd	r31, Y+17	; 0x11
    1442:	80 81       	ld	r24, Z
    1444:	85 fd       	sbrc	r24, 5
    1446:	26 c0       	rjmp	.+76     	; 0x1494 <_ZN14HardwareSerial5writeEh+0x70>
    1448:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    144a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    144c:	10 e0       	ldi	r17, 0x00	; 0
    144e:	0f 5f       	subi	r16, 0xFF	; 255
    1450:	1f 4f       	sbci	r17, 0xFF	; 255
    1452:	0f 73       	andi	r16, 0x3F	; 63
    1454:	11 27       	eor	r17, r17
    1456:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1458:	8c 8d       	ldd	r24, Y+28	; 0x1c
    145a:	e8 12       	cpse	r14, r24
    145c:	0c c0       	rjmp	.+24     	; 0x1476 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	07 fc       	sbrc	r0, 7
    1462:	fa cf       	rjmp	.-12     	; 0x1458 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1464:	e8 89       	ldd	r30, Y+16	; 0x10
    1466:	f9 89       	ldd	r31, Y+17	; 0x11
    1468:	80 81       	ld	r24, Z
    146a:	85 ff       	sbrs	r24, 5
    146c:	f5 cf       	rjmp	.-22     	; 0x1458 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    146e:	ce 01       	movw	r24, r28
    1470:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1474:	f1 cf       	rjmp	.-30     	; 0x1458 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1476:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1478:	fe 01       	movw	r30, r28
    147a:	e8 0f       	add	r30, r24
    147c:	f1 1d       	adc	r31, r1
    147e:	e3 5a       	subi	r30, 0xA3	; 163
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1484:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1486:	f8 94       	cli
    _tx_buffer_head = i;
    1488:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    148a:	ea 89       	ldd	r30, Y+18	; 0x12
    148c:	fb 89       	ldd	r31, Y+19	; 0x13
    148e:	80 81       	ld	r24, Z
    1490:	80 62       	ori	r24, 0x20	; 32
    1492:	0a c0       	rjmp	.+20     	; 0x14a8 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1494:	9f b7       	in	r25, 0x3f	; 63
    1496:	f8 94       	cli
      *_udr = c;
    1498:	ee 89       	ldd	r30, Y+22	; 0x16
    149a:	ff 89       	ldd	r31, Y+23	; 0x17
    149c:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    149e:	e8 89       	ldd	r30, Y+16	; 0x10
    14a0:	f9 89       	ldd	r31, Y+17	; 0x11
    14a2:	80 81       	ld	r24, Z
    14a4:	83 70       	andi	r24, 0x03	; 3
    14a6:	80 64       	ori	r24, 0x40	; 64
    14a8:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14aa:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	1f 91       	pop	r17
    14b6:	0f 91       	pop	r16
    14b8:	ff 90       	pop	r15
    14ba:	ef 90       	pop	r14
    14bc:	08 95       	ret

000014be <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    14c4:	88 8d       	ldd	r24, Y+24	; 0x18
    14c6:	88 23       	and	r24, r24
    14c8:	c9 f0       	breq	.+50     	; 0x14fc <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    14ca:	ea 89       	ldd	r30, Y+18	; 0x12
    14cc:	fb 89       	ldd	r31, Y+19	; 0x13
    14ce:	80 81       	ld	r24, Z
    14d0:	85 fd       	sbrc	r24, 5
    14d2:	05 c0       	rjmp	.+10     	; 0x14de <_ZN14HardwareSerial5flushEv+0x20>
    14d4:	a8 89       	ldd	r26, Y+16	; 0x10
    14d6:	b9 89       	ldd	r27, Y+17	; 0x11
    14d8:	8c 91       	ld	r24, X
    14da:	86 fd       	sbrc	r24, 6
    14dc:	0f c0       	rjmp	.+30     	; 0x14fc <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	07 fc       	sbrc	r0, 7
    14e2:	f5 cf       	rjmp	.-22     	; 0x14ce <_ZN14HardwareSerial5flushEv+0x10>
    14e4:	80 81       	ld	r24, Z
    14e6:	85 ff       	sbrs	r24, 5
    14e8:	f2 cf       	rjmp	.-28     	; 0x14ce <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    14ea:	a8 89       	ldd	r26, Y+16	; 0x10
    14ec:	b9 89       	ldd	r27, Y+17	; 0x11
    14ee:	8c 91       	ld	r24, X
    14f0:	85 ff       	sbrs	r24, 5
    14f2:	ed cf       	rjmp	.-38     	; 0x14ce <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    14f4:	ce 01       	movw	r24, r28
    14f6:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    14fa:	e7 cf       	rjmp	.-50     	; 0x14ca <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	08 95       	ret

00001502 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1502:	cf 92       	push	r12
    1504:	df 92       	push	r13
    1506:	ef 92       	push	r14
    1508:	ff 92       	push	r15
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	ec 01       	movw	r28, r24
    1512:	6a 01       	movw	r12, r20
    1514:	7b 01       	movw	r14, r22
    1516:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1518:	e8 89       	ldd	r30, Y+16	; 0x10
    151a:	f9 89       	ldd	r31, Y+17	; 0x11
    151c:	82 e0       	ldi	r24, 0x02	; 2
    151e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1520:	41 15       	cp	r20, r1
    1522:	51 4e       	sbci	r21, 0xE1	; 225
    1524:	61 05       	cpc	r22, r1
    1526:	71 05       	cpc	r23, r1
    1528:	b1 f0       	breq	.+44     	; 0x1556 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	79 e0       	ldi	r23, 0x09	; 9
    152e:	8d e3       	ldi	r24, 0x3D	; 61
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	a7 01       	movw	r20, r14
    1534:	96 01       	movw	r18, r12
    1536:	0e 94 cc 14 	call	0x2998	; 0x2998 <__udivmodsi4>
    153a:	da 01       	movw	r26, r20
    153c:	c9 01       	movw	r24, r18
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	a1 09       	sbc	r26, r1
    1542:	b1 09       	sbc	r27, r1
    1544:	b6 95       	lsr	r27
    1546:	a7 95       	ror	r26
    1548:	97 95       	ror	r25
    154a:	87 95       	ror	r24
    154c:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    154e:	21 15       	cp	r18, r1
    1550:	80 e1       	ldi	r24, 0x10	; 16
    1552:	38 07       	cpc	r19, r24
    1554:	a8 f0       	brcs	.+42     	; 0x1580 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1556:	e8 89       	ldd	r30, Y+16	; 0x10
    1558:	f9 89       	ldd	r31, Y+17	; 0x11
    155a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    155c:	60 e8       	ldi	r22, 0x80	; 128
    155e:	74 e8       	ldi	r23, 0x84	; 132
    1560:	8e e1       	ldi	r24, 0x1E	; 30
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	a7 01       	movw	r20, r14
    1566:	96 01       	movw	r18, r12
    1568:	0e 94 cc 14 	call	0x2998	; 0x2998 <__udivmodsi4>
    156c:	da 01       	movw	r26, r20
    156e:	c9 01       	movw	r24, r18
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	a1 09       	sbc	r26, r1
    1574:	b1 09       	sbc	r27, r1
    1576:	b6 95       	lsr	r27
    1578:	a7 95       	ror	r26
    157a:	97 95       	ror	r25
    157c:	87 95       	ror	r24
    157e:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1580:	ec 85       	ldd	r30, Y+12	; 0x0c
    1582:	fd 85       	ldd	r31, Y+13	; 0x0d
    1584:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1586:	ee 85       	ldd	r30, Y+14	; 0x0e
    1588:	ff 85       	ldd	r31, Y+15	; 0x0f
    158a:	20 83       	st	Z, r18

  _written = false;
    158c:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    158e:	ec 89       	ldd	r30, Y+20	; 0x14
    1590:	fd 89       	ldd	r31, Y+21	; 0x15
    1592:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1594:	ea 89       	ldd	r30, Y+18	; 0x12
    1596:	fb 89       	ldd	r31, Y+19	; 0x13
    1598:	80 81       	ld	r24, Z
    159a:	80 61       	ori	r24, 0x10	; 16
    159c:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    159e:	ea 89       	ldd	r30, Y+18	; 0x12
    15a0:	fb 89       	ldd	r31, Y+19	; 0x13
    15a2:	80 81       	ld	r24, Z
    15a4:	88 60       	ori	r24, 0x08	; 8
    15a6:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    15a8:	ea 89       	ldd	r30, Y+18	; 0x12
    15aa:	fb 89       	ldd	r31, Y+19	; 0x13
    15ac:	80 81       	ld	r24, Z
    15ae:	80 68       	ori	r24, 0x80	; 128
    15b0:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    15b2:	ea 89       	ldd	r30, Y+18	; 0x12
    15b4:	fb 89       	ldd	r31, Y+19	; 0x13
    15b6:	80 81       	ld	r24, Z
    15b8:	8f 7d       	andi	r24, 0xDF	; 223
    15ba:	80 83       	st	Z, r24
}
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	1f 91       	pop	r17
    15c2:	ff 90       	pop	r15
    15c4:	ef 90       	pop	r14
    15c6:	df 90       	pop	r13
    15c8:	cf 90       	pop	r12
    15ca:	08 95       	ret

000015cc <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	08 95       	ret

000015d2 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    15d2:	1f 92       	push	r1
    15d4:	0f 92       	push	r0
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	0f 92       	push	r0
    15da:	11 24       	eor	r1, r1
    15dc:	2f 93       	push	r18
    15de:	8f 93       	push	r24
    15e0:	9f 93       	push	r25
    15e2:	ef 93       	push	r30
    15e4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    15e6:	e0 91 bb 03 	lds	r30, 0x03BB	; 0x8003bb <Serial+0x10>
    15ea:	f0 91 bc 03 	lds	r31, 0x03BC	; 0x8003bc <Serial+0x11>
    15ee:	80 81       	ld	r24, Z
    15f0:	e0 91 c1 03 	lds	r30, 0x03C1	; 0x8003c1 <Serial+0x16>
    15f4:	f0 91 c2 03 	lds	r31, 0x03C2	; 0x8003c2 <Serial+0x17>
    15f8:	82 fd       	sbrc	r24, 2
    15fa:	12 c0       	rjmp	.+36     	; 0x1620 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    15fc:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    15fe:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <Serial+0x19>
    1602:	8f 5f       	subi	r24, 0xFF	; 255
    1604:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1606:	20 91 c5 03 	lds	r18, 0x03C5	; 0x8003c5 <Serial+0x1a>
    160a:	82 17       	cp	r24, r18
    160c:	51 f0       	breq	.+20     	; 0x1622 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    160e:	e0 91 c4 03 	lds	r30, 0x03C4	; 0x8003c4 <Serial+0x19>
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	e5 55       	subi	r30, 0x55	; 85
    1616:	fc 4f       	sbci	r31, 0xFC	; 252
    1618:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    161a:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <Serial+0x19>
    161e:	01 c0       	rjmp	.+2      	; 0x1622 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1620:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1622:	ff 91       	pop	r31
    1624:	ef 91       	pop	r30
    1626:	9f 91       	pop	r25
    1628:	8f 91       	pop	r24
    162a:	2f 91       	pop	r18
    162c:	0f 90       	pop	r0
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	0f 90       	pop	r0
    1632:	1f 90       	pop	r1
    1634:	18 95       	reti

00001636 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1636:	1f 92       	push	r1
    1638:	0f 92       	push	r0
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	0f 92       	push	r0
    163e:	11 24       	eor	r1, r1
    1640:	2f 93       	push	r18
    1642:	3f 93       	push	r19
    1644:	4f 93       	push	r20
    1646:	5f 93       	push	r21
    1648:	6f 93       	push	r22
    164a:	7f 93       	push	r23
    164c:	8f 93       	push	r24
    164e:	9f 93       	push	r25
    1650:	af 93       	push	r26
    1652:	bf 93       	push	r27
    1654:	ef 93       	push	r30
    1656:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1658:	8b ea       	ldi	r24, 0xAB	; 171
    165a:	93 e0       	ldi	r25, 0x03	; 3
    165c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1660:	ff 91       	pop	r31
    1662:	ef 91       	pop	r30
    1664:	bf 91       	pop	r27
    1666:	af 91       	pop	r26
    1668:	9f 91       	pop	r25
    166a:	8f 91       	pop	r24
    166c:	7f 91       	pop	r23
    166e:	6f 91       	pop	r22
    1670:	5f 91       	pop	r21
    1672:	4f 91       	pop	r20
    1674:	3f 91       	pop	r19
    1676:	2f 91       	pop	r18
    1678:	0f 90       	pop	r0
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	0f 90       	pop	r0
    167e:	1f 90       	pop	r1
    1680:	18 95       	reti

00001682 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1682:	8b ea       	ldi	r24, 0xAB	; 171
    1684:	93 e0       	ldi	r25, 0x03	; 3
    1686:	0e 94 a5 09 	call	0x134a	; 0x134a <_ZN14HardwareSerial9availableEv>
    168a:	21 e0       	ldi	r18, 0x01	; 1
    168c:	89 2b       	or	r24, r25
    168e:	09 f4       	brne	.+2      	; 0x1692 <_Z17Serial0_availablev+0x10>
    1690:	20 e0       	ldi	r18, 0x00	; 0
}
    1692:	82 2f       	mov	r24, r18
    1694:	08 95       	ret

00001696 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1696:	eb ea       	ldi	r30, 0xAB	; 171
    1698:	f3 e0       	ldi	r31, 0x03	; 3
    169a:	13 82       	std	Z+3, r1	; 0x03
    169c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    169e:	88 ee       	ldi	r24, 0xE8	; 232
    16a0:	93 e0       	ldi	r25, 0x03	; 3
    16a2:	a0 e0       	ldi	r26, 0x00	; 0
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	84 83       	std	Z+4, r24	; 0x04
    16a8:	95 83       	std	Z+5, r25	; 0x05
    16aa:	a6 83       	std	Z+6, r26	; 0x06
    16ac:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    16ae:	80 e4       	ldi	r24, 0x40	; 64
    16b0:	92 e0       	ldi	r25, 0x02	; 2
    16b2:	91 83       	std	Z+1, r25	; 0x01
    16b4:	80 83       	st	Z, r24
    16b6:	85 ec       	ldi	r24, 0xC5	; 197
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	95 87       	std	Z+13, r25	; 0x0d
    16bc:	84 87       	std	Z+12, r24	; 0x0c
    16be:	84 ec       	ldi	r24, 0xC4	; 196
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	97 87       	std	Z+15, r25	; 0x0f
    16c4:	86 87       	std	Z+14, r24	; 0x0e
    16c6:	80 ec       	ldi	r24, 0xC0	; 192
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	91 8b       	std	Z+17, r25	; 0x11
    16cc:	80 8b       	std	Z+16, r24	; 0x10
    16ce:	81 ec       	ldi	r24, 0xC1	; 193
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	93 8b       	std	Z+19, r25	; 0x13
    16d4:	82 8b       	std	Z+18, r24	; 0x12
    16d6:	82 ec       	ldi	r24, 0xC2	; 194
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	95 8b       	std	Z+21, r25	; 0x15
    16dc:	84 8b       	std	Z+20, r24	; 0x14
    16de:	86 ec       	ldi	r24, 0xC6	; 198
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	97 8b       	std	Z+23, r25	; 0x17
    16e4:	86 8b       	std	Z+22, r24	; 0x16
    16e6:	11 8e       	std	Z+25, r1	; 0x19
    16e8:	12 8e       	std	Z+26, r1	; 0x1a
    16ea:	13 8e       	std	Z+27, r1	; 0x1b
    16ec:	14 8e       	std	Z+28, r1	; 0x1c
    16ee:	08 95       	ret

000016f0 <initVariant>:
    16f0:	08 95       	ret

000016f2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    16f2:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <init>

	initVariant();
    16f6:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    16fa:	0e 94 5c 05 	call	0xab8	; 0xab8 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    16fe:	c2 ee       	ldi	r28, 0xE2	; 226
    1700:	d9 e0       	ldi	r29, 0x09	; 9
#endif
	
	setup();
    
	for (;;) {
		loop();
    1702:	0e 94 be 05 	call	0xb7c	; 0xb7c <loop>
		if (serialEventRun) serialEventRun();
    1706:	20 97       	sbiw	r28, 0x00	; 0
    1708:	e1 f3       	breq	.-8      	; 0x1702 <main+0x10>
    170a:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_Z14serialEventRunv>
    170e:	f9 cf       	rjmp	.-14     	; 0x1702 <main+0x10>

00001710 <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1710:	cf 92       	push	r12
    1712:	df 92       	push	r13
    1714:	ef 92       	push	r14
    1716:	ff 92       	push	r15
    1718:	0f 93       	push	r16
    171a:	1f 93       	push	r17
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
    1720:	6c 01       	movw	r12, r24
    1722:	7a 01       	movw	r14, r20
    1724:	8b 01       	movw	r16, r22
    1726:	c0 e0       	ldi	r28, 0x00	; 0
    1728:	d0 e0       	ldi	r29, 0x00	; 0
    172a:	ce 15       	cp	r28, r14
    172c:	df 05       	cpc	r29, r15
    172e:	81 f0       	breq	.+32     	; 0x1750 <_ZN5Print5writeEPKhj+0x40>
    1730:	d8 01       	movw	r26, r16
    1732:	6d 91       	ld	r22, X+
    1734:	8d 01       	movw	r16, r26
    1736:	d6 01       	movw	r26, r12
    1738:	ed 91       	ld	r30, X+
    173a:	fc 91       	ld	r31, X
    173c:	01 90       	ld	r0, Z+
    173e:	f0 81       	ld	r31, Z
    1740:	e0 2d       	mov	r30, r0
    1742:	c6 01       	movw	r24, r12
    1744:	09 95       	icall
    1746:	89 2b       	or	r24, r25
    1748:	11 f0       	breq	.+4      	; 0x174e <_ZN5Print5writeEPKhj+0x3e>
    174a:	21 96       	adiw	r28, 0x01	; 1
    174c:	ee cf       	rjmp	.-36     	; 0x172a <_ZN5Print5writeEPKhj+0x1a>
    174e:	7e 01       	movw	r14, r28
    1750:	c7 01       	movw	r24, r14
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	1f 91       	pop	r17
    1758:	0f 91       	pop	r16
    175a:	ff 90       	pop	r15
    175c:	ef 90       	pop	r14
    175e:	df 90       	pop	r13
    1760:	cf 90       	pop	r12
    1762:	08 95       	ret

00001764 <_ZN5Print5writeEPKc>:
    1764:	61 15       	cp	r22, r1
    1766:	71 05       	cpc	r23, r1
    1768:	79 f0       	breq	.+30     	; 0x1788 <_ZN5Print5writeEPKc+0x24>
    176a:	fb 01       	movw	r30, r22
    176c:	01 90       	ld	r0, Z+
    176e:	00 20       	and	r0, r0
    1770:	e9 f7       	brne	.-6      	; 0x176c <_ZN5Print5writeEPKc+0x8>
    1772:	31 97       	sbiw	r30, 0x01	; 1
    1774:	af 01       	movw	r20, r30
    1776:	46 1b       	sub	r20, r22
    1778:	57 0b       	sbc	r21, r23
    177a:	dc 01       	movw	r26, r24
    177c:	ed 91       	ld	r30, X+
    177e:	fc 91       	ld	r31, X
    1780:	02 80       	ldd	r0, Z+2	; 0x02
    1782:	f3 81       	ldd	r31, Z+3	; 0x03
    1784:	e0 2d       	mov	r30, r0
    1786:	09 94       	ijmp
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	08 95       	ret

0000178e <_ZN5Print5printEPK19__FlashStringHelper>:
    178e:	ef 92       	push	r14
    1790:	ff 92       	push	r15
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
    179a:	8c 01       	movw	r16, r24
    179c:	7b 01       	movw	r14, r22
    179e:	c0 e0       	ldi	r28, 0x00	; 0
    17a0:	d0 e0       	ldi	r29, 0x00	; 0
    17a2:	f7 01       	movw	r30, r14
    17a4:	ec 0f       	add	r30, r28
    17a6:	fd 1f       	adc	r31, r29
    17a8:	64 91       	lpm	r22, Z
    17aa:	66 23       	and	r22, r22
    17ac:	61 f0       	breq	.+24     	; 0x17c6 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    17ae:	d8 01       	movw	r26, r16
    17b0:	ed 91       	ld	r30, X+
    17b2:	fc 91       	ld	r31, X
    17b4:	01 90       	ld	r0, Z+
    17b6:	f0 81       	ld	r31, Z
    17b8:	e0 2d       	mov	r30, r0
    17ba:	c8 01       	movw	r24, r16
    17bc:	09 95       	icall
    17be:	89 2b       	or	r24, r25
    17c0:	11 f0       	breq	.+4      	; 0x17c6 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    17c2:	21 96       	adiw	r28, 0x01	; 1
    17c4:	ee cf       	rjmp	.-36     	; 0x17a2 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    17c6:	ce 01       	movw	r24, r28
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	1f 91       	pop	r17
    17ce:	0f 91       	pop	r16
    17d0:	ff 90       	pop	r15
    17d2:	ef 90       	pop	r14
    17d4:	08 95       	ret

000017d6 <_ZN5Print5printEPKc>:
    17d6:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <_ZN5Print5writeEPKc>

000017da <_ZN5Print5printEc>:
    17da:	dc 01       	movw	r26, r24
    17dc:	ed 91       	ld	r30, X+
    17de:	fc 91       	ld	r31, X
    17e0:	01 90       	ld	r0, Z+
    17e2:	f0 81       	ld	r31, Z
    17e4:	e0 2d       	mov	r30, r0
    17e6:	09 94       	ijmp

000017e8 <_ZN5Print7printlnEv>:
    17e8:	6e e4       	ldi	r22, 0x4E	; 78
    17ea:	72 e0       	ldi	r23, 0x02	; 2
    17ec:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <_ZN5Print5writeEPKc>

000017f0 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    17f0:	0f 93       	push	r16
    17f2:	1f 93       	push	r17
    17f4:	cf 93       	push	r28
    17f6:	df 93       	push	r29
    17f8:	ec 01       	movw	r28, r24
    17fa:	0e 94 c7 0b 	call	0x178e	; 0x178e <_ZN5Print5printEPK19__FlashStringHelper>
    17fe:	8c 01       	movw	r16, r24
    1800:	ce 01       	movw	r24, r28
    1802:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <_ZN5Print7printlnEv>
    1806:	80 0f       	add	r24, r16
    1808:	91 1f       	adc	r25, r17
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	1f 91       	pop	r17
    1810:	0f 91       	pop	r16
    1812:	08 95       	ret

00001814 <_ZN5Print7printlnEPKc>:
    1814:	0f 93       	push	r16
    1816:	1f 93       	push	r17
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	ec 01       	movw	r28, r24
    181e:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_ZN5Print5writeEPKc>
    1822:	8c 01       	movw	r16, r24
    1824:	ce 01       	movw	r24, r28
    1826:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <_ZN5Print7printlnEv>
    182a:	80 0f       	add	r24, r16
    182c:	91 1f       	adc	r25, r17
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28
    1832:	1f 91       	pop	r17
    1834:	0f 91       	pop	r16
    1836:	08 95       	ret

00001838 <_ZN5Print11printNumberEmh>:
    1838:	8f 92       	push	r8
    183a:	9f 92       	push	r9
    183c:	af 92       	push	r10
    183e:	bf 92       	push	r11
    1840:	ef 92       	push	r14
    1842:	ff 92       	push	r15
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	a1 97       	sbiw	r28, 0x21	; 33
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	de bf       	out	0x3e, r29	; 62
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	cd bf       	out	0x3d, r28	; 61
    185c:	7c 01       	movw	r14, r24
    185e:	fa 01       	movw	r30, r20
    1860:	cb 01       	movw	r24, r22
    1862:	19 a2       	std	Y+33, r1	; 0x21
    1864:	22 30       	cpi	r18, 0x02	; 2
    1866:	08 f4       	brcc	.+2      	; 0x186a <_ZN5Print11printNumberEmh+0x32>
    1868:	2a e0       	ldi	r18, 0x0A	; 10
    186a:	8e 01       	movw	r16, r28
    186c:	0f 5d       	subi	r16, 0xDF	; 223
    186e:	1f 4f       	sbci	r17, 0xFF	; 255
    1870:	82 2e       	mov	r8, r18
    1872:	91 2c       	mov	r9, r1
    1874:	a1 2c       	mov	r10, r1
    1876:	b1 2c       	mov	r11, r1
    1878:	bf 01       	movw	r22, r30
    187a:	a5 01       	movw	r20, r10
    187c:	94 01       	movw	r18, r8
    187e:	0e 94 cc 14 	call	0x2998	; 0x2998 <__udivmodsi4>
    1882:	f9 01       	movw	r30, r18
    1884:	ca 01       	movw	r24, r20
    1886:	01 50       	subi	r16, 0x01	; 1
    1888:	11 09       	sbc	r17, r1
    188a:	6a 30       	cpi	r22, 0x0A	; 10
    188c:	10 f4       	brcc	.+4      	; 0x1892 <_ZN5Print11printNumberEmh+0x5a>
    188e:	60 5d       	subi	r22, 0xD0	; 208
    1890:	01 c0       	rjmp	.+2      	; 0x1894 <_ZN5Print11printNumberEmh+0x5c>
    1892:	69 5c       	subi	r22, 0xC9	; 201
    1894:	d8 01       	movw	r26, r16
    1896:	6c 93       	st	X, r22
    1898:	23 2b       	or	r18, r19
    189a:	24 2b       	or	r18, r20
    189c:	25 2b       	or	r18, r21
    189e:	61 f7       	brne	.-40     	; 0x1878 <_ZN5Print11printNumberEmh+0x40>
    18a0:	b8 01       	movw	r22, r16
    18a2:	c7 01       	movw	r24, r14
    18a4:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_ZN5Print5writeEPKc>
    18a8:	a1 96       	adiw	r28, 0x21	; 33
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	ff 90       	pop	r15
    18be:	ef 90       	pop	r14
    18c0:	bf 90       	pop	r11
    18c2:	af 90       	pop	r10
    18c4:	9f 90       	pop	r9
    18c6:	8f 90       	pop	r8
    18c8:	08 95       	ret

000018ca <_ZN5Print5printEmi>:
    18ca:	21 15       	cp	r18, r1
    18cc:	31 05       	cpc	r19, r1
    18ce:	41 f4       	brne	.+16     	; 0x18e0 <_ZN5Print5printEmi+0x16>
    18d0:	dc 01       	movw	r26, r24
    18d2:	ed 91       	ld	r30, X+
    18d4:	fc 91       	ld	r31, X
    18d6:	01 90       	ld	r0, Z+
    18d8:	f0 81       	ld	r31, Z
    18da:	e0 2d       	mov	r30, r0
    18dc:	64 2f       	mov	r22, r20
    18de:	09 94       	ijmp
    18e0:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <_ZN5Print11printNumberEmh>

000018e4 <_ZN5Print5printEhi>:
    18e4:	9a 01       	movw	r18, r20
    18e6:	46 2f       	mov	r20, r22
    18e8:	50 e0       	ldi	r21, 0x00	; 0
    18ea:	60 e0       	ldi	r22, 0x00	; 0
    18ec:	70 e0       	ldi	r23, 0x00	; 0
    18ee:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <_ZN5Print5printEmi>

000018f2 <_ZN5Print7printlnEhi>:
    18f2:	0f 93       	push	r16
    18f4:	1f 93       	push	r17
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	ec 01       	movw	r28, r24
    18fc:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <_ZN5Print5printEhi>
    1900:	8c 01       	movw	r16, r24
    1902:	ce 01       	movw	r24, r28
    1904:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <_ZN5Print7printlnEv>
    1908:	80 0f       	add	r24, r16
    190a:	91 1f       	adc	r25, r17
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	08 95       	ret

00001916 <_ZN5Print5printEji>:
    1916:	9a 01       	movw	r18, r20
    1918:	ab 01       	movw	r20, r22
    191a:	60 e0       	ldi	r22, 0x00	; 0
    191c:	70 e0       	ldi	r23, 0x00	; 0
    191e:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <_ZN5Print5printEmi>

00001922 <_ZN5Print7printlnEji>:
    1922:	0f 93       	push	r16
    1924:	1f 93       	push	r17
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
    192a:	ec 01       	movw	r28, r24
    192c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <_ZN5Print5printEji>
    1930:	8c 01       	movw	r16, r24
    1932:	ce 01       	movw	r24, r28
    1934:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <_ZN5Print7printlnEv>
    1938:	80 0f       	add	r24, r16
    193a:	91 1f       	adc	r25, r17
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	08 95       	ret

00001946 <_ZN5Print5printEli>:
    1946:	cf 92       	push	r12
    1948:	df 92       	push	r13
    194a:	ef 92       	push	r14
    194c:	ff 92       	push	r15
    194e:	0f 93       	push	r16
    1950:	1f 93       	push	r17
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	21 15       	cp	r18, r1
    1958:	31 05       	cpc	r19, r1
    195a:	81 f4       	brne	.+32     	; 0x197c <_ZN5Print5printEli+0x36>
    195c:	dc 01       	movw	r26, r24
    195e:	ed 91       	ld	r30, X+
    1960:	fc 91       	ld	r31, X
    1962:	01 90       	ld	r0, Z+
    1964:	f0 81       	ld	r31, Z
    1966:	e0 2d       	mov	r30, r0
    1968:	64 2f       	mov	r22, r20
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	1f 91       	pop	r17
    1970:	0f 91       	pop	r16
    1972:	ff 90       	pop	r15
    1974:	ef 90       	pop	r14
    1976:	df 90       	pop	r13
    1978:	cf 90       	pop	r12
    197a:	09 94       	ijmp
    197c:	2a 30       	cpi	r18, 0x0A	; 10
    197e:	31 05       	cpc	r19, r1
    1980:	01 f5       	brne	.+64     	; 0x19c2 <_ZN5Print5printEli+0x7c>
    1982:	77 ff       	sbrs	r23, 7
    1984:	1d c0       	rjmp	.+58     	; 0x19c0 <_ZN5Print5printEli+0x7a>
    1986:	6a 01       	movw	r12, r20
    1988:	7b 01       	movw	r14, r22
    198a:	ec 01       	movw	r28, r24
    198c:	6d e2       	ldi	r22, 0x2D	; 45
    198e:	0e 94 ed 0b 	call	0x17da	; 0x17da <_ZN5Print5printEc>
    1992:	8c 01       	movw	r16, r24
    1994:	44 27       	eor	r20, r20
    1996:	55 27       	eor	r21, r21
    1998:	ba 01       	movw	r22, r20
    199a:	4c 19       	sub	r20, r12
    199c:	5d 09       	sbc	r21, r13
    199e:	6e 09       	sbc	r22, r14
    19a0:	7f 09       	sbc	r23, r15
    19a2:	2a e0       	ldi	r18, 0x0A	; 10
    19a4:	ce 01       	movw	r24, r28
    19a6:	0e 94 1c 0c 	call	0x1838	; 0x1838 <_ZN5Print11printNumberEmh>
    19aa:	80 0f       	add	r24, r16
    19ac:	91 1f       	adc	r25, r17
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	1f 91       	pop	r17
    19b4:	0f 91       	pop	r16
    19b6:	ff 90       	pop	r15
    19b8:	ef 90       	pop	r14
    19ba:	df 90       	pop	r13
    19bc:	cf 90       	pop	r12
    19be:	08 95       	ret
    19c0:	2a e0       	ldi	r18, 0x0A	; 10
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	1f 91       	pop	r17
    19c8:	0f 91       	pop	r16
    19ca:	ff 90       	pop	r15
    19cc:	ef 90       	pop	r14
    19ce:	df 90       	pop	r13
    19d0:	cf 90       	pop	r12
    19d2:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <_ZN5Print11printNumberEmh>

000019d6 <_ZN5Print5printEii>:
    19d6:	9a 01       	movw	r18, r20
    19d8:	ab 01       	movw	r20, r22
    19da:	77 0f       	add	r23, r23
    19dc:	66 0b       	sbc	r22, r22
    19de:	77 0b       	sbc	r23, r23
    19e0:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <_ZN5Print5printEli>

000019e4 <_ZN5Print7printlnEii>:
    19e4:	0f 93       	push	r16
    19e6:	1f 93       	push	r17
    19e8:	cf 93       	push	r28
    19ea:	df 93       	push	r29
    19ec:	ec 01       	movw	r28, r24
    19ee:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <_ZN5Print5printEii>
    19f2:	8c 01       	movw	r16, r24
    19f4:	ce 01       	movw	r24, r28
    19f6:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <_ZN5Print7printlnEv>
    19fa:	80 0f       	add	r24, r16
    19fc:	91 1f       	adc	r25, r17
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	1f 91       	pop	r17
    1a04:	0f 91       	pop	r16
    1a06:	08 95       	ret

00001a08 <_ZN5Print10printFloatEdh>:
    1a08:	7f 92       	push	r7
    1a0a:	8f 92       	push	r8
    1a0c:	9f 92       	push	r9
    1a0e:	af 92       	push	r10
    1a10:	bf 92       	push	r11
    1a12:	cf 92       	push	r12
    1a14:	df 92       	push	r13
    1a16:	ef 92       	push	r14
    1a18:	ff 92       	push	r15
    1a1a:	0f 93       	push	r16
    1a1c:	1f 93       	push	r17
    1a1e:	cf 93       	push	r28
    1a20:	df 93       	push	r29
    1a22:	8c 01       	movw	r16, r24
    1a24:	6a 01       	movw	r12, r20
    1a26:	7b 01       	movw	r14, r22
    1a28:	72 2e       	mov	r7, r18
    1a2a:	9a 01       	movw	r18, r20
    1a2c:	ab 01       	movw	r20, r22
    1a2e:	c7 01       	movw	r24, r14
    1a30:	b6 01       	movw	r22, r12
    1a32:	0e 94 c7 14 	call	0x298e	; 0x298e <__unordsf2>
    1a36:	88 23       	and	r24, r24
    1a38:	19 f0       	breq	.+6      	; 0x1a40 <_ZN5Print10printFloatEdh+0x38>
    1a3a:	61 e5       	ldi	r22, 0x51	; 81
    1a3c:	72 e0       	ldi	r23, 0x02	; 2
    1a3e:	27 c0       	rjmp	.+78     	; 0x1a8e <_ZN5Print10printFloatEdh+0x86>
    1a40:	46 01       	movw	r8, r12
    1a42:	57 01       	movw	r10, r14
    1a44:	e8 94       	clt
    1a46:	b7 f8       	bld	r11, 7
    1a48:	2f ef       	ldi	r18, 0xFF	; 255
    1a4a:	3f ef       	ldi	r19, 0xFF	; 255
    1a4c:	4f e7       	ldi	r20, 0x7F	; 127
    1a4e:	5f e7       	ldi	r21, 0x7F	; 127
    1a50:	c5 01       	movw	r24, r10
    1a52:	b4 01       	movw	r22, r8
    1a54:	0e 94 c7 14 	call	0x298e	; 0x298e <__unordsf2>
    1a58:	81 11       	cpse	r24, r1
    1a5a:	0d c0       	rjmp	.+26     	; 0x1a76 <_ZN5Print10printFloatEdh+0x6e>
    1a5c:	2f ef       	ldi	r18, 0xFF	; 255
    1a5e:	3f ef       	ldi	r19, 0xFF	; 255
    1a60:	4f e7       	ldi	r20, 0x7F	; 127
    1a62:	5f e7       	ldi	r21, 0x7F	; 127
    1a64:	c5 01       	movw	r24, r10
    1a66:	b4 01       	movw	r22, r8
    1a68:	0e 94 c2 14 	call	0x2984	; 0x2984 <__cmpsf2>
    1a6c:	18 16       	cp	r1, r24
    1a6e:	1c f4       	brge	.+6      	; 0x1a76 <_ZN5Print10printFloatEdh+0x6e>
    1a70:	65 e5       	ldi	r22, 0x55	; 85
    1a72:	72 e0       	ldi	r23, 0x02	; 2
    1a74:	0c c0       	rjmp	.+24     	; 0x1a8e <_ZN5Print10printFloatEdh+0x86>
    1a76:	2f ef       	ldi	r18, 0xFF	; 255
    1a78:	3f ef       	ldi	r19, 0xFF	; 255
    1a7a:	4f e7       	ldi	r20, 0x7F	; 127
    1a7c:	5f e4       	ldi	r21, 0x4F	; 79
    1a7e:	c7 01       	movw	r24, r14
    1a80:	b6 01       	movw	r22, r12
    1a82:	0e 94 0f 09 	call	0x121e	; 0x121e <__gesf2>
    1a86:	18 16       	cp	r1, r24
    1a88:	94 f4       	brge	.+36     	; 0x1aae <_ZN5Print10printFloatEdh+0xa6>
    1a8a:	69 e5       	ldi	r22, 0x59	; 89
    1a8c:	72 e0       	ldi	r23, 0x02	; 2
    1a8e:	c8 01       	movw	r24, r16
    1a90:	df 91       	pop	r29
    1a92:	cf 91       	pop	r28
    1a94:	1f 91       	pop	r17
    1a96:	0f 91       	pop	r16
    1a98:	ff 90       	pop	r15
    1a9a:	ef 90       	pop	r14
    1a9c:	df 90       	pop	r13
    1a9e:	cf 90       	pop	r12
    1aa0:	bf 90       	pop	r11
    1aa2:	af 90       	pop	r10
    1aa4:	9f 90       	pop	r9
    1aa6:	8f 90       	pop	r8
    1aa8:	7f 90       	pop	r7
    1aaa:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <_ZN5Print5writeEPKc>
    1aae:	2f ef       	ldi	r18, 0xFF	; 255
    1ab0:	3f ef       	ldi	r19, 0xFF	; 255
    1ab2:	4f e7       	ldi	r20, 0x7F	; 127
    1ab4:	5f ec       	ldi	r21, 0xCF	; 207
    1ab6:	c7 01       	movw	r24, r14
    1ab8:	b6 01       	movw	r22, r12
    1aba:	0e 94 c2 14 	call	0x2984	; 0x2984 <__cmpsf2>
    1abe:	87 fd       	sbrc	r24, 7
    1ac0:	e4 cf       	rjmp	.-56     	; 0x1a8a <_ZN5Print10printFloatEdh+0x82>
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	a9 01       	movw	r20, r18
    1ac8:	c7 01       	movw	r24, r14
    1aca:	b6 01       	movw	r22, r12
    1acc:	0e 94 c2 14 	call	0x2984	; 0x2984 <__cmpsf2>
    1ad0:	87 ff       	sbrs	r24, 7
    1ad2:	0a c0       	rjmp	.+20     	; 0x1ae8 <_ZN5Print10printFloatEdh+0xe0>
    1ad4:	6d e2       	ldi	r22, 0x2D	; 45
    1ad6:	c8 01       	movw	r24, r16
    1ad8:	0e 94 ed 0b 	call	0x17da	; 0x17da <_ZN5Print5printEc>
    1adc:	ec 01       	movw	r28, r24
    1ade:	f7 fa       	bst	r15, 7
    1ae0:	f0 94       	com	r15
    1ae2:	f7 f8       	bld	r15, 7
    1ae4:	f0 94       	com	r15
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <_ZN5Print10printFloatEdh+0xe4>
    1ae8:	c0 e0       	ldi	r28, 0x00	; 0
    1aea:	d0 e0       	ldi	r29, 0x00	; 0
    1aec:	b1 2c       	mov	r11, r1
    1aee:	60 e0       	ldi	r22, 0x00	; 0
    1af0:	70 e0       	ldi	r23, 0x00	; 0
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	9f e3       	ldi	r25, 0x3F	; 63
    1af6:	7b 14       	cp	r7, r11
    1af8:	41 f0       	breq	.+16     	; 0x1b0a <_ZN5Print10printFloatEdh+0x102>
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 e2       	ldi	r20, 0x20	; 32
    1b00:	51 e4       	ldi	r21, 0x41	; 65
    1b02:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__divsf3>
    1b06:	b3 94       	inc	r11
    1b08:	f6 cf       	rjmp	.-20     	; 0x1af6 <_ZN5Print10printFloatEdh+0xee>
    1b0a:	a7 01       	movw	r20, r14
    1b0c:	96 01       	movw	r18, r12
    1b0e:	0e 94 6d 07 	call	0xeda	; 0xeda <__addsf3>
    1b12:	6b 01       	movw	r12, r22
    1b14:	7c 01       	movw	r14, r24
    1b16:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__fixunssfsi>
    1b1a:	4b 01       	movw	r8, r22
    1b1c:	5c 01       	movw	r10, r24
    1b1e:	2a e0       	ldi	r18, 0x0A	; 10
    1b20:	ab 01       	movw	r20, r22
    1b22:	bc 01       	movw	r22, r24
    1b24:	c8 01       	movw	r24, r16
    1b26:	0e 94 1c 0c 	call	0x1838	; 0x1838 <_ZN5Print11printNumberEmh>
    1b2a:	c8 0f       	add	r28, r24
    1b2c:	d9 1f       	adc	r29, r25
    1b2e:	77 20       	and	r7, r7
    1b30:	b9 f1       	breq	.+110    	; 0x1ba0 <_ZN5Print10printFloatEdh+0x198>
    1b32:	c5 01       	movw	r24, r10
    1b34:	b4 01       	movw	r22, r8
    1b36:	0e 94 81 08 	call	0x1102	; 0x1102 <__floatunsisf>
    1b3a:	9b 01       	movw	r18, r22
    1b3c:	ac 01       	movw	r20, r24
    1b3e:	c7 01       	movw	r24, r14
    1b40:	b6 01       	movw	r22, r12
    1b42:	0e 94 6c 07 	call	0xed8	; 0xed8 <__subsf3>
    1b46:	6b 01       	movw	r12, r22
    1b48:	7c 01       	movw	r14, r24
    1b4a:	6e e2       	ldi	r22, 0x2E	; 46
    1b4c:	c8 01       	movw	r24, r16
    1b4e:	0e 94 ed 0b 	call	0x17da	; 0x17da <_ZN5Print5printEc>
    1b52:	c8 0f       	add	r28, r24
    1b54:	d9 1f       	adc	r29, r25
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e2       	ldi	r20, 0x20	; 32
    1b5c:	51 e4       	ldi	r21, 0x41	; 65
    1b5e:	c7 01       	movw	r24, r14
    1b60:	b6 01       	movw	r22, r12
    1b62:	0e 94 14 09 	call	0x1228	; 0x1228 <__mulsf3>
    1b66:	4b 01       	movw	r8, r22
    1b68:	5c 01       	movw	r10, r24
    1b6a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__fixunssfsi>
    1b6e:	6b 01       	movw	r12, r22
    1b70:	7c 01       	movw	r14, r24
    1b72:	4a e0       	ldi	r20, 0x0A	; 10
    1b74:	50 e0       	ldi	r21, 0x00	; 0
    1b76:	c8 01       	movw	r24, r16
    1b78:	0e 94 8b 0c 	call	0x1916	; 0x1916 <_ZN5Print5printEji>
    1b7c:	c8 0f       	add	r28, r24
    1b7e:	d9 1f       	adc	r29, r25
    1b80:	b6 01       	movw	r22, r12
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	0e 94 81 08 	call	0x1102	; 0x1102 <__floatunsisf>
    1b8a:	9b 01       	movw	r18, r22
    1b8c:	ac 01       	movw	r20, r24
    1b8e:	c5 01       	movw	r24, r10
    1b90:	b4 01       	movw	r22, r8
    1b92:	0e 94 6c 07 	call	0xed8	; 0xed8 <__subsf3>
    1b96:	6b 01       	movw	r12, r22
    1b98:	7c 01       	movw	r14, r24
    1b9a:	7a 94       	dec	r7
    1b9c:	71 10       	cpse	r7, r1
    1b9e:	db cf       	rjmp	.-74     	; 0x1b56 <_ZN5Print10printFloatEdh+0x14e>
    1ba0:	ce 01       	movw	r24, r28
    1ba2:	df 91       	pop	r29
    1ba4:	cf 91       	pop	r28
    1ba6:	1f 91       	pop	r17
    1ba8:	0f 91       	pop	r16
    1baa:	ff 90       	pop	r15
    1bac:	ef 90       	pop	r14
    1bae:	df 90       	pop	r13
    1bb0:	cf 90       	pop	r12
    1bb2:	bf 90       	pop	r11
    1bb4:	af 90       	pop	r10
    1bb6:	9f 90       	pop	r9
    1bb8:	8f 90       	pop	r8
    1bba:	7f 90       	pop	r7
    1bbc:	08 95       	ret

00001bbe <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    1bbe:	0f 93       	push	r16
    1bc0:	1f 93       	push	r17
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1bc8:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <_ZN5Print10printFloatEdh>
    1bcc:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1bce:	ce 01       	movw	r24, r28
    1bd0:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <_ZN5Print7printlnEv>
  return n;
}
    1bd4:	80 0f       	add	r24, r16
    1bd6:	91 1f       	adc	r25, r17
    1bd8:	df 91       	pop	r29
    1bda:	cf 91       	pop	r28
    1bdc:	1f 91       	pop	r17
    1bde:	0f 91       	pop	r16
    1be0:	08 95       	ret

00001be2 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1be2:	1f 92       	push	r1
    1be4:	0f 92       	push	r0
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	0f 92       	push	r0
    1bea:	11 24       	eor	r1, r1
    1bec:	2f 93       	push	r18
    1bee:	3f 93       	push	r19
    1bf0:	8f 93       	push	r24
    1bf2:	9f 93       	push	r25
    1bf4:	af 93       	push	r26
    1bf6:	bf 93       	push	r27
    1bf8:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <timer0_millis>
    1bfc:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <timer0_millis+0x1>
    1c00:	a0 91 4b 04 	lds	r26, 0x044B	; 0x80044b <timer0_millis+0x2>
    1c04:	b0 91 4c 04 	lds	r27, 0x044C	; 0x80044c <timer0_millis+0x3>
    1c08:	30 91 48 04 	lds	r19, 0x0448	; 0x800448 <timer0_fract>
    1c0c:	23 e0       	ldi	r18, 0x03	; 3
    1c0e:	23 0f       	add	r18, r19
    1c10:	2d 37       	cpi	r18, 0x7D	; 125
    1c12:	20 f4       	brcc	.+8      	; 0x1c1c <__vector_16+0x3a>
    1c14:	01 96       	adiw	r24, 0x01	; 1
    1c16:	a1 1d       	adc	r26, r1
    1c18:	b1 1d       	adc	r27, r1
    1c1a:	05 c0       	rjmp	.+10     	; 0x1c26 <__vector_16+0x44>
    1c1c:	26 e8       	ldi	r18, 0x86	; 134
    1c1e:	23 0f       	add	r18, r19
    1c20:	02 96       	adiw	r24, 0x02	; 2
    1c22:	a1 1d       	adc	r26, r1
    1c24:	b1 1d       	adc	r27, r1
    1c26:	20 93 48 04 	sts	0x0448, r18	; 0x800448 <timer0_fract>
    1c2a:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <timer0_millis>
    1c2e:	90 93 4a 04 	sts	0x044A, r25	; 0x80044a <timer0_millis+0x1>
    1c32:	a0 93 4b 04 	sts	0x044B, r26	; 0x80044b <timer0_millis+0x2>
    1c36:	b0 93 4c 04 	sts	0x044C, r27	; 0x80044c <timer0_millis+0x3>
    1c3a:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <timer0_overflow_count>
    1c3e:	90 91 4e 04 	lds	r25, 0x044E	; 0x80044e <timer0_overflow_count+0x1>
    1c42:	a0 91 4f 04 	lds	r26, 0x044F	; 0x80044f <timer0_overflow_count+0x2>
    1c46:	b0 91 50 04 	lds	r27, 0x0450	; 0x800450 <timer0_overflow_count+0x3>
    1c4a:	01 96       	adiw	r24, 0x01	; 1
    1c4c:	a1 1d       	adc	r26, r1
    1c4e:	b1 1d       	adc	r27, r1
    1c50:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <timer0_overflow_count>
    1c54:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <timer0_overflow_count+0x1>
    1c58:	a0 93 4f 04 	sts	0x044F, r26	; 0x80044f <timer0_overflow_count+0x2>
    1c5c:	b0 93 50 04 	sts	0x0450, r27	; 0x800450 <timer0_overflow_count+0x3>
    1c60:	bf 91       	pop	r27
    1c62:	af 91       	pop	r26
    1c64:	9f 91       	pop	r25
    1c66:	8f 91       	pop	r24
    1c68:	3f 91       	pop	r19
    1c6a:	2f 91       	pop	r18
    1c6c:	0f 90       	pop	r0
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	0f 90       	pop	r0
    1c72:	1f 90       	pop	r1
    1c74:	18 95       	reti

00001c76 <micros>:
    1c76:	3f b7       	in	r19, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <timer0_overflow_count>
    1c7e:	90 91 4e 04 	lds	r25, 0x044E	; 0x80044e <timer0_overflow_count+0x1>
    1c82:	a0 91 4f 04 	lds	r26, 0x044F	; 0x80044f <timer0_overflow_count+0x2>
    1c86:	b0 91 50 04 	lds	r27, 0x0450	; 0x800450 <timer0_overflow_count+0x3>
    1c8a:	26 b5       	in	r18, 0x26	; 38
    1c8c:	a8 9b       	sbis	0x15, 0	; 21
    1c8e:	05 c0       	rjmp	.+10     	; 0x1c9a <micros+0x24>
    1c90:	2f 3f       	cpi	r18, 0xFF	; 255
    1c92:	19 f0       	breq	.+6      	; 0x1c9a <micros+0x24>
    1c94:	01 96       	adiw	r24, 0x01	; 1
    1c96:	a1 1d       	adc	r26, r1
    1c98:	b1 1d       	adc	r27, r1
    1c9a:	3f bf       	out	0x3f, r19	; 63
    1c9c:	ba 2f       	mov	r27, r26
    1c9e:	a9 2f       	mov	r26, r25
    1ca0:	98 2f       	mov	r25, r24
    1ca2:	88 27       	eor	r24, r24
    1ca4:	82 0f       	add	r24, r18
    1ca6:	91 1d       	adc	r25, r1
    1ca8:	a1 1d       	adc	r26, r1
    1caa:	b1 1d       	adc	r27, r1
    1cac:	bc 01       	movw	r22, r24
    1cae:	cd 01       	movw	r24, r26
    1cb0:	42 e0       	ldi	r20, 0x02	; 2
    1cb2:	66 0f       	add	r22, r22
    1cb4:	77 1f       	adc	r23, r23
    1cb6:	88 1f       	adc	r24, r24
    1cb8:	99 1f       	adc	r25, r25
    1cba:	4a 95       	dec	r20
    1cbc:	d1 f7       	brne	.-12     	; 0x1cb2 <micros+0x3c>
    1cbe:	08 95       	ret

00001cc0 <delay>:
    1cc0:	8f 92       	push	r8
    1cc2:	9f 92       	push	r9
    1cc4:	af 92       	push	r10
    1cc6:	bf 92       	push	r11
    1cc8:	cf 92       	push	r12
    1cca:	df 92       	push	r13
    1ccc:	ef 92       	push	r14
    1cce:	ff 92       	push	r15
    1cd0:	6b 01       	movw	r12, r22
    1cd2:	7c 01       	movw	r14, r24
    1cd4:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <micros>
    1cd8:	4b 01       	movw	r8, r22
    1cda:	5c 01       	movw	r10, r24
    1cdc:	c1 14       	cp	r12, r1
    1cde:	d1 04       	cpc	r13, r1
    1ce0:	e1 04       	cpc	r14, r1
    1ce2:	f1 04       	cpc	r15, r1
    1ce4:	01 f1       	breq	.+64     	; 0x1d26 <delay+0x66>
    1ce6:	0e 94 f6 10 	call	0x21ec	; 0x21ec <yield>
    1cea:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <micros>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	88 19       	sub	r24, r8
    1cf4:	99 09       	sbc	r25, r9
    1cf6:	aa 09       	sbc	r26, r10
    1cf8:	bb 09       	sbc	r27, r11
    1cfa:	88 3e       	cpi	r24, 0xE8	; 232
    1cfc:	93 40       	sbci	r25, 0x03	; 3
    1cfe:	a1 05       	cpc	r26, r1
    1d00:	b1 05       	cpc	r27, r1
    1d02:	60 f3       	brcs	.-40     	; 0x1cdc <delay+0x1c>
    1d04:	21 e0       	ldi	r18, 0x01	; 1
    1d06:	c2 1a       	sub	r12, r18
    1d08:	d1 08       	sbc	r13, r1
    1d0a:	e1 08       	sbc	r14, r1
    1d0c:	f1 08       	sbc	r15, r1
    1d0e:	88 ee       	ldi	r24, 0xE8	; 232
    1d10:	88 0e       	add	r8, r24
    1d12:	83 e0       	ldi	r24, 0x03	; 3
    1d14:	98 1e       	adc	r9, r24
    1d16:	a1 1c       	adc	r10, r1
    1d18:	b1 1c       	adc	r11, r1
    1d1a:	c1 14       	cp	r12, r1
    1d1c:	d1 04       	cpc	r13, r1
    1d1e:	e1 04       	cpc	r14, r1
    1d20:	f1 04       	cpc	r15, r1
    1d22:	19 f7       	brne	.-58     	; 0x1cea <delay+0x2a>
    1d24:	db cf       	rjmp	.-74     	; 0x1cdc <delay+0x1c>
    1d26:	ff 90       	pop	r15
    1d28:	ef 90       	pop	r14
    1d2a:	df 90       	pop	r13
    1d2c:	cf 90       	pop	r12
    1d2e:	bf 90       	pop	r11
    1d30:	af 90       	pop	r10
    1d32:	9f 90       	pop	r9
    1d34:	8f 90       	pop	r8
    1d36:	08 95       	ret

00001d38 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1d38:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1d3a:	84 b5       	in	r24, 0x24	; 36
    1d3c:	82 60       	ori	r24, 0x02	; 2
    1d3e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1d40:	84 b5       	in	r24, 0x24	; 36
    1d42:	81 60       	ori	r24, 0x01	; 1
    1d44:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1d46:	85 b5       	in	r24, 0x25	; 37
    1d48:	82 60       	ori	r24, 0x02	; 2
    1d4a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1d4c:	85 b5       	in	r24, 0x25	; 37
    1d4e:	81 60       	ori	r24, 0x01	; 1
    1d50:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1d52:	ee e6       	ldi	r30, 0x6E	; 110
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	81 60       	ori	r24, 0x01	; 1
    1d5a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1d5c:	e1 e8       	ldi	r30, 0x81	; 129
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1d62:	80 81       	ld	r24, Z
    1d64:	82 60       	ori	r24, 0x02	; 2
    1d66:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1d68:	80 81       	ld	r24, Z
    1d6a:	81 60       	ori	r24, 0x01	; 1
    1d6c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1d6e:	e0 e8       	ldi	r30, 0x80	; 128
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	81 60       	ori	r24, 0x01	; 1
    1d76:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1d78:	e1 eb       	ldi	r30, 0xB1	; 177
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	84 60       	ori	r24, 0x04	; 4
    1d80:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1d82:	e0 eb       	ldi	r30, 0xB0	; 176
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	81 60       	ori	r24, 0x01	; 1
    1d8a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1d8c:	ea e7       	ldi	r30, 0x7A	; 122
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	84 60       	ori	r24, 0x04	; 4
    1d94:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1d96:	80 81       	ld	r24, Z
    1d98:	82 60       	ori	r24, 0x02	; 2
    1d9a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1d9c:	80 81       	ld	r24, Z
    1d9e:	81 60       	ori	r24, 0x01	; 1
    1da0:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1da2:	80 81       	ld	r24, Z
    1da4:	80 68       	ori	r24, 0x80	; 128
    1da6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1da8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    1dac:	08 95       	ret

00001dae <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1dae:	83 30       	cpi	r24, 0x03	; 3
    1db0:	81 f0       	breq	.+32     	; 0x1dd2 <turnOffPWM+0x24>
    1db2:	28 f4       	brcc	.+10     	; 0x1dbe <turnOffPWM+0x10>
    1db4:	81 30       	cpi	r24, 0x01	; 1
    1db6:	99 f0       	breq	.+38     	; 0x1dde <turnOffPWM+0x30>
    1db8:	82 30       	cpi	r24, 0x02	; 2
    1dba:	a1 f0       	breq	.+40     	; 0x1de4 <turnOffPWM+0x36>
    1dbc:	08 95       	ret
    1dbe:	87 30       	cpi	r24, 0x07	; 7
    1dc0:	a9 f0       	breq	.+42     	; 0x1dec <turnOffPWM+0x3e>
    1dc2:	88 30       	cpi	r24, 0x08	; 8
    1dc4:	b9 f0       	breq	.+46     	; 0x1df4 <turnOffPWM+0x46>
    1dc6:	84 30       	cpi	r24, 0x04	; 4
    1dc8:	d1 f4       	brne	.+52     	; 0x1dfe <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1dca:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1dce:	8f 7d       	andi	r24, 0xDF	; 223
    1dd0:	03 c0       	rjmp	.+6      	; 0x1dd8 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1dd2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1dd6:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1dd8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1ddc:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1dde:	84 b5       	in	r24, 0x24	; 36
    1de0:	8f 77       	andi	r24, 0x7F	; 127
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1de4:	84 b5       	in	r24, 0x24	; 36
    1de6:	8f 7d       	andi	r24, 0xDF	; 223
    1de8:	84 bd       	out	0x24, r24	; 36
    1dea:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1dec:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1df0:	8f 77       	andi	r24, 0x7F	; 127
    1df2:	03 c0       	rjmp	.+6      	; 0x1dfa <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1df4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1df8:	8f 7d       	andi	r24, 0xDF	; 223
    1dfa:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1dfe:	08 95       	ret

00001e00 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1e00:	cf 93       	push	r28
    1e02:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	fc 01       	movw	r30, r24
    1e08:	e9 5c       	subi	r30, 0xC9	; 201
    1e0a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e0c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1e0e:	fc 01       	movw	r30, r24
    1e10:	e5 5b       	subi	r30, 0xB5	; 181
    1e12:	fe 4f       	sbci	r31, 0xFE	; 254
    1e14:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1e16:	88 23       	and	r24, r24
    1e18:	61 f1       	breq	.+88     	; 0x1e72 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	88 0f       	add	r24, r24
    1e1e:	99 1f       	adc	r25, r25
    1e20:	fc 01       	movw	r30, r24
    1e22:	e7 59       	subi	r30, 0x97	; 151
    1e24:	fe 4f       	sbci	r31, 0xFE	; 254
    1e26:	c5 91       	lpm	r28, Z+
    1e28:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	e1 5a       	subi	r30, 0xA1	; 161
    1e2e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e30:	a5 91       	lpm	r26, Z+
    1e32:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1e34:	61 11       	cpse	r22, r1
    1e36:	09 c0       	rjmp	.+18     	; 0x1e4a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1e38:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1e3a:	f8 94       	cli
		*reg &= ~bit;
    1e3c:	88 81       	ld	r24, Y
    1e3e:	20 95       	com	r18
    1e40:	82 23       	and	r24, r18
    1e42:	88 83       	st	Y, r24
		*out &= ~bit;
    1e44:	ec 91       	ld	r30, X
    1e46:	2e 23       	and	r18, r30
    1e48:	0b c0       	rjmp	.+22     	; 0x1e60 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1e4a:	62 30       	cpi	r22, 0x02	; 2
    1e4c:	61 f4       	brne	.+24     	; 0x1e66 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1e4e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1e50:	f8 94       	cli
		*reg &= ~bit;
    1e52:	88 81       	ld	r24, Y
    1e54:	32 2f       	mov	r19, r18
    1e56:	30 95       	com	r19
    1e58:	83 23       	and	r24, r19
    1e5a:	88 83       	st	Y, r24
		*out |= bit;
    1e5c:	ec 91       	ld	r30, X
    1e5e:	2e 2b       	or	r18, r30
    1e60:	2c 93       	st	X, r18
		SREG = oldSREG;
    1e62:	9f bf       	out	0x3f, r25	; 63
    1e64:	06 c0       	rjmp	.+12     	; 0x1e72 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1e66:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1e68:	f8 94       	cli
		*reg |= bit;
    1e6a:	e8 81       	ld	r30, Y
    1e6c:	2e 2b       	or	r18, r30
    1e6e:	28 83       	st	Y, r18
		SREG = oldSREG;
    1e70:	8f bf       	out	0x3f, r24	; 63
	}
}
    1e72:	df 91       	pop	r29
    1e74:	cf 91       	pop	r28
    1e76:	08 95       	ret

00001e78 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1e78:	1f 93       	push	r17
    1e7a:	cf 93       	push	r28
    1e7c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	f9 01       	movw	r30, r18
    1e84:	ed 5d       	subi	r30, 0xDD	; 221
    1e86:	fe 4f       	sbci	r31, 0xFE	; 254
    1e88:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1e8a:	f9 01       	movw	r30, r18
    1e8c:	e9 5c       	subi	r30, 0xC9	; 201
    1e8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e90:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1e92:	f9 01       	movw	r30, r18
    1e94:	e5 5b       	subi	r30, 0xB5	; 181
    1e96:	fe 4f       	sbci	r31, 0xFE	; 254
    1e98:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1e9a:	cc 23       	and	r28, r28
    1e9c:	c1 f0       	breq	.+48     	; 0x1ece <digitalWrite+0x56>
    1e9e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1ea0:	81 11       	cpse	r24, r1
    1ea2:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <turnOffPWM>

	out = portOutputRegister(port);
    1ea6:	ec 2f       	mov	r30, r28
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	ee 0f       	add	r30, r30
    1eac:	ff 1f       	adc	r31, r31
    1eae:	e1 5a       	subi	r30, 0xA1	; 161
    1eb0:	fe 4f       	sbci	r31, 0xFE	; 254
    1eb2:	a5 91       	lpm	r26, Z+
    1eb4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1eb6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1eb8:	f8 94       	cli

	if (val == LOW) {
    1eba:	11 11       	cpse	r17, r1
    1ebc:	04 c0       	rjmp	.+8      	; 0x1ec6 <digitalWrite+0x4e>
		*out &= ~bit;
    1ebe:	8c 91       	ld	r24, X
    1ec0:	d0 95       	com	r29
    1ec2:	d8 23       	and	r29, r24
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <digitalWrite+0x52>
	} else {
		*out |= bit;
    1ec6:	ec 91       	ld	r30, X
    1ec8:	de 2b       	or	r29, r30
    1eca:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1ecc:	9f bf       	out	0x3f, r25	; 63
}
    1ece:	df 91       	pop	r29
    1ed0:	cf 91       	pop	r28
    1ed2:	1f 91       	pop	r17
    1ed4:	08 95       	ret

00001ed6 <freeMemory>:


#include "MemoryFree.h"


int freeMemory() {
    1ed6:	cf 93       	push	r28
    1ed8:	df 93       	push	r29
    1eda:	00 d0       	rcall	.+0      	; 0x1edc <freeMemory+0x6>
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
  int free_memory;

  if((int)__brkval == 0)
    1ee0:	20 91 1b 05 	lds	r18, 0x051B	; 0x80051b <__brkval>
    1ee4:	30 91 1c 05 	lds	r19, 0x051C	; 0x80051c <__brkval+0x1>
    1ee8:	ce 01       	movw	r24, r28
    1eea:	01 96       	adiw	r24, 0x01	; 1
    1eec:	21 15       	cp	r18, r1
    1eee:	31 05       	cpc	r19, r1
    1ef0:	19 f4       	brne	.+6      	; 0x1ef8 <freeMemory+0x22>
     free_memory = ((int)&free_memory) - ((int)&__bss_end);
    1ef2:	8f 51       	subi	r24, 0x1F	; 31
    1ef4:	95 40       	sbci	r25, 0x05	; 5
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <freeMemory+0x26>
  else
    free_memory = ((int)&free_memory) - ((int)__brkval);
    1ef8:	82 1b       	sub	r24, r18
    1efa:	93 0b       	sbc	r25, r19
    1efc:	9a 83       	std	Y+2, r25	; 0x02
    1efe:	89 83       	std	Y+1, r24	; 0x01

  return free_memory;
}
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	9a 81       	ldd	r25, Y+2	; 0x02
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	08 95       	ret

00001f0e <_ZN7TwoWire9availableEv>:
    1f0e:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZN7TwoWire14rxBufferLengthE>
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <_ZN7TwoWire13rxBufferIndexE>
    1f18:	82 1b       	sub	r24, r18
    1f1a:	91 09       	sbc	r25, r1
    1f1c:	08 95       	ret

00001f1e <_ZN7TwoWire4readEv>:
    1f1e:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <_ZN7TwoWire13rxBufferIndexE>
    1f22:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZN7TwoWire14rxBufferLengthE>
    1f26:	98 17       	cp	r25, r24
    1f28:	50 f4       	brcc	.+20     	; 0x1f3e <_ZN7TwoWire4readEv+0x20>
    1f2a:	e9 2f       	mov	r30, r25
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	e9 57       	subi	r30, 0x79	; 121
    1f30:	fb 4f       	sbci	r31, 0xFB	; 251
    1f32:	20 81       	ld	r18, Z
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	9f 5f       	subi	r25, 0xFF	; 255
    1f38:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <_ZN7TwoWire13rxBufferIndexE>
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <_ZN7TwoWire4readEv+0x24>
    1f3e:	2f ef       	ldi	r18, 0xFF	; 255
    1f40:	3f ef       	ldi	r19, 0xFF	; 255
    1f42:	c9 01       	movw	r24, r18
    1f44:	08 95       	ret

00001f46 <_ZN7TwoWire4peekEv>:
    1f46:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <_ZN7TwoWire13rxBufferIndexE>
    1f4a:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZN7TwoWire14rxBufferLengthE>
    1f4e:	e8 17       	cp	r30, r24
    1f50:	30 f4       	brcc	.+12     	; 0x1f5e <_ZN7TwoWire4peekEv+0x18>
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	e9 57       	subi	r30, 0x79	; 121
    1f56:	fb 4f       	sbci	r31, 0xFB	; 251
    1f58:	80 81       	ld	r24, Z
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	08 95       	ret
    1f5e:	8f ef       	ldi	r24, 0xFF	; 255
    1f60:	9f ef       	ldi	r25, 0xFF	; 255
    1f62:	08 95       	ret

00001f64 <_ZN7TwoWire5flushEv>:
    1f64:	08 95       	ret

00001f66 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	ec 01       	movw	r28, r24
    1f6c:	e0 91 5d 04 	lds	r30, 0x045D	; 0x80045d <_ZN7TwoWire14user_onReceiveE>
    1f70:	f0 91 5e 04 	lds	r31, 0x045E	; 0x80045e <_ZN7TwoWire14user_onReceiveE+0x1>
    1f74:	30 97       	sbiw	r30, 0x00	; 0
    1f76:	f1 f0       	breq	.+60     	; 0x1fb4 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1f78:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <_ZN7TwoWire13rxBufferIndexE>
    1f7c:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZN7TwoWire14rxBufferLengthE>
    1f80:	98 17       	cp	r25, r24
    1f82:	c0 f0       	brcs	.+48     	; 0x1fb4 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	29 2f       	mov	r18, r25
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	26 17       	cp	r18, r22
    1f8c:	37 07       	cpc	r19, r23
    1f8e:	54 f4       	brge	.+20     	; 0x1fa4 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1f90:	de 01       	movw	r26, r28
    1f92:	a2 0f       	add	r26, r18
    1f94:	b3 1f       	adc	r27, r19
    1f96:	4c 91       	ld	r20, X
    1f98:	d9 01       	movw	r26, r18
    1f9a:	a9 57       	subi	r26, 0x79	; 121
    1f9c:	bb 4f       	sbci	r27, 0xFB	; 251
    1f9e:	4c 93       	st	X, r20
    1fa0:	9f 5f       	subi	r25, 0xFF	; 255
    1fa2:	f1 cf       	rjmp	.-30     	; 0x1f86 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1fa4:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <_ZN7TwoWire13rxBufferIndexE>
    1fa8:	60 93 85 04 	sts	0x0485, r22	; 0x800485 <_ZN7TwoWire14rxBufferLengthE>
    1fac:	cb 01       	movw	r24, r22
    1fae:	df 91       	pop	r29
    1fb0:	cf 91       	pop	r28
    1fb2:	09 94       	ijmp
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	08 95       	ret

00001fba <_ZN7TwoWire16onRequestServiceEv>:
    1fba:	e0 91 5f 04 	lds	r30, 0x045F	; 0x80045f <_ZN7TwoWire14user_onRequestE>
    1fbe:	f0 91 60 04 	lds	r31, 0x0460	; 0x800460 <_ZN7TwoWire14user_onRequestE+0x1>
    1fc2:	30 97       	sbiw	r30, 0x00	; 0
    1fc4:	29 f0       	breq	.+10     	; 0x1fd0 <_ZN7TwoWire16onRequestServiceEv+0x16>
    1fc6:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <_ZN7TwoWire13txBufferIndexE>
    1fca:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <_ZN7TwoWire14txBufferLengthE>
    1fce:	09 94       	ijmp
    1fd0:	08 95       	ret

00001fd2 <_ZN7TwoWire5writeEPKhj>:
    1fd2:	cf 92       	push	r12
    1fd4:	df 92       	push	r13
    1fd6:	ef 92       	push	r14
    1fd8:	ff 92       	push	r15
    1fda:	0f 93       	push	r16
    1fdc:	1f 93       	push	r17
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
    1fe2:	7c 01       	movw	r14, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	8a 01       	movw	r16, r20
    1fe8:	20 91 61 04 	lds	r18, 0x0461	; 0x800461 <_ZN7TwoWire12transmittingE>
    1fec:	22 23       	and	r18, r18
    1fee:	89 f0       	breq	.+34     	; 0x2012 <_ZN7TwoWire5writeEPKhj+0x40>
    1ff0:	eb 01       	movw	r28, r22
    1ff2:	6b 01       	movw	r12, r22
    1ff4:	c4 0e       	add	r12, r20
    1ff6:	d5 1e       	adc	r13, r21
    1ff8:	cc 15       	cp	r28, r12
    1ffa:	dd 05       	cpc	r29, r13
    1ffc:	69 f0       	breq	.+26     	; 0x2018 <_ZN7TwoWire5writeEPKhj+0x46>
    1ffe:	69 91       	ld	r22, Y+
    2000:	d7 01       	movw	r26, r14
    2002:	ed 91       	ld	r30, X+
    2004:	fc 91       	ld	r31, X
    2006:	01 90       	ld	r0, Z+
    2008:	f0 81       	ld	r31, Z
    200a:	e0 2d       	mov	r30, r0
    200c:	c7 01       	movw	r24, r14
    200e:	09 95       	icall
    2010:	f3 cf       	rjmp	.-26     	; 0x1ff8 <_ZN7TwoWire5writeEPKhj+0x26>
    2012:	64 2f       	mov	r22, r20
    2014:	0e 94 36 11 	call	0x226c	; 0x226c <twi_transmit>
    2018:	c8 01       	movw	r24, r16
    201a:	df 91       	pop	r29
    201c:	cf 91       	pop	r28
    201e:	1f 91       	pop	r17
    2020:	0f 91       	pop	r16
    2022:	ff 90       	pop	r15
    2024:	ef 90       	pop	r14
    2026:	df 90       	pop	r13
    2028:	cf 90       	pop	r12
    202a:	08 95       	ret

0000202c <_ZN7TwoWire5writeEh>:
    202c:	cf 93       	push	r28
    202e:	df 93       	push	r29
    2030:	1f 92       	push	r1
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
    2036:	69 83       	std	Y+1, r22	; 0x01
    2038:	20 91 61 04 	lds	r18, 0x0461	; 0x800461 <_ZN7TwoWire12transmittingE>
    203c:	22 23       	and	r18, r18
    203e:	d1 f0       	breq	.+52     	; 0x2074 <_ZN7TwoWire5writeEh+0x48>
    2040:	20 91 62 04 	lds	r18, 0x0462	; 0x800462 <_ZN7TwoWire14txBufferLengthE>
    2044:	20 32       	cpi	r18, 0x20	; 32
    2046:	40 f0       	brcs	.+16     	; 0x2058 <_ZN7TwoWire5writeEh+0x2c>
    2048:	21 e0       	ldi	r18, 0x01	; 1
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	fc 01       	movw	r30, r24
    204e:	33 83       	std	Z+3, r19	; 0x03
    2050:	22 83       	std	Z+2, r18	; 0x02
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	15 c0       	rjmp	.+42     	; 0x2082 <_ZN7TwoWire5writeEh+0x56>
    2058:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <_ZN7TwoWire13txBufferIndexE>
    205c:	e8 2f       	mov	r30, r24
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	ec 59       	subi	r30, 0x9C	; 156
    2062:	fb 4f       	sbci	r31, 0xFB	; 251
    2064:	99 81       	ldd	r25, Y+1	; 0x01
    2066:	90 83       	st	Z, r25
    2068:	8f 5f       	subi	r24, 0xFF	; 255
    206a:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <_ZN7TwoWire13txBufferIndexE>
    206e:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <_ZN7TwoWire14txBufferLengthE>
    2072:	05 c0       	rjmp	.+10     	; 0x207e <_ZN7TwoWire5writeEh+0x52>
    2074:	61 e0       	ldi	r22, 0x01	; 1
    2076:	ce 01       	movw	r24, r28
    2078:	01 96       	adiw	r24, 0x01	; 1
    207a:	0e 94 36 11 	call	0x226c	; 0x226c <twi_transmit>
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	0f 90       	pop	r0
    2084:	df 91       	pop	r29
    2086:	cf 91       	pop	r28
    2088:	08 95       	ret

0000208a <_ZN7TwoWireC1Ev>:
    208a:	fc 01       	movw	r30, r24
    208c:	13 82       	std	Z+3, r1	; 0x03
    208e:	12 82       	std	Z+2, r1	; 0x02
    2090:	88 ee       	ldi	r24, 0xE8	; 232
    2092:	93 e0       	ldi	r25, 0x03	; 3
    2094:	a0 e0       	ldi	r26, 0x00	; 0
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	84 83       	std	Z+4, r24	; 0x04
    209a:	95 83       	std	Z+5, r25	; 0x05
    209c:	a6 83       	std	Z+6, r26	; 0x06
    209e:	b7 83       	std	Z+7, r27	; 0x07
    20a0:	81 e6       	ldi	r24, 0x61	; 97
    20a2:	92 e0       	ldi	r25, 0x02	; 2
    20a4:	91 83       	std	Z+1, r25	; 0x01
    20a6:	80 83       	st	Z, r24
    20a8:	08 95       	ret

000020aa <_ZN7TwoWire5beginEv>:
    20aa:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <_ZN7TwoWire13rxBufferIndexE>
    20ae:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <_ZN7TwoWire14rxBufferLengthE>
    20b2:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <_ZN7TwoWire13txBufferIndexE>
    20b6:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <_ZN7TwoWire14txBufferLengthE>
    20ba:	0e 94 f7 10 	call	0x21ee	; 0x21ee <twi_init>
    20be:	8d ed       	ldi	r24, 0xDD	; 221
    20c0:	9f e0       	ldi	r25, 0x0F	; 15
    20c2:	0e 94 63 11 	call	0x22c6	; 0x22c6 <twi_attachSlaveTxEvent>
    20c6:	83 eb       	ldi	r24, 0xB3	; 179
    20c8:	9f e0       	ldi	r25, 0x0F	; 15
    20ca:	0c 94 5e 11 	jmp	0x22bc	; 0x22bc <twi_attachSlaveRxEvent>

000020ce <_ZN7TwoWire8setClockEm>:
    20ce:	cb 01       	movw	r24, r22
    20d0:	ba 01       	movw	r22, r20
    20d2:	0c 94 22 11 	jmp	0x2244	; 0x2244 <twi_setFrequency>

000020d6 <_ZN7TwoWire17beginTransmissionEh>:
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <_ZN7TwoWire12transmittingE>
    20dc:	60 93 84 04 	sts	0x0484, r22	; 0x800484 <_ZN7TwoWire9txAddressE>
    20e0:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <_ZN7TwoWire13txBufferIndexE>
    20e4:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <_ZN7TwoWire14txBufferLengthE>
    20e8:	08 95       	ret

000020ea <_ZN7TwoWire15endTransmissionEh>:
    20ea:	0f 93       	push	r16
    20ec:	06 2f       	mov	r16, r22
    20ee:	21 e0       	ldi	r18, 0x01	; 1
    20f0:	40 91 62 04 	lds	r20, 0x0462	; 0x800462 <_ZN7TwoWire14txBufferLengthE>
    20f4:	64 e6       	ldi	r22, 0x64	; 100
    20f6:	74 e0       	ldi	r23, 0x04	; 4
    20f8:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <_ZN7TwoWire9txAddressE>
    20fc:	0e 94 6d 12 	call	0x24da	; 0x24da <twi_writeTo>
    2100:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <_ZN7TwoWire13txBufferIndexE>
    2104:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <_ZN7TwoWire14txBufferLengthE>
    2108:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <_ZN7TwoWire12transmittingE>
    210c:	0f 91       	pop	r16
    210e:	08 95       	ret

00002110 <_ZN7TwoWire11requestFromEhhmhh>:
    2110:	4f 92       	push	r4
    2112:	5f 92       	push	r5
    2114:	6f 92       	push	r6
    2116:	7f 92       	push	r7
    2118:	af 92       	push	r10
    211a:	bf 92       	push	r11
    211c:	cf 92       	push	r12
    211e:	ef 92       	push	r14
    2120:	ff 92       	push	r15
    2122:	0f 93       	push	r16
    2124:	1f 93       	push	r17
    2126:	cf 93       	push	r28
    2128:	df 93       	push	r29
    212a:	5c 01       	movw	r10, r24
    212c:	f6 2e       	mov	r15, r22
    212e:	d4 2f       	mov	r29, r20
    2130:	28 01       	movw	r4, r16
    2132:	39 01       	movw	r6, r18
    2134:	ee 20       	and	r14, r14
    2136:	21 f1       	breq	.+72     	; 0x2180 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2138:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <_ZN7TwoWire17beginTransmissionEh>
    213c:	ce 2d       	mov	r28, r14
    213e:	c4 30       	cpi	r28, 0x04	; 4
    2140:	08 f0       	brcs	.+2      	; 0x2144 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2142:	c3 e0       	ldi	r28, 0x03	; 3
    2144:	c1 50       	subi	r28, 0x01	; 1
    2146:	c0 f0       	brcs	.+48     	; 0x2178 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2148:	28 e0       	ldi	r18, 0x08	; 8
    214a:	c2 9f       	mul	r28, r18
    214c:	c0 01       	movw	r24, r0
    214e:	11 24       	eor	r1, r1
    2150:	a3 01       	movw	r20, r6
    2152:	92 01       	movw	r18, r4
    2154:	04 c0       	rjmp	.+8      	; 0x215e <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    2156:	56 95       	lsr	r21
    2158:	47 95       	ror	r20
    215a:	37 95       	ror	r19
    215c:	27 95       	ror	r18
    215e:	8a 95       	dec	r24
    2160:	d2 f7       	brpl	.-12     	; 0x2156 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    2162:	ca 01       	movw	r24, r20
    2164:	b9 01       	movw	r22, r18
    2166:	d5 01       	movw	r26, r10
    2168:	ed 91       	ld	r30, X+
    216a:	fc 91       	ld	r31, X
    216c:	01 90       	ld	r0, Z+
    216e:	f0 81       	ld	r31, Z
    2170:	e0 2d       	mov	r30, r0
    2172:	c5 01       	movw	r24, r10
    2174:	09 95       	icall
    2176:	e6 cf       	rjmp	.-52     	; 0x2144 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2178:	60 e0       	ldi	r22, 0x00	; 0
    217a:	c5 01       	movw	r24, r10
    217c:	0e 94 75 10 	call	0x20ea	; 0x20ea <_ZN7TwoWire15endTransmissionEh>
    2180:	4d 2f       	mov	r20, r29
    2182:	d1 32       	cpi	r29, 0x21	; 33
    2184:	08 f0       	brcs	.+2      	; 0x2188 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2186:	40 e2       	ldi	r20, 0x20	; 32
    2188:	2c 2d       	mov	r18, r12
    218a:	67 e8       	ldi	r22, 0x87	; 135
    218c:	74 e0       	ldi	r23, 0x04	; 4
    218e:	8f 2d       	mov	r24, r15
    2190:	0e 94 84 11 	call	0x2308	; 0x2308 <twi_readFrom>
    2194:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <_ZN7TwoWire13rxBufferIndexE>
    2198:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZN7TwoWire14rxBufferLengthE>
    219c:	df 91       	pop	r29
    219e:	cf 91       	pop	r28
    21a0:	1f 91       	pop	r17
    21a2:	0f 91       	pop	r16
    21a4:	ff 90       	pop	r15
    21a6:	ef 90       	pop	r14
    21a8:	cf 90       	pop	r12
    21aa:	bf 90       	pop	r11
    21ac:	af 90       	pop	r10
    21ae:	7f 90       	pop	r7
    21b0:	6f 90       	pop	r6
    21b2:	5f 90       	pop	r5
    21b4:	4f 90       	pop	r4
    21b6:	08 95       	ret

000021b8 <_ZN7TwoWire11requestFromEhhh>:
    21b8:	cf 92       	push	r12
    21ba:	ef 92       	push	r14
    21bc:	0f 93       	push	r16
    21be:	1f 93       	push	r17
    21c0:	c2 2e       	mov	r12, r18
    21c2:	e1 2c       	mov	r14, r1
    21c4:	00 e0       	ldi	r16, 0x00	; 0
    21c6:	10 e0       	ldi	r17, 0x00	; 0
    21c8:	98 01       	movw	r18, r16
    21ca:	0e 94 88 10 	call	0x2110	; 0x2110 <_ZN7TwoWire11requestFromEhhmhh>
    21ce:	1f 91       	pop	r17
    21d0:	0f 91       	pop	r16
    21d2:	ef 90       	pop	r14
    21d4:	cf 90       	pop	r12
    21d6:	08 95       	ret

000021d8 <_ZN7TwoWire11requestFromEhh>:
    21d8:	21 e0       	ldi	r18, 0x01	; 1
    21da:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <_ZN7TwoWire11requestFromEhhh>

000021de <_ZN7TwoWire15endTransmissionEv>:
    21de:	61 e0       	ldi	r22, 0x01	; 1
    21e0:	0c 94 75 10 	jmp	0x20ea	; 0x20ea <_ZN7TwoWire15endTransmissionEh>

000021e4 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    21e4:	81 e5       	ldi	r24, 0x51	; 81
    21e6:	94 e0       	ldi	r25, 0x04	; 4
    21e8:	0c 94 45 10 	jmp	0x208a	; 0x208a <_ZN7TwoWireC1Ev>

000021ec <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    21ec:	08 95       	ret

000021ee <twi_init>:
    21ee:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <twi_state>
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <twi_sendStop>
    21f8:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <twi_inRepStart>
    21fc:	61 e0       	ldi	r22, 0x01	; 1
    21fe:	82 e1       	ldi	r24, 0x12	; 18
    2200:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <digitalWrite>
    2204:	61 e0       	ldi	r22, 0x01	; 1
    2206:	83 e1       	ldi	r24, 0x13	; 19
    2208:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <digitalWrite>
    220c:	e9 eb       	ldi	r30, 0xB9	; 185
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	8e 7f       	andi	r24, 0xFE	; 254
    2214:	80 83       	st	Z, r24
    2216:	80 81       	ld	r24, Z
    2218:	8d 7f       	andi	r24, 0xFD	; 253
    221a:	80 83       	st	Z, r24
    221c:	88 e4       	ldi	r24, 0x48	; 72
    221e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    2222:	85 e4       	ldi	r24, 0x45	; 69
    2224:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2228:	08 95       	ret

0000222a <twi_disable>:
    222a:	ec eb       	ldi	r30, 0xBC	; 188
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	8a 7b       	andi	r24, 0xBA	; 186
    2232:	80 83       	st	Z, r24
    2234:	60 e0       	ldi	r22, 0x00	; 0
    2236:	82 e1       	ldi	r24, 0x12	; 18
    2238:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <digitalWrite>
    223c:	60 e0       	ldi	r22, 0x00	; 0
    223e:	83 e1       	ldi	r24, 0x13	; 19
    2240:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <digitalWrite>

00002244 <twi_setFrequency>:
    2244:	9b 01       	movw	r18, r22
    2246:	ac 01       	movw	r20, r24
    2248:	60 e0       	ldi	r22, 0x00	; 0
    224a:	74 e2       	ldi	r23, 0x24	; 36
    224c:	84 ef       	ldi	r24, 0xF4	; 244
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	0e 94 cc 14 	call	0x2998	; 0x2998 <__udivmodsi4>
    2254:	da 01       	movw	r26, r20
    2256:	c9 01       	movw	r24, r18
    2258:	40 97       	sbiw	r24, 0x10	; 16
    225a:	a1 09       	sbc	r26, r1
    225c:	b1 09       	sbc	r27, r1
    225e:	b6 95       	lsr	r27
    2260:	a7 95       	ror	r26
    2262:	97 95       	ror	r25
    2264:	87 95       	ror	r24
    2266:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    226a:	08 95       	ret

0000226c <twi_transmit>:
    226c:	40 91 c9 04 	lds	r20, 0x04C9	; 0x8004c9 <twi_txBufferLength>
    2270:	26 2f       	mov	r18, r22
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	24 0f       	add	r18, r20
    2276:	31 1d       	adc	r19, r1
    2278:	21 32       	cpi	r18, 0x21	; 33
    227a:	31 05       	cpc	r19, r1
    227c:	dc f4       	brge	.+54     	; 0x22b4 <twi_transmit+0x48>
    227e:	20 91 1a 05 	lds	r18, 0x051A	; 0x80051a <twi_state>
    2282:	24 30       	cpi	r18, 0x04	; 4
    2284:	c9 f4       	brne	.+50     	; 0x22b8 <twi_transmit+0x4c>
    2286:	fc 01       	movw	r30, r24
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	86 17       	cp	r24, r22
    228e:	58 f4       	brcc	.+22     	; 0x22a6 <twi_transmit+0x3a>
    2290:	30 91 c9 04 	lds	r19, 0x04C9	; 0x8004c9 <twi_txBufferLength>
    2294:	21 91       	ld	r18, Z+
    2296:	dc 01       	movw	r26, r24
    2298:	a5 53       	subi	r26, 0x35	; 53
    229a:	bb 4f       	sbci	r27, 0xFB	; 251
    229c:	a3 0f       	add	r26, r19
    229e:	b1 1d       	adc	r27, r1
    22a0:	2c 93       	st	X, r18
    22a2:	01 96       	adiw	r24, 0x01	; 1
    22a4:	f3 cf       	rjmp	.-26     	; 0x228c <twi_transmit+0x20>
    22a6:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <twi_txBufferLength>
    22aa:	68 0f       	add	r22, r24
    22ac:	60 93 c9 04 	sts	0x04C9, r22	; 0x8004c9 <twi_txBufferLength>
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	08 95       	ret
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	08 95       	ret
    22b8:	82 e0       	ldi	r24, 0x02	; 2
    22ba:	08 95       	ret

000022bc <twi_attachSlaveRxEvent>:
    22bc:	90 93 0e 05 	sts	0x050E, r25	; 0x80050e <twi_onSlaveReceive+0x1>
    22c0:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <twi_onSlaveReceive>
    22c4:	08 95       	ret

000022c6 <twi_attachSlaveTxEvent>:
    22c6:	90 93 10 05 	sts	0x0510, r25	; 0x800510 <twi_onSlaveTransmit+0x1>
    22ca:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <twi_onSlaveTransmit>
    22ce:	08 95       	ret

000022d0 <twi_releaseBus>:
    22d0:	85 ec       	ldi	r24, 0xC5	; 197
    22d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    22d6:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <twi_state>
    22da:	08 95       	ret

000022dc <twi_handleTimeout>:
    22dc:	cf 93       	push	r28
    22de:	df 93       	push	r29
    22e0:	91 e0       	ldi	r25, 0x01	; 1
    22e2:	90 93 12 05 	sts	0x0512, r25	; 0x800512 <twi_timed_out_flag>
    22e6:	88 23       	and	r24, r24
    22e8:	61 f0       	breq	.+24     	; 0x2302 <twi_handleTimeout+0x26>
    22ea:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    22ee:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
    22f2:	0e 94 15 11 	call	0x222a	; 0x222a <twi_disable>
    22f6:	0e 94 f7 10 	call	0x21ee	; 0x21ee <twi_init>
    22fa:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
    22fe:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	08 95       	ret

00002308 <twi_readFrom>:
    2308:	4f 92       	push	r4
    230a:	5f 92       	push	r5
    230c:	6f 92       	push	r6
    230e:	7f 92       	push	r7
    2310:	8f 92       	push	r8
    2312:	9f 92       	push	r9
    2314:	af 92       	push	r10
    2316:	bf 92       	push	r11
    2318:	cf 92       	push	r12
    231a:	df 92       	push	r13
    231c:	ef 92       	push	r14
    231e:	ff 92       	push	r15
    2320:	0f 93       	push	r16
    2322:	1f 93       	push	r17
    2324:	cf 93       	push	r28
    2326:	df 93       	push	r29
    2328:	f8 2e       	mov	r15, r24
    232a:	16 2f       	mov	r17, r22
    232c:	07 2f       	mov	r16, r23
    232e:	c4 2f       	mov	r28, r20
    2330:	e2 2e       	mov	r14, r18
    2332:	41 32       	cpi	r20, 0x21	; 33
    2334:	08 f0       	brcs	.+2      	; 0x2338 <twi_readFrom+0x30>
    2336:	be c0       	rjmp	.+380    	; 0x24b4 <twi_readFrom+0x1ac>
    2338:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <micros>
    233c:	4b 01       	movw	r8, r22
    233e:	5c 01       	movw	r10, r24
    2340:	d0 91 1a 05 	lds	r29, 0x051A	; 0x80051a <twi_state>
    2344:	dd 23       	and	r29, r29
    2346:	31 f1       	breq	.+76     	; 0x2394 <twi_readFrom+0x8c>
    2348:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <twi_timeout_us>
    234c:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <twi_timeout_us+0x1>
    2350:	a0 91 15 05 	lds	r26, 0x0515	; 0x800515 <twi_timeout_us+0x2>
    2354:	b0 91 16 05 	lds	r27, 0x0516	; 0x800516 <twi_timeout_us+0x3>
    2358:	89 2b       	or	r24, r25
    235a:	8a 2b       	or	r24, r26
    235c:	8b 2b       	or	r24, r27
    235e:	81 f3       	breq	.-32     	; 0x2340 <twi_readFrom+0x38>
    2360:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <micros>
    2364:	40 90 13 05 	lds	r4, 0x0513	; 0x800513 <twi_timeout_us>
    2368:	50 90 14 05 	lds	r5, 0x0514	; 0x800514 <twi_timeout_us+0x1>
    236c:	60 90 15 05 	lds	r6, 0x0515	; 0x800515 <twi_timeout_us+0x2>
    2370:	70 90 16 05 	lds	r7, 0x0516	; 0x800516 <twi_timeout_us+0x3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	88 19       	sub	r24, r8
    237a:	99 09       	sbc	r25, r9
    237c:	aa 09       	sbc	r26, r10
    237e:	bb 09       	sbc	r27, r11
    2380:	48 16       	cp	r4, r24
    2382:	59 06       	cpc	r5, r25
    2384:	6a 06       	cpc	r6, r26
    2386:	7b 06       	cpc	r7, r27
    2388:	d8 f6       	brcc	.-74     	; 0x2340 <twi_readFrom+0x38>
    238a:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <twi_do_reset_on_timeout>
    238e:	0e 94 6e 11 	call	0x22dc	; 0x22dc <twi_handleTimeout>
    2392:	90 c0       	rjmp	.+288    	; 0x24b4 <twi_readFrom+0x1ac>
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <twi_state>
    239a:	e0 92 18 05 	sts	0x0518, r14	; 0x800518 <twi_sendStop>
    239e:	9f ef       	ldi	r25, 0xFF	; 255
    23a0:	90 93 a7 04 	sts	0x04A7, r25	; 0x8004a7 <twi_error>
    23a4:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <twi_masterBufferIndex>
    23a8:	9c 0f       	add	r25, r28
    23aa:	90 93 eb 04 	sts	0x04EB, r25	; 0x8004eb <twi_masterBufferLength>
    23ae:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <twi_slarw>
    23b2:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <twi_slarw>
    23b6:	8f 2d       	mov	r24, r15
    23b8:	88 0f       	add	r24, r24
    23ba:	89 2b       	or	r24, r25
    23bc:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <twi_slarw>
    23c0:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <twi_inRepStart>
    23c4:	81 30       	cpi	r24, 0x01	; 1
    23c6:	89 f5       	brne	.+98     	; 0x242a <twi_readFrom+0x122>
    23c8:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <twi_inRepStart>
    23cc:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <micros>
    23d0:	6b 01       	movw	r12, r22
    23d2:	7c 01       	movw	r14, r24
    23d4:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <twi_slarw>
    23d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    23dc:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <twi_timeout_us>
    23e0:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <twi_timeout_us+0x1>
    23e4:	a0 91 15 05 	lds	r26, 0x0515	; 0x800515 <twi_timeout_us+0x2>
    23e8:	b0 91 16 05 	lds	r27, 0x0516	; 0x800516 <twi_timeout_us+0x3>
    23ec:	89 2b       	or	r24, r25
    23ee:	8a 2b       	or	r24, r26
    23f0:	8b 2b       	or	r24, r27
    23f2:	a9 f0       	breq	.+42     	; 0x241e <twi_readFrom+0x116>
    23f4:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <micros>
    23f8:	80 90 13 05 	lds	r8, 0x0513	; 0x800513 <twi_timeout_us>
    23fc:	90 90 14 05 	lds	r9, 0x0514	; 0x800514 <twi_timeout_us+0x1>
    2400:	a0 90 15 05 	lds	r10, 0x0515	; 0x800515 <twi_timeout_us+0x2>
    2404:	b0 90 16 05 	lds	r11, 0x0516	; 0x800516 <twi_timeout_us+0x3>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	8c 19       	sub	r24, r12
    240e:	9d 09       	sbc	r25, r13
    2410:	ae 09       	sbc	r26, r14
    2412:	bf 09       	sbc	r27, r15
    2414:	88 16       	cp	r8, r24
    2416:	99 06       	cpc	r9, r25
    2418:	aa 06       	cpc	r10, r26
    241a:	bb 06       	cpc	r11, r27
    241c:	90 f1       	brcs	.+100    	; 0x2482 <twi_readFrom+0x17a>
    241e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2422:	83 fd       	sbrc	r24, 3
    2424:	d7 cf       	rjmp	.-82     	; 0x23d4 <twi_readFrom+0xcc>
    2426:	85 ec       	ldi	r24, 0xC5	; 197
    2428:	01 c0       	rjmp	.+2      	; 0x242c <twi_readFrom+0x124>
    242a:	85 ee       	ldi	r24, 0xE5	; 229
    242c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2430:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <micros>
    2434:	6b 01       	movw	r12, r22
    2436:	7c 01       	movw	r14, r24
    2438:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <twi_state>
    243c:	81 30       	cpi	r24, 0x01	; 1
    243e:	31 f5       	brne	.+76     	; 0x248c <twi_readFrom+0x184>
    2440:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <twi_timeout_us>
    2444:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <twi_timeout_us+0x1>
    2448:	a0 91 15 05 	lds	r26, 0x0515	; 0x800515 <twi_timeout_us+0x2>
    244c:	b0 91 16 05 	lds	r27, 0x0516	; 0x800516 <twi_timeout_us+0x3>
    2450:	89 2b       	or	r24, r25
    2452:	8a 2b       	or	r24, r26
    2454:	8b 2b       	or	r24, r27
    2456:	81 f3       	breq	.-32     	; 0x2438 <twi_readFrom+0x130>
    2458:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <micros>
    245c:	80 90 13 05 	lds	r8, 0x0513	; 0x800513 <twi_timeout_us>
    2460:	90 90 14 05 	lds	r9, 0x0514	; 0x800514 <twi_timeout_us+0x1>
    2464:	a0 90 15 05 	lds	r10, 0x0515	; 0x800515 <twi_timeout_us+0x2>
    2468:	b0 90 16 05 	lds	r11, 0x0516	; 0x800516 <twi_timeout_us+0x3>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	8c 19       	sub	r24, r12
    2472:	9d 09       	sbc	r25, r13
    2474:	ae 09       	sbc	r26, r14
    2476:	bf 09       	sbc	r27, r15
    2478:	88 16       	cp	r8, r24
    247a:	99 06       	cpc	r9, r25
    247c:	aa 06       	cpc	r10, r26
    247e:	bb 06       	cpc	r11, r27
    2480:	d8 f6       	brcc	.-74     	; 0x2438 <twi_readFrom+0x130>
    2482:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <twi_do_reset_on_timeout>
    2486:	0e 94 6e 11 	call	0x22dc	; 0x22dc <twi_handleTimeout>
    248a:	15 c0       	rjmp	.+42     	; 0x24b6 <twi_readFrom+0x1ae>
    248c:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <twi_masterBufferIndex>
    2490:	8c 17       	cp	r24, r28
    2492:	10 f4       	brcc	.+4      	; 0x2498 <twi_readFrom+0x190>
    2494:	c0 91 ec 04 	lds	r28, 0x04EC	; 0x8004ec <twi_masterBufferIndex>
    2498:	ad ee       	ldi	r26, 0xED	; 237
    249a:	b4 e0       	ldi	r27, 0x04	; 4
    249c:	91 2f       	mov	r25, r17
    249e:	e1 2f       	mov	r30, r17
    24a0:	f0 2f       	mov	r31, r16
    24a2:	8e 2f       	mov	r24, r30
    24a4:	89 1b       	sub	r24, r25
    24a6:	8c 17       	cp	r24, r28
    24a8:	18 f4       	brcc	.+6      	; 0x24b0 <twi_readFrom+0x1a8>
    24aa:	8d 91       	ld	r24, X+
    24ac:	81 93       	st	Z+, r24
    24ae:	f9 cf       	rjmp	.-14     	; 0x24a2 <twi_readFrom+0x19a>
    24b0:	dc 2f       	mov	r29, r28
    24b2:	01 c0       	rjmp	.+2      	; 0x24b6 <twi_readFrom+0x1ae>
    24b4:	d0 e0       	ldi	r29, 0x00	; 0
    24b6:	8d 2f       	mov	r24, r29
    24b8:	df 91       	pop	r29
    24ba:	cf 91       	pop	r28
    24bc:	1f 91       	pop	r17
    24be:	0f 91       	pop	r16
    24c0:	ff 90       	pop	r15
    24c2:	ef 90       	pop	r14
    24c4:	df 90       	pop	r13
    24c6:	cf 90       	pop	r12
    24c8:	bf 90       	pop	r11
    24ca:	af 90       	pop	r10
    24cc:	9f 90       	pop	r9
    24ce:	8f 90       	pop	r8
    24d0:	7f 90       	pop	r7
    24d2:	6f 90       	pop	r6
    24d4:	5f 90       	pop	r5
    24d6:	4f 90       	pop	r4
    24d8:	08 95       	ret

000024da <twi_writeTo>:
    24da:	4f 92       	push	r4
    24dc:	5f 92       	push	r5
    24de:	6f 92       	push	r6
    24e0:	7f 92       	push	r7
    24e2:	8f 92       	push	r8
    24e4:	9f 92       	push	r9
    24e6:	af 92       	push	r10
    24e8:	bf 92       	push	r11
    24ea:	cf 92       	push	r12
    24ec:	df 92       	push	r13
    24ee:	ef 92       	push	r14
    24f0:	ff 92       	push	r15
    24f2:	0f 93       	push	r16
    24f4:	1f 93       	push	r17
    24f6:	cf 93       	push	r28
    24f8:	df 93       	push	r29
    24fa:	41 32       	cpi	r20, 0x21	; 33
    24fc:	08 f0       	brcs	.+2      	; 0x2500 <twi_writeTo+0x26>
    24fe:	c6 c0       	rjmp	.+396    	; 0x268c <twi_writeTo+0x1b2>
    2500:	12 2f       	mov	r17, r18
    2502:	f4 2e       	mov	r15, r20
    2504:	d7 2e       	mov	r13, r23
    2506:	e6 2e       	mov	r14, r22
    2508:	d8 2f       	mov	r29, r24
    250a:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <micros>
    250e:	4b 01       	movw	r8, r22
    2510:	5c 01       	movw	r10, r24
    2512:	c0 91 1a 05 	lds	r28, 0x051A	; 0x80051a <twi_state>
    2516:	cc 23       	and	r28, r28
    2518:	11 f1       	breq	.+68     	; 0x255e <twi_writeTo+0x84>
    251a:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <twi_timeout_us>
    251e:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <twi_timeout_us+0x1>
    2522:	a0 91 15 05 	lds	r26, 0x0515	; 0x800515 <twi_timeout_us+0x2>
    2526:	b0 91 16 05 	lds	r27, 0x0516	; 0x800516 <twi_timeout_us+0x3>
    252a:	89 2b       	or	r24, r25
    252c:	8a 2b       	or	r24, r26
    252e:	8b 2b       	or	r24, r27
    2530:	81 f3       	breq	.-32     	; 0x2512 <twi_writeTo+0x38>
    2532:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <micros>
    2536:	40 90 13 05 	lds	r4, 0x0513	; 0x800513 <twi_timeout_us>
    253a:	50 90 14 05 	lds	r5, 0x0514	; 0x800514 <twi_timeout_us+0x1>
    253e:	60 90 15 05 	lds	r6, 0x0515	; 0x800515 <twi_timeout_us+0x2>
    2542:	70 90 16 05 	lds	r7, 0x0516	; 0x800516 <twi_timeout_us+0x3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	88 19       	sub	r24, r8
    254c:	99 09       	sbc	r25, r9
    254e:	aa 09       	sbc	r26, r10
    2550:	bb 09       	sbc	r27, r11
    2552:	48 16       	cp	r4, r24
    2554:	59 06       	cpc	r5, r25
    2556:	6a 06       	cpc	r6, r26
    2558:	7b 06       	cpc	r7, r27
    255a:	d8 f6       	brcc	.-74     	; 0x2512 <twi_writeTo+0x38>
    255c:	83 c0       	rjmp	.+262    	; 0x2664 <twi_writeTo+0x18a>
    255e:	82 e0       	ldi	r24, 0x02	; 2
    2560:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <twi_state>
    2564:	00 93 18 05 	sts	0x0518, r16	; 0x800518 <twi_sendStop>
    2568:	8f ef       	ldi	r24, 0xFF	; 255
    256a:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <twi_error>
    256e:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <twi_masterBufferIndex>
    2572:	f0 92 eb 04 	sts	0x04EB, r15	; 0x8004eb <twi_masterBufferLength>
    2576:	9e 2d       	mov	r25, r14
    2578:	ad ee       	ldi	r26, 0xED	; 237
    257a:	b4 e0       	ldi	r27, 0x04	; 4
    257c:	ee 2d       	mov	r30, r14
    257e:	fd 2d       	mov	r31, r13
    2580:	8e 2f       	mov	r24, r30
    2582:	89 1b       	sub	r24, r25
    2584:	8f 15       	cp	r24, r15
    2586:	18 f4       	brcc	.+6      	; 0x258e <twi_writeTo+0xb4>
    2588:	81 91       	ld	r24, Z+
    258a:	8d 93       	st	X+, r24
    258c:	f9 cf       	rjmp	.-14     	; 0x2580 <twi_writeTo+0xa6>
    258e:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <twi_slarw>
    2592:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <twi_slarw>
    2596:	dd 0f       	add	r29, r29
    2598:	d9 2b       	or	r29, r25
    259a:	d0 93 19 05 	sts	0x0519, r29	; 0x800519 <twi_slarw>
    259e:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <twi_inRepStart>
    25a2:	81 30       	cpi	r24, 0x01	; 1
    25a4:	89 f5       	brne	.+98     	; 0x2608 <twi_writeTo+0x12e>
    25a6:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <twi_inRepStart>
    25aa:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <micros>
    25ae:	6b 01       	movw	r12, r22
    25b0:	7c 01       	movw	r14, r24
    25b2:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <twi_slarw>
    25b6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    25ba:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <twi_timeout_us>
    25be:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <twi_timeout_us+0x1>
    25c2:	a0 91 15 05 	lds	r26, 0x0515	; 0x800515 <twi_timeout_us+0x2>
    25c6:	b0 91 16 05 	lds	r27, 0x0516	; 0x800516 <twi_timeout_us+0x3>
    25ca:	89 2b       	or	r24, r25
    25cc:	8a 2b       	or	r24, r26
    25ce:	8b 2b       	or	r24, r27
    25d0:	a9 f0       	breq	.+42     	; 0x25fc <twi_writeTo+0x122>
    25d2:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <micros>
    25d6:	80 90 13 05 	lds	r8, 0x0513	; 0x800513 <twi_timeout_us>
    25da:	90 90 14 05 	lds	r9, 0x0514	; 0x800514 <twi_timeout_us+0x1>
    25de:	a0 90 15 05 	lds	r10, 0x0515	; 0x800515 <twi_timeout_us+0x2>
    25e2:	b0 90 16 05 	lds	r11, 0x0516	; 0x800516 <twi_timeout_us+0x3>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	8c 19       	sub	r24, r12
    25ec:	9d 09       	sbc	r25, r13
    25ee:	ae 09       	sbc	r26, r14
    25f0:	bf 09       	sbc	r27, r15
    25f2:	88 16       	cp	r8, r24
    25f4:	99 06       	cpc	r9, r25
    25f6:	aa 06       	cpc	r10, r26
    25f8:	bb 06       	cpc	r11, r27
    25fa:	a0 f1       	brcs	.+104    	; 0x2664 <twi_writeTo+0x18a>
    25fc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2600:	83 fd       	sbrc	r24, 3
    2602:	d7 cf       	rjmp	.-82     	; 0x25b2 <twi_writeTo+0xd8>
    2604:	85 ec       	ldi	r24, 0xC5	; 197
    2606:	01 c0       	rjmp	.+2      	; 0x260a <twi_writeTo+0x130>
    2608:	85 ee       	ldi	r24, 0xE5	; 229
    260a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    260e:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <micros>
    2612:	6b 01       	movw	r12, r22
    2614:	7c 01       	movw	r14, r24
    2616:	11 23       	and	r17, r17
    2618:	59 f1       	breq	.+86     	; 0x2670 <twi_writeTo+0x196>
    261a:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <twi_state>
    261e:	82 30       	cpi	r24, 0x02	; 2
    2620:	39 f5       	brne	.+78     	; 0x2670 <twi_writeTo+0x196>
    2622:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <twi_timeout_us>
    2626:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <twi_timeout_us+0x1>
    262a:	a0 91 15 05 	lds	r26, 0x0515	; 0x800515 <twi_timeout_us+0x2>
    262e:	b0 91 16 05 	lds	r27, 0x0516	; 0x800516 <twi_timeout_us+0x3>
    2632:	89 2b       	or	r24, r25
    2634:	8a 2b       	or	r24, r26
    2636:	8b 2b       	or	r24, r27
    2638:	71 f3       	breq	.-36     	; 0x2616 <twi_writeTo+0x13c>
    263a:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <micros>
    263e:	80 90 13 05 	lds	r8, 0x0513	; 0x800513 <twi_timeout_us>
    2642:	90 90 14 05 	lds	r9, 0x0514	; 0x800514 <twi_timeout_us+0x1>
    2646:	a0 90 15 05 	lds	r10, 0x0515	; 0x800515 <twi_timeout_us+0x2>
    264a:	b0 90 16 05 	lds	r11, 0x0516	; 0x800516 <twi_timeout_us+0x3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	8c 19       	sub	r24, r12
    2654:	9d 09       	sbc	r25, r13
    2656:	ae 09       	sbc	r26, r14
    2658:	bf 09       	sbc	r27, r15
    265a:	88 16       	cp	r8, r24
    265c:	99 06       	cpc	r9, r25
    265e:	aa 06       	cpc	r10, r26
    2660:	bb 06       	cpc	r11, r27
    2662:	c8 f6       	brcc	.-78     	; 0x2616 <twi_writeTo+0x13c>
    2664:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <twi_do_reset_on_timeout>
    2668:	0e 94 6e 11 	call	0x22dc	; 0x22dc <twi_handleTimeout>
    266c:	c5 e0       	ldi	r28, 0x05	; 5
    266e:	13 c0       	rjmp	.+38     	; 0x2696 <twi_writeTo+0x1bc>
    2670:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <twi_error>
    2674:	8f 3f       	cpi	r24, 0xFF	; 255
    2676:	79 f0       	breq	.+30     	; 0x2696 <twi_writeTo+0x1bc>
    2678:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <twi_error>
    267c:	80 32       	cpi	r24, 0x20	; 32
    267e:	41 f0       	breq	.+16     	; 0x2690 <twi_writeTo+0x1b6>
    2680:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <twi_error>
    2684:	80 33       	cpi	r24, 0x30	; 48
    2686:	31 f0       	breq	.+12     	; 0x2694 <twi_writeTo+0x1ba>
    2688:	c4 e0       	ldi	r28, 0x04	; 4
    268a:	05 c0       	rjmp	.+10     	; 0x2696 <twi_writeTo+0x1bc>
    268c:	c1 e0       	ldi	r28, 0x01	; 1
    268e:	03 c0       	rjmp	.+6      	; 0x2696 <twi_writeTo+0x1bc>
    2690:	c2 e0       	ldi	r28, 0x02	; 2
    2692:	01 c0       	rjmp	.+2      	; 0x2696 <twi_writeTo+0x1bc>
    2694:	c3 e0       	ldi	r28, 0x03	; 3
    2696:	8c 2f       	mov	r24, r28
    2698:	df 91       	pop	r29
    269a:	cf 91       	pop	r28
    269c:	1f 91       	pop	r17
    269e:	0f 91       	pop	r16
    26a0:	ff 90       	pop	r15
    26a2:	ef 90       	pop	r14
    26a4:	df 90       	pop	r13
    26a6:	cf 90       	pop	r12
    26a8:	bf 90       	pop	r11
    26aa:	af 90       	pop	r10
    26ac:	9f 90       	pop	r9
    26ae:	8f 90       	pop	r8
    26b0:	7f 90       	pop	r7
    26b2:	6f 90       	pop	r6
    26b4:	5f 90       	pop	r5
    26b6:	4f 90       	pop	r4
    26b8:	08 95       	ret

000026ba <twi_stop>:
    26ba:	85 ed       	ldi	r24, 0xD5	; 213
    26bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    26c0:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <twi_timeout_us>
    26c4:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <twi_timeout_us+0x1>
    26c8:	a0 91 15 05 	lds	r26, 0x0515	; 0x800515 <twi_timeout_us+0x2>
    26cc:	b0 91 16 05 	lds	r27, 0x0516	; 0x800516 <twi_timeout_us+0x3>
    26d0:	07 96       	adiw	r24, 0x07	; 7
    26d2:	a1 1d       	adc	r26, r1
    26d4:	b1 1d       	adc	r27, r1
    26d6:	23 e0       	ldi	r18, 0x03	; 3
    26d8:	b6 95       	lsr	r27
    26da:	a7 95       	ror	r26
    26dc:	97 95       	ror	r25
    26de:	87 95       	ror	r24
    26e0:	2a 95       	dec	r18
    26e2:	d1 f7       	brne	.-12     	; 0x26d8 <twi_stop+0x1e>
    26e4:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    26e8:	24 ff       	sbrs	r18, 4
    26ea:	1c c0       	rjmp	.+56     	; 0x2724 <twi_stop+0x6a>
    26ec:	40 91 13 05 	lds	r20, 0x0513	; 0x800513 <twi_timeout_us>
    26f0:	50 91 14 05 	lds	r21, 0x0514	; 0x800514 <twi_timeout_us+0x1>
    26f4:	60 91 15 05 	lds	r22, 0x0515	; 0x800515 <twi_timeout_us+0x2>
    26f8:	70 91 16 05 	lds	r23, 0x0516	; 0x800516 <twi_timeout_us+0x3>
    26fc:	45 2b       	or	r20, r21
    26fe:	46 2b       	or	r20, r22
    2700:	47 2b       	or	r20, r23
    2702:	81 f3       	breq	.-32     	; 0x26e4 <twi_stop+0x2a>
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	a1 05       	cpc	r26, r1
    2708:	b1 05       	cpc	r27, r1
    270a:	41 f0       	breq	.+16     	; 0x271c <twi_stop+0x62>
    270c:	25 e3       	ldi	r18, 0x35	; 53
    270e:	2a 95       	dec	r18
    2710:	f1 f7       	brne	.-4      	; 0x270e <twi_stop+0x54>
    2712:	00 00       	nop
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	a1 09       	sbc	r26, r1
    2718:	b1 09       	sbc	r27, r1
    271a:	e4 cf       	rjmp	.-56     	; 0x26e4 <twi_stop+0x2a>
    271c:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <twi_do_reset_on_timeout>
    2720:	0c 94 6e 11 	jmp	0x22dc	; 0x22dc <twi_handleTimeout>
    2724:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <twi_state>
    2728:	08 95       	ret

0000272a <__vector_24>:
    272a:	1f 92       	push	r1
    272c:	0f 92       	push	r0
    272e:	0f b6       	in	r0, 0x3f	; 63
    2730:	0f 92       	push	r0
    2732:	11 24       	eor	r1, r1
    2734:	2f 93       	push	r18
    2736:	3f 93       	push	r19
    2738:	4f 93       	push	r20
    273a:	5f 93       	push	r21
    273c:	6f 93       	push	r22
    273e:	7f 93       	push	r23
    2740:	8f 93       	push	r24
    2742:	9f 93       	push	r25
    2744:	af 93       	push	r26
    2746:	bf 93       	push	r27
    2748:	ef 93       	push	r30
    274a:	ff 93       	push	r31
    274c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2750:	88 7f       	andi	r24, 0xF8	; 248
    2752:	80 36       	cpi	r24, 0x60	; 96
    2754:	09 f4       	brne	.+2      	; 0x2758 <__vector_24+0x2e>
    2756:	9e c0       	rjmp	.+316    	; 0x2894 <__vector_24+0x16a>
    2758:	78 f5       	brcc	.+94     	; 0x27b8 <__vector_24+0x8e>
    275a:	88 32       	cpi	r24, 0x28	; 40
    275c:	09 f4       	brne	.+2      	; 0x2760 <__vector_24+0x36>
    275e:	5d c0       	rjmp	.+186    	; 0x281a <__vector_24+0xf0>
    2760:	90 f4       	brcc	.+36     	; 0x2786 <__vector_24+0x5c>
    2762:	80 31       	cpi	r24, 0x10	; 16
    2764:	09 f4       	brne	.+2      	; 0x2768 <__vector_24+0x3e>
    2766:	56 c0       	rjmp	.+172    	; 0x2814 <__vector_24+0xea>
    2768:	38 f4       	brcc	.+14     	; 0x2778 <__vector_24+0x4e>
    276a:	88 23       	and	r24, r24
    276c:	09 f4       	brne	.+2      	; 0x2770 <__vector_24+0x46>
    276e:	f5 c0       	rjmp	.+490    	; 0x295a <__vector_24+0x230>
    2770:	88 30       	cpi	r24, 0x08	; 8
    2772:	09 f4       	brne	.+2      	; 0x2776 <__vector_24+0x4c>
    2774:	4f c0       	rjmp	.+158    	; 0x2814 <__vector_24+0xea>
    2776:	f5 c0       	rjmp	.+490    	; 0x2962 <__vector_24+0x238>
    2778:	88 31       	cpi	r24, 0x18	; 24
    277a:	09 f4       	brne	.+2      	; 0x277e <__vector_24+0x54>
    277c:	4e c0       	rjmp	.+156    	; 0x281a <__vector_24+0xf0>
    277e:	80 32       	cpi	r24, 0x20	; 32
    2780:	09 f4       	brne	.+2      	; 0x2784 <__vector_24+0x5a>
    2782:	5f c0       	rjmp	.+190    	; 0x2842 <__vector_24+0x118>
    2784:	ee c0       	rjmp	.+476    	; 0x2962 <__vector_24+0x238>
    2786:	80 34       	cpi	r24, 0x40	; 64
    2788:	09 f4       	brne	.+2      	; 0x278c <__vector_24+0x62>
    278a:	6a c0       	rjmp	.+212    	; 0x2860 <__vector_24+0x136>
    278c:	58 f4       	brcc	.+22     	; 0x27a4 <__vector_24+0x7a>
    278e:	80 33       	cpi	r24, 0x30	; 48
    2790:	09 f4       	brne	.+2      	; 0x2794 <__vector_24+0x6a>
    2792:	57 c0       	rjmp	.+174    	; 0x2842 <__vector_24+0x118>
    2794:	88 33       	cpi	r24, 0x38	; 56
    2796:	09 f0       	breq	.+2      	; 0x279a <__vector_24+0x70>
    2798:	e4 c0       	rjmp	.+456    	; 0x2962 <__vector_24+0x238>
    279a:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <twi_error>
    279e:	0e 94 68 11 	call	0x22d0	; 0x22d0 <twi_releaseBus>
    27a2:	df c0       	rjmp	.+446    	; 0x2962 <__vector_24+0x238>
    27a4:	80 35       	cpi	r24, 0x50	; 80
    27a6:	09 f4       	brne	.+2      	; 0x27aa <__vector_24+0x80>
    27a8:	4f c0       	rjmp	.+158    	; 0x2848 <__vector_24+0x11e>
    27aa:	88 35       	cpi	r24, 0x58	; 88
    27ac:	09 f4       	brne	.+2      	; 0x27b0 <__vector_24+0x86>
    27ae:	5d c0       	rjmp	.+186    	; 0x286a <__vector_24+0x140>
    27b0:	88 34       	cpi	r24, 0x48	; 72
    27b2:	09 f0       	breq	.+2      	; 0x27b6 <__vector_24+0x8c>
    27b4:	d6 c0       	rjmp	.+428    	; 0x2962 <__vector_24+0x238>
    27b6:	d3 c0       	rjmp	.+422    	; 0x295e <__vector_24+0x234>
    27b8:	88 39       	cpi	r24, 0x98	; 152
    27ba:	09 f4       	brne	.+2      	; 0x27be <__vector_24+0x94>
    27bc:	c4 c0       	rjmp	.+392    	; 0x2946 <__vector_24+0x21c>
    27be:	a8 f4       	brcc	.+42     	; 0x27ea <__vector_24+0xc0>
    27c0:	88 37       	cpi	r24, 0x78	; 120
    27c2:	09 f4       	brne	.+2      	; 0x27c6 <__vector_24+0x9c>
    27c4:	67 c0       	rjmp	.+206    	; 0x2894 <__vector_24+0x16a>
    27c6:	38 f4       	brcc	.+14     	; 0x27d6 <__vector_24+0xac>
    27c8:	88 36       	cpi	r24, 0x68	; 104
    27ca:	09 f4       	brne	.+2      	; 0x27ce <__vector_24+0xa4>
    27cc:	63 c0       	rjmp	.+198    	; 0x2894 <__vector_24+0x16a>
    27ce:	80 37       	cpi	r24, 0x70	; 112
    27d0:	09 f4       	brne	.+2      	; 0x27d4 <__vector_24+0xaa>
    27d2:	60 c0       	rjmp	.+192    	; 0x2894 <__vector_24+0x16a>
    27d4:	c6 c0       	rjmp	.+396    	; 0x2962 <__vector_24+0x238>
    27d6:	88 38       	cpi	r24, 0x88	; 136
    27d8:	09 f4       	brne	.+2      	; 0x27dc <__vector_24+0xb2>
    27da:	b5 c0       	rjmp	.+362    	; 0x2946 <__vector_24+0x21c>
    27dc:	80 39       	cpi	r24, 0x90	; 144
    27de:	09 f4       	brne	.+2      	; 0x27e2 <__vector_24+0xb8>
    27e0:	5f c0       	rjmp	.+190    	; 0x28a0 <__vector_24+0x176>
    27e2:	80 38       	cpi	r24, 0x80	; 128
    27e4:	09 f0       	breq	.+2      	; 0x27e8 <__vector_24+0xbe>
    27e6:	bd c0       	rjmp	.+378    	; 0x2962 <__vector_24+0x238>
    27e8:	5b c0       	rjmp	.+182    	; 0x28a0 <__vector_24+0x176>
    27ea:	80 3b       	cpi	r24, 0xB0	; 176
    27ec:	09 f4       	brne	.+2      	; 0x27f0 <__vector_24+0xc6>
    27ee:	83 c0       	rjmp	.+262    	; 0x28f6 <__vector_24+0x1cc>
    27f0:	38 f4       	brcc	.+14     	; 0x2800 <__vector_24+0xd6>
    27f2:	80 3a       	cpi	r24, 0xA0	; 160
    27f4:	09 f4       	brne	.+2      	; 0x27f8 <__vector_24+0xce>
    27f6:	66 c0       	rjmp	.+204    	; 0x28c4 <__vector_24+0x19a>
    27f8:	88 3a       	cpi	r24, 0xA8	; 168
    27fa:	09 f4       	brne	.+2      	; 0x27fe <__vector_24+0xd4>
    27fc:	7c c0       	rjmp	.+248    	; 0x28f6 <__vector_24+0x1cc>
    27fe:	b1 c0       	rjmp	.+354    	; 0x2962 <__vector_24+0x238>
    2800:	80 3c       	cpi	r24, 0xC0	; 192
    2802:	09 f4       	brne	.+2      	; 0x2806 <__vector_24+0xdc>
    2804:	a4 c0       	rjmp	.+328    	; 0x294e <__vector_24+0x224>
    2806:	88 3c       	cpi	r24, 0xC8	; 200
    2808:	09 f4       	brne	.+2      	; 0x280c <__vector_24+0xe2>
    280a:	a1 c0       	rjmp	.+322    	; 0x294e <__vector_24+0x224>
    280c:	88 3b       	cpi	r24, 0xB8	; 184
    280e:	09 f4       	brne	.+2      	; 0x2812 <__vector_24+0xe8>
    2810:	87 c0       	rjmp	.+270    	; 0x2920 <__vector_24+0x1f6>
    2812:	a7 c0       	rjmp	.+334    	; 0x2962 <__vector_24+0x238>
    2814:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <twi_slarw>
    2818:	10 c0       	rjmp	.+32     	; 0x283a <__vector_24+0x110>
    281a:	90 91 ec 04 	lds	r25, 0x04EC	; 0x8004ec <twi_masterBufferIndex>
    281e:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <twi_masterBufferLength>
    2822:	98 17       	cp	r25, r24
    2824:	70 f5       	brcc	.+92     	; 0x2882 <__vector_24+0x158>
    2826:	e0 91 ec 04 	lds	r30, 0x04EC	; 0x8004ec <twi_masterBufferIndex>
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	8e 0f       	add	r24, r30
    282e:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <twi_masterBufferIndex>
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	e3 51       	subi	r30, 0x13	; 19
    2836:	fb 4f       	sbci	r31, 0xFB	; 251
    2838:	80 81       	ld	r24, Z
    283a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    283e:	85 ec       	ldi	r24, 0xC5	; 197
    2840:	83 c0       	rjmp	.+262    	; 0x2948 <__vector_24+0x21e>
    2842:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <twi_error>
    2846:	8b c0       	rjmp	.+278    	; 0x295e <__vector_24+0x234>
    2848:	e0 91 ec 04 	lds	r30, 0x04EC	; 0x8004ec <twi_masterBufferIndex>
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	8e 0f       	add	r24, r30
    2850:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <twi_masterBufferIndex>
    2854:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	e3 51       	subi	r30, 0x13	; 19
    285c:	fb 4f       	sbci	r31, 0xFB	; 251
    285e:	80 83       	st	Z, r24
    2860:	90 91 ec 04 	lds	r25, 0x04EC	; 0x8004ec <twi_masterBufferIndex>
    2864:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <twi_masterBufferLength>
    2868:	6b c0       	rjmp	.+214    	; 0x2940 <__vector_24+0x216>
    286a:	e0 91 ec 04 	lds	r30, 0x04EC	; 0x8004ec <twi_masterBufferIndex>
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	8e 0f       	add	r24, r30
    2872:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <twi_masterBufferIndex>
    2876:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	e3 51       	subi	r30, 0x13	; 19
    287e:	fb 4f       	sbci	r31, 0xFB	; 251
    2880:	80 83       	st	Z, r24
    2882:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <twi_sendStop>
    2886:	81 11       	cpse	r24, r1
    2888:	6a c0       	rjmp	.+212    	; 0x295e <__vector_24+0x234>
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <twi_inRepStart>
    2890:	84 ea       	ldi	r24, 0xA4	; 164
    2892:	5e c0       	rjmp	.+188    	; 0x2950 <__vector_24+0x226>
    2894:	83 e0       	ldi	r24, 0x03	; 3
    2896:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <twi_state>
    289a:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <twi_rxBufferIndex>
    289e:	cf cf       	rjmp	.-98     	; 0x283e <__vector_24+0x114>
    28a0:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <twi_rxBufferIndex>
    28a4:	80 32       	cpi	r24, 0x20	; 32
    28a6:	08 f0       	brcs	.+2      	; 0x28aa <__vector_24+0x180>
    28a8:	4e c0       	rjmp	.+156    	; 0x2946 <__vector_24+0x21c>
    28aa:	e0 91 a8 04 	lds	r30, 0x04A8	; 0x8004a8 <twi_rxBufferIndex>
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	8e 0f       	add	r24, r30
    28b2:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <twi_rxBufferIndex>
    28b6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	e7 55       	subi	r30, 0x57	; 87
    28be:	fb 4f       	sbci	r31, 0xFB	; 251
    28c0:	80 83       	st	Z, r24
    28c2:	bd cf       	rjmp	.-134    	; 0x283e <__vector_24+0x114>
    28c4:	0e 94 68 11 	call	0x22d0	; 0x22d0 <twi_releaseBus>
    28c8:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <twi_rxBufferIndex>
    28cc:	80 32       	cpi	r24, 0x20	; 32
    28ce:	30 f4       	brcc	.+12     	; 0x28dc <__vector_24+0x1b2>
    28d0:	e0 91 a8 04 	lds	r30, 0x04A8	; 0x8004a8 <twi_rxBufferIndex>
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	e7 55       	subi	r30, 0x57	; 87
    28d8:	fb 4f       	sbci	r31, 0xFB	; 251
    28da:	10 82       	st	Z, r1
    28dc:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <twi_rxBufferIndex>
    28e0:	70 e0       	ldi	r23, 0x00	; 0
    28e2:	e0 91 0d 05 	lds	r30, 0x050D	; 0x80050d <twi_onSlaveReceive>
    28e6:	f0 91 0e 05 	lds	r31, 0x050E	; 0x80050e <twi_onSlaveReceive+0x1>
    28ea:	89 ea       	ldi	r24, 0xA9	; 169
    28ec:	94 e0       	ldi	r25, 0x04	; 4
    28ee:	09 95       	icall
    28f0:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <twi_rxBufferIndex>
    28f4:	36 c0       	rjmp	.+108    	; 0x2962 <__vector_24+0x238>
    28f6:	84 e0       	ldi	r24, 0x04	; 4
    28f8:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <twi_state>
    28fc:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <twi_txBufferIndex>
    2900:	10 92 c9 04 	sts	0x04C9, r1	; 0x8004c9 <twi_txBufferLength>
    2904:	e0 91 0f 05 	lds	r30, 0x050F	; 0x80050f <twi_onSlaveTransmit>
    2908:	f0 91 10 05 	lds	r31, 0x0510	; 0x800510 <twi_onSlaveTransmit+0x1>
    290c:	09 95       	icall
    290e:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <twi_txBufferLength>
    2912:	81 11       	cpse	r24, r1
    2914:	05 c0       	rjmp	.+10     	; 0x2920 <__vector_24+0x1f6>
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <twi_txBufferLength>
    291c:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <twi_txBuffer>
    2920:	e0 91 ca 04 	lds	r30, 0x04CA	; 0x8004ca <twi_txBufferIndex>
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	8e 0f       	add	r24, r30
    2928:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <twi_txBufferIndex>
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	e5 53       	subi	r30, 0x35	; 53
    2930:	fb 4f       	sbci	r31, 0xFB	; 251
    2932:	80 81       	ld	r24, Z
    2934:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2938:	90 91 ca 04 	lds	r25, 0x04CA	; 0x8004ca <twi_txBufferIndex>
    293c:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <twi_txBufferLength>
    2940:	98 17       	cp	r25, r24
    2942:	08 f4       	brcc	.+2      	; 0x2946 <__vector_24+0x21c>
    2944:	7c cf       	rjmp	.-264    	; 0x283e <__vector_24+0x114>
    2946:	85 e8       	ldi	r24, 0x85	; 133
    2948:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    294c:	0a c0       	rjmp	.+20     	; 0x2962 <__vector_24+0x238>
    294e:	85 ec       	ldi	r24, 0xC5	; 197
    2950:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2954:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <twi_state>
    2958:	04 c0       	rjmp	.+8      	; 0x2962 <__vector_24+0x238>
    295a:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <twi_error>
    295e:	0e 94 5d 13 	call	0x26ba	; 0x26ba <twi_stop>
    2962:	ff 91       	pop	r31
    2964:	ef 91       	pop	r30
    2966:	bf 91       	pop	r27
    2968:	af 91       	pop	r26
    296a:	9f 91       	pop	r25
    296c:	8f 91       	pop	r24
    296e:	7f 91       	pop	r23
    2970:	6f 91       	pop	r22
    2972:	5f 91       	pop	r21
    2974:	4f 91       	pop	r20
    2976:	3f 91       	pop	r19
    2978:	2f 91       	pop	r18
    297a:	0f 90       	pop	r0
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	0f 90       	pop	r0
    2980:	1f 90       	pop	r1
    2982:	18 95       	reti

00002984 <__cmpsf2>:
    2984:	0e 94 81 09 	call	0x1302	; 0x1302 <__fp_cmp>
    2988:	08 f4       	brcc	.+2      	; 0x298c <__cmpsf2+0x8>
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	08 95       	ret

0000298e <__unordsf2>:
    298e:	0e 94 81 09 	call	0x1302	; 0x1302 <__fp_cmp>
    2992:	88 0b       	sbc	r24, r24
    2994:	99 0b       	sbc	r25, r25
    2996:	08 95       	ret

00002998 <__udivmodsi4>:
    2998:	a1 e2       	ldi	r26, 0x21	; 33
    299a:	1a 2e       	mov	r1, r26
    299c:	aa 1b       	sub	r26, r26
    299e:	bb 1b       	sub	r27, r27
    29a0:	fd 01       	movw	r30, r26
    29a2:	0d c0       	rjmp	.+26     	; 0x29be <__udivmodsi4_ep>

000029a4 <__udivmodsi4_loop>:
    29a4:	aa 1f       	adc	r26, r26
    29a6:	bb 1f       	adc	r27, r27
    29a8:	ee 1f       	adc	r30, r30
    29aa:	ff 1f       	adc	r31, r31
    29ac:	a2 17       	cp	r26, r18
    29ae:	b3 07       	cpc	r27, r19
    29b0:	e4 07       	cpc	r30, r20
    29b2:	f5 07       	cpc	r31, r21
    29b4:	20 f0       	brcs	.+8      	; 0x29be <__udivmodsi4_ep>
    29b6:	a2 1b       	sub	r26, r18
    29b8:	b3 0b       	sbc	r27, r19
    29ba:	e4 0b       	sbc	r30, r20
    29bc:	f5 0b       	sbc	r31, r21

000029be <__udivmodsi4_ep>:
    29be:	66 1f       	adc	r22, r22
    29c0:	77 1f       	adc	r23, r23
    29c2:	88 1f       	adc	r24, r24
    29c4:	99 1f       	adc	r25, r25
    29c6:	1a 94       	dec	r1
    29c8:	69 f7       	brne	.-38     	; 0x29a4 <__udivmodsi4_loop>
    29ca:	60 95       	com	r22
    29cc:	70 95       	com	r23
    29ce:	80 95       	com	r24
    29d0:	90 95       	com	r25
    29d2:	9b 01       	movw	r18, r22
    29d4:	ac 01       	movw	r20, r24
    29d6:	bd 01       	movw	r22, r26
    29d8:	cf 01       	movw	r24, r30
    29da:	08 95       	ret

000029dc <__tablejump2__>:
    29dc:	ee 0f       	add	r30, r30
    29de:	ff 1f       	adc	r31, r31
    29e0:	05 90       	lpm	r0, Z+
    29e2:	f4 91       	lpm	r31, Z
    29e4:	e0 2d       	mov	r30, r0
    29e6:	09 94       	ijmp

000029e8 <_exit>:
    29e8:	f8 94       	cli

000029ea <__stop_program>:
    29ea:	ff cf       	rjmp	.-2      	; 0x29ea <__stop_program>
