
pdm_sketch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014a  00800100  000026ba  0000274e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000029b  0080024a  0080024a  00002898  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002898  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000028c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000500  00000000  00000000  00002908  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d04e  00000000  00000000  00002e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002665  00000000  00000000  0000fe56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d0d  00000000  00000000  000124bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001018  00000000  00000000  000151c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003257  00000000  00000000  000161e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000055b5  00000000  00000000  00019437  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000490  00000000  00000000  0001e9ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__vector_16>
      44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      48:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__vector_18>
      4c:	0c 94 05 09 	jmp	0x120a	; 0x120a <__vector_19>
      50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      60:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <__vector_24>
      64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	73 65       	ori	r23, 0x53	; 83
      6a:	74 20       	and	r7, r4
      6c:	63 61       	ori	r22, 0x13	; 19
      6e:	6c 69       	ori	r22, 0x9C	; 156
      70:	62 72       	andi	r22, 0x22	; 34
      72:	61 74       	andi	r22, 0x41	; 65
      74:	69 6f       	ori	r22, 0xF9	; 249
      76:	6e 00       	.word	0x006e	; ????

00000078 <_ZZN8INA233_S10resetAlarmEvE3__c>:
      78:	72 65 73 65 74 20 61 6c 61 72 6d 00                 reset alarm.

00000084 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_4>:
      84:	55 56 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     UV WARN LIMIT re
      94:	61 64 62 61 63 6b 3a 20 00                          adback: .

0000009d <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_3>:
      9d:	55 56 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     UV WARN LIMIT: .

000000ad <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_2>:
      ad:	4f 56 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     OV WARN LIMIT re
      bd:	61 64 62 61 63 6b 3a 20 00                          adback: .

000000c6 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_1>:
      c6:	4f 56 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     OV WARN LIMIT: .

000000d6 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_0>:
      d6:	4f 43 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     OC WARN LIMIT re
      e6:	61 64 62 61 63 6b 3a 20 00                          adback: .

000000ef <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c>:
      ef:	4f 43 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     OC WARN LIMIT: .

000000ff <digital_pin_to_timer_PGM>:
      ff:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     10f:	00 00 00 00                                         ....

00000113 <digital_pin_to_bit_mask_PGM>:
     113:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     123:	04 08 10 20                                         ... 

00000127 <digital_pin_to_port_PGM>:
     127:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     137:	03 03 03 03                                         ....

0000013b <port_to_output_PGM>:
     13b:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000145 <port_to_mode_PGM>:
     145:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000150 <__ctors_start>:
     150:	8c 05       	cpc	r24, r12
     152:	35 09       	sbc	r19, r5
     154:	7e 0e       	add	r7, r30

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf ef       	ldi	r28, 0xFF	; 255
     15c:	d8 e0       	ldi	r29, 0x08	; 8
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	12 e0       	ldi	r17, 0x02	; 2
     164:	a0 e0       	ldi	r26, 0x00	; 0
     166:	b1 e0       	ldi	r27, 0x01	; 1
     168:	ea eb       	ldi	r30, 0xBA	; 186
     16a:	f6 e2       	ldi	r31, 0x26	; 38
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x10>
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	aa 34       	cpi	r26, 0x4A	; 74
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0xc>

00000178 <__do_clear_bss>:
     178:	24 e0       	ldi	r18, 0x04	; 4
     17a:	aa e4       	ldi	r26, 0x4A	; 74
     17c:	b2 e0       	ldi	r27, 0x02	; 2
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	a5 3e       	cpi	r26, 0xE5	; 229
     184:	b2 07       	cpc	r27, r18
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>

00000188 <__do_global_ctors>:
     188:	10 e0       	ldi	r17, 0x00	; 0
     18a:	cb ea       	ldi	r28, 0xAB	; 171
     18c:	d0 e0       	ldi	r29, 0x00	; 0
     18e:	04 c0       	rjmp	.+8      	; 0x198 <__do_global_ctors+0x10>
     190:	21 97       	sbiw	r28, 0x01	; 1
     192:	fe 01       	movw	r30, r28
     194:	0e 94 55 13 	call	0x26aa	; 0x26aa <__tablejump2__>
     198:	c8 3a       	cpi	r28, 0xA8	; 168
     19a:	d1 07       	cpc	r29, r17
     19c:	c9 f7       	brne	.-14     	; 0x190 <__do_global_ctors+0x8>
     19e:	0e 94 63 09 	call	0x12c6	; 0x12c6 <main>
     1a2:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <_exit>

000001a6 <__bad_interrupt>:
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>:

void INA233_S::getAlarm()
{
    INA233_Data_Package data = receiveData_(0x7C, 1);
    Serial.print("status input: ");
    Serial.println(data.msg[0], BIN);
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	cd b7       	in	r28, 0x3d	; 61
     1b0:	de b7       	in	r29, 0x3e	; 62
     1b2:	dc 01       	movw	r26, r24
     1b4:	6c 93       	st	X, r22
     1b6:	12 96       	adiw	r26, 0x02	; 2
     1b8:	5c 93       	st	X, r21
     1ba:	4e 93       	st	-X, r20
     1bc:	11 97       	sbiw	r26, 0x01	; 1
     1be:	14 96       	adiw	r26, 0x04	; 4
     1c0:	3c 93       	st	X, r19
     1c2:	2e 93       	st	-X, r18
     1c4:	13 97       	sbiw	r26, 0x03	; 3
     1c6:	2c e0       	ldi	r18, 0x0C	; 12
     1c8:	fe 01       	movw	r30, r28
     1ca:	35 96       	adiw	r30, 0x05	; 5
     1cc:	15 96       	adiw	r26, 0x05	; 5
     1ce:	01 90       	ld	r0, Z+
     1d0:	0d 92       	st	X+, r0
     1d2:	2a 95       	dec	r18
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config+0x24>
     1d6:	2a e0       	ldi	r18, 0x0A	; 10
     1d8:	fc 01       	movw	r30, r24
     1da:	71 96       	adiw	r30, 0x11	; 17
     1dc:	df 01       	movw	r26, r30
     1de:	32 2f       	mov	r19, r18
     1e0:	1d 92       	st	X+, r1
     1e2:	3a 95       	dec	r19
     1e4:	e9 f7       	brne	.-6      	; 0x1e0 <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config+0x36>
     1e6:	dc 01       	movw	r26, r24
     1e8:	5b 96       	adiw	r26, 0x1b	; 27
     1ea:	1c 92       	st	X, r1
     1ec:	5b 97       	sbiw	r26, 0x1b	; 27
     1ee:	5c 96       	adiw	r26, 0x1c	; 28
     1f0:	2c 93       	st	X, r18
     1f2:	5c 97       	sbiw	r26, 0x1c	; 28
     1f4:	5d 96       	adiw	r26, 0x1d	; 29
     1f6:	1c 92       	st	X, r1
     1f8:	5d 97       	sbiw	r26, 0x1d	; 29
     1fa:	5e 96       	adiw	r26, 0x1e	; 30
     1fc:	1c 92       	st	X, r1
     1fe:	5e 97       	sbiw	r26, 0x1e	; 30
     200:	5f 96       	adiw	r26, 0x1f	; 31
     202:	1c 92       	st	X, r1
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	08 95       	ret

0000020a <_ZN8INA233_S15transmitCommandEh>:
     20a:	cf 93       	push	r28
     20c:	c6 2f       	mov	r28, r22
     20e:	fc 01       	movw	r30, r24
     210:	60 81       	ld	r22, Z
     212:	8b e1       	ldi	r24, 0x1B	; 27
     214:	94 e0       	ldi	r25, 0x04	; 4
     216:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <_ZN7TwoWire17beginTransmissionEh>
     21a:	6c 2f       	mov	r22, r28
     21c:	8b e1       	ldi	r24, 0x1B	; 27
     21e:	94 e0       	ldi	r25, 0x04	; 4
     220:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <_ZN7TwoWire5writeEh>
     224:	8b e1       	ldi	r24, 0x1B	; 27
     226:	94 e0       	ldi	r25, 0x04	; 4
     228:	cf 91       	pop	r28
     22a:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <_ZN7TwoWire15endTransmissionEv>

0000022e <_ZN8INA233_S10resetAlarmEv>:
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	ec 01       	movw	r28, r24
     234:	68 e7       	ldi	r22, 0x78	; 120
     236:	70 e0       	ldi	r23, 0x00	; 0
     238:	85 e7       	ldi	r24, 0x75	; 117
     23a:	93 e0       	ldi	r25, 0x03	; 3
     23c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_ZN5Print7printlnEPK19__FlashStringHelper>
     240:	63 e0       	ldi	r22, 0x03	; 3
     242:	ce 01       	movw	r24, r28
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	0c 94 05 01 	jmp	0x20a	; 0x20a <_ZN8INA233_S15transmitCommandEh>

0000024c <_ZN8INA233_S9resetChipEv>:
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	ec 01       	movw	r28, r24
     252:	6e e1       	ldi	r22, 0x1E	; 30
     254:	71 e0       	ldi	r23, 0x01	; 1
     256:	85 e7       	ldi	r24, 0x75	; 117
     258:	93 e0       	ldi	r25, 0x03	; 3
     25a:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_ZN5Print7printlnEPKc>
     25e:	62 e1       	ldi	r22, 0x12	; 18
     260:	ce 01       	movw	r24, r28
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	0c 94 05 01 	jmp	0x20a	; 0x20a <_ZN8INA233_S15transmitCommandEh>

0000026a <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>:
     26a:	1f 93       	push	r17
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	fc 01       	movw	r30, r24
     272:	eb 01       	movw	r28, r22
     274:	14 2f       	mov	r17, r20
     276:	9a 85       	ldd	r25, Y+10	; 0x0a
     278:	93 30       	cpi	r25, 0x03	; 3
     27a:	18 f0       	brcs	.+6      	; 0x282 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x18>
     27c:	69 e2       	ldi	r22, 0x29	; 41
     27e:	71 e0       	ldi	r23, 0x01	; 1
     280:	04 c0       	rjmp	.+8      	; 0x28a <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x20>
     282:	91 11       	cpse	r25, r1
     284:	0f c0       	rjmp	.+30     	; 0x2a4 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x3a>
     286:	6f e8       	ldi	r22, 0x8F	; 143
     288:	71 e0       	ldi	r23, 0x01	; 1
     28a:	85 e7       	ldi	r24, 0x75	; 117
     28c:	93 e0       	ldi	r25, 0x03	; 3
     28e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_ZN5Print7printlnEPKc>
     292:	6e e6       	ldi	r22, 0x6E	; 110
     294:	71 e0       	ldi	r23, 0x01	; 1
     296:	85 e7       	ldi	r24, 0x75	; 117
     298:	93 e0       	ldi	r25, 0x03	; 3
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	1f 91       	pop	r17
     2a0:	0c 94 f4 09 	jmp	0x13e8	; 0x13e8 <_ZN5Print7printlnEPKc>
     2a4:	60 81       	ld	r22, Z
     2a6:	8b e1       	ldi	r24, 0x1B	; 27
     2a8:	94 e0       	ldi	r25, 0x04	; 4
     2aa:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <_ZN7TwoWire17beginTransmissionEh>
     2ae:	61 2f       	mov	r22, r17
     2b0:	8b e1       	ldi	r24, 0x1B	; 27
     2b2:	94 e0       	ldi	r25, 0x04	; 4
     2b4:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <_ZN7TwoWire5writeEh>
     2b8:	68 81       	ld	r22, Y
     2ba:	8b e1       	ldi	r24, 0x1B	; 27
     2bc:	94 e0       	ldi	r25, 0x04	; 4
     2be:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <_ZN7TwoWire5writeEh>
     2c2:	8a 85       	ldd	r24, Y+10	; 0x0a
     2c4:	82 30       	cpi	r24, 0x02	; 2
     2c6:	29 f4       	brne	.+10     	; 0x2d2 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x68>
     2c8:	69 81       	ldd	r22, Y+1	; 0x01
     2ca:	8b e1       	ldi	r24, 0x1B	; 27
     2cc:	94 e0       	ldi	r25, 0x04	; 4
     2ce:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <_ZN7TwoWire5writeEh>
     2d2:	8b e1       	ldi	r24, 0x1B	; 27
     2d4:	94 e0       	ldi	r25, 0x04	; 4
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	1f 91       	pop	r17
     2dc:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <_ZN7TwoWire15endTransmissionEv>

000002e0 <_ZN8INA233_S12receiveData_Ehh>:
     2e0:	ef 92       	push	r14
     2e2:	ff 92       	push	r15
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	ec 01       	movw	r28, r24
     2ee:	7b 01       	movw	r14, r22
     2f0:	02 2f       	mov	r16, r18
     2f2:	8f e0       	ldi	r24, 0x0F	; 15
     2f4:	fe 01       	movw	r30, r28
     2f6:	11 92       	st	Z+, r1
     2f8:	8a 95       	dec	r24
     2fa:	e9 f7       	brne	.-6      	; 0x2f6 <_ZN8INA233_S12receiveData_Ehh+0x16>
     2fc:	8a e0       	ldi	r24, 0x0A	; 10
     2fe:	8b 87       	std	Y+11, r24	; 0x0b
     300:	64 2f       	mov	r22, r20
     302:	c7 01       	movw	r24, r14
     304:	0e 94 05 01 	call	0x20a	; 0x20a <_ZN8INA233_S15transmitCommandEh>
     308:	40 2f       	mov	r20, r16
     30a:	f7 01       	movw	r30, r14
     30c:	60 81       	ld	r22, Z
     30e:	8b e1       	ldi	r24, 0x1B	; 27
     310:	94 e0       	ldi	r25, 0x04	; 4
     312:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <_ZN7TwoWire11requestFromEhh>
     316:	8b e1       	ldi	r24, 0x1B	; 27
     318:	94 e0       	ldi	r25, 0x04	; 4
     31a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <_ZN7TwoWire9availableEv>
     31e:	89 2b       	or	r24, r25
     320:	79 f0       	breq	.+30     	; 0x340 <_ZN8INA233_S12receiveData_Ehh+0x60>
     322:	1a 85       	ldd	r17, Y+10	; 0x0a
     324:	8b e1       	ldi	r24, 0x1B	; 27
     326:	94 e0       	ldi	r25, 0x04	; 4
     328:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <_ZN7TwoWire4readEv>
     32c:	fe 01       	movw	r30, r28
     32e:	e1 0f       	add	r30, r17
     330:	f1 1d       	adc	r31, r1
     332:	80 83       	st	Z, r24
     334:	1f 5f       	subi	r17, 0xFF	; 255
     336:	1a 87       	std	Y+10, r17	; 0x0a
     338:	1a 30       	cpi	r17, 0x0A	; 10
     33a:	68 f3       	brcs	.-38     	; 0x316 <_ZN8INA233_S12receiveData_Ehh+0x36>
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	8c 87       	std	Y+12, r24	; 0x0c
     340:	8a 85       	ldd	r24, Y+10	; 0x0a
     342:	80 17       	cp	r24, r16
     344:	18 f4       	brcc	.+6      	; 0x34c <_ZN8INA233_S12receiveData_Ehh+0x6c>
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	8d 87       	std	Y+13, r24	; 0x0d
     34a:	04 c0       	rjmp	.+8      	; 0x354 <_ZN8INA233_S12receiveData_Ehh+0x74>
     34c:	08 17       	cp	r16, r24
     34e:	10 f4       	brcc	.+4      	; 0x354 <_ZN8INA233_S12receiveData_Ehh+0x74>
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	8e 87       	std	Y+14, r24	; 0x0e
     354:	ce 01       	movw	r24, r28
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	1f 91       	pop	r17
     35c:	0f 91       	pop	r16
     35e:	ff 90       	pop	r15
     360:	ef 90       	pop	r14
     362:	08 95       	ret

00000364 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>:
     364:	ef 92       	push	r14
     366:	ff 92       	push	r15
     368:	0f 93       	push	r16
     36a:	1f 93       	push	r17
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
     374:	2f 97       	sbiw	r28, 0x0f	; 15
     376:	0f b6       	in	r0, 0x3f	; 63
     378:	f8 94       	cli
     37a:	de bf       	out	0x3e, r29	; 62
     37c:	0f be       	out	0x3f, r0	; 63
     37e:	cd bf       	out	0x3d, r28	; 61
     380:	8b 01       	movw	r16, r22
     382:	fb 01       	movw	r30, r22
     384:	22 85       	ldd	r18, Z+10	; 0x0a
     386:	bc 01       	movw	r22, r24
     388:	ce 01       	movw	r24, r28
     38a:	01 96       	adiw	r24, 0x01	; 1
     38c:	7c 01       	movw	r14, r24
     38e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_ZN8INA233_S12receiveData_Ehh>
     392:	f8 01       	movw	r30, r16
     394:	62 85       	ldd	r22, Z+10	; 0x0a
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	a8 01       	movw	r20, r16
     39a:	d7 01       	movw	r26, r14
     39c:	c8 01       	movw	r24, r16
     39e:	9d 01       	movw	r18, r26
     3a0:	2e 19       	sub	r18, r14
     3a2:	3f 09       	sbc	r19, r15
     3a4:	26 17       	cp	r18, r22
     3a6:	37 07       	cpc	r19, r23
     3a8:	40 f4       	brcc	.+16     	; 0x3ba <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x56>
     3aa:	fc 01       	movw	r30, r24
     3ac:	31 91       	ld	r19, Z+
     3ae:	cf 01       	movw	r24, r30
     3b0:	2d 91       	ld	r18, X+
     3b2:	32 17       	cp	r19, r18
     3b4:	a1 f3       	breq	.-24     	; 0x39e <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x3a>
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	0a c0       	rjmp	.+20     	; 0x3ce <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x6a>
     3ba:	60 0f       	add	r22, r16
     3bc:	71 1f       	adc	r23, r17
     3be:	46 17       	cp	r20, r22
     3c0:	57 07       	cpc	r21, r23
     3c2:	21 f0       	breq	.+8      	; 0x3cc <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x68>
     3c4:	fa 01       	movw	r30, r20
     3c6:	11 92       	st	Z+, r1
     3c8:	af 01       	movw	r20, r30
     3ca:	f9 cf       	rjmp	.-14     	; 0x3be <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x5a>
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	2f 96       	adiw	r28, 0x0f	; 15
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	f8 94       	cli
     3d4:	de bf       	out	0x3e, r29	; 62
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	cd bf       	out	0x3d, r28	; 61
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	1f 91       	pop	r17
     3e0:	0f 91       	pop	r16
     3e2:	ff 90       	pop	r15
     3e4:	ef 90       	pop	r14
     3e6:	08 95       	ret

000003e8 <_ZN8INA233_S15setADC_SettingsEj>:
     3e8:	ef 92       	push	r14
     3ea:	ff 92       	push	r15
     3ec:	0f 93       	push	r16
     3ee:	1f 93       	push	r17
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
     3f8:	2f 97       	sbiw	r28, 0x0f	; 15
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	de bf       	out	0x3e, r29	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	cd bf       	out	0x3d, r28	; 61
     404:	7c 01       	movw	r14, r24
     406:	8e 01       	movw	r16, r28
     408:	0f 5f       	subi	r16, 0xFF	; 255
     40a:	1f 4f       	sbci	r17, 0xFF	; 255
     40c:	8f e0       	ldi	r24, 0x0F	; 15
     40e:	f8 01       	movw	r30, r16
     410:	11 92       	st	Z+, r1
     412:	8a 95       	dec	r24
     414:	e9 f7       	brne	.-6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     416:	8a e0       	ldi	r24, 0x0A	; 10
     418:	8c 87       	std	Y+12, r24	; 0x0c
     41a:	69 83       	std	Y+1, r22	; 0x01
     41c:	7a 83       	std	Y+2, r23	; 0x02
     41e:	82 e0       	ldi	r24, 0x02	; 2
     420:	8b 87       	std	Y+11, r24	; 0x0b
     422:	40 ed       	ldi	r20, 0xD0	; 208
     424:	b8 01       	movw	r22, r16
     426:	c7 01       	movw	r24, r14
     428:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     42c:	40 ed       	ldi	r20, 0xD0	; 208
     42e:	b8 01       	movw	r22, r16
     430:	c7 01       	movw	r24, r14
     432:	0e 94 b2 01 	call	0x364	; 0x364 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	2f 96       	adiw	r28, 0x0f	; 15
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	de bf       	out	0x3e, r29	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	cd bf       	out	0x3d, r28	; 61
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	1f 91       	pop	r17
     44a:	0f 91       	pop	r16
     44c:	ff 90       	pop	r15
     44e:	ef 90       	pop	r14
     450:	08 95       	ret

00000452 <_ZN8INA233_S15setCallibrationEj>:
     452:	cf 92       	push	r12
     454:	df 92       	push	r13
     456:	ef 92       	push	r14
     458:	ff 92       	push	r15
     45a:	0f 93       	push	r16
     45c:	1f 93       	push	r17
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	2f 97       	sbiw	r28, 0x0f	; 15
     468:	0f b6       	in	r0, 0x3f	; 63
     46a:	f8 94       	cli
     46c:	de bf       	out	0x3e, r29	; 62
     46e:	0f be       	out	0x3f, r0	; 63
     470:	cd bf       	out	0x3d, r28	; 61
     472:	7c 01       	movw	r14, r24
     474:	6b 01       	movw	r12, r22
     476:	68 e6       	ldi	r22, 0x68	; 104
     478:	70 e0       	ldi	r23, 0x00	; 0
     47a:	85 e7       	ldi	r24, 0x75	; 117
     47c:	93 e0       	ldi	r25, 0x03	; 3
     47e:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_ZN5Print7printlnEPK19__FlashStringHelper>
     482:	8e 01       	movw	r16, r28
     484:	0f 5f       	subi	r16, 0xFF	; 255
     486:	1f 4f       	sbci	r17, 0xFF	; 255
     488:	8f e0       	ldi	r24, 0x0F	; 15
     48a:	f8 01       	movw	r30, r16
     48c:	11 92       	st	Z+, r1
     48e:	8a 95       	dec	r24
     490:	e9 f7       	brne	.-6      	; 0x48c <_ZN8INA233_S15setCallibrationEj+0x3a>
     492:	8a e0       	ldi	r24, 0x0A	; 10
     494:	8c 87       	std	Y+12, r24	; 0x0c
     496:	c9 82       	std	Y+1, r12	; 0x01
     498:	da 82       	std	Y+2, r13	; 0x02
     49a:	82 e0       	ldi	r24, 0x02	; 2
     49c:	8b 87       	std	Y+11, r24	; 0x0b
     49e:	44 ed       	ldi	r20, 0xD4	; 212
     4a0:	b8 01       	movw	r22, r16
     4a2:	c7 01       	movw	r24, r14
     4a4:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     4a8:	44 ed       	ldi	r20, 0xD4	; 212
     4aa:	b8 01       	movw	r22, r16
     4ac:	c7 01       	movw	r24, r14
     4ae:	0e 94 b2 01 	call	0x364	; 0x364 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	2f 96       	adiw	r28, 0x0f	; 15
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	de bf       	out	0x3e, r29	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	cd bf       	out	0x3d, r28	; 61
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	1f 91       	pop	r17
     4c6:	0f 91       	pop	r16
     4c8:	ff 90       	pop	r15
     4ca:	ef 90       	pop	r14
     4cc:	df 90       	pop	r13
     4ce:	cf 90       	pop	r12
     4d0:	08 95       	ret

000004d2 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config>:
     4d2:	4f 92       	push	r4
     4d4:	5f 92       	push	r5
     4d6:	6f 92       	push	r6
     4d8:	7f 92       	push	r7
     4da:	af 92       	push	r10
     4dc:	bf 92       	push	r11
     4de:	cf 92       	push	r12
     4e0:	df 92       	push	r13
     4e2:	ef 92       	push	r14
     4e4:	ff 92       	push	r15
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
     4f2:	ae 97       	sbiw	r28, 0x2e	; 46
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	f8 94       	cli
     4f8:	de bf       	out	0x3e, r29	; 62
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	cd bf       	out	0x3d, r28	; 61
     4fe:	5c 01       	movw	r10, r24
     500:	cf 8e       	std	Y+31, r12	; 0x1f
     502:	d8 a2       	std	Y+32, r13	; 0x20
     504:	e9 a2       	std	Y+33, r14	; 0x21
     506:	fa a2       	std	Y+34, r15	; 0x22
     508:	0b a3       	std	Y+35, r16	; 0x23
     50a:	1c a3       	std	Y+36, r17	; 0x24
     50c:	2d a3       	std	Y+37, r18	; 0x25
     50e:	3e a3       	std	Y+38, r19	; 0x26
     510:	4f a3       	std	Y+39, r20	; 0x27
     512:	58 a7       	std	Y+40, r21	; 0x28
     514:	69 a7       	std	Y+41, r22	; 0x29
     516:	7a a7       	std	Y+42, r23	; 0x2a
     518:	cf 8c       	ldd	r12, Y+31	; 0x1f
     51a:	d8 a0       	ldd	r13, Y+32	; 0x20
     51c:	e9 a0       	ldd	r14, Y+33	; 0x21
     51e:	fa a0       	ldd	r15, Y+34	; 0x22
     520:	8b a1       	ldd	r24, Y+35	; 0x23
     522:	9c a1       	ldd	r25, Y+36	; 0x24
     524:	ad a1       	ldd	r26, Y+37	; 0x25
     526:	be a1       	ldd	r27, Y+38	; 0x26
     528:	8b a7       	std	Y+43, r24	; 0x2b
     52a:	9c a7       	std	Y+44, r25	; 0x2c
     52c:	ad a7       	std	Y+45, r26	; 0x2d
     52e:	be a7       	std	Y+46, r27	; 0x2e
     530:	4f a0       	ldd	r4, Y+39	; 0x27
     532:	58 a4       	ldd	r5, Y+40	; 0x28
     534:	69 a4       	ldd	r6, Y+41	; 0x29
     536:	7a a4       	ldd	r7, Y+42	; 0x2a
     538:	6b ea       	ldi	r22, 0xAB	; 171
     53a:	71 e0       	ldi	r23, 0x01	; 1
     53c:	85 e7       	ldi	r24, 0x75	; 117
     53e:	93 e0       	ldi	r25, 0x03	; 3
     540:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_ZN5Print7printlnEPKc>
     544:	20 e0       	ldi	r18, 0x00	; 0
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	a9 01       	movw	r20, r18
     54a:	c7 01       	movw	r24, r14
     54c:	b6 01       	movw	r22, r12
     54e:	0e 94 3a 08 	call	0x1074	; 0x1074 <__gesf2>
     552:	18 16       	cp	r1, r24
     554:	0c f0       	brlt	.+2      	; 0x558 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x86>
     556:	51 c0       	rjmp	.+162    	; 0x5fa <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x128>
     558:	d5 01       	movw	r26, r10
     55a:	11 96       	adiw	r26, 0x01	; 1
     55c:	6d 91       	ld	r22, X+
     55e:	7c 91       	ld	r23, X
     560:	12 97       	sbiw	r26, 0x02	; 2
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 ac 07 	call	0xf58	; 0xf58 <__floatunsisf>
     56a:	a7 01       	movw	r20, r14
     56c:	96 01       	movw	r18, r12
     56e:	0e 94 3f 08 	call	0x107e	; 0x107e <__mulsf3>
     572:	6b 01       	movw	r12, r22
     574:	7c 01       	movw	r14, r24
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	a9 01       	movw	r20, r18
     57c:	0e 94 3a 08 	call	0x1074	; 0x1074 <__gesf2>
     580:	20 e0       	ldi	r18, 0x00	; 0
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	40 e0       	ldi	r20, 0x00	; 0
     586:	5f e3       	ldi	r21, 0x3F	; 63
     588:	87 fd       	sbrc	r24, 7
     58a:	05 c0       	rjmp	.+10     	; 0x596 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xc4>
     58c:	c7 01       	movw	r24, r14
     58e:	b6 01       	movw	r22, r12
     590:	0e 94 98 06 	call	0xd30	; 0xd30 <__addsf3>
     594:	04 c0       	rjmp	.+8      	; 0x59e <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xcc>
     596:	c7 01       	movw	r24, r14
     598:	b6 01       	movw	r22, r12
     59a:	0e 94 97 06 	call	0xd2e	; 0xd2e <__subsf3>
     59e:	0e 94 76 07 	call	0xeec	; 0xeec <__fixsfsi>
     5a2:	8b 01       	movw	r16, r22
     5a4:	7e 01       	movw	r14, r28
     5a6:	b0 e1       	ldi	r27, 0x10	; 16
     5a8:	eb 0e       	add	r14, r27
     5aa:	f1 1c       	adc	r15, r1
     5ac:	8f e0       	ldi	r24, 0x0F	; 15
     5ae:	f7 01       	movw	r30, r14
     5b0:	11 92       	st	Z+, r1
     5b2:	8a 95       	dec	r24
     5b4:	e9 f7       	brne	.-6      	; 0x5b0 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xde>
     5b6:	8a e0       	ldi	r24, 0x0A	; 10
     5b8:	8b 8f       	std	Y+27, r24	; 0x1b
     5ba:	08 8b       	std	Y+16, r16	; 0x10
     5bc:	19 8b       	std	Y+17, r17	; 0x11
     5be:	82 e0       	ldi	r24, 0x02	; 2
     5c0:	8a 8f       	std	Y+26, r24	; 0x1a
     5c2:	6f ee       	ldi	r22, 0xEF	; 239
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	85 e7       	ldi	r24, 0x75	; 117
     5c8:	93 e0       	ldi	r25, 0x03	; 3
     5ca:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_ZN5Print7printlnEPK19__FlashStringHelper>
     5ce:	4a e0       	ldi	r20, 0x0A	; 10
     5d0:	50 e0       	ldi	r21, 0x00	; 0
     5d2:	b8 01       	movw	r22, r16
     5d4:	85 e7       	ldi	r24, 0x75	; 117
     5d6:	93 e0       	ldi	r25, 0x03	; 3
     5d8:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <_ZN5Print7printlnEji>
     5dc:	4a e4       	ldi	r20, 0x4A	; 74
     5de:	b7 01       	movw	r22, r14
     5e0:	c5 01       	movw	r24, r10
     5e2:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     5e6:	22 e0       	ldi	r18, 0x02	; 2
     5e8:	4a e4       	ldi	r20, 0x4A	; 74
     5ea:	b5 01       	movw	r22, r10
     5ec:	ce 01       	movw	r24, r28
     5ee:	01 96       	adiw	r24, 0x01	; 1
     5f0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_ZN8INA233_S12receiveData_Ehh>
     5f4:	66 ed       	ldi	r22, 0xD6	; 214
     5f6:	70 e0       	ldi	r23, 0x00	; 0
     5f8:	af c0       	rjmp	.+350    	; 0x758 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x286>
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	a9 01       	movw	r20, r18
     600:	6b a5       	ldd	r22, Y+43	; 0x2b
     602:	7c a5       	ldd	r23, Y+44	; 0x2c
     604:	8d a5       	ldd	r24, Y+45	; 0x2d
     606:	9e a5       	ldd	r25, Y+46	; 0x2e
     608:	0e 94 3a 08 	call	0x1074	; 0x1074 <__gesf2>
     60c:	18 16       	cp	r1, r24
     60e:	0c f0       	brlt	.+2      	; 0x612 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x140>
     610:	4e c0       	rjmp	.+156    	; 0x6ae <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x1dc>
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	48 e4       	ldi	r20, 0x48	; 72
     618:	54 e4       	ldi	r21, 0x44	; 68
     61a:	6b a5       	ldd	r22, Y+43	; 0x2b
     61c:	7c a5       	ldd	r23, Y+44	; 0x2c
     61e:	8d a5       	ldd	r24, Y+45	; 0x2d
     620:	9e a5       	ldd	r25, Y+46	; 0x2e
     622:	0e 94 3f 08 	call	0x107e	; 0x107e <__mulsf3>
     626:	6b 01       	movw	r12, r22
     628:	7c 01       	movw	r14, r24
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	a9 01       	movw	r20, r18
     630:	0e 94 3a 08 	call	0x1074	; 0x1074 <__gesf2>
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	40 e0       	ldi	r20, 0x00	; 0
     63a:	5f e3       	ldi	r21, 0x3F	; 63
     63c:	87 fd       	sbrc	r24, 7
     63e:	05 c0       	rjmp	.+10     	; 0x64a <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x178>
     640:	c7 01       	movw	r24, r14
     642:	b6 01       	movw	r22, r12
     644:	0e 94 98 06 	call	0xd30	; 0xd30 <__addsf3>
     648:	04 c0       	rjmp	.+8      	; 0x652 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x180>
     64a:	c7 01       	movw	r24, r14
     64c:	b6 01       	movw	r22, r12
     64e:	0e 94 97 06 	call	0xd2e	; 0xd2e <__subsf3>
     652:	0e 94 76 07 	call	0xeec	; 0xeec <__fixsfsi>
     656:	8b 01       	movw	r16, r22
     658:	7e 01       	movw	r14, r28
     65a:	f0 e1       	ldi	r31, 0x10	; 16
     65c:	ef 0e       	add	r14, r31
     65e:	f1 1c       	adc	r15, r1
     660:	8f e0       	ldi	r24, 0x0F	; 15
     662:	d7 01       	movw	r26, r14
     664:	1d 92       	st	X+, r1
     666:	8a 95       	dec	r24
     668:	e9 f7       	brne	.-6      	; 0x664 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x192>
     66a:	8a e0       	ldi	r24, 0x0A	; 10
     66c:	8b 8f       	std	Y+27, r24	; 0x1b
     66e:	08 8b       	std	Y+16, r16	; 0x10
     670:	19 8b       	std	Y+17, r17	; 0x11
     672:	82 e0       	ldi	r24, 0x02	; 2
     674:	8a 8f       	std	Y+26, r24	; 0x1a
     676:	66 ec       	ldi	r22, 0xC6	; 198
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	85 e7       	ldi	r24, 0x75	; 117
     67c:	93 e0       	ldi	r25, 0x03	; 3
     67e:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_ZN5Print7printlnEPK19__FlashStringHelper>
     682:	4a e0       	ldi	r20, 0x0A	; 10
     684:	50 e0       	ldi	r21, 0x00	; 0
     686:	b8 01       	movw	r22, r16
     688:	85 e7       	ldi	r24, 0x75	; 117
     68a:	93 e0       	ldi	r25, 0x03	; 3
     68c:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <_ZN5Print7printlnEji>
     690:	47 e5       	ldi	r20, 0x57	; 87
     692:	b7 01       	movw	r22, r14
     694:	c5 01       	movw	r24, r10
     696:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     69a:	22 e0       	ldi	r18, 0x02	; 2
     69c:	47 e5       	ldi	r20, 0x57	; 87
     69e:	b5 01       	movw	r22, r10
     6a0:	ce 01       	movw	r24, r28
     6a2:	01 96       	adiw	r24, 0x01	; 1
     6a4:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_ZN8INA233_S12receiveData_Ehh>
     6a8:	6d ea       	ldi	r22, 0xAD	; 173
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	55 c0       	rjmp	.+170    	; 0x758 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x286>
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	a9 01       	movw	r20, r18
     6b4:	c3 01       	movw	r24, r6
     6b6:	b2 01       	movw	r22, r4
     6b8:	0e 94 3a 08 	call	0x1074	; 0x1074 <__gesf2>
     6bc:	18 16       	cp	r1, r24
     6be:	0c f0       	brlt	.+2      	; 0x6c2 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x1f0>
     6c0:	5a c0       	rjmp	.+180    	; 0x776 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x2a4>
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	48 e4       	ldi	r20, 0x48	; 72
     6c8:	54 e4       	ldi	r21, 0x44	; 68
     6ca:	c3 01       	movw	r24, r6
     6cc:	b2 01       	movw	r22, r4
     6ce:	0e 94 3f 08 	call	0x107e	; 0x107e <__mulsf3>
     6d2:	6b 01       	movw	r12, r22
     6d4:	7c 01       	movw	r14, r24
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	a9 01       	movw	r20, r18
     6dc:	0e 94 3a 08 	call	0x1074	; 0x1074 <__gesf2>
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	40 e0       	ldi	r20, 0x00	; 0
     6e6:	5f e3       	ldi	r21, 0x3F	; 63
     6e8:	87 fd       	sbrc	r24, 7
     6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x224>
     6ec:	c7 01       	movw	r24, r14
     6ee:	b6 01       	movw	r22, r12
     6f0:	0e 94 98 06 	call	0xd30	; 0xd30 <__addsf3>
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x22c>
     6f6:	c7 01       	movw	r24, r14
     6f8:	b6 01       	movw	r22, r12
     6fa:	0e 94 97 06 	call	0xd2e	; 0xd2e <__subsf3>
     6fe:	0e 94 76 07 	call	0xeec	; 0xeec <__fixsfsi>
     702:	8b 01       	movw	r16, r22
     704:	7e 01       	movw	r14, r28
     706:	b0 e1       	ldi	r27, 0x10	; 16
     708:	eb 0e       	add	r14, r27
     70a:	f1 1c       	adc	r15, r1
     70c:	8f e0       	ldi	r24, 0x0F	; 15
     70e:	f7 01       	movw	r30, r14
     710:	11 92       	st	Z+, r1
     712:	8a 95       	dec	r24
     714:	e9 f7       	brne	.-6      	; 0x710 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x23e>
     716:	8a e0       	ldi	r24, 0x0A	; 10
     718:	8b 8f       	std	Y+27, r24	; 0x1b
     71a:	08 8b       	std	Y+16, r16	; 0x10
     71c:	19 8b       	std	Y+17, r17	; 0x11
     71e:	82 e0       	ldi	r24, 0x02	; 2
     720:	8a 8f       	std	Y+26, r24	; 0x1a
     722:	6d e9       	ldi	r22, 0x9D	; 157
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	85 e7       	ldi	r24, 0x75	; 117
     728:	93 e0       	ldi	r25, 0x03	; 3
     72a:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_ZN5Print7printlnEPK19__FlashStringHelper>
     72e:	4a e0       	ldi	r20, 0x0A	; 10
     730:	50 e0       	ldi	r21, 0x00	; 0
     732:	b8 01       	movw	r22, r16
     734:	85 e7       	ldi	r24, 0x75	; 117
     736:	93 e0       	ldi	r25, 0x03	; 3
     738:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <_ZN5Print7printlnEji>
     73c:	48 e5       	ldi	r20, 0x58	; 88
     73e:	b7 01       	movw	r22, r14
     740:	c5 01       	movw	r24, r10
     742:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     746:	22 e0       	ldi	r18, 0x02	; 2
     748:	48 e5       	ldi	r20, 0x58	; 88
     74a:	b5 01       	movw	r22, r10
     74c:	ce 01       	movw	r24, r28
     74e:	01 96       	adiw	r24, 0x01	; 1
     750:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_ZN8INA233_S12receiveData_Ehh>
     754:	64 e8       	ldi	r22, 0x84	; 132
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	85 e7       	ldi	r24, 0x75	; 117
     75a:	93 e0       	ldi	r25, 0x03	; 3
     75c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_ZN5Print7printlnEPK19__FlashStringHelper>
     760:	69 81       	ldd	r22, Y+1	; 0x01
     762:	7a 81       	ldd	r23, Y+2	; 0x02
     764:	4a e0       	ldi	r20, 0x0A	; 10
     766:	50 e0       	ldi	r21, 0x00	; 0
     768:	85 e7       	ldi	r24, 0x75	; 117
     76a:	93 e0       	ldi	r25, 0x03	; 3
     76c:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN5Print7printlnEii>
     770:	8a e0       	ldi	r24, 0x0A	; 10
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	00 c0       	rjmp	.+0      	; 0x776 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x2a4>
     776:	ae 96       	adiw	r28, 0x2e	; 46
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	de bf       	out	0x3e, r29	; 62
     77e:	0f be       	out	0x3f, r0	; 63
     780:	cd bf       	out	0x3d, r28	; 61
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	ff 90       	pop	r15
     78c:	ef 90       	pop	r14
     78e:	df 90       	pop	r13
     790:	cf 90       	pop	r12
     792:	bf 90       	pop	r11
     794:	af 90       	pop	r10
     796:	7f 90       	pop	r7
     798:	6f 90       	pop	r6
     79a:	5f 90       	pop	r5
     79c:	4f 90       	pop	r4
     79e:	08 95       	ret

000007a0 <_ZN8INA233_S10initializeEv>:
     7a0:	cf 92       	push	r12
     7a2:	df 92       	push	r13
     7a4:	ef 92       	push	r14
     7a6:	ff 92       	push	r15
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	ec 01       	movw	r28, r24
     7b2:	0e 94 26 01 	call	0x24c	; 0x24c <_ZN8INA233_S9resetChipEv>
     7b6:	6b 81       	ldd	r22, Y+3	; 0x03
     7b8:	7c 81       	ldd	r23, Y+4	; 0x04
     7ba:	ce 01       	movw	r24, r28
     7bc:	0e 94 29 02 	call	0x452	; 0x452 <_ZN8INA233_S15setCallibrationEj>
     7c0:	81 30       	cpi	r24, 0x01	; 1
     7c2:	91 05       	cpc	r25, r1
     7c4:	a1 f0       	breq	.+40     	; 0x7ee <_ZN8INA233_S10initializeEv+0x4e>
     7c6:	ce 01       	movw	r24, r28
     7c8:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8INA233_S10resetAlarmEv>
     7cc:	cd 80       	ldd	r12, Y+5	; 0x05
     7ce:	de 80       	ldd	r13, Y+6	; 0x06
     7d0:	ef 80       	ldd	r14, Y+7	; 0x07
     7d2:	f8 84       	ldd	r15, Y+8	; 0x08
     7d4:	09 85       	ldd	r16, Y+9	; 0x09
     7d6:	1a 85       	ldd	r17, Y+10	; 0x0a
     7d8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7da:	3c 85       	ldd	r19, Y+12	; 0x0c
     7dc:	4d 85       	ldd	r20, Y+13	; 0x0d
     7de:	5e 85       	ldd	r21, Y+14	; 0x0e
     7e0:	6f 85       	ldd	r22, Y+15	; 0x0f
     7e2:	78 89       	ldd	r23, Y+16	; 0x10
     7e4:	ce 01       	movw	r24, r28
     7e6:	0e 94 69 02 	call	0x4d2	; 0x4d2 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config>
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	ff 90       	pop	r15
     7f8:	ef 90       	pop	r14
     7fa:	df 90       	pop	r13
     7fc:	cf 90       	pop	r12
     7fe:	08 95       	ret

00000800 <_ZN8INA233_S10getCurrentEv>:
     800:	cf 92       	push	r12
     802:	df 92       	push	r13
     804:	ef 92       	push	r14
     806:	ff 92       	push	r15
     808:	0f 93       	push	r16
     80a:	1f 93       	push	r17
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
     814:	2f 97       	sbiw	r28, 0x0f	; 15
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	f8 94       	cli
     81a:	de bf       	out	0x3e, r29	; 62
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	cd bf       	out	0x3d, r28	; 61
     820:	7c 01       	movw	r14, r24
     822:	22 e0       	ldi	r18, 0x02	; 2
     824:	49 e8       	ldi	r20, 0x89	; 137
     826:	bc 01       	movw	r22, r24
     828:	ce 01       	movw	r24, r28
     82a:	01 96       	adiw	r24, 0x01	; 1
     82c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_ZN8INA233_S12receiveData_Ehh>
     830:	09 81       	ldd	r16, Y+1	; 0x01
     832:	1a 81       	ldd	r17, Y+2	; 0x02
     834:	68 eb       	ldi	r22, 0xB8	; 184
     836:	71 e0       	ldi	r23, 0x01	; 1
     838:	85 e7       	ldi	r24, 0x75	; 117
     83a:	93 e0       	ldi	r25, 0x03	; 3
     83c:	0e 94 d5 09 	call	0x13aa	; 0x13aa <_ZN5Print5printEPKc>
     840:	4a e0       	ldi	r20, 0x0A	; 10
     842:	50 e0       	ldi	r21, 0x00	; 0
     844:	b8 01       	movw	r22, r16
     846:	85 e7       	ldi	r24, 0x75	; 117
     848:	93 e0       	ldi	r25, 0x03	; 3
     84a:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN5Print7printlnEii>
     84e:	f7 01       	movw	r30, r14
     850:	61 81       	ldd	r22, Z+1	; 0x01
     852:	72 81       	ldd	r23, Z+2	; 0x02
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 ac 07 	call	0xf58	; 0xf58 <__floatunsisf>
     85c:	9b 01       	movw	r18, r22
     85e:	ac 01       	movw	r20, r24
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	80 e8       	ldi	r24, 0x80	; 128
     866:	9f e3       	ldi	r25, 0x3F	; 63
     868:	0e 94 04 07 	call	0xe08	; 0xe08 <__divsf3>
     86c:	6b 01       	movw	r12, r22
     86e:	7c 01       	movw	r14, r24
     870:	b8 01       	movw	r22, r16
     872:	11 0f       	add	r17, r17
     874:	88 0b       	sbc	r24, r24
     876:	99 0b       	sbc	r25, r25
     878:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__floatsisf>
     87c:	9b 01       	movw	r18, r22
     87e:	ac 01       	movw	r20, r24
     880:	c7 01       	movw	r24, r14
     882:	b6 01       	movw	r22, r12
     884:	0e 94 3f 08 	call	0x107e	; 0x107e <__mulsf3>
     888:	2f 96       	adiw	r28, 0x0f	; 15
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	f8 94       	cli
     88e:	de bf       	out	0x3e, r29	; 62
     890:	0f be       	out	0x3f, r0	; 63
     892:	cd bf       	out	0x3d, r28	; 61
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	df 90       	pop	r13
     8a2:	cf 90       	pop	r12
     8a4:	08 95       	ret

000008a6 <_ZN8INA233_S17testCommunicationEv>:
    Serial.println("reset chip");
    transmitCommand(0x12);
}

int INA233_S::testCommunication()
{
     8a6:	af 92       	push	r10
     8a8:	bf 92       	push	r11
     8aa:	df 92       	push	r13
     8ac:	ef 92       	push	r14
     8ae:	ff 92       	push	r15
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	cd b7       	in	r28, 0x3d	; 61
     8ba:	de b7       	in	r29, 0x3e	; 62
     8bc:	66 97       	sbiw	r28, 0x16	; 22
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	f8 94       	cli
     8c2:	de bf       	out	0x3e, r29	; 62
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	cd bf       	out	0x3d, r28	; 61
     8c8:	8c 01       	movw	r16, r24
    Serial.println("test communications");
     8ca:	69 ed       	ldi	r22, 0xD9	; 217
     8cc:	71 e0       	ldi	r23, 0x01	; 1
     8ce:	85 e7       	ldi	r24, 0x75	; 117
     8d0:	93 e0       	ldi	r25, 0x03	; 3
     8d2:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_ZN5Print7printlnEPKc>
    // TO DO ! Read MFR_MODEL, compare if correct.
    // Is there a way in wire.h to check for communications?
    INA233_Data_Package data = receiveData_(0x12, 7);
     8d6:	27 e0       	ldi	r18, 0x07	; 7
     8d8:	42 e1       	ldi	r20, 0x12	; 18
     8da:	b8 01       	movw	r22, r16
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_ZN8INA233_S12receiveData_Ehh>
    uint8_t compare[7]{
        0x06, 0x49, 0x4E, 0x41, 0x32, 0x33, 0x33};
     8e4:	87 e0       	ldi	r24, 0x07	; 7
     8e6:	e7 e1       	ldi	r30, 0x17	; 23
     8e8:	f1 e0       	ldi	r31, 0x01	; 1
     8ea:	de 01       	movw	r26, r28
     8ec:	50 96       	adiw	r26, 0x10	; 16
     8ee:	01 90       	ld	r0, Z+
     8f0:	0d 92       	st	X+, r0
     8f2:	8a 95       	dec	r24
     8f4:	e1 f7       	brne	.-8      	; 0x8ee <_ZN8INA233_S17testCommunicationEv+0x48>
     8f6:	8e 01       	movw	r16, r28
     8f8:	0f 5f       	subi	r16, 0xFF	; 255
     8fa:	1f 4f       	sbci	r17, 0xFF	; 255
     8fc:	7e 01       	movw	r14, r28
     8fe:	80 e1       	ldi	r24, 0x10	; 16
     900:	e8 0e       	add	r14, r24
     902:	f1 1c       	adc	r15, r1
     904:	5e 01       	movw	r10, r28
     906:	e8 e0       	ldi	r30, 0x08	; 8
     908:	ae 0e       	add	r10, r30
     90a:	b1 1c       	adc	r11, r1

    for (int ii = 0; ii <= 6; ii++)
    {
        Serial.print("Readback MFR_MODEL: ");
     90c:	6d ee       	ldi	r22, 0xED	; 237
     90e:	71 e0       	ldi	r23, 0x01	; 1
     910:	85 e7       	ldi	r24, 0x75	; 117
     912:	93 e0       	ldi	r25, 0x03	; 3
     914:	0e 94 d5 09 	call	0x13aa	; 0x13aa <_ZN5Print5printEPKc>
        Serial.print(data.msg[ii]);
     918:	f8 01       	movw	r30, r16
     91a:	d1 90       	ld	r13, Z+
     91c:	8f 01       	movw	r16, r30
     91e:	4a e0       	ldi	r20, 0x0A	; 10
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	6d 2d       	mov	r22, r13
     924:	85 e7       	ldi	r24, 0x75	; 117
     926:	93 e0       	ldi	r25, 0x03	; 3
     928:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <_ZN5Print5printEhi>
        if (compare[ii] != data.msg[ii])
     92c:	f7 01       	movw	r30, r14
     92e:	81 91       	ld	r24, Z+
     930:	7f 01       	movw	r14, r30
     932:	d8 16       	cp	r13, r24
     934:	49 f0       	breq	.+18     	; 0x948 <__stack+0x49>
        {
            Serial.println("Communication error");
     936:	62 e0       	ldi	r22, 0x02	; 2
     938:	72 e0       	ldi	r23, 0x02	; 2
     93a:	85 e7       	ldi	r24, 0x75	; 117
     93c:	93 e0       	ldi	r25, 0x03	; 3
     93e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_ZN5Print7printlnEPKc>
			return 1;
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	05 c0       	rjmp	.+10     	; 0x952 <__stack+0x53>
    // Is there a way in wire.h to check for communications?
    INA233_Data_Package data = receiveData_(0x12, 7);
    uint8_t compare[7]{
        0x06, 0x49, 0x4E, 0x41, 0x32, 0x33, 0x33};

    for (int ii = 0; ii <= 6; ii++)
     948:	0a 15       	cp	r16, r10
     94a:	1b 05       	cpc	r17, r11
     94c:	f9 f6       	brne	.-66     	; 0x90c <__stack+0xd>
            Serial.println("Communication error");
			return 1;
        }
    }
	
	return 0;
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
}
     952:	66 96       	adiw	r28, 0x16	; 22
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	de bf       	out	0x3e, r29	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	cd bf       	out	0x3d, r28	; 61
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	ff 90       	pop	r15
     968:	ef 90       	pop	r14
     96a:	df 90       	pop	r13
     96c:	bf 90       	pop	r11
     96e:	af 90       	pop	r10
     970:	08 95       	ret

00000972 <setup>:

void blink_light();
uint8_t STATE = HIGH;
unsigned long blink_time = 0, blink_interval = 500;

void setup() {	
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
     97a:	9d e0       	ldi	r25, 0x0D	; 13
     97c:	88 e1       	ldi	r24, 0x18	; 24
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	f8 94       	cli
     982:	a8 95       	wdr
     984:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     988:	0f be       	out	0x3f, r0	; 63
     98a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
	wdt_enable(WDTO_500MS);
	
	Wire.begin();
     98e:	8b e1       	ldi	r24, 0x1B	; 27
     990:	94 e0       	ldi	r25, 0x04	; 4
     992:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <_ZN7TwoWire5beginEv>
	Wire.setClock(10000);
     996:	40 e1       	ldi	r20, 0x10	; 16
     998:	57 e2       	ldi	r21, 0x27	; 39
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	8b e1       	ldi	r24, 0x1B	; 27
     9a0:	94 e0       	ldi	r25, 0x04	; 4
     9a2:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <_ZN7TwoWire8setClockEm>
	//Serial.begin(9600);
	
	pinMode(9, OUTPUT);
     9a6:	61 e0       	ldi	r22, 0x01	; 1
     9a8:	89 e0       	ldi	r24, 0x09	; 9
     9aa:	0e 94 a8 0c 	call	0x1950	; 0x1950 <pinMode>
     9ae:	c7 e0       	ldi	r28, 0x07	; 7
     9b0:	d1 e0       	ldi	r29, 0x01	; 1
     9b2:	8e 01       	movw	r16, r28
	
	// Setup for each INA233 sensor
	for (uint8_t ii = 0; ii < 7; ii++){
		SensorList[ii]->initialize();
     9b4:	f8 01       	movw	r30, r16
     9b6:	81 91       	ld	r24, Z+
     9b8:	91 91       	ld	r25, Z+
     9ba:	8f 01       	movw	r16, r30
     9bc:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_ZN8INA233_S10initializeEv>
	//Serial.begin(9600);
	
	pinMode(9, OUTPUT);
	
	// Setup for each INA233 sensor
	for (uint8_t ii = 0; ii < 7; ii++){
     9c0:	f1 e0       	ldi	r31, 0x01	; 1
     9c2:	05 31       	cpi	r16, 0x15	; 21
     9c4:	1f 07       	cpc	r17, r31
     9c6:	b1 f7       	brne	.-20     	; 0x9b4 <setup+0x42>
		SensorList[ii]->initialize();
	}

	for (uint8_t ii = 0; ii < 7; ii++){
		SensorList[ii]->setADC_Settings(default_address);
     9c8:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <default_address>
     9cc:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <default_address+0x1>
     9d0:	89 91       	ld	r24, Y+
     9d2:	99 91       	ld	r25, Y+
     9d4:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <_ZN8INA233_S15setADC_SettingsEj>
	// Setup for each INA233 sensor
	for (uint8_t ii = 0; ii < 7; ii++){
		SensorList[ii]->initialize();
	}

	for (uint8_t ii = 0; ii < 7; ii++){
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	c5 31       	cpi	r28, 0x15	; 21
     9dc:	d8 07       	cpc	r29, r24
     9de:	a1 f7       	brne	.-24     	; 0x9c8 <setup+0x56>
	frame.type = CANFDMessage::CAN_DATA;
	frame_FD.type = CANFDMessage::CANFD_WITH_BIT_RATE_SWITCH;
	
	frame.id = 0x500;
	frame_FD.id = 0x501;*/
}
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	0f 91       	pop	r16
     9e8:	08 95       	ret

000009ea <_Z29check_INA233_miscommunicationv>:
	//p2.close_MOSFET();
	
	wdt_reset();	
}

void check_INA233_miscommunication(){
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
	
	if((millis() - timeStamps[0]) > interval_INA233_checking){
     9f2:	0e 94 13 0c 	call	0x1826	; 0x1826 <millis>
     9f6:	00 91 35 03 	lds	r16, 0x0335	; 0x800335 <timeStamps>
     9fa:	10 91 36 03 	lds	r17, 0x0336	; 0x800336 <timeStamps+0x1>
     9fe:	20 91 37 03 	lds	r18, 0x0337	; 0x800337 <timeStamps+0x2>
     a02:	30 91 38 03 	lds	r19, 0x0338	; 0x800338 <timeStamps+0x3>
     a06:	dc 01       	movw	r26, r24
     a08:	cb 01       	movw	r24, r22
     a0a:	80 1b       	sub	r24, r16
     a0c:	91 0b       	sbc	r25, r17
     a0e:	a2 0b       	sbc	r26, r18
     a10:	b3 0b       	sbc	r27, r19
     a12:	81 31       	cpi	r24, 0x11	; 17
     a14:	97 42       	sbci	r25, 0x27	; 39
     a16:	a1 05       	cpc	r26, r1
     a18:	b1 05       	cpc	r27, r1
     a1a:	08 f1       	brcs	.+66     	; 0xa5e <_Z29check_INA233_miscommunicationv+0x74>
     a1c:	c7 e0       	ldi	r28, 0x07	; 7
     a1e:	d1 e0       	ldi	r29, 0x01	; 1
     a20:	05 e0       	ldi	r16, 0x05	; 5
     a22:	11 e0       	ldi	r17, 0x01	; 1
		
		for (uint8_t ii = 0; ii < 7; ii++){
			// If communication is not responding properly, open mosfet
			if(SensorList[ii]->testCommunication() == 1){
     a24:	89 91       	ld	r24, Y+
     a26:	99 91       	ld	r25, Y+
     a28:	0e 94 53 04 	call	0x8a6	; 0x8a6 <_ZN8INA233_S17testCommunicationEv>
     a2c:	01 97       	sbiw	r24, 0x01	; 1
     a2e:	39 f4       	brne	.+14     	; 0xa3e <_Z29check_INA233_miscommunicationv+0x54>
		digitalWrite(MOSpin_, HIGH);
	}
	
	// Break circuit
	void open_MOSFET(){
		digitalWrite(MOSpin_, LOW);
     a30:	d8 01       	movw	r26, r16
     a32:	ed 91       	ld	r30, X+
     a34:	fc 91       	ld	r31, X
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	80 81       	ld	r24, Z
     a3a:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <digitalWrite>
     a3e:	0e 5f       	subi	r16, 0xFE	; 254
     a40:	1f 4f       	sbci	r17, 0xFF	; 255

void check_INA233_miscommunication(){
	
	if((millis() - timeStamps[0]) > interval_INA233_checking){
		
		for (uint8_t ii = 0; ii < 7; ii++){
     a42:	b1 e0       	ldi	r27, 0x01	; 1
     a44:	c5 31       	cpi	r28, 0x15	; 21
     a46:	db 07       	cpc	r29, r27
     a48:	69 f7       	brne	.-38     	; 0xa24 <_Z29check_INA233_miscommunicationv+0x3a>
			if(SensorList[ii]->testCommunication() == 1){
				MosfetList[ii]->open_MOSFET();
			}
		}		
		
		timeStamps[0] = millis();
     a4a:	0e 94 13 0c 	call	0x1826	; 0x1826 <millis>
     a4e:	60 93 35 03 	sts	0x0335, r22	; 0x800335 <timeStamps>
     a52:	70 93 36 03 	sts	0x0336, r23	; 0x800336 <timeStamps+0x1>
     a56:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <timeStamps+0x2>
     a5a:	90 93 38 03 	sts	0x0338, r25	; 0x800338 <timeStamps+0x3>
	}
}
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	08 95       	ret

00000a68 <_Z11blink_lightv>:

void blink_light(){
     a68:	0f 93       	push	r16
     a6a:	1f 93       	push	r17
	if (millis() - blink_time > blink_interval){
     a6c:	0e 94 13 0c 	call	0x1826	; 0x1826 <millis>
     a70:	00 91 4a 02 	lds	r16, 0x024A	; 0x80024a <__data_end>
     a74:	10 91 4b 02 	lds	r17, 0x024B	; 0x80024b <__data_end+0x1>
     a78:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <__data_end+0x2>
     a7c:	30 91 4d 02 	lds	r19, 0x024D	; 0x80024d <__data_end+0x3>
     a80:	dc 01       	movw	r26, r24
     a82:	cb 01       	movw	r24, r22
     a84:	80 1b       	sub	r24, r16
     a86:	91 0b       	sbc	r25, r17
     a88:	a2 0b       	sbc	r26, r18
     a8a:	b3 0b       	sbc	r27, r19
     a8c:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_start>
     a90:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__data_start+0x1>
     a94:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_start+0x2>
     a98:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_start+0x3>
     a9c:	08 17       	cp	r16, r24
     a9e:	19 07       	cpc	r17, r25
     aa0:	2a 07       	cpc	r18, r26
     aa2:	3b 07       	cpc	r19, r27
     aa4:	a0 f4       	brcc	.+40     	; 0xace <_Z11blink_lightv+0x66>
		STATE = !STATE;
     aa6:	61 e0       	ldi	r22, 0x01	; 1
     aa8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <STATE>
     aac:	81 11       	cpse	r24, r1
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <STATE>
		digitalWrite(9, STATE);
     ab4:	89 e0       	ldi	r24, 0x09	; 9
     ab6:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <digitalWrite>
		//p1.close_MOSFET();
		
		blink_time = millis();
     aba:	0e 94 13 0c 	call	0x1826	; 0x1826 <millis>
     abe:	60 93 4a 02 	sts	0x024A, r22	; 0x80024a <__data_end>
     ac2:	70 93 4b 02 	sts	0x024B, r23	; 0x80024b <__data_end+0x1>
     ac6:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <__data_end+0x2>
     aca:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <__data_end+0x3>
	}
}
     ace:	1f 91       	pop	r17
     ad0:	0f 91       	pop	r16
     ad2:	08 95       	ret

00000ad4 <loop>:
	frame.id = 0x500;
	frame_FD.id = 0x501;*/
}


void loop() {
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	c5 e0       	ldi	r28, 0x05	; 5
     ada:	d1 e0       	ldi	r29, 0x01	; 1
	
	// Let power through MOSFETs
	for (uint8_t ii = 0; ii < 7; ii++){
		MosfetList[ii]->close_MOSFET();
     adc:	e9 91       	ld	r30, Y+
     ade:	f9 91       	ld	r31, Y+
	mosfet() = delete;
	mosfet(uint8_t MOSpin) : MOSpin_(MOSpin){ }
	
	// Complete circuit
	void close_MOSFET(){
		digitalWrite(MOSpin_, HIGH);
     ae0:	61 e0       	ldi	r22, 0x01	; 1
     ae2:	80 81       	ld	r24, Z
     ae4:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <digitalWrite>


void loop() {
	
	// Let power through MOSFETs
	for (uint8_t ii = 0; ii < 7; ii++){
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	c3 31       	cpi	r28, 0x13	; 19
     aec:	d8 07       	cpc	r29, r24
     aee:	b1 f7       	brne	.-20     	; 0xadc <loop+0x8>
		MosfetList[ii]->close_MOSFET();
	}	
	
	// Make sure communication with INA233 still works, if not then open mosfet
	check_INA233_miscommunication();
     af0:	0e 94 f5 04 	call	0x9ea	; 0x9ea <_Z29check_INA233_miscommunicationv>
	
	float current_1 = Sensor_1.getCurrent();
     af4:	85 e1       	ldi	r24, 0x15	; 21
     af6:	93 e0       	ldi	r25, 0x03	; 3
     af8:	0e 94 00 04 	call	0x800	; 0x800 <_ZN8INA233_S10getCurrentEv>
     afc:	ab 01       	movw	r20, r22
     afe:	bc 01       	movw	r22, r24
	int test = 1;
	
	Serial.println(current_1);
     b00:	22 e0       	ldi	r18, 0x02	; 2
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	85 e7       	ldi	r24, 0x75	; 117
     b06:	93 e0       	ldi	r25, 0x03	; 3
     b08:	0e 94 b7 0b 	call	0x176e	; 0x176e <_ZN5Print7printlnEdi>
		if (frame.data[0] == 0x02){
			digitalWrite(9, LOW); 
		}
		
	}*/
	blink_light();
     b0c:	0e 94 34 05 	call	0xa68	; 0xa68 <_Z11blink_lightv>
	//p2.close_MOSFET();
	
	wdt_reset();	
     b10:	a8 95       	wdr
}
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	08 95       	ret

00000b18 <_GLOBAL__sub_I_default_address>:
};

struct INA233_Alarm_Config
{
  float overCurrent = 0, overVoltage = 0, underVoltage = 0;
  INA233_Alarm_Config(float oc, float ov, float uv) : overCurrent(oc), overVoltage(ov), underVoltage(uv) {}  
     b18:	e9 e6       	ldi	r30, 0x69	; 105
     b1a:	f3 e0       	ldi	r31, 0x03	; 3
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	70 e4       	ldi	r23, 0x40	; 64
     b24:	40 83       	st	Z, r20
     b26:	51 83       	std	Z+1, r21	; 0x01
     b28:	62 83       	std	Z+2, r22	; 0x02
     b2a:	73 83       	std	Z+3, r23	; 0x03
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e5       	ldi	r26, 0x50	; 80
     b32:	b1 e4       	ldi	r27, 0x41	; 65
     b34:	84 83       	std	Z+4, r24	; 0x04
     b36:	95 83       	std	Z+5, r25	; 0x05
     b38:	a6 83       	std	Z+6, r26	; 0x06
     b3a:	b7 83       	std	Z+7, r27	; 0x07
     b3c:	10 86       	std	Z+8, r1	; 0x08
     b3e:	11 86       	std	Z+9, r1	; 0x09
     b40:	12 86       	std	Z+10, r1	; 0x0a
     b42:	13 86       	std	Z+11, r1	; 0x0b
     b44:	ed e5       	ldi	r30, 0x5D	; 93
     b46:	f3 e0       	ldi	r31, 0x03	; 3
     b48:	40 83       	st	Z, r20
     b4a:	51 83       	std	Z+1, r21	; 0x01
     b4c:	62 83       	std	Z+2, r22	; 0x02
     b4e:	73 83       	std	Z+3, r23	; 0x03
     b50:	84 83       	std	Z+4, r24	; 0x04
     b52:	95 83       	std	Z+5, r25	; 0x05
     b54:	a6 83       	std	Z+6, r26	; 0x06
     b56:	b7 83       	std	Z+7, r27	; 0x07
     b58:	10 86       	std	Z+8, r1	; 0x08
     b5a:	11 86       	std	Z+9, r1	; 0x09
     b5c:	12 86       	std	Z+10, r1	; 0x0a
     b5e:	13 86       	std	Z+11, r1	; 0x0b
uint16_t default_address = 0b0100011100100111;
unsigned long timeStamps[10] = {0};


// creating each INA233 sensor object
INA233_S Sensor_1(adrSensor1, m_valueSensor1, cal_valueSensor1, alarmConfigSensor1), 
     b60:	8d b7       	in	r24, 0x3d	; 61
     b62:	9e b7       	in	r25, 0x3e	; 62
     b64:	0c 97       	sbiw	r24, 0x0c	; 12
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	f8 94       	cli
     b6a:	9e bf       	out	0x3e, r25	; 62
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	8d bf       	out	0x3d, r24	; 61
     b70:	ad b7       	in	r26, 0x3d	; 61
     b72:	be b7       	in	r27, 0x3e	; 62
     b74:	11 96       	adiw	r26, 0x01	; 1
     b76:	8c e0       	ldi	r24, 0x0C	; 12
     b78:	e9 e6       	ldi	r30, 0x69	; 105
     b7a:	f3 e0       	ldi	r31, 0x03	; 3
     b7c:	01 90       	ld	r0, Z+
     b7e:	0d 92       	st	X+, r0
     b80:	8a 95       	dec	r24
     b82:	e1 f7       	brne	.-8      	; 0xb7c <_GLOBAL__sub_I_default_address+0x64>
     b84:	23 e3       	ldi	r18, 0x33	; 51
     b86:	38 e0       	ldi	r19, 0x08	; 8
     b88:	44 e3       	ldi	r20, 0x34	; 52
     b8a:	53 e0       	ldi	r21, 0x03	; 3
     b8c:	60 e4       	ldi	r22, 0x40	; 64
     b8e:	85 e1       	ldi	r24, 0x15	; 21
     b90:	93 e0       	ldi	r25, 0x03	; 3
     b92:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_2(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     b96:	8d b7       	in	r24, 0x3d	; 61
     b98:	9e b7       	in	r25, 0x3e	; 62
     b9a:	0c 97       	sbiw	r24, 0x0c	; 12
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	9e bf       	out	0x3e, r25	; 62
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	8d bf       	out	0x3d, r24	; 61
     ba6:	ad b7       	in	r26, 0x3d	; 61
     ba8:	be b7       	in	r27, 0x3e	; 62
     baa:	11 96       	adiw	r26, 0x01	; 1
     bac:	8c e0       	ldi	r24, 0x0C	; 12
     bae:	ed e5       	ldi	r30, 0x5D	; 93
     bb0:	f3 e0       	ldi	r31, 0x03	; 3
     bb2:	01 90       	ld	r0, Z+
     bb4:	0d 92       	st	X+, r0
     bb6:	8a 95       	dec	r24
     bb8:	e1 f7       	brne	.-8      	; 0xbb2 <_GLOBAL__sub_I_default_address+0x9a>
     bba:	23 e3       	ldi	r18, 0x33	; 51
     bbc:	38 e0       	ldi	r19, 0x08	; 8
     bbe:	44 e3       	ldi	r20, 0x34	; 52
     bc0:	53 e0       	ldi	r21, 0x03	; 3
     bc2:	61 e4       	ldi	r22, 0x41	; 65
     bc4:	85 ef       	ldi	r24, 0xF5	; 245
     bc6:	92 e0       	ldi	r25, 0x02	; 2
     bc8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_3(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     bcc:	8d b7       	in	r24, 0x3d	; 61
     bce:	9e b7       	in	r25, 0x3e	; 62
     bd0:	0c 97       	sbiw	r24, 0x0c	; 12
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	9e bf       	out	0x3e, r25	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	8d bf       	out	0x3d, r24	; 61
     bdc:	ad b7       	in	r26, 0x3d	; 61
     bde:	be b7       	in	r27, 0x3e	; 62
     be0:	11 96       	adiw	r26, 0x01	; 1
     be2:	8c e0       	ldi	r24, 0x0C	; 12
     be4:	ed e5       	ldi	r30, 0x5D	; 93
     be6:	f3 e0       	ldi	r31, 0x03	; 3
     be8:	01 90       	ld	r0, Z+
     bea:	0d 92       	st	X+, r0
     bec:	8a 95       	dec	r24
     bee:	e1 f7       	brne	.-8      	; 0xbe8 <_GLOBAL__sub_I_default_address+0xd0>
     bf0:	23 e3       	ldi	r18, 0x33	; 51
     bf2:	38 e0       	ldi	r19, 0x08	; 8
     bf4:	44 e3       	ldi	r20, 0x34	; 52
     bf6:	53 e0       	ldi	r21, 0x03	; 3
     bf8:	61 e4       	ldi	r22, 0x41	; 65
     bfa:	85 ed       	ldi	r24, 0xD5	; 213
     bfc:	92 e0       	ldi	r25, 0x02	; 2
     bfe:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_4(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     c02:	8d b7       	in	r24, 0x3d	; 61
     c04:	9e b7       	in	r25, 0x3e	; 62
     c06:	84 96       	adiw	r24, 0x24	; 36
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	f8 94       	cli
     c0c:	9e bf       	out	0x3e, r25	; 62
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	8d bf       	out	0x3d, r24	; 61
     c12:	0c 97       	sbiw	r24, 0x0c	; 12
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	9e bf       	out	0x3e, r25	; 62
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	8d bf       	out	0x3d, r24	; 61
     c1e:	ad b7       	in	r26, 0x3d	; 61
     c20:	be b7       	in	r27, 0x3e	; 62
     c22:	11 96       	adiw	r26, 0x01	; 1
     c24:	8c e0       	ldi	r24, 0x0C	; 12
     c26:	ed e5       	ldi	r30, 0x5D	; 93
     c28:	f3 e0       	ldi	r31, 0x03	; 3
     c2a:	01 90       	ld	r0, Z+
     c2c:	0d 92       	st	X+, r0
     c2e:	8a 95       	dec	r24
     c30:	e1 f7       	brne	.-8      	; 0xc2a <_GLOBAL__sub_I_default_address+0x112>
     c32:	23 e3       	ldi	r18, 0x33	; 51
     c34:	38 e0       	ldi	r19, 0x08	; 8
     c36:	44 e3       	ldi	r20, 0x34	; 52
     c38:	53 e0       	ldi	r21, 0x03	; 3
     c3a:	61 e4       	ldi	r22, 0x41	; 65
     c3c:	85 eb       	ldi	r24, 0xB5	; 181
     c3e:	92 e0       	ldi	r25, 0x02	; 2
     c40:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_5(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     c44:	8d b7       	in	r24, 0x3d	; 61
     c46:	9e b7       	in	r25, 0x3e	; 62
     c48:	0c 97       	sbiw	r24, 0x0c	; 12
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	9e bf       	out	0x3e, r25	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	8d bf       	out	0x3d, r24	; 61
     c54:	ad b7       	in	r26, 0x3d	; 61
     c56:	be b7       	in	r27, 0x3e	; 62
     c58:	11 96       	adiw	r26, 0x01	; 1
     c5a:	8c e0       	ldi	r24, 0x0C	; 12
     c5c:	ed e5       	ldi	r30, 0x5D	; 93
     c5e:	f3 e0       	ldi	r31, 0x03	; 3
     c60:	01 90       	ld	r0, Z+
     c62:	0d 92       	st	X+, r0
     c64:	8a 95       	dec	r24
     c66:	e1 f7       	brne	.-8      	; 0xc60 <_GLOBAL__sub_I_default_address+0x148>
     c68:	23 e3       	ldi	r18, 0x33	; 51
     c6a:	38 e0       	ldi	r19, 0x08	; 8
     c6c:	44 e3       	ldi	r20, 0x34	; 52
     c6e:	53 e0       	ldi	r21, 0x03	; 3
     c70:	61 e4       	ldi	r22, 0x41	; 65
     c72:	85 e9       	ldi	r24, 0x95	; 149
     c74:	92 e0       	ldi	r25, 0x02	; 2
     c76:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_6(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     c7a:	8d b7       	in	r24, 0x3d	; 61
     c7c:	9e b7       	in	r25, 0x3e	; 62
     c7e:	0c 97       	sbiw	r24, 0x0c	; 12
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	f8 94       	cli
     c84:	9e bf       	out	0x3e, r25	; 62
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	8d bf       	out	0x3d, r24	; 61
     c8a:	ad b7       	in	r26, 0x3d	; 61
     c8c:	be b7       	in	r27, 0x3e	; 62
     c8e:	11 96       	adiw	r26, 0x01	; 1
     c90:	8c e0       	ldi	r24, 0x0C	; 12
     c92:	ed e5       	ldi	r30, 0x5D	; 93
     c94:	f3 e0       	ldi	r31, 0x03	; 3
     c96:	01 90       	ld	r0, Z+
     c98:	0d 92       	st	X+, r0
     c9a:	8a 95       	dec	r24
     c9c:	e1 f7       	brne	.-8      	; 0xc96 <_GLOBAL__sub_I_default_address+0x17e>
     c9e:	23 e3       	ldi	r18, 0x33	; 51
     ca0:	38 e0       	ldi	r19, 0x08	; 8
     ca2:	44 e3       	ldi	r20, 0x34	; 52
     ca4:	53 e0       	ldi	r21, 0x03	; 3
     ca6:	61 e4       	ldi	r22, 0x41	; 65
     ca8:	85 e7       	ldi	r24, 0x75	; 117
     caa:	92 e0       	ldi	r25, 0x02	; 2
     cac:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_7(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2);
     cb0:	8d b7       	in	r24, 0x3d	; 61
     cb2:	9e b7       	in	r25, 0x3e	; 62
     cb4:	84 96       	adiw	r24, 0x24	; 36
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	9e bf       	out	0x3e, r25	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	8d bf       	out	0x3d, r24	; 61
     cc0:	0c 97       	sbiw	r24, 0x0c	; 12
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	9e bf       	out	0x3e, r25	; 62
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	8d bf       	out	0x3d, r24	; 61
     ccc:	ad b7       	in	r26, 0x3d	; 61
     cce:	be b7       	in	r27, 0x3e	; 62
     cd0:	11 96       	adiw	r26, 0x01	; 1
     cd2:	8c e0       	ldi	r24, 0x0C	; 12
     cd4:	ed e5       	ldi	r30, 0x5D	; 93
     cd6:	f3 e0       	ldi	r31, 0x03	; 3
     cd8:	01 90       	ld	r0, Z+
     cda:	0d 92       	st	X+, r0
     cdc:	8a 95       	dec	r24
     cde:	e1 f7       	brne	.-8      	; 0xcd8 <_GLOBAL__sub_I_default_address+0x1c0>
     ce0:	23 e3       	ldi	r18, 0x33	; 51
     ce2:	38 e0       	ldi	r19, 0x08	; 8
     ce4:	44 e3       	ldi	r20, 0x34	; 52
     ce6:	53 e0       	ldi	r21, 0x03	; 3
     ce8:	61 e4       	ldi	r22, 0x41	; 65
     cea:	85 e5       	ldi	r24, 0x55	; 85
     cec:	92 e0       	ldi	r25, 0x02	; 2
     cee:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>

// ___________________________ INA233 AND MOSFET/RLE SETUP ______________________________//
class  mosfet{
public:
	mosfet() = delete;
	mosfet(uint8_t MOSpin) : MOSpin_(MOSpin){ }
     cf2:	83 e0       	ldi	r24, 0x03	; 3
     cf4:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <p1>
     cf8:	85 e0       	ldi	r24, 0x05	; 5
     cfa:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <p2>
     cfe:	86 e0       	ldi	r24, 0x06	; 6
     d00:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <p3>
     d04:	8a e0       	ldi	r24, 0x0A	; 10
     d06:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <p4>
     d0a:	8f e0       	ldi	r24, 0x0F	; 15
     d0c:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <p5>
     d10:	80 e1       	ldi	r24, 0x10	; 16
     d12:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <p6>
     d16:	81 e1       	ldi	r24, 0x11	; 17
     d18:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <p7>
		digitalWrite(9, STATE);
		//p1.close_MOSFET();
		
		blink_time = millis();
	}
}
     d1c:	8d b7       	in	r24, 0x3d	; 61
     d1e:	9e b7       	in	r25, 0x3e	; 62
     d20:	0c 96       	adiw	r24, 0x0c	; 12
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	9e bf       	out	0x3e, r25	; 62
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	8d bf       	out	0x3d, r24	; 61
     d2c:	08 95       	ret

00000d2e <__subsf3>:
     d2e:	50 58       	subi	r21, 0x80	; 128

00000d30 <__addsf3>:
     d30:	bb 27       	eor	r27, r27
     d32:	aa 27       	eor	r26, r26
     d34:	0e 94 af 06 	call	0xd5e	; 0xd5e <__addsf3x>
     d38:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__fp_round>
     d3c:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__fp_pscA>
     d40:	38 f0       	brcs	.+14     	; 0xd50 <__addsf3+0x20>
     d42:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_pscB>
     d46:	20 f0       	brcs	.+8      	; 0xd50 <__addsf3+0x20>
     d48:	39 f4       	brne	.+14     	; 0xd58 <__addsf3+0x28>
     d4a:	9f 3f       	cpi	r25, 0xFF	; 255
     d4c:	19 f4       	brne	.+6      	; 0xd54 <__addsf3+0x24>
     d4e:	26 f4       	brtc	.+8      	; 0xd58 <__addsf3+0x28>
     d50:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__fp_nan>
     d54:	0e f4       	brtc	.+2      	; 0xd58 <__addsf3+0x28>
     d56:	e0 95       	com	r30
     d58:	e7 fb       	bst	r30, 7
     d5a:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_inf>

00000d5e <__addsf3x>:
     d5e:	e9 2f       	mov	r30, r25
     d60:	0e 94 11 08 	call	0x1022	; 0x1022 <__fp_split3>
     d64:	58 f3       	brcs	.-42     	; 0xd3c <__addsf3+0xc>
     d66:	ba 17       	cp	r27, r26
     d68:	62 07       	cpc	r22, r18
     d6a:	73 07       	cpc	r23, r19
     d6c:	84 07       	cpc	r24, r20
     d6e:	95 07       	cpc	r25, r21
     d70:	20 f0       	brcs	.+8      	; 0xd7a <__addsf3x+0x1c>
     d72:	79 f4       	brne	.+30     	; 0xd92 <__addsf3x+0x34>
     d74:	a6 f5       	brtc	.+104    	; 0xdde <__addsf3x+0x80>
     d76:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__fp_zero>
     d7a:	0e f4       	brtc	.+2      	; 0xd7e <__addsf3x+0x20>
     d7c:	e0 95       	com	r30
     d7e:	0b 2e       	mov	r0, r27
     d80:	ba 2f       	mov	r27, r26
     d82:	a0 2d       	mov	r26, r0
     d84:	0b 01       	movw	r0, r22
     d86:	b9 01       	movw	r22, r18
     d88:	90 01       	movw	r18, r0
     d8a:	0c 01       	movw	r0, r24
     d8c:	ca 01       	movw	r24, r20
     d8e:	a0 01       	movw	r20, r0
     d90:	11 24       	eor	r1, r1
     d92:	ff 27       	eor	r31, r31
     d94:	59 1b       	sub	r21, r25
     d96:	99 f0       	breq	.+38     	; 0xdbe <__addsf3x+0x60>
     d98:	59 3f       	cpi	r21, 0xF9	; 249
     d9a:	50 f4       	brcc	.+20     	; 0xdb0 <__addsf3x+0x52>
     d9c:	50 3e       	cpi	r21, 0xE0	; 224
     d9e:	68 f1       	brcs	.+90     	; 0xdfa <__addsf3x+0x9c>
     da0:	1a 16       	cp	r1, r26
     da2:	f0 40       	sbci	r31, 0x00	; 0
     da4:	a2 2f       	mov	r26, r18
     da6:	23 2f       	mov	r18, r19
     da8:	34 2f       	mov	r19, r20
     daa:	44 27       	eor	r20, r20
     dac:	58 5f       	subi	r21, 0xF8	; 248
     dae:	f3 cf       	rjmp	.-26     	; 0xd96 <__addsf3x+0x38>
     db0:	46 95       	lsr	r20
     db2:	37 95       	ror	r19
     db4:	27 95       	ror	r18
     db6:	a7 95       	ror	r26
     db8:	f0 40       	sbci	r31, 0x00	; 0
     dba:	53 95       	inc	r21
     dbc:	c9 f7       	brne	.-14     	; 0xdb0 <__addsf3x+0x52>
     dbe:	7e f4       	brtc	.+30     	; 0xdde <__addsf3x+0x80>
     dc0:	1f 16       	cp	r1, r31
     dc2:	ba 0b       	sbc	r27, r26
     dc4:	62 0b       	sbc	r22, r18
     dc6:	73 0b       	sbc	r23, r19
     dc8:	84 0b       	sbc	r24, r20
     dca:	ba f0       	brmi	.+46     	; 0xdfa <__addsf3x+0x9c>
     dcc:	91 50       	subi	r25, 0x01	; 1
     dce:	a1 f0       	breq	.+40     	; 0xdf8 <__addsf3x+0x9a>
     dd0:	ff 0f       	add	r31, r31
     dd2:	bb 1f       	adc	r27, r27
     dd4:	66 1f       	adc	r22, r22
     dd6:	77 1f       	adc	r23, r23
     dd8:	88 1f       	adc	r24, r24
     dda:	c2 f7       	brpl	.-16     	; 0xdcc <__addsf3x+0x6e>
     ddc:	0e c0       	rjmp	.+28     	; 0xdfa <__addsf3x+0x9c>
     dde:	ba 0f       	add	r27, r26
     de0:	62 1f       	adc	r22, r18
     de2:	73 1f       	adc	r23, r19
     de4:	84 1f       	adc	r24, r20
     de6:	48 f4       	brcc	.+18     	; 0xdfa <__addsf3x+0x9c>
     de8:	87 95       	ror	r24
     dea:	77 95       	ror	r23
     dec:	67 95       	ror	r22
     dee:	b7 95       	ror	r27
     df0:	f7 95       	ror	r31
     df2:	9e 3f       	cpi	r25, 0xFE	; 254
     df4:	08 f0       	brcs	.+2      	; 0xdf8 <__addsf3x+0x9a>
     df6:	b0 cf       	rjmp	.-160    	; 0xd58 <__addsf3+0x28>
     df8:	93 95       	inc	r25
     dfa:	88 0f       	add	r24, r24
     dfc:	08 f0       	brcs	.+2      	; 0xe00 <__addsf3x+0xa2>
     dfe:	99 27       	eor	r25, r25
     e00:	ee 0f       	add	r30, r30
     e02:	97 95       	ror	r25
     e04:	87 95       	ror	r24
     e06:	08 95       	ret

00000e08 <__divsf3>:
     e08:	0e 94 18 07 	call	0xe30	; 0xe30 <__divsf3x>
     e0c:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__fp_round>
     e10:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_pscB>
     e14:	58 f0       	brcs	.+22     	; 0xe2c <__divsf3+0x24>
     e16:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__fp_pscA>
     e1a:	40 f0       	brcs	.+16     	; 0xe2c <__divsf3+0x24>
     e1c:	29 f4       	brne	.+10     	; 0xe28 <__divsf3+0x20>
     e1e:	5f 3f       	cpi	r21, 0xFF	; 255
     e20:	29 f0       	breq	.+10     	; 0xe2c <__divsf3+0x24>
     e22:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_inf>
     e26:	51 11       	cpse	r21, r1
     e28:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_szero>
     e2c:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__fp_nan>

00000e30 <__divsf3x>:
     e30:	0e 94 11 08 	call	0x1022	; 0x1022 <__fp_split3>
     e34:	68 f3       	brcs	.-38     	; 0xe10 <__divsf3+0x8>

00000e36 <__divsf3_pse>:
     e36:	99 23       	and	r25, r25
     e38:	b1 f3       	breq	.-20     	; 0xe26 <__divsf3+0x1e>
     e3a:	55 23       	and	r21, r21
     e3c:	91 f3       	breq	.-28     	; 0xe22 <__divsf3+0x1a>
     e3e:	95 1b       	sub	r25, r21
     e40:	55 0b       	sbc	r21, r21
     e42:	bb 27       	eor	r27, r27
     e44:	aa 27       	eor	r26, r26
     e46:	62 17       	cp	r22, r18
     e48:	73 07       	cpc	r23, r19
     e4a:	84 07       	cpc	r24, r20
     e4c:	38 f0       	brcs	.+14     	; 0xe5c <__divsf3_pse+0x26>
     e4e:	9f 5f       	subi	r25, 0xFF	; 255
     e50:	5f 4f       	sbci	r21, 0xFF	; 255
     e52:	22 0f       	add	r18, r18
     e54:	33 1f       	adc	r19, r19
     e56:	44 1f       	adc	r20, r20
     e58:	aa 1f       	adc	r26, r26
     e5a:	a9 f3       	breq	.-22     	; 0xe46 <__divsf3_pse+0x10>
     e5c:	35 d0       	rcall	.+106    	; 0xec8 <__divsf3_pse+0x92>
     e5e:	0e 2e       	mov	r0, r30
     e60:	3a f0       	brmi	.+14     	; 0xe70 <__divsf3_pse+0x3a>
     e62:	e0 e8       	ldi	r30, 0x80	; 128
     e64:	32 d0       	rcall	.+100    	; 0xeca <__divsf3_pse+0x94>
     e66:	91 50       	subi	r25, 0x01	; 1
     e68:	50 40       	sbci	r21, 0x00	; 0
     e6a:	e6 95       	lsr	r30
     e6c:	00 1c       	adc	r0, r0
     e6e:	ca f7       	brpl	.-14     	; 0xe62 <__divsf3_pse+0x2c>
     e70:	2b d0       	rcall	.+86     	; 0xec8 <__divsf3_pse+0x92>
     e72:	fe 2f       	mov	r31, r30
     e74:	29 d0       	rcall	.+82     	; 0xec8 <__divsf3_pse+0x92>
     e76:	66 0f       	add	r22, r22
     e78:	77 1f       	adc	r23, r23
     e7a:	88 1f       	adc	r24, r24
     e7c:	bb 1f       	adc	r27, r27
     e7e:	26 17       	cp	r18, r22
     e80:	37 07       	cpc	r19, r23
     e82:	48 07       	cpc	r20, r24
     e84:	ab 07       	cpc	r26, r27
     e86:	b0 e8       	ldi	r27, 0x80	; 128
     e88:	09 f0       	breq	.+2      	; 0xe8c <__divsf3_pse+0x56>
     e8a:	bb 0b       	sbc	r27, r27
     e8c:	80 2d       	mov	r24, r0
     e8e:	bf 01       	movw	r22, r30
     e90:	ff 27       	eor	r31, r31
     e92:	93 58       	subi	r25, 0x83	; 131
     e94:	5f 4f       	sbci	r21, 0xFF	; 255
     e96:	3a f0       	brmi	.+14     	; 0xea6 <__divsf3_pse+0x70>
     e98:	9e 3f       	cpi	r25, 0xFE	; 254
     e9a:	51 05       	cpc	r21, r1
     e9c:	78 f0       	brcs	.+30     	; 0xebc <__divsf3_pse+0x86>
     e9e:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_inf>
     ea2:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_szero>
     ea6:	5f 3f       	cpi	r21, 0xFF	; 255
     ea8:	e4 f3       	brlt	.-8      	; 0xea2 <__divsf3_pse+0x6c>
     eaa:	98 3e       	cpi	r25, 0xE8	; 232
     eac:	d4 f3       	brlt	.-12     	; 0xea2 <__divsf3_pse+0x6c>
     eae:	86 95       	lsr	r24
     eb0:	77 95       	ror	r23
     eb2:	67 95       	ror	r22
     eb4:	b7 95       	ror	r27
     eb6:	f7 95       	ror	r31
     eb8:	9f 5f       	subi	r25, 0xFF	; 255
     eba:	c9 f7       	brne	.-14     	; 0xeae <__divsf3_pse+0x78>
     ebc:	88 0f       	add	r24, r24
     ebe:	91 1d       	adc	r25, r1
     ec0:	96 95       	lsr	r25
     ec2:	87 95       	ror	r24
     ec4:	97 f9       	bld	r25, 7
     ec6:	08 95       	ret
     ec8:	e1 e0       	ldi	r30, 0x01	; 1
     eca:	66 0f       	add	r22, r22
     ecc:	77 1f       	adc	r23, r23
     ece:	88 1f       	adc	r24, r24
     ed0:	bb 1f       	adc	r27, r27
     ed2:	62 17       	cp	r22, r18
     ed4:	73 07       	cpc	r23, r19
     ed6:	84 07       	cpc	r24, r20
     ed8:	ba 07       	cpc	r27, r26
     eda:	20 f0       	brcs	.+8      	; 0xee4 <__divsf3_pse+0xae>
     edc:	62 1b       	sub	r22, r18
     ede:	73 0b       	sbc	r23, r19
     ee0:	84 0b       	sbc	r24, r20
     ee2:	ba 0b       	sbc	r27, r26
     ee4:	ee 1f       	adc	r30, r30
     ee6:	88 f7       	brcc	.-30     	; 0xeca <__divsf3_pse+0x94>
     ee8:	e0 95       	com	r30
     eea:	08 95       	ret

00000eec <__fixsfsi>:
     eec:	0e 94 7d 07 	call	0xefa	; 0xefa <__fixunssfsi>
     ef0:	68 94       	set
     ef2:	b1 11       	cpse	r27, r1
     ef4:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_szero>
     ef8:	08 95       	ret

00000efa <__fixunssfsi>:
     efa:	0e 94 19 08 	call	0x1032	; 0x1032 <__fp_splitA>
     efe:	88 f0       	brcs	.+34     	; 0xf22 <__fixunssfsi+0x28>
     f00:	9f 57       	subi	r25, 0x7F	; 127
     f02:	98 f0       	brcs	.+38     	; 0xf2a <__fixunssfsi+0x30>
     f04:	b9 2f       	mov	r27, r25
     f06:	99 27       	eor	r25, r25
     f08:	b7 51       	subi	r27, 0x17	; 23
     f0a:	b0 f0       	brcs	.+44     	; 0xf38 <__fixunssfsi+0x3e>
     f0c:	e1 f0       	breq	.+56     	; 0xf46 <__fixunssfsi+0x4c>
     f0e:	66 0f       	add	r22, r22
     f10:	77 1f       	adc	r23, r23
     f12:	88 1f       	adc	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	1a f0       	brmi	.+6      	; 0xf1e <__fixunssfsi+0x24>
     f18:	ba 95       	dec	r27
     f1a:	c9 f7       	brne	.-14     	; 0xf0e <__fixunssfsi+0x14>
     f1c:	14 c0       	rjmp	.+40     	; 0xf46 <__fixunssfsi+0x4c>
     f1e:	b1 30       	cpi	r27, 0x01	; 1
     f20:	91 f0       	breq	.+36     	; 0xf46 <__fixunssfsi+0x4c>
     f22:	0e 94 33 08 	call	0x1066	; 0x1066 <__fp_zero>
     f26:	b1 e0       	ldi	r27, 0x01	; 1
     f28:	08 95       	ret
     f2a:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__fp_zero>
     f2e:	67 2f       	mov	r22, r23
     f30:	78 2f       	mov	r23, r24
     f32:	88 27       	eor	r24, r24
     f34:	b8 5f       	subi	r27, 0xF8	; 248
     f36:	39 f0       	breq	.+14     	; 0xf46 <__fixunssfsi+0x4c>
     f38:	b9 3f       	cpi	r27, 0xF9	; 249
     f3a:	cc f3       	brlt	.-14     	; 0xf2e <__fixunssfsi+0x34>
     f3c:	86 95       	lsr	r24
     f3e:	77 95       	ror	r23
     f40:	67 95       	ror	r22
     f42:	b3 95       	inc	r27
     f44:	d9 f7       	brne	.-10     	; 0xf3c <__fixunssfsi+0x42>
     f46:	3e f4       	brtc	.+14     	; 0xf56 <__fixunssfsi+0x5c>
     f48:	90 95       	com	r25
     f4a:	80 95       	com	r24
     f4c:	70 95       	com	r23
     f4e:	61 95       	neg	r22
     f50:	7f 4f       	sbci	r23, 0xFF	; 255
     f52:	8f 4f       	sbci	r24, 0xFF	; 255
     f54:	9f 4f       	sbci	r25, 0xFF	; 255
     f56:	08 95       	ret

00000f58 <__floatunsisf>:
     f58:	e8 94       	clt
     f5a:	09 c0       	rjmp	.+18     	; 0xf6e <__floatsisf+0x12>

00000f5c <__floatsisf>:
     f5c:	97 fb       	bst	r25, 7
     f5e:	3e f4       	brtc	.+14     	; 0xf6e <__floatsisf+0x12>
     f60:	90 95       	com	r25
     f62:	80 95       	com	r24
     f64:	70 95       	com	r23
     f66:	61 95       	neg	r22
     f68:	7f 4f       	sbci	r23, 0xFF	; 255
     f6a:	8f 4f       	sbci	r24, 0xFF	; 255
     f6c:	9f 4f       	sbci	r25, 0xFF	; 255
     f6e:	99 23       	and	r25, r25
     f70:	a9 f0       	breq	.+42     	; 0xf9c <__floatsisf+0x40>
     f72:	f9 2f       	mov	r31, r25
     f74:	96 e9       	ldi	r25, 0x96	; 150
     f76:	bb 27       	eor	r27, r27
     f78:	93 95       	inc	r25
     f7a:	f6 95       	lsr	r31
     f7c:	87 95       	ror	r24
     f7e:	77 95       	ror	r23
     f80:	67 95       	ror	r22
     f82:	b7 95       	ror	r27
     f84:	f1 11       	cpse	r31, r1
     f86:	f8 cf       	rjmp	.-16     	; 0xf78 <__floatsisf+0x1c>
     f88:	fa f4       	brpl	.+62     	; 0xfc8 <__floatsisf+0x6c>
     f8a:	bb 0f       	add	r27, r27
     f8c:	11 f4       	brne	.+4      	; 0xf92 <__floatsisf+0x36>
     f8e:	60 ff       	sbrs	r22, 0
     f90:	1b c0       	rjmp	.+54     	; 0xfc8 <__floatsisf+0x6c>
     f92:	6f 5f       	subi	r22, 0xFF	; 255
     f94:	7f 4f       	sbci	r23, 0xFF	; 255
     f96:	8f 4f       	sbci	r24, 0xFF	; 255
     f98:	9f 4f       	sbci	r25, 0xFF	; 255
     f9a:	16 c0       	rjmp	.+44     	; 0xfc8 <__floatsisf+0x6c>
     f9c:	88 23       	and	r24, r24
     f9e:	11 f0       	breq	.+4      	; 0xfa4 <__floatsisf+0x48>
     fa0:	96 e9       	ldi	r25, 0x96	; 150
     fa2:	11 c0       	rjmp	.+34     	; 0xfc6 <__floatsisf+0x6a>
     fa4:	77 23       	and	r23, r23
     fa6:	21 f0       	breq	.+8      	; 0xfb0 <__floatsisf+0x54>
     fa8:	9e e8       	ldi	r25, 0x8E	; 142
     faa:	87 2f       	mov	r24, r23
     fac:	76 2f       	mov	r23, r22
     fae:	05 c0       	rjmp	.+10     	; 0xfba <__floatsisf+0x5e>
     fb0:	66 23       	and	r22, r22
     fb2:	71 f0       	breq	.+28     	; 0xfd0 <__floatsisf+0x74>
     fb4:	96 e8       	ldi	r25, 0x86	; 134
     fb6:	86 2f       	mov	r24, r22
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	60 e0       	ldi	r22, 0x00	; 0
     fbc:	2a f0       	brmi	.+10     	; 0xfc8 <__floatsisf+0x6c>
     fbe:	9a 95       	dec	r25
     fc0:	66 0f       	add	r22, r22
     fc2:	77 1f       	adc	r23, r23
     fc4:	88 1f       	adc	r24, r24
     fc6:	da f7       	brpl	.-10     	; 0xfbe <__floatsisf+0x62>
     fc8:	88 0f       	add	r24, r24
     fca:	96 95       	lsr	r25
     fcc:	87 95       	ror	r24
     fce:	97 f9       	bld	r25, 7
     fd0:	08 95       	ret

00000fd2 <__fp_inf>:
     fd2:	97 f9       	bld	r25, 7
     fd4:	9f 67       	ori	r25, 0x7F	; 127
     fd6:	80 e8       	ldi	r24, 0x80	; 128
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	08 95       	ret

00000fde <__fp_nan>:
     fde:	9f ef       	ldi	r25, 0xFF	; 255
     fe0:	80 ec       	ldi	r24, 0xC0	; 192
     fe2:	08 95       	ret

00000fe4 <__fp_pscA>:
     fe4:	00 24       	eor	r0, r0
     fe6:	0a 94       	dec	r0
     fe8:	16 16       	cp	r1, r22
     fea:	17 06       	cpc	r1, r23
     fec:	18 06       	cpc	r1, r24
     fee:	09 06       	cpc	r0, r25
     ff0:	08 95       	ret

00000ff2 <__fp_pscB>:
     ff2:	00 24       	eor	r0, r0
     ff4:	0a 94       	dec	r0
     ff6:	12 16       	cp	r1, r18
     ff8:	13 06       	cpc	r1, r19
     ffa:	14 06       	cpc	r1, r20
     ffc:	05 06       	cpc	r0, r21
     ffe:	08 95       	ret

00001000 <__fp_round>:
    1000:	09 2e       	mov	r0, r25
    1002:	03 94       	inc	r0
    1004:	00 0c       	add	r0, r0
    1006:	11 f4       	brne	.+4      	; 0x100c <__fp_round+0xc>
    1008:	88 23       	and	r24, r24
    100a:	52 f0       	brmi	.+20     	; 0x1020 <__fp_round+0x20>
    100c:	bb 0f       	add	r27, r27
    100e:	40 f4       	brcc	.+16     	; 0x1020 <__fp_round+0x20>
    1010:	bf 2b       	or	r27, r31
    1012:	11 f4       	brne	.+4      	; 0x1018 <__fp_round+0x18>
    1014:	60 ff       	sbrs	r22, 0
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <__fp_round+0x20>
    1018:	6f 5f       	subi	r22, 0xFF	; 255
    101a:	7f 4f       	sbci	r23, 0xFF	; 255
    101c:	8f 4f       	sbci	r24, 0xFF	; 255
    101e:	9f 4f       	sbci	r25, 0xFF	; 255
    1020:	08 95       	ret

00001022 <__fp_split3>:
    1022:	57 fd       	sbrc	r21, 7
    1024:	90 58       	subi	r25, 0x80	; 128
    1026:	44 0f       	add	r20, r20
    1028:	55 1f       	adc	r21, r21
    102a:	59 f0       	breq	.+22     	; 0x1042 <__fp_splitA+0x10>
    102c:	5f 3f       	cpi	r21, 0xFF	; 255
    102e:	71 f0       	breq	.+28     	; 0x104c <__fp_splitA+0x1a>
    1030:	47 95       	ror	r20

00001032 <__fp_splitA>:
    1032:	88 0f       	add	r24, r24
    1034:	97 fb       	bst	r25, 7
    1036:	99 1f       	adc	r25, r25
    1038:	61 f0       	breq	.+24     	; 0x1052 <__fp_splitA+0x20>
    103a:	9f 3f       	cpi	r25, 0xFF	; 255
    103c:	79 f0       	breq	.+30     	; 0x105c <__fp_splitA+0x2a>
    103e:	87 95       	ror	r24
    1040:	08 95       	ret
    1042:	12 16       	cp	r1, r18
    1044:	13 06       	cpc	r1, r19
    1046:	14 06       	cpc	r1, r20
    1048:	55 1f       	adc	r21, r21
    104a:	f2 cf       	rjmp	.-28     	; 0x1030 <__fp_split3+0xe>
    104c:	46 95       	lsr	r20
    104e:	f1 df       	rcall	.-30     	; 0x1032 <__fp_splitA>
    1050:	08 c0       	rjmp	.+16     	; 0x1062 <__fp_splitA+0x30>
    1052:	16 16       	cp	r1, r22
    1054:	17 06       	cpc	r1, r23
    1056:	18 06       	cpc	r1, r24
    1058:	99 1f       	adc	r25, r25
    105a:	f1 cf       	rjmp	.-30     	; 0x103e <__fp_splitA+0xc>
    105c:	86 95       	lsr	r24
    105e:	71 05       	cpc	r23, r1
    1060:	61 05       	cpc	r22, r1
    1062:	08 94       	sec
    1064:	08 95       	ret

00001066 <__fp_zero>:
    1066:	e8 94       	clt

00001068 <__fp_szero>:
    1068:	bb 27       	eor	r27, r27
    106a:	66 27       	eor	r22, r22
    106c:	77 27       	eor	r23, r23
    106e:	cb 01       	movw	r24, r22
    1070:	97 f9       	bld	r25, 7
    1072:	08 95       	ret

00001074 <__gesf2>:
    1074:	0e 94 ac 08 	call	0x1158	; 0x1158 <__fp_cmp>
    1078:	08 f4       	brcc	.+2      	; 0x107c <__gesf2+0x8>
    107a:	8f ef       	ldi	r24, 0xFF	; 255
    107c:	08 95       	ret

0000107e <__mulsf3>:
    107e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__mulsf3x>
    1082:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__fp_round>
    1086:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__fp_pscA>
    108a:	38 f0       	brcs	.+14     	; 0x109a <__mulsf3+0x1c>
    108c:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_pscB>
    1090:	20 f0       	brcs	.+8      	; 0x109a <__mulsf3+0x1c>
    1092:	95 23       	and	r25, r21
    1094:	11 f0       	breq	.+4      	; 0x109a <__mulsf3+0x1c>
    1096:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_inf>
    109a:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__fp_nan>
    109e:	11 24       	eor	r1, r1
    10a0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_szero>

000010a4 <__mulsf3x>:
    10a4:	0e 94 11 08 	call	0x1022	; 0x1022 <__fp_split3>
    10a8:	70 f3       	brcs	.-36     	; 0x1086 <__mulsf3+0x8>

000010aa <__mulsf3_pse>:
    10aa:	95 9f       	mul	r25, r21
    10ac:	c1 f3       	breq	.-16     	; 0x109e <__mulsf3+0x20>
    10ae:	95 0f       	add	r25, r21
    10b0:	50 e0       	ldi	r21, 0x00	; 0
    10b2:	55 1f       	adc	r21, r21
    10b4:	62 9f       	mul	r22, r18
    10b6:	f0 01       	movw	r30, r0
    10b8:	72 9f       	mul	r23, r18
    10ba:	bb 27       	eor	r27, r27
    10bc:	f0 0d       	add	r31, r0
    10be:	b1 1d       	adc	r27, r1
    10c0:	63 9f       	mul	r22, r19
    10c2:	aa 27       	eor	r26, r26
    10c4:	f0 0d       	add	r31, r0
    10c6:	b1 1d       	adc	r27, r1
    10c8:	aa 1f       	adc	r26, r26
    10ca:	64 9f       	mul	r22, r20
    10cc:	66 27       	eor	r22, r22
    10ce:	b0 0d       	add	r27, r0
    10d0:	a1 1d       	adc	r26, r1
    10d2:	66 1f       	adc	r22, r22
    10d4:	82 9f       	mul	r24, r18
    10d6:	22 27       	eor	r18, r18
    10d8:	b0 0d       	add	r27, r0
    10da:	a1 1d       	adc	r26, r1
    10dc:	62 1f       	adc	r22, r18
    10de:	73 9f       	mul	r23, r19
    10e0:	b0 0d       	add	r27, r0
    10e2:	a1 1d       	adc	r26, r1
    10e4:	62 1f       	adc	r22, r18
    10e6:	83 9f       	mul	r24, r19
    10e8:	a0 0d       	add	r26, r0
    10ea:	61 1d       	adc	r22, r1
    10ec:	22 1f       	adc	r18, r18
    10ee:	74 9f       	mul	r23, r20
    10f0:	33 27       	eor	r19, r19
    10f2:	a0 0d       	add	r26, r0
    10f4:	61 1d       	adc	r22, r1
    10f6:	23 1f       	adc	r18, r19
    10f8:	84 9f       	mul	r24, r20
    10fa:	60 0d       	add	r22, r0
    10fc:	21 1d       	adc	r18, r1
    10fe:	82 2f       	mov	r24, r18
    1100:	76 2f       	mov	r23, r22
    1102:	6a 2f       	mov	r22, r26
    1104:	11 24       	eor	r1, r1
    1106:	9f 57       	subi	r25, 0x7F	; 127
    1108:	50 40       	sbci	r21, 0x00	; 0
    110a:	9a f0       	brmi	.+38     	; 0x1132 <__mulsf3_pse+0x88>
    110c:	f1 f0       	breq	.+60     	; 0x114a <__mulsf3_pse+0xa0>
    110e:	88 23       	and	r24, r24
    1110:	4a f0       	brmi	.+18     	; 0x1124 <__mulsf3_pse+0x7a>
    1112:	ee 0f       	add	r30, r30
    1114:	ff 1f       	adc	r31, r31
    1116:	bb 1f       	adc	r27, r27
    1118:	66 1f       	adc	r22, r22
    111a:	77 1f       	adc	r23, r23
    111c:	88 1f       	adc	r24, r24
    111e:	91 50       	subi	r25, 0x01	; 1
    1120:	50 40       	sbci	r21, 0x00	; 0
    1122:	a9 f7       	brne	.-22     	; 0x110e <__mulsf3_pse+0x64>
    1124:	9e 3f       	cpi	r25, 0xFE	; 254
    1126:	51 05       	cpc	r21, r1
    1128:	80 f0       	brcs	.+32     	; 0x114a <__mulsf3_pse+0xa0>
    112a:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_inf>
    112e:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_szero>
    1132:	5f 3f       	cpi	r21, 0xFF	; 255
    1134:	e4 f3       	brlt	.-8      	; 0x112e <__mulsf3_pse+0x84>
    1136:	98 3e       	cpi	r25, 0xE8	; 232
    1138:	d4 f3       	brlt	.-12     	; 0x112e <__mulsf3_pse+0x84>
    113a:	86 95       	lsr	r24
    113c:	77 95       	ror	r23
    113e:	67 95       	ror	r22
    1140:	b7 95       	ror	r27
    1142:	f7 95       	ror	r31
    1144:	e7 95       	ror	r30
    1146:	9f 5f       	subi	r25, 0xFF	; 255
    1148:	c1 f7       	brne	.-16     	; 0x113a <__mulsf3_pse+0x90>
    114a:	fe 2b       	or	r31, r30
    114c:	88 0f       	add	r24, r24
    114e:	91 1d       	adc	r25, r1
    1150:	96 95       	lsr	r25
    1152:	87 95       	ror	r24
    1154:	97 f9       	bld	r25, 7
    1156:	08 95       	ret

00001158 <__fp_cmp>:
    1158:	99 0f       	add	r25, r25
    115a:	00 08       	sbc	r0, r0
    115c:	55 0f       	add	r21, r21
    115e:	aa 0b       	sbc	r26, r26
    1160:	e0 e8       	ldi	r30, 0x80	; 128
    1162:	fe ef       	ldi	r31, 0xFE	; 254
    1164:	16 16       	cp	r1, r22
    1166:	17 06       	cpc	r1, r23
    1168:	e8 07       	cpc	r30, r24
    116a:	f9 07       	cpc	r31, r25
    116c:	c0 f0       	brcs	.+48     	; 0x119e <__fp_cmp+0x46>
    116e:	12 16       	cp	r1, r18
    1170:	13 06       	cpc	r1, r19
    1172:	e4 07       	cpc	r30, r20
    1174:	f5 07       	cpc	r31, r21
    1176:	98 f0       	brcs	.+38     	; 0x119e <__fp_cmp+0x46>
    1178:	62 1b       	sub	r22, r18
    117a:	73 0b       	sbc	r23, r19
    117c:	84 0b       	sbc	r24, r20
    117e:	95 0b       	sbc	r25, r21
    1180:	39 f4       	brne	.+14     	; 0x1190 <__fp_cmp+0x38>
    1182:	0a 26       	eor	r0, r26
    1184:	61 f0       	breq	.+24     	; 0x119e <__fp_cmp+0x46>
    1186:	23 2b       	or	r18, r19
    1188:	24 2b       	or	r18, r20
    118a:	25 2b       	or	r18, r21
    118c:	21 f4       	brne	.+8      	; 0x1196 <__fp_cmp+0x3e>
    118e:	08 95       	ret
    1190:	0a 26       	eor	r0, r26
    1192:	09 f4       	brne	.+2      	; 0x1196 <__fp_cmp+0x3e>
    1194:	a1 40       	sbci	r26, 0x01	; 1
    1196:	a6 95       	lsr	r26
    1198:	8f ef       	ldi	r24, 0xFF	; 255
    119a:	81 1d       	adc	r24, r1
    119c:	81 1d       	adc	r24, r1
    119e:	08 95       	ret

000011a0 <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	08 95       	ret

000011a6 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    11a6:	1f 92       	push	r1
    11a8:	0f 92       	push	r0
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	0f 92       	push	r0
    11ae:	11 24       	eor	r1, r1
    11b0:	2f 93       	push	r18
    11b2:	8f 93       	push	r24
    11b4:	9f 93       	push	r25
    11b6:	ef 93       	push	r30
    11b8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    11ba:	e0 91 85 03 	lds	r30, 0x0385	; 0x800385 <Serial+0x10>
    11be:	f0 91 86 03 	lds	r31, 0x0386	; 0x800386 <Serial+0x11>
    11c2:	80 81       	ld	r24, Z
    11c4:	e0 91 8b 03 	lds	r30, 0x038B	; 0x80038b <Serial+0x16>
    11c8:	f0 91 8c 03 	lds	r31, 0x038C	; 0x80038c <Serial+0x17>
    11cc:	82 fd       	sbrc	r24, 2
    11ce:	12 c0       	rjmp	.+36     	; 0x11f4 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    11d0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    11d2:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <Serial+0x19>
    11d6:	8f 5f       	subi	r24, 0xFF	; 255
    11d8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    11da:	20 91 8f 03 	lds	r18, 0x038F	; 0x80038f <Serial+0x1a>
    11de:	82 17       	cp	r24, r18
    11e0:	51 f0       	breq	.+20     	; 0x11f6 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    11e2:	e0 91 8e 03 	lds	r30, 0x038E	; 0x80038e <Serial+0x19>
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	eb 58       	subi	r30, 0x8B	; 139
    11ea:	fc 4f       	sbci	r31, 0xFC	; 252
    11ec:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    11ee:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <Serial+0x19>
    11f2:	01 c0       	rjmp	.+2      	; 0x11f6 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    11f4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    11f6:	ff 91       	pop	r31
    11f8:	ef 91       	pop	r30
    11fa:	9f 91       	pop	r25
    11fc:	8f 91       	pop	r24
    11fe:	2f 91       	pop	r18
    1200:	0f 90       	pop	r0
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	0f 90       	pop	r0
    1206:	1f 90       	pop	r1
    1208:	18 95       	reti

0000120a <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    120a:	1f 92       	push	r1
    120c:	0f 92       	push	r0
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	0f 92       	push	r0
    1212:	11 24       	eor	r1, r1
    1214:	2f 93       	push	r18
    1216:	3f 93       	push	r19
    1218:	4f 93       	push	r20
    121a:	5f 93       	push	r21
    121c:	6f 93       	push	r22
    121e:	7f 93       	push	r23
    1220:	8f 93       	push	r24
    1222:	9f 93       	push	r25
    1224:	af 93       	push	r26
    1226:	bf 93       	push	r27
    1228:	ef 93       	push	r30
    122a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    122c:	85 e7       	ldi	r24, 0x75	; 117
    122e:	93 e0       	ldi	r25, 0x03	; 3
    1230:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1234:	ff 91       	pop	r31
    1236:	ef 91       	pop	r30
    1238:	bf 91       	pop	r27
    123a:	af 91       	pop	r26
    123c:	9f 91       	pop	r25
    123e:	8f 91       	pop	r24
    1240:	7f 91       	pop	r23
    1242:	6f 91       	pop	r22
    1244:	5f 91       	pop	r21
    1246:	4f 91       	pop	r20
    1248:	3f 91       	pop	r19
    124a:	2f 91       	pop	r18
    124c:	0f 90       	pop	r0
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	0f 90       	pop	r0
    1252:	1f 90       	pop	r1
    1254:	18 95       	reti

00001256 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1256:	85 e7       	ldi	r24, 0x75	; 117
    1258:	93 e0       	ldi	r25, 0x03	; 3
    125a:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <_ZN14HardwareSerial9availableEv>
    125e:	21 e0       	ldi	r18, 0x01	; 1
    1260:	89 2b       	or	r24, r25
    1262:	09 f4       	brne	.+2      	; 0x1266 <_Z17Serial0_availablev+0x10>
    1264:	20 e0       	ldi	r18, 0x00	; 0
}
    1266:	82 2f       	mov	r24, r18
    1268:	08 95       	ret

0000126a <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    126a:	e5 e7       	ldi	r30, 0x75	; 117
    126c:	f3 e0       	ldi	r31, 0x03	; 3
    126e:	13 82       	std	Z+3, r1	; 0x03
    1270:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1272:	88 ee       	ldi	r24, 0xE8	; 232
    1274:	93 e0       	ldi	r25, 0x03	; 3
    1276:	a0 e0       	ldi	r26, 0x00	; 0
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	84 83       	std	Z+4, r24	; 0x04
    127c:	95 83       	std	Z+5, r25	; 0x05
    127e:	a6 83       	std	Z+6, r26	; 0x06
    1280:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1282:	8b e3       	ldi	r24, 0x3B	; 59
    1284:	92 e0       	ldi	r25, 0x02	; 2
    1286:	91 83       	std	Z+1, r25	; 0x01
    1288:	80 83       	st	Z, r24
    128a:	85 ec       	ldi	r24, 0xC5	; 197
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	95 87       	std	Z+13, r25	; 0x0d
    1290:	84 87       	std	Z+12, r24	; 0x0c
    1292:	84 ec       	ldi	r24, 0xC4	; 196
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	97 87       	std	Z+15, r25	; 0x0f
    1298:	86 87       	std	Z+14, r24	; 0x0e
    129a:	80 ec       	ldi	r24, 0xC0	; 192
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	91 8b       	std	Z+17, r25	; 0x11
    12a0:	80 8b       	std	Z+16, r24	; 0x10
    12a2:	81 ec       	ldi	r24, 0xC1	; 193
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	93 8b       	std	Z+19, r25	; 0x13
    12a8:	82 8b       	std	Z+18, r24	; 0x12
    12aa:	82 ec       	ldi	r24, 0xC2	; 194
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	95 8b       	std	Z+21, r25	; 0x15
    12b0:	84 8b       	std	Z+20, r24	; 0x14
    12b2:	86 ec       	ldi	r24, 0xC6	; 198
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	97 8b       	std	Z+23, r25	; 0x17
    12b8:	86 8b       	std	Z+22, r24	; 0x16
    12ba:	11 8e       	std	Z+25, r1	; 0x19
    12bc:	12 8e       	std	Z+26, r1	; 0x1a
    12be:	13 8e       	std	Z+27, r1	; 0x1b
    12c0:	14 8e       	std	Z+28, r1	; 0x1c
    12c2:	08 95       	ret

000012c4 <initVariant>:
    12c4:	08 95       	ret

000012c6 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    12c6:	0e 94 44 0c 	call	0x1888	; 0x1888 <init>

	initVariant();
    12ca:	0e 94 62 09 	call	0x12c4	; 0x12c4 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    12ce:	0e 94 b9 04 	call	0x972	; 0x972 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    12d2:	cf eb       	ldi	r28, 0xBF	; 191
    12d4:	de e0       	ldi	r29, 0x0E	; 14
#endif
	
	setup();
    
	for (;;) {
		loop();
    12d6:	0e 94 6a 05 	call	0xad4	; 0xad4 <loop>
		if (serialEventRun) serialEventRun();
    12da:	20 97       	sbiw	r28, 0x00	; 0
    12dc:	e1 f3       	breq	.-8      	; 0x12d6 <main+0x10>
    12de:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <_Z14serialEventRunv>
    12e2:	f9 cf       	rjmp	.-14     	; 0x12d6 <main+0x10>

000012e4 <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    12e4:	cf 92       	push	r12
    12e6:	df 92       	push	r13
    12e8:	ef 92       	push	r14
    12ea:	ff 92       	push	r15
    12ec:	0f 93       	push	r16
    12ee:	1f 93       	push	r17
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	6c 01       	movw	r12, r24
    12f6:	7a 01       	movw	r14, r20
    12f8:	8b 01       	movw	r16, r22
    12fa:	c0 e0       	ldi	r28, 0x00	; 0
    12fc:	d0 e0       	ldi	r29, 0x00	; 0
    12fe:	ce 15       	cp	r28, r14
    1300:	df 05       	cpc	r29, r15
    1302:	81 f0       	breq	.+32     	; 0x1324 <_ZN5Print5writeEPKhj+0x40>
    1304:	d8 01       	movw	r26, r16
    1306:	6d 91       	ld	r22, X+
    1308:	8d 01       	movw	r16, r26
    130a:	d6 01       	movw	r26, r12
    130c:	ed 91       	ld	r30, X+
    130e:	fc 91       	ld	r31, X
    1310:	01 90       	ld	r0, Z+
    1312:	f0 81       	ld	r31, Z
    1314:	e0 2d       	mov	r30, r0
    1316:	c6 01       	movw	r24, r12
    1318:	09 95       	icall
    131a:	89 2b       	or	r24, r25
    131c:	11 f0       	breq	.+4      	; 0x1322 <_ZN5Print5writeEPKhj+0x3e>
    131e:	21 96       	adiw	r28, 0x01	; 1
    1320:	ee cf       	rjmp	.-36     	; 0x12fe <_ZN5Print5writeEPKhj+0x1a>
    1322:	7e 01       	movw	r14, r28
    1324:	c7 01       	movw	r24, r14
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	1f 91       	pop	r17
    132c:	0f 91       	pop	r16
    132e:	ff 90       	pop	r15
    1330:	ef 90       	pop	r14
    1332:	df 90       	pop	r13
    1334:	cf 90       	pop	r12
    1336:	08 95       	ret

00001338 <_ZN5Print5writeEPKc>:
    1338:	61 15       	cp	r22, r1
    133a:	71 05       	cpc	r23, r1
    133c:	79 f0       	breq	.+30     	; 0x135c <_ZN5Print5writeEPKc+0x24>
    133e:	fb 01       	movw	r30, r22
    1340:	01 90       	ld	r0, Z+
    1342:	00 20       	and	r0, r0
    1344:	e9 f7       	brne	.-6      	; 0x1340 <_ZN5Print5writeEPKc+0x8>
    1346:	31 97       	sbiw	r30, 0x01	; 1
    1348:	af 01       	movw	r20, r30
    134a:	46 1b       	sub	r20, r22
    134c:	57 0b       	sbc	r21, r23
    134e:	dc 01       	movw	r26, r24
    1350:	ed 91       	ld	r30, X+
    1352:	fc 91       	ld	r31, X
    1354:	02 80       	ldd	r0, Z+2	; 0x02
    1356:	f3 81       	ldd	r31, Z+3	; 0x03
    1358:	e0 2d       	mov	r30, r0
    135a:	09 94       	ijmp
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	08 95       	ret

00001362 <_ZN5Print5printEPK19__FlashStringHelper>:
    1362:	ef 92       	push	r14
    1364:	ff 92       	push	r15
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	8c 01       	movw	r16, r24
    1370:	7b 01       	movw	r14, r22
    1372:	c0 e0       	ldi	r28, 0x00	; 0
    1374:	d0 e0       	ldi	r29, 0x00	; 0
    1376:	f7 01       	movw	r30, r14
    1378:	ec 0f       	add	r30, r28
    137a:	fd 1f       	adc	r31, r29
    137c:	64 91       	lpm	r22, Z
    137e:	66 23       	and	r22, r22
    1380:	61 f0       	breq	.+24     	; 0x139a <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1382:	d8 01       	movw	r26, r16
    1384:	ed 91       	ld	r30, X+
    1386:	fc 91       	ld	r31, X
    1388:	01 90       	ld	r0, Z+
    138a:	f0 81       	ld	r31, Z
    138c:	e0 2d       	mov	r30, r0
    138e:	c8 01       	movw	r24, r16
    1390:	09 95       	icall
    1392:	89 2b       	or	r24, r25
    1394:	11 f0       	breq	.+4      	; 0x139a <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1396:	21 96       	adiw	r28, 0x01	; 1
    1398:	ee cf       	rjmp	.-36     	; 0x1376 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    139a:	ce 01       	movw	r24, r28
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	1f 91       	pop	r17
    13a2:	0f 91       	pop	r16
    13a4:	ff 90       	pop	r15
    13a6:	ef 90       	pop	r14
    13a8:	08 95       	ret

000013aa <_ZN5Print5printEPKc>:
    13aa:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <_ZN5Print5writeEPKc>

000013ae <_ZN5Print5printEc>:
    13ae:	dc 01       	movw	r26, r24
    13b0:	ed 91       	ld	r30, X+
    13b2:	fc 91       	ld	r31, X
    13b4:	01 90       	ld	r0, Z+
    13b6:	f0 81       	ld	r31, Z
    13b8:	e0 2d       	mov	r30, r0
    13ba:	09 94       	ijmp

000013bc <_ZN5Print7printlnEv>:
    13bc:	66 e1       	ldi	r22, 0x16	; 22
    13be:	72 e0       	ldi	r23, 0x02	; 2
    13c0:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <_ZN5Print5writeEPKc>

000013c4 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	ec 01       	movw	r28, r24
    13ce:	0e 94 b1 09 	call	0x1362	; 0x1362 <_ZN5Print5printEPK19__FlashStringHelper>
    13d2:	8c 01       	movw	r16, r24
    13d4:	ce 01       	movw	r24, r28
    13d6:	0e 94 de 09 	call	0x13bc	; 0x13bc <_ZN5Print7printlnEv>
    13da:	80 0f       	add	r24, r16
    13dc:	91 1f       	adc	r25, r17
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	08 95       	ret

000013e8 <_ZN5Print7printlnEPKc>:
    13e8:	0f 93       	push	r16
    13ea:	1f 93       	push	r17
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	ec 01       	movw	r28, r24
    13f2:	0e 94 9c 09 	call	0x1338	; 0x1338 <_ZN5Print5writeEPKc>
    13f6:	8c 01       	movw	r16, r24
    13f8:	ce 01       	movw	r24, r28
    13fa:	0e 94 de 09 	call	0x13bc	; 0x13bc <_ZN5Print7printlnEv>
    13fe:	80 0f       	add	r24, r16
    1400:	91 1f       	adc	r25, r17
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	1f 91       	pop	r17
    1408:	0f 91       	pop	r16
    140a:	08 95       	ret

0000140c <_ZN5Print11printNumberEmh>:
    140c:	8f 92       	push	r8
    140e:	9f 92       	push	r9
    1410:	af 92       	push	r10
    1412:	bf 92       	push	r11
    1414:	ef 92       	push	r14
    1416:	ff 92       	push	r15
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	a1 97       	sbiw	r28, 0x21	; 33
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	7c 01       	movw	r14, r24
    1432:	fa 01       	movw	r30, r20
    1434:	cb 01       	movw	r24, r22
    1436:	19 a2       	std	Y+33, r1	; 0x21
    1438:	22 30       	cpi	r18, 0x02	; 2
    143a:	08 f4       	brcc	.+2      	; 0x143e <_ZN5Print11printNumberEmh+0x32>
    143c:	2a e0       	ldi	r18, 0x0A	; 10
    143e:	8e 01       	movw	r16, r28
    1440:	0f 5d       	subi	r16, 0xDF	; 223
    1442:	1f 4f       	sbci	r17, 0xFF	; 255
    1444:	82 2e       	mov	r8, r18
    1446:	91 2c       	mov	r9, r1
    1448:	a1 2c       	mov	r10, r1
    144a:	b1 2c       	mov	r11, r1
    144c:	bf 01       	movw	r22, r30
    144e:	a5 01       	movw	r20, r10
    1450:	94 01       	movw	r18, r8
    1452:	0e 94 33 13 	call	0x2666	; 0x2666 <__udivmodsi4>
    1456:	f9 01       	movw	r30, r18
    1458:	ca 01       	movw	r24, r20
    145a:	01 50       	subi	r16, 0x01	; 1
    145c:	11 09       	sbc	r17, r1
    145e:	6a 30       	cpi	r22, 0x0A	; 10
    1460:	10 f4       	brcc	.+4      	; 0x1466 <_ZN5Print11printNumberEmh+0x5a>
    1462:	60 5d       	subi	r22, 0xD0	; 208
    1464:	01 c0       	rjmp	.+2      	; 0x1468 <_ZN5Print11printNumberEmh+0x5c>
    1466:	69 5c       	subi	r22, 0xC9	; 201
    1468:	d8 01       	movw	r26, r16
    146a:	6c 93       	st	X, r22
    146c:	23 2b       	or	r18, r19
    146e:	24 2b       	or	r18, r20
    1470:	25 2b       	or	r18, r21
    1472:	61 f7       	brne	.-40     	; 0x144c <_ZN5Print11printNumberEmh+0x40>
    1474:	b8 01       	movw	r22, r16
    1476:	c7 01       	movw	r24, r14
    1478:	0e 94 9c 09 	call	0x1338	; 0x1338 <_ZN5Print5writeEPKc>
    147c:	a1 96       	adiw	r28, 0x21	; 33
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	ff 90       	pop	r15
    1492:	ef 90       	pop	r14
    1494:	bf 90       	pop	r11
    1496:	af 90       	pop	r10
    1498:	9f 90       	pop	r9
    149a:	8f 90       	pop	r8
    149c:	08 95       	ret

0000149e <_ZN5Print5printEmi>:
    149e:	21 15       	cp	r18, r1
    14a0:	31 05       	cpc	r19, r1
    14a2:	41 f4       	brne	.+16     	; 0x14b4 <_ZN5Print5printEmi+0x16>
    14a4:	dc 01       	movw	r26, r24
    14a6:	ed 91       	ld	r30, X+
    14a8:	fc 91       	ld	r31, X
    14aa:	01 90       	ld	r0, Z+
    14ac:	f0 81       	ld	r31, Z
    14ae:	e0 2d       	mov	r30, r0
    14b0:	64 2f       	mov	r22, r20
    14b2:	09 94       	ijmp
    14b4:	0c 94 06 0a 	jmp	0x140c	; 0x140c <_ZN5Print11printNumberEmh>

000014b8 <_ZN5Print5printEhi>:
    14b8:	9a 01       	movw	r18, r20
    14ba:	46 2f       	mov	r20, r22
    14bc:	50 e0       	ldi	r21, 0x00	; 0
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <_ZN5Print5printEmi>

000014c6 <_ZN5Print5printEji>:
    14c6:	9a 01       	movw	r18, r20
    14c8:	ab 01       	movw	r20, r22
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <_ZN5Print5printEmi>

000014d2 <_ZN5Print7printlnEji>:
    14d2:	0f 93       	push	r16
    14d4:	1f 93       	push	r17
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
    14da:	ec 01       	movw	r28, r24
    14dc:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN5Print5printEji>
    14e0:	8c 01       	movw	r16, r24
    14e2:	ce 01       	movw	r24, r28
    14e4:	0e 94 de 09 	call	0x13bc	; 0x13bc <_ZN5Print7printlnEv>
    14e8:	80 0f       	add	r24, r16
    14ea:	91 1f       	adc	r25, r17
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	1f 91       	pop	r17
    14f2:	0f 91       	pop	r16
    14f4:	08 95       	ret

000014f6 <_ZN5Print5printEli>:
    14f6:	cf 92       	push	r12
    14f8:	df 92       	push	r13
    14fa:	ef 92       	push	r14
    14fc:	ff 92       	push	r15
    14fe:	0f 93       	push	r16
    1500:	1f 93       	push	r17
    1502:	cf 93       	push	r28
    1504:	df 93       	push	r29
    1506:	21 15       	cp	r18, r1
    1508:	31 05       	cpc	r19, r1
    150a:	81 f4       	brne	.+32     	; 0x152c <_ZN5Print5printEli+0x36>
    150c:	dc 01       	movw	r26, r24
    150e:	ed 91       	ld	r30, X+
    1510:	fc 91       	ld	r31, X
    1512:	01 90       	ld	r0, Z+
    1514:	f0 81       	ld	r31, Z
    1516:	e0 2d       	mov	r30, r0
    1518:	64 2f       	mov	r22, r20
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	1f 91       	pop	r17
    1520:	0f 91       	pop	r16
    1522:	ff 90       	pop	r15
    1524:	ef 90       	pop	r14
    1526:	df 90       	pop	r13
    1528:	cf 90       	pop	r12
    152a:	09 94       	ijmp
    152c:	2a 30       	cpi	r18, 0x0A	; 10
    152e:	31 05       	cpc	r19, r1
    1530:	01 f5       	brne	.+64     	; 0x1572 <_ZN5Print5printEli+0x7c>
    1532:	77 ff       	sbrs	r23, 7
    1534:	1d c0       	rjmp	.+58     	; 0x1570 <_ZN5Print5printEli+0x7a>
    1536:	6a 01       	movw	r12, r20
    1538:	7b 01       	movw	r14, r22
    153a:	ec 01       	movw	r28, r24
    153c:	6d e2       	ldi	r22, 0x2D	; 45
    153e:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN5Print5printEc>
    1542:	8c 01       	movw	r16, r24
    1544:	44 27       	eor	r20, r20
    1546:	55 27       	eor	r21, r21
    1548:	ba 01       	movw	r22, r20
    154a:	4c 19       	sub	r20, r12
    154c:	5d 09       	sbc	r21, r13
    154e:	6e 09       	sbc	r22, r14
    1550:	7f 09       	sbc	r23, r15
    1552:	2a e0       	ldi	r18, 0x0A	; 10
    1554:	ce 01       	movw	r24, r28
    1556:	0e 94 06 0a 	call	0x140c	; 0x140c <_ZN5Print11printNumberEmh>
    155a:	80 0f       	add	r24, r16
    155c:	91 1f       	adc	r25, r17
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	ff 90       	pop	r15
    1568:	ef 90       	pop	r14
    156a:	df 90       	pop	r13
    156c:	cf 90       	pop	r12
    156e:	08 95       	ret
    1570:	2a e0       	ldi	r18, 0x0A	; 10
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	1f 91       	pop	r17
    1578:	0f 91       	pop	r16
    157a:	ff 90       	pop	r15
    157c:	ef 90       	pop	r14
    157e:	df 90       	pop	r13
    1580:	cf 90       	pop	r12
    1582:	0c 94 06 0a 	jmp	0x140c	; 0x140c <_ZN5Print11printNumberEmh>

00001586 <_ZN5Print5printEii>:
    1586:	9a 01       	movw	r18, r20
    1588:	ab 01       	movw	r20, r22
    158a:	77 0f       	add	r23, r23
    158c:	66 0b       	sbc	r22, r22
    158e:	77 0b       	sbc	r23, r23
    1590:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <_ZN5Print5printEli>

00001594 <_ZN5Print7printlnEii>:
    1594:	0f 93       	push	r16
    1596:	1f 93       	push	r17
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
    159c:	ec 01       	movw	r28, r24
    159e:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN5Print5printEii>
    15a2:	8c 01       	movw	r16, r24
    15a4:	ce 01       	movw	r24, r28
    15a6:	0e 94 de 09 	call	0x13bc	; 0x13bc <_ZN5Print7printlnEv>
    15aa:	80 0f       	add	r24, r16
    15ac:	91 1f       	adc	r25, r17
    15ae:	df 91       	pop	r29
    15b0:	cf 91       	pop	r28
    15b2:	1f 91       	pop	r17
    15b4:	0f 91       	pop	r16
    15b6:	08 95       	ret

000015b8 <_ZN5Print10printFloatEdh>:
    15b8:	7f 92       	push	r7
    15ba:	8f 92       	push	r8
    15bc:	9f 92       	push	r9
    15be:	af 92       	push	r10
    15c0:	bf 92       	push	r11
    15c2:	cf 92       	push	r12
    15c4:	df 92       	push	r13
    15c6:	ef 92       	push	r14
    15c8:	ff 92       	push	r15
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	8c 01       	movw	r16, r24
    15d4:	6a 01       	movw	r12, r20
    15d6:	7b 01       	movw	r14, r22
    15d8:	72 2e       	mov	r7, r18
    15da:	9a 01       	movw	r18, r20
    15dc:	ab 01       	movw	r20, r22
    15de:	c7 01       	movw	r24, r14
    15e0:	b6 01       	movw	r22, r12
    15e2:	0e 94 2e 13 	call	0x265c	; 0x265c <__unordsf2>
    15e6:	88 23       	and	r24, r24
    15e8:	19 f0       	breq	.+6      	; 0x15f0 <_ZN5Print10printFloatEdh+0x38>
    15ea:	69 e1       	ldi	r22, 0x19	; 25
    15ec:	72 e0       	ldi	r23, 0x02	; 2
    15ee:	27 c0       	rjmp	.+78     	; 0x163e <_ZN5Print10printFloatEdh+0x86>
    15f0:	46 01       	movw	r8, r12
    15f2:	57 01       	movw	r10, r14
    15f4:	e8 94       	clt
    15f6:	b7 f8       	bld	r11, 7
    15f8:	2f ef       	ldi	r18, 0xFF	; 255
    15fa:	3f ef       	ldi	r19, 0xFF	; 255
    15fc:	4f e7       	ldi	r20, 0x7F	; 127
    15fe:	5f e7       	ldi	r21, 0x7F	; 127
    1600:	c5 01       	movw	r24, r10
    1602:	b4 01       	movw	r22, r8
    1604:	0e 94 2e 13 	call	0x265c	; 0x265c <__unordsf2>
    1608:	81 11       	cpse	r24, r1
    160a:	0d c0       	rjmp	.+26     	; 0x1626 <_ZN5Print10printFloatEdh+0x6e>
    160c:	2f ef       	ldi	r18, 0xFF	; 255
    160e:	3f ef       	ldi	r19, 0xFF	; 255
    1610:	4f e7       	ldi	r20, 0x7F	; 127
    1612:	5f e7       	ldi	r21, 0x7F	; 127
    1614:	c5 01       	movw	r24, r10
    1616:	b4 01       	movw	r22, r8
    1618:	0e 94 29 13 	call	0x2652	; 0x2652 <__cmpsf2>
    161c:	18 16       	cp	r1, r24
    161e:	1c f4       	brge	.+6      	; 0x1626 <_ZN5Print10printFloatEdh+0x6e>
    1620:	6d e1       	ldi	r22, 0x1D	; 29
    1622:	72 e0       	ldi	r23, 0x02	; 2
    1624:	0c c0       	rjmp	.+24     	; 0x163e <_ZN5Print10printFloatEdh+0x86>
    1626:	2f ef       	ldi	r18, 0xFF	; 255
    1628:	3f ef       	ldi	r19, 0xFF	; 255
    162a:	4f e7       	ldi	r20, 0x7F	; 127
    162c:	5f e4       	ldi	r21, 0x4F	; 79
    162e:	c7 01       	movw	r24, r14
    1630:	b6 01       	movw	r22, r12
    1632:	0e 94 3a 08 	call	0x1074	; 0x1074 <__gesf2>
    1636:	18 16       	cp	r1, r24
    1638:	94 f4       	brge	.+36     	; 0x165e <_ZN5Print10printFloatEdh+0xa6>
    163a:	61 e2       	ldi	r22, 0x21	; 33
    163c:	72 e0       	ldi	r23, 0x02	; 2
    163e:	c8 01       	movw	r24, r16
    1640:	df 91       	pop	r29
    1642:	cf 91       	pop	r28
    1644:	1f 91       	pop	r17
    1646:	0f 91       	pop	r16
    1648:	ff 90       	pop	r15
    164a:	ef 90       	pop	r14
    164c:	df 90       	pop	r13
    164e:	cf 90       	pop	r12
    1650:	bf 90       	pop	r11
    1652:	af 90       	pop	r10
    1654:	9f 90       	pop	r9
    1656:	8f 90       	pop	r8
    1658:	7f 90       	pop	r7
    165a:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <_ZN5Print5writeEPKc>
    165e:	2f ef       	ldi	r18, 0xFF	; 255
    1660:	3f ef       	ldi	r19, 0xFF	; 255
    1662:	4f e7       	ldi	r20, 0x7F	; 127
    1664:	5f ec       	ldi	r21, 0xCF	; 207
    1666:	c7 01       	movw	r24, r14
    1668:	b6 01       	movw	r22, r12
    166a:	0e 94 29 13 	call	0x2652	; 0x2652 <__cmpsf2>
    166e:	87 fd       	sbrc	r24, 7
    1670:	e4 cf       	rjmp	.-56     	; 0x163a <_ZN5Print10printFloatEdh+0x82>
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	a9 01       	movw	r20, r18
    1678:	c7 01       	movw	r24, r14
    167a:	b6 01       	movw	r22, r12
    167c:	0e 94 29 13 	call	0x2652	; 0x2652 <__cmpsf2>
    1680:	87 ff       	sbrs	r24, 7
    1682:	0a c0       	rjmp	.+20     	; 0x1698 <_ZN5Print10printFloatEdh+0xe0>
    1684:	6d e2       	ldi	r22, 0x2D	; 45
    1686:	c8 01       	movw	r24, r16
    1688:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN5Print5printEc>
    168c:	ec 01       	movw	r28, r24
    168e:	f7 fa       	bst	r15, 7
    1690:	f0 94       	com	r15
    1692:	f7 f8       	bld	r15, 7
    1694:	f0 94       	com	r15
    1696:	02 c0       	rjmp	.+4      	; 0x169c <_ZN5Print10printFloatEdh+0xe4>
    1698:	c0 e0       	ldi	r28, 0x00	; 0
    169a:	d0 e0       	ldi	r29, 0x00	; 0
    169c:	b1 2c       	mov	r11, r1
    169e:	60 e0       	ldi	r22, 0x00	; 0
    16a0:	70 e0       	ldi	r23, 0x00	; 0
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	9f e3       	ldi	r25, 0x3F	; 63
    16a6:	7b 14       	cp	r7, r11
    16a8:	41 f0       	breq	.+16     	; 0x16ba <_ZN5Print10printFloatEdh+0x102>
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	40 e2       	ldi	r20, 0x20	; 32
    16b0:	51 e4       	ldi	r21, 0x41	; 65
    16b2:	0e 94 04 07 	call	0xe08	; 0xe08 <__divsf3>
    16b6:	b3 94       	inc	r11
    16b8:	f6 cf       	rjmp	.-20     	; 0x16a6 <_ZN5Print10printFloatEdh+0xee>
    16ba:	a7 01       	movw	r20, r14
    16bc:	96 01       	movw	r18, r12
    16be:	0e 94 98 06 	call	0xd30	; 0xd30 <__addsf3>
    16c2:	6b 01       	movw	r12, r22
    16c4:	7c 01       	movw	r14, r24
    16c6:	0e 94 7d 07 	call	0xefa	; 0xefa <__fixunssfsi>
    16ca:	4b 01       	movw	r8, r22
    16cc:	5c 01       	movw	r10, r24
    16ce:	2a e0       	ldi	r18, 0x0A	; 10
    16d0:	ab 01       	movw	r20, r22
    16d2:	bc 01       	movw	r22, r24
    16d4:	c8 01       	movw	r24, r16
    16d6:	0e 94 06 0a 	call	0x140c	; 0x140c <_ZN5Print11printNumberEmh>
    16da:	c8 0f       	add	r28, r24
    16dc:	d9 1f       	adc	r29, r25
    16de:	77 20       	and	r7, r7
    16e0:	b9 f1       	breq	.+110    	; 0x1750 <_ZN5Print10printFloatEdh+0x198>
    16e2:	c5 01       	movw	r24, r10
    16e4:	b4 01       	movw	r22, r8
    16e6:	0e 94 ac 07 	call	0xf58	; 0xf58 <__floatunsisf>
    16ea:	9b 01       	movw	r18, r22
    16ec:	ac 01       	movw	r20, r24
    16ee:	c7 01       	movw	r24, r14
    16f0:	b6 01       	movw	r22, r12
    16f2:	0e 94 97 06 	call	0xd2e	; 0xd2e <__subsf3>
    16f6:	6b 01       	movw	r12, r22
    16f8:	7c 01       	movw	r14, r24
    16fa:	6e e2       	ldi	r22, 0x2E	; 46
    16fc:	c8 01       	movw	r24, r16
    16fe:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN5Print5printEc>
    1702:	c8 0f       	add	r28, r24
    1704:	d9 1f       	adc	r29, r25
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	40 e2       	ldi	r20, 0x20	; 32
    170c:	51 e4       	ldi	r21, 0x41	; 65
    170e:	c7 01       	movw	r24, r14
    1710:	b6 01       	movw	r22, r12
    1712:	0e 94 3f 08 	call	0x107e	; 0x107e <__mulsf3>
    1716:	4b 01       	movw	r8, r22
    1718:	5c 01       	movw	r10, r24
    171a:	0e 94 7d 07 	call	0xefa	; 0xefa <__fixunssfsi>
    171e:	6b 01       	movw	r12, r22
    1720:	7c 01       	movw	r14, r24
    1722:	4a e0       	ldi	r20, 0x0A	; 10
    1724:	50 e0       	ldi	r21, 0x00	; 0
    1726:	c8 01       	movw	r24, r16
    1728:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN5Print5printEji>
    172c:	c8 0f       	add	r28, r24
    172e:	d9 1f       	adc	r29, r25
    1730:	b6 01       	movw	r22, r12
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	0e 94 ac 07 	call	0xf58	; 0xf58 <__floatunsisf>
    173a:	9b 01       	movw	r18, r22
    173c:	ac 01       	movw	r20, r24
    173e:	c5 01       	movw	r24, r10
    1740:	b4 01       	movw	r22, r8
    1742:	0e 94 97 06 	call	0xd2e	; 0xd2e <__subsf3>
    1746:	6b 01       	movw	r12, r22
    1748:	7c 01       	movw	r14, r24
    174a:	7a 94       	dec	r7
    174c:	71 10       	cpse	r7, r1
    174e:	db cf       	rjmp	.-74     	; 0x1706 <_ZN5Print10printFloatEdh+0x14e>
    1750:	ce 01       	movw	r24, r28
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	1f 91       	pop	r17
    1758:	0f 91       	pop	r16
    175a:	ff 90       	pop	r15
    175c:	ef 90       	pop	r14
    175e:	df 90       	pop	r13
    1760:	cf 90       	pop	r12
    1762:	bf 90       	pop	r11
    1764:	af 90       	pop	r10
    1766:	9f 90       	pop	r9
    1768:	8f 90       	pop	r8
    176a:	7f 90       	pop	r7
    176c:	08 95       	ret

0000176e <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    176e:	0f 93       	push	r16
    1770:	1f 93       	push	r17
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1778:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <_ZN5Print10printFloatEdh>
    177c:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    177e:	ce 01       	movw	r24, r28
    1780:	0e 94 de 09 	call	0x13bc	; 0x13bc <_ZN5Print7printlnEv>
  return n;
}
    1784:	80 0f       	add	r24, r16
    1786:	91 1f       	adc	r25, r17
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	1f 91       	pop	r17
    178e:	0f 91       	pop	r16
    1790:	08 95       	ret

00001792 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1792:	1f 92       	push	r1
    1794:	0f 92       	push	r0
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	0f 92       	push	r0
    179a:	11 24       	eor	r1, r1
    179c:	2f 93       	push	r18
    179e:	3f 93       	push	r19
    17a0:	8f 93       	push	r24
    17a2:	9f 93       	push	r25
    17a4:	af 93       	push	r26
    17a6:	bf 93       	push	r27
    17a8:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <timer0_millis>
    17ac:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <timer0_millis+0x1>
    17b0:	a0 91 15 04 	lds	r26, 0x0415	; 0x800415 <timer0_millis+0x2>
    17b4:	b0 91 16 04 	lds	r27, 0x0416	; 0x800416 <timer0_millis+0x3>
    17b8:	30 91 12 04 	lds	r19, 0x0412	; 0x800412 <timer0_fract>
    17bc:	23 e0       	ldi	r18, 0x03	; 3
    17be:	23 0f       	add	r18, r19
    17c0:	2d 37       	cpi	r18, 0x7D	; 125
    17c2:	20 f4       	brcc	.+8      	; 0x17cc <__vector_16+0x3a>
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	a1 1d       	adc	r26, r1
    17c8:	b1 1d       	adc	r27, r1
    17ca:	05 c0       	rjmp	.+10     	; 0x17d6 <__vector_16+0x44>
    17cc:	26 e8       	ldi	r18, 0x86	; 134
    17ce:	23 0f       	add	r18, r19
    17d0:	02 96       	adiw	r24, 0x02	; 2
    17d2:	a1 1d       	adc	r26, r1
    17d4:	b1 1d       	adc	r27, r1
    17d6:	20 93 12 04 	sts	0x0412, r18	; 0x800412 <timer0_fract>
    17da:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <timer0_millis>
    17de:	90 93 14 04 	sts	0x0414, r25	; 0x800414 <timer0_millis+0x1>
    17e2:	a0 93 15 04 	sts	0x0415, r26	; 0x800415 <timer0_millis+0x2>
    17e6:	b0 93 16 04 	sts	0x0416, r27	; 0x800416 <timer0_millis+0x3>
    17ea:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <timer0_overflow_count>
    17ee:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <timer0_overflow_count+0x1>
    17f2:	a0 91 19 04 	lds	r26, 0x0419	; 0x800419 <timer0_overflow_count+0x2>
    17f6:	b0 91 1a 04 	lds	r27, 0x041A	; 0x80041a <timer0_overflow_count+0x3>
    17fa:	01 96       	adiw	r24, 0x01	; 1
    17fc:	a1 1d       	adc	r26, r1
    17fe:	b1 1d       	adc	r27, r1
    1800:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <timer0_overflow_count>
    1804:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <timer0_overflow_count+0x1>
    1808:	a0 93 19 04 	sts	0x0419, r26	; 0x800419 <timer0_overflow_count+0x2>
    180c:	b0 93 1a 04 	sts	0x041A, r27	; 0x80041a <timer0_overflow_count+0x3>
    1810:	bf 91       	pop	r27
    1812:	af 91       	pop	r26
    1814:	9f 91       	pop	r25
    1816:	8f 91       	pop	r24
    1818:	3f 91       	pop	r19
    181a:	2f 91       	pop	r18
    181c:	0f 90       	pop	r0
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	0f 90       	pop	r0
    1822:	1f 90       	pop	r1
    1824:	18 95       	reti

00001826 <millis>:
    1826:	2f b7       	in	r18, 0x3f	; 63
    1828:	f8 94       	cli
    182a:	60 91 13 04 	lds	r22, 0x0413	; 0x800413 <timer0_millis>
    182e:	70 91 14 04 	lds	r23, 0x0414	; 0x800414 <timer0_millis+0x1>
    1832:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <timer0_millis+0x2>
    1836:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <timer0_millis+0x3>
    183a:	2f bf       	out	0x3f, r18	; 63
    183c:	08 95       	ret

0000183e <micros>:
    183e:	3f b7       	in	r19, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <timer0_overflow_count>
    1846:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <timer0_overflow_count+0x1>
    184a:	a0 91 19 04 	lds	r26, 0x0419	; 0x800419 <timer0_overflow_count+0x2>
    184e:	b0 91 1a 04 	lds	r27, 0x041A	; 0x80041a <timer0_overflow_count+0x3>
    1852:	26 b5       	in	r18, 0x26	; 38
    1854:	a8 9b       	sbis	0x15, 0	; 21
    1856:	05 c0       	rjmp	.+10     	; 0x1862 <micros+0x24>
    1858:	2f 3f       	cpi	r18, 0xFF	; 255
    185a:	19 f0       	breq	.+6      	; 0x1862 <micros+0x24>
    185c:	01 96       	adiw	r24, 0x01	; 1
    185e:	a1 1d       	adc	r26, r1
    1860:	b1 1d       	adc	r27, r1
    1862:	3f bf       	out	0x3f, r19	; 63
    1864:	ba 2f       	mov	r27, r26
    1866:	a9 2f       	mov	r26, r25
    1868:	98 2f       	mov	r25, r24
    186a:	88 27       	eor	r24, r24
    186c:	82 0f       	add	r24, r18
    186e:	91 1d       	adc	r25, r1
    1870:	a1 1d       	adc	r26, r1
    1872:	b1 1d       	adc	r27, r1
    1874:	bc 01       	movw	r22, r24
    1876:	cd 01       	movw	r24, r26
    1878:	42 e0       	ldi	r20, 0x02	; 2
    187a:	66 0f       	add	r22, r22
    187c:	77 1f       	adc	r23, r23
    187e:	88 1f       	adc	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	4a 95       	dec	r20
    1884:	d1 f7       	brne	.-12     	; 0x187a <micros+0x3c>
    1886:	08 95       	ret

00001888 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1888:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    188a:	84 b5       	in	r24, 0x24	; 36
    188c:	82 60       	ori	r24, 0x02	; 2
    188e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1890:	84 b5       	in	r24, 0x24	; 36
    1892:	81 60       	ori	r24, 0x01	; 1
    1894:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1896:	85 b5       	in	r24, 0x25	; 37
    1898:	82 60       	ori	r24, 0x02	; 2
    189a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    189c:	85 b5       	in	r24, 0x25	; 37
    189e:	81 60       	ori	r24, 0x01	; 1
    18a0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    18a2:	ee e6       	ldi	r30, 0x6E	; 110
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	81 60       	ori	r24, 0x01	; 1
    18aa:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    18ac:	e1 e8       	ldi	r30, 0x81	; 129
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    18b2:	80 81       	ld	r24, Z
    18b4:	82 60       	ori	r24, 0x02	; 2
    18b6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    18b8:	80 81       	ld	r24, Z
    18ba:	81 60       	ori	r24, 0x01	; 1
    18bc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    18be:	e0 e8       	ldi	r30, 0x80	; 128
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	81 60       	ori	r24, 0x01	; 1
    18c6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    18c8:	e1 eb       	ldi	r30, 0xB1	; 177
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	84 60       	ori	r24, 0x04	; 4
    18d0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    18d2:	e0 eb       	ldi	r30, 0xB0	; 176
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	81 60       	ori	r24, 0x01	; 1
    18da:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    18dc:	ea e7       	ldi	r30, 0x7A	; 122
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	84 60       	ori	r24, 0x04	; 4
    18e4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    18e6:	80 81       	ld	r24, Z
    18e8:	82 60       	ori	r24, 0x02	; 2
    18ea:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    18ec:	80 81       	ld	r24, Z
    18ee:	81 60       	ori	r24, 0x01	; 1
    18f0:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    18f2:	80 81       	ld	r24, Z
    18f4:	80 68       	ori	r24, 0x80	; 128
    18f6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    18f8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    18fc:	08 95       	ret

000018fe <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    18fe:	83 30       	cpi	r24, 0x03	; 3
    1900:	81 f0       	breq	.+32     	; 0x1922 <turnOffPWM+0x24>
    1902:	28 f4       	brcc	.+10     	; 0x190e <turnOffPWM+0x10>
    1904:	81 30       	cpi	r24, 0x01	; 1
    1906:	99 f0       	breq	.+38     	; 0x192e <turnOffPWM+0x30>
    1908:	82 30       	cpi	r24, 0x02	; 2
    190a:	a1 f0       	breq	.+40     	; 0x1934 <turnOffPWM+0x36>
    190c:	08 95       	ret
    190e:	87 30       	cpi	r24, 0x07	; 7
    1910:	a9 f0       	breq	.+42     	; 0x193c <turnOffPWM+0x3e>
    1912:	88 30       	cpi	r24, 0x08	; 8
    1914:	b9 f0       	breq	.+46     	; 0x1944 <turnOffPWM+0x46>
    1916:	84 30       	cpi	r24, 0x04	; 4
    1918:	d1 f4       	brne	.+52     	; 0x194e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    191a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    191e:	8f 7d       	andi	r24, 0xDF	; 223
    1920:	03 c0       	rjmp	.+6      	; 0x1928 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1922:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1926:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1928:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    192c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    192e:	84 b5       	in	r24, 0x24	; 36
    1930:	8f 77       	andi	r24, 0x7F	; 127
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1934:	84 b5       	in	r24, 0x24	; 36
    1936:	8f 7d       	andi	r24, 0xDF	; 223
    1938:	84 bd       	out	0x24, r24	; 36
    193a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    193c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1940:	8f 77       	andi	r24, 0x7F	; 127
    1942:	03 c0       	rjmp	.+6      	; 0x194a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1944:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1948:	8f 7d       	andi	r24, 0xDF	; 223
    194a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    194e:	08 95       	ret

00001950 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	fc 01       	movw	r30, r24
    1958:	ed 5e       	subi	r30, 0xED	; 237
    195a:	fe 4f       	sbci	r31, 0xFE	; 254
    195c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    195e:	fc 01       	movw	r30, r24
    1960:	e9 5d       	subi	r30, 0xD9	; 217
    1962:	fe 4f       	sbci	r31, 0xFE	; 254
    1964:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1966:	88 23       	and	r24, r24
    1968:	61 f1       	breq	.+88     	; 0x19c2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	fc 01       	movw	r30, r24
    1972:	eb 5b       	subi	r30, 0xBB	; 187
    1974:	fe 4f       	sbci	r31, 0xFE	; 254
    1976:	c5 91       	lpm	r28, Z+
    1978:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    197a:	fc 01       	movw	r30, r24
    197c:	e5 5c       	subi	r30, 0xC5	; 197
    197e:	fe 4f       	sbci	r31, 0xFE	; 254
    1980:	a5 91       	lpm	r26, Z+
    1982:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1984:	61 11       	cpse	r22, r1
    1986:	09 c0       	rjmp	.+18     	; 0x199a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1988:	9f b7       	in	r25, 0x3f	; 63
                cli();
    198a:	f8 94       	cli
		*reg &= ~bit;
    198c:	88 81       	ld	r24, Y
    198e:	20 95       	com	r18
    1990:	82 23       	and	r24, r18
    1992:	88 83       	st	Y, r24
		*out &= ~bit;
    1994:	ec 91       	ld	r30, X
    1996:	2e 23       	and	r18, r30
    1998:	0b c0       	rjmp	.+22     	; 0x19b0 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    199a:	62 30       	cpi	r22, 0x02	; 2
    199c:	61 f4       	brne	.+24     	; 0x19b6 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    199e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    19a0:	f8 94       	cli
		*reg &= ~bit;
    19a2:	88 81       	ld	r24, Y
    19a4:	32 2f       	mov	r19, r18
    19a6:	30 95       	com	r19
    19a8:	83 23       	and	r24, r19
    19aa:	88 83       	st	Y, r24
		*out |= bit;
    19ac:	ec 91       	ld	r30, X
    19ae:	2e 2b       	or	r18, r30
    19b0:	2c 93       	st	X, r18
		SREG = oldSREG;
    19b2:	9f bf       	out	0x3f, r25	; 63
    19b4:	06 c0       	rjmp	.+12     	; 0x19c2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    19b6:	8f b7       	in	r24, 0x3f	; 63
                cli();
    19b8:	f8 94       	cli
		*reg |= bit;
    19ba:	e8 81       	ld	r30, Y
    19bc:	2e 2b       	or	r18, r30
    19be:	28 83       	st	Y, r18
		SREG = oldSREG;
    19c0:	8f bf       	out	0x3f, r24	; 63
	}
}
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	08 95       	ret

000019c8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    19c8:	1f 93       	push	r17
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	f9 01       	movw	r30, r18
    19d4:	e1 50       	subi	r30, 0x01	; 1
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    19da:	f9 01       	movw	r30, r18
    19dc:	ed 5e       	subi	r30, 0xED	; 237
    19de:	fe 4f       	sbci	r31, 0xFE	; 254
    19e0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    19e2:	f9 01       	movw	r30, r18
    19e4:	e9 5d       	subi	r30, 0xD9	; 217
    19e6:	fe 4f       	sbci	r31, 0xFE	; 254
    19e8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    19ea:	cc 23       	and	r28, r28
    19ec:	c1 f0       	breq	.+48     	; 0x1a1e <digitalWrite+0x56>
    19ee:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    19f0:	81 11       	cpse	r24, r1
    19f2:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <turnOffPWM>

	out = portOutputRegister(port);
    19f6:	ec 2f       	mov	r30, r28
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	ee 0f       	add	r30, r30
    19fc:	ff 1f       	adc	r31, r31
    19fe:	e5 5c       	subi	r30, 0xC5	; 197
    1a00:	fe 4f       	sbci	r31, 0xFE	; 254
    1a02:	a5 91       	lpm	r26, Z+
    1a04:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1a06:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1a08:	f8 94       	cli

	if (val == LOW) {
    1a0a:	11 11       	cpse	r17, r1
    1a0c:	04 c0       	rjmp	.+8      	; 0x1a16 <digitalWrite+0x4e>
		*out &= ~bit;
    1a0e:	8c 91       	ld	r24, X
    1a10:	d0 95       	com	r29
    1a12:	d8 23       	and	r29, r24
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <digitalWrite+0x52>
	} else {
		*out |= bit;
    1a16:	ec 91       	ld	r30, X
    1a18:	de 2b       	or	r29, r30
    1a1a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1a1c:	9f bf       	out	0x3f, r25	; 63
}
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	1f 91       	pop	r17
    1a24:	08 95       	ret

00001a26 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1a26:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <_ZN7TwoWire14rxBufferLengthE>
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	20 91 50 04 	lds	r18, 0x0450	; 0x800450 <_ZN7TwoWire13rxBufferIndexE>
    1a30:	82 1b       	sub	r24, r18
    1a32:	91 09       	sbc	r25, r1
    1a34:	08 95       	ret

00001a36 <_ZN7TwoWire4readEv>:
    1a36:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <_ZN7TwoWire13rxBufferIndexE>
    1a3a:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <_ZN7TwoWire14rxBufferLengthE>
    1a3e:	98 17       	cp	r25, r24
    1a40:	50 f4       	brcc	.+20     	; 0x1a56 <_ZN7TwoWire4readEv+0x20>
    1a42:	e9 2f       	mov	r30, r25
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	ef 5a       	subi	r30, 0xAF	; 175
    1a48:	fb 4f       	sbci	r31, 0xFB	; 251
    1a4a:	20 81       	ld	r18, Z
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	9f 5f       	subi	r25, 0xFF	; 255
    1a50:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <_ZN7TwoWire13rxBufferIndexE>
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <_ZN7TwoWire4readEv+0x24>
    1a56:	2f ef       	ldi	r18, 0xFF	; 255
    1a58:	3f ef       	ldi	r19, 0xFF	; 255
    1a5a:	c9 01       	movw	r24, r18
    1a5c:	08 95       	ret

00001a5e <_ZN7TwoWire4peekEv>:
    1a5e:	e0 91 50 04 	lds	r30, 0x0450	; 0x800450 <_ZN7TwoWire13rxBufferIndexE>
    1a62:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <_ZN7TwoWire14rxBufferLengthE>
    1a66:	e8 17       	cp	r30, r24
    1a68:	30 f4       	brcc	.+12     	; 0x1a76 <_ZN7TwoWire4peekEv+0x18>
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	ef 5a       	subi	r30, 0xAF	; 175
    1a6e:	fb 4f       	sbci	r31, 0xFB	; 251
    1a70:	80 81       	ld	r24, Z
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	08 95       	ret
    1a76:	8f ef       	ldi	r24, 0xFF	; 255
    1a78:	9f ef       	ldi	r25, 0xFF	; 255
    1a7a:	08 95       	ret

00001a7c <_ZN7TwoWire5flushEv>:
    1a7c:	08 95       	ret

00001a7e <_ZN7TwoWire16onReceiveServiceEPhi>:
    1a7e:	cf 93       	push	r28
    1a80:	df 93       	push	r29
    1a82:	ec 01       	movw	r28, r24
    1a84:	e0 91 27 04 	lds	r30, 0x0427	; 0x800427 <_ZN7TwoWire14user_onReceiveE>
    1a88:	f0 91 28 04 	lds	r31, 0x0428	; 0x800428 <_ZN7TwoWire14user_onReceiveE+0x1>
    1a8c:	30 97       	sbiw	r30, 0x00	; 0
    1a8e:	f1 f0       	breq	.+60     	; 0x1acc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1a90:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <_ZN7TwoWire13rxBufferIndexE>
    1a94:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <_ZN7TwoWire14rxBufferLengthE>
    1a98:	98 17       	cp	r25, r24
    1a9a:	c0 f0       	brcs	.+48     	; 0x1acc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	29 2f       	mov	r18, r25
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	26 17       	cp	r18, r22
    1aa4:	37 07       	cpc	r19, r23
    1aa6:	54 f4       	brge	.+20     	; 0x1abc <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1aa8:	de 01       	movw	r26, r28
    1aaa:	a2 0f       	add	r26, r18
    1aac:	b3 1f       	adc	r27, r19
    1aae:	4c 91       	ld	r20, X
    1ab0:	d9 01       	movw	r26, r18
    1ab2:	af 5a       	subi	r26, 0xAF	; 175
    1ab4:	bb 4f       	sbci	r27, 0xFB	; 251
    1ab6:	4c 93       	st	X, r20
    1ab8:	9f 5f       	subi	r25, 0xFF	; 255
    1aba:	f1 cf       	rjmp	.-30     	; 0x1a9e <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1abc:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <_ZN7TwoWire13rxBufferIndexE>
    1ac0:	60 93 4f 04 	sts	0x044F, r22	; 0x80044f <_ZN7TwoWire14rxBufferLengthE>
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	09 94       	ijmp
    1acc:	df 91       	pop	r29
    1ace:	cf 91       	pop	r28
    1ad0:	08 95       	ret

00001ad2 <_ZN7TwoWire16onRequestServiceEv>:
    1ad2:	e0 91 29 04 	lds	r30, 0x0429	; 0x800429 <_ZN7TwoWire14user_onRequestE>
    1ad6:	f0 91 2a 04 	lds	r31, 0x042A	; 0x80042a <_ZN7TwoWire14user_onRequestE+0x1>
    1ada:	30 97       	sbiw	r30, 0x00	; 0
    1adc:	29 f0       	breq	.+10     	; 0x1ae8 <_ZN7TwoWire16onRequestServiceEv+0x16>
    1ade:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <_ZN7TwoWire13txBufferIndexE>
    1ae2:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <_ZN7TwoWire14txBufferLengthE>
    1ae6:	09 94       	ijmp
    1ae8:	08 95       	ret

00001aea <_ZN7TwoWire5writeEPKhj>:
    1aea:	cf 92       	push	r12
    1aec:	df 92       	push	r13
    1aee:	ef 92       	push	r14
    1af0:	ff 92       	push	r15
    1af2:	0f 93       	push	r16
    1af4:	1f 93       	push	r17
    1af6:	cf 93       	push	r28
    1af8:	df 93       	push	r29
    1afa:	7c 01       	movw	r14, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	8a 01       	movw	r16, r20
    1b00:	20 91 2b 04 	lds	r18, 0x042B	; 0x80042b <_ZN7TwoWire12transmittingE>
    1b04:	22 23       	and	r18, r18
    1b06:	89 f0       	breq	.+34     	; 0x1b2a <_ZN7TwoWire5writeEPKhj+0x40>
    1b08:	eb 01       	movw	r28, r22
    1b0a:	6b 01       	movw	r12, r22
    1b0c:	c4 0e       	add	r12, r20
    1b0e:	d5 1e       	adc	r13, r21
    1b10:	cc 15       	cp	r28, r12
    1b12:	dd 05       	cpc	r29, r13
    1b14:	69 f0       	breq	.+26     	; 0x1b30 <_ZN7TwoWire5writeEPKhj+0x46>
    1b16:	69 91       	ld	r22, Y+
    1b18:	d7 01       	movw	r26, r14
    1b1a:	ed 91       	ld	r30, X+
    1b1c:	fc 91       	ld	r31, X
    1b1e:	01 90       	ld	r0, Z+
    1b20:	f0 81       	ld	r31, Z
    1b22:	e0 2d       	mov	r30, r0
    1b24:	c7 01       	movw	r24, r14
    1b26:	09 95       	icall
    1b28:	f3 cf       	rjmp	.-26     	; 0x1b10 <_ZN7TwoWire5writeEPKhj+0x26>
    1b2a:	64 2f       	mov	r22, r20
    1b2c:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <twi_transmit>
    1b30:	c8 01       	movw	r24, r16
    1b32:	df 91       	pop	r29
    1b34:	cf 91       	pop	r28
    1b36:	1f 91       	pop	r17
    1b38:	0f 91       	pop	r16
    1b3a:	ff 90       	pop	r15
    1b3c:	ef 90       	pop	r14
    1b3e:	df 90       	pop	r13
    1b40:	cf 90       	pop	r12
    1b42:	08 95       	ret

00001b44 <_ZN7TwoWire5writeEh>:
    1b44:	cf 93       	push	r28
    1b46:	df 93       	push	r29
    1b48:	1f 92       	push	r1
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	69 83       	std	Y+1, r22	; 0x01
    1b50:	20 91 2b 04 	lds	r18, 0x042B	; 0x80042b <_ZN7TwoWire12transmittingE>
    1b54:	22 23       	and	r18, r18
    1b56:	d1 f0       	breq	.+52     	; 0x1b8c <_ZN7TwoWire5writeEh+0x48>
    1b58:	20 91 2c 04 	lds	r18, 0x042C	; 0x80042c <_ZN7TwoWire14txBufferLengthE>
    1b5c:	20 32       	cpi	r18, 0x20	; 32
    1b5e:	40 f0       	brcs	.+16     	; 0x1b70 <_ZN7TwoWire5writeEh+0x2c>
    1b60:	21 e0       	ldi	r18, 0x01	; 1
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	fc 01       	movw	r30, r24
    1b66:	33 83       	std	Z+3, r19	; 0x03
    1b68:	22 83       	std	Z+2, r18	; 0x02
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	15 c0       	rjmp	.+42     	; 0x1b9a <_ZN7TwoWire5writeEh+0x56>
    1b70:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <_ZN7TwoWire13txBufferIndexE>
    1b74:	e8 2f       	mov	r30, r24
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	e2 5d       	subi	r30, 0xD2	; 210
    1b7a:	fb 4f       	sbci	r31, 0xFB	; 251
    1b7c:	99 81       	ldd	r25, Y+1	; 0x01
    1b7e:	90 83       	st	Z, r25
    1b80:	8f 5f       	subi	r24, 0xFF	; 255
    1b82:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <_ZN7TwoWire13txBufferIndexE>
    1b86:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <_ZN7TwoWire14txBufferLengthE>
    1b8a:	05 c0       	rjmp	.+10     	; 0x1b96 <_ZN7TwoWire5writeEh+0x52>
    1b8c:	61 e0       	ldi	r22, 0x01	; 1
    1b8e:	ce 01       	movw	r24, r28
    1b90:	01 96       	adiw	r24, 0x01	; 1
    1b92:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <twi_transmit>
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	0f 90       	pop	r0
    1b9c:	df 91       	pop	r29
    1b9e:	cf 91       	pop	r28
    1ba0:	08 95       	ret

00001ba2 <_ZN7TwoWireC1Ev>:
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	13 82       	std	Z+3, r1	; 0x03
    1ba6:	12 82       	std	Z+2, r1	; 0x02
    1ba8:	88 ee       	ldi	r24, 0xE8	; 232
    1baa:	93 e0       	ldi	r25, 0x03	; 3
    1bac:	a0 e0       	ldi	r26, 0x00	; 0
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	84 83       	std	Z+4, r24	; 0x04
    1bb2:	95 83       	std	Z+5, r25	; 0x05
    1bb4:	a6 83       	std	Z+6, r26	; 0x06
    1bb6:	b7 83       	std	Z+7, r27	; 0x07
    1bb8:	89 e2       	ldi	r24, 0x29	; 41
    1bba:	92 e0       	ldi	r25, 0x02	; 2
    1bbc:	91 83       	std	Z+1, r25	; 0x01
    1bbe:	80 83       	st	Z, r24
    1bc0:	08 95       	ret

00001bc2 <_ZN7TwoWire5beginEv>:
    1bc2:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <_ZN7TwoWire13rxBufferIndexE>
    1bc6:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <_ZN7TwoWire14rxBufferLengthE>
    1bca:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <_ZN7TwoWire13txBufferIndexE>
    1bce:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <_ZN7TwoWire14txBufferLengthE>
    1bd2:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <twi_init>
    1bd6:	89 e6       	ldi	r24, 0x69	; 105
    1bd8:	9d e0       	ldi	r25, 0x0D	; 13
    1bda:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <twi_attachSlaveTxEvent>
    1bde:	8f e3       	ldi	r24, 0x3F	; 63
    1be0:	9d e0       	ldi	r25, 0x0D	; 13
    1be2:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <twi_attachSlaveRxEvent>

00001be6 <_ZN7TwoWire8setClockEm>:
    1be6:	cb 01       	movw	r24, r22
    1be8:	ba 01       	movw	r22, r20
    1bea:	0c 94 89 0f 	jmp	0x1f12	; 0x1f12 <twi_setFrequency>

00001bee <_ZN7TwoWire17beginTransmissionEh>:
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <_ZN7TwoWire12transmittingE>
    1bf4:	60 93 4e 04 	sts	0x044E, r22	; 0x80044e <_ZN7TwoWire9txAddressE>
    1bf8:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <_ZN7TwoWire13txBufferIndexE>
    1bfc:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <_ZN7TwoWire14txBufferLengthE>
    1c00:	08 95       	ret

00001c02 <_ZN7TwoWire15endTransmissionEh>:
    1c02:	0f 93       	push	r16
    1c04:	06 2f       	mov	r16, r22
    1c06:	21 e0       	ldi	r18, 0x01	; 1
    1c08:	40 91 2c 04 	lds	r20, 0x042C	; 0x80042c <_ZN7TwoWire14txBufferLengthE>
    1c0c:	6e e2       	ldi	r22, 0x2E	; 46
    1c0e:	74 e0       	ldi	r23, 0x04	; 4
    1c10:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <_ZN7TwoWire9txAddressE>
    1c14:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <twi_writeTo>
    1c18:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <_ZN7TwoWire13txBufferIndexE>
    1c1c:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <_ZN7TwoWire14txBufferLengthE>
    1c20:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <_ZN7TwoWire12transmittingE>
    1c24:	0f 91       	pop	r16
    1c26:	08 95       	ret

00001c28 <_ZN7TwoWire11requestFromEhhmhh>:
    1c28:	4f 92       	push	r4
    1c2a:	5f 92       	push	r5
    1c2c:	6f 92       	push	r6
    1c2e:	7f 92       	push	r7
    1c30:	af 92       	push	r10
    1c32:	bf 92       	push	r11
    1c34:	cf 92       	push	r12
    1c36:	ef 92       	push	r14
    1c38:	ff 92       	push	r15
    1c3a:	0f 93       	push	r16
    1c3c:	1f 93       	push	r17
    1c3e:	cf 93       	push	r28
    1c40:	df 93       	push	r29
    1c42:	5c 01       	movw	r10, r24
    1c44:	f6 2e       	mov	r15, r22
    1c46:	d4 2f       	mov	r29, r20
    1c48:	28 01       	movw	r4, r16
    1c4a:	39 01       	movw	r6, r18
    1c4c:	ee 20       	and	r14, r14
    1c4e:	21 f1       	breq	.+72     	; 0x1c98 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1c50:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <_ZN7TwoWire17beginTransmissionEh>
    1c54:	ce 2d       	mov	r28, r14
    1c56:	c4 30       	cpi	r28, 0x04	; 4
    1c58:	08 f0       	brcs	.+2      	; 0x1c5c <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1c5a:	c3 e0       	ldi	r28, 0x03	; 3
    1c5c:	c1 50       	subi	r28, 0x01	; 1
    1c5e:	c0 f0       	brcs	.+48     	; 0x1c90 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1c60:	28 e0       	ldi	r18, 0x08	; 8
    1c62:	c2 9f       	mul	r28, r18
    1c64:	c0 01       	movw	r24, r0
    1c66:	11 24       	eor	r1, r1
    1c68:	a3 01       	movw	r20, r6
    1c6a:	92 01       	movw	r18, r4
    1c6c:	04 c0       	rjmp	.+8      	; 0x1c76 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    1c6e:	56 95       	lsr	r21
    1c70:	47 95       	ror	r20
    1c72:	37 95       	ror	r19
    1c74:	27 95       	ror	r18
    1c76:	8a 95       	dec	r24
    1c78:	d2 f7       	brpl	.-12     	; 0x1c6e <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1c7a:	ca 01       	movw	r24, r20
    1c7c:	b9 01       	movw	r22, r18
    1c7e:	d5 01       	movw	r26, r10
    1c80:	ed 91       	ld	r30, X+
    1c82:	fc 91       	ld	r31, X
    1c84:	01 90       	ld	r0, Z+
    1c86:	f0 81       	ld	r31, Z
    1c88:	e0 2d       	mov	r30, r0
    1c8a:	c5 01       	movw	r24, r10
    1c8c:	09 95       	icall
    1c8e:	e6 cf       	rjmp	.-52     	; 0x1c5c <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1c90:	60 e0       	ldi	r22, 0x00	; 0
    1c92:	c5 01       	movw	r24, r10
    1c94:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN7TwoWire15endTransmissionEh>
    1c98:	4d 2f       	mov	r20, r29
    1c9a:	d1 32       	cpi	r29, 0x21	; 33
    1c9c:	08 f0       	brcs	.+2      	; 0x1ca0 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1c9e:	40 e2       	ldi	r20, 0x20	; 32
    1ca0:	2c 2d       	mov	r18, r12
    1ca2:	61 e5       	ldi	r22, 0x51	; 81
    1ca4:	74 e0       	ldi	r23, 0x04	; 4
    1ca6:	8f 2d       	mov	r24, r15
    1ca8:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <twi_readFrom>
    1cac:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <_ZN7TwoWire13rxBufferIndexE>
    1cb0:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <_ZN7TwoWire14rxBufferLengthE>
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	1f 91       	pop	r17
    1cba:	0f 91       	pop	r16
    1cbc:	ff 90       	pop	r15
    1cbe:	ef 90       	pop	r14
    1cc0:	cf 90       	pop	r12
    1cc2:	bf 90       	pop	r11
    1cc4:	af 90       	pop	r10
    1cc6:	7f 90       	pop	r7
    1cc8:	6f 90       	pop	r6
    1cca:	5f 90       	pop	r5
    1ccc:	4f 90       	pop	r4
    1cce:	08 95       	ret

00001cd0 <_ZN7TwoWire11requestFromEhhh>:
    1cd0:	cf 92       	push	r12
    1cd2:	ef 92       	push	r14
    1cd4:	0f 93       	push	r16
    1cd6:	1f 93       	push	r17
    1cd8:	c2 2e       	mov	r12, r18
    1cda:	e1 2c       	mov	r14, r1
    1cdc:	00 e0       	ldi	r16, 0x00	; 0
    1cde:	10 e0       	ldi	r17, 0x00	; 0
    1ce0:	98 01       	movw	r18, r16
    1ce2:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN7TwoWire11requestFromEhhmhh>
    1ce6:	1f 91       	pop	r17
    1ce8:	0f 91       	pop	r16
    1cea:	ef 90       	pop	r14
    1cec:	cf 90       	pop	r12
    1cee:	08 95       	ret

00001cf0 <_ZN7TwoWire11requestFromEhh>:
    1cf0:	21 e0       	ldi	r18, 0x01	; 1
    1cf2:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <_ZN7TwoWire11requestFromEhhh>

00001cf6 <_ZN7TwoWire15endTransmissionEv>:
    1cf6:	61 e0       	ldi	r22, 0x01	; 1
    1cf8:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <_ZN7TwoWire15endTransmissionEh>

00001cfc <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1cfc:	8b e1       	ldi	r24, 0x1B	; 27
    1cfe:	94 e0       	ldi	r25, 0x04	; 4
    1d00:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <_ZN7TwoWireC1Ev>

00001d04 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1d04:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1d06:	91 8d       	ldd	r25, Z+25	; 0x19
    1d08:	22 8d       	ldd	r18, Z+26	; 0x1a
    1d0a:	89 2f       	mov	r24, r25
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	80 5c       	subi	r24, 0xC0	; 192
    1d10:	9f 4f       	sbci	r25, 0xFF	; 255
    1d12:	82 1b       	sub	r24, r18
    1d14:	91 09       	sbc	r25, r1
}
    1d16:	8f 73       	andi	r24, 0x3F	; 63
    1d18:	99 27       	eor	r25, r25
    1d1a:	08 95       	ret

00001d1c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1d1c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1d1e:	91 8d       	ldd	r25, Z+25	; 0x19
    1d20:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d22:	98 17       	cp	r25, r24
    1d24:	31 f0       	breq	.+12     	; 0x1d32 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1d26:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d28:	e8 0f       	add	r30, r24
    1d2a:	f1 1d       	adc	r31, r1
    1d2c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1d32:	8f ef       	ldi	r24, 0xFF	; 255
    1d34:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1d36:	08 95       	ret

00001d38 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1d38:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1d3a:	91 8d       	ldd	r25, Z+25	; 0x19
    1d3c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d3e:	98 17       	cp	r25, r24
    1d40:	61 f0       	breq	.+24     	; 0x1d5a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1d42:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d44:	df 01       	movw	r26, r30
    1d46:	a8 0f       	add	r26, r24
    1d48:	b1 1d       	adc	r27, r1
    1d4a:	5d 96       	adiw	r26, 0x1d	; 29
    1d4c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1d4e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d50:	9f 5f       	subi	r25, 0xFF	; 255
    1d52:	9f 73       	andi	r25, 0x3F	; 63
    1d54:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1d5a:	8f ef       	ldi	r24, 0xFF	; 255
    1d5c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1d5e:	08 95       	ret

00001d60 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1d60:	fc 01       	movw	r30, r24
    1d62:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1d64:	44 8d       	ldd	r20, Z+28	; 0x1c
    1d66:	25 2f       	mov	r18, r21
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	84 2f       	mov	r24, r20
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1d6e:	82 1b       	sub	r24, r18
    1d70:	93 0b       	sbc	r25, r19
    1d72:	54 17       	cp	r21, r20
    1d74:	10 f0       	brcs	.+4      	; 0x1d7a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1d76:	cf 96       	adiw	r24, 0x3f	; 63
    1d78:	08 95       	ret
  return tail - head - 1;
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
}
    1d7c:	08 95       	ret

00001d7e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1d7e:	8b e2       	ldi	r24, 0x2B	; 43
    1d80:	99 e0       	ldi	r25, 0x09	; 9
    1d82:	89 2b       	or	r24, r25
    1d84:	49 f0       	breq	.+18     	; 0x1d98 <_Z14serialEventRunv+0x1a>
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	89 2b       	or	r24, r25
    1d8c:	29 f0       	breq	.+10     	; 0x1d98 <_Z14serialEventRunv+0x1a>
    1d8e:	0e 94 2b 09 	call	0x1256	; 0x1256 <_Z17Serial0_availablev>
    1d92:	81 11       	cpse	r24, r1
    1d94:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1d98:	08 95       	ret

00001d9a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1d9a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1d9c:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d9e:	df 01       	movw	r26, r30
    1da0:	a8 0f       	add	r26, r24
    1da2:	b1 1d       	adc	r27, r1
    1da4:	a3 5a       	subi	r26, 0xA3	; 163
    1da6:	bf 4f       	sbci	r27, 0xFF	; 255
    1da8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1daa:	84 8d       	ldd	r24, Z+28	; 0x1c
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	01 96       	adiw	r24, 0x01	; 1
    1db0:	8f 73       	andi	r24, 0x3F	; 63
    1db2:	99 27       	eor	r25, r25
    1db4:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1db6:	a6 89       	ldd	r26, Z+22	; 0x16
    1db8:	b7 89       	ldd	r27, Z+23	; 0x17
    1dba:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1dbc:	a0 89       	ldd	r26, Z+16	; 0x10
    1dbe:	b1 89       	ldd	r27, Z+17	; 0x11
    1dc0:	8c 91       	ld	r24, X
    1dc2:	83 70       	andi	r24, 0x03	; 3
    1dc4:	80 64       	ori	r24, 0x40	; 64
    1dc6:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1dc8:	93 8d       	ldd	r25, Z+27	; 0x1b
    1dca:	84 8d       	ldd	r24, Z+28	; 0x1c
    1dcc:	98 13       	cpse	r25, r24
    1dce:	06 c0       	rjmp	.+12     	; 0x1ddc <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1dd0:	02 88       	ldd	r0, Z+18	; 0x12
    1dd2:	f3 89       	ldd	r31, Z+19	; 0x13
    1dd4:	e0 2d       	mov	r30, r0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	8f 7d       	andi	r24, 0xDF	; 223
    1dda:	80 83       	st	Z, r24
    1ddc:	08 95       	ret

00001dde <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1dde:	ef 92       	push	r14
    1de0:	ff 92       	push	r15
    1de2:	0f 93       	push	r16
    1de4:	1f 93       	push	r17
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
    1dea:	ec 01       	movw	r28, r24
  _written = true;
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1df0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1df2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1df4:	98 13       	cpse	r25, r24
    1df6:	05 c0       	rjmp	.+10     	; 0x1e02 <_ZN14HardwareSerial5writeEh+0x24>
    1df8:	e8 89       	ldd	r30, Y+16	; 0x10
    1dfa:	f9 89       	ldd	r31, Y+17	; 0x11
    1dfc:	80 81       	ld	r24, Z
    1dfe:	85 fd       	sbrc	r24, 5
    1e00:	26 c0       	rjmp	.+76     	; 0x1e4e <_ZN14HardwareSerial5writeEh+0x70>
    1e02:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1e04:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1e06:	10 e0       	ldi	r17, 0x00	; 0
    1e08:	0f 5f       	subi	r16, 0xFF	; 255
    1e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0c:	0f 73       	andi	r16, 0x3F	; 63
    1e0e:	11 27       	eor	r17, r17
    1e10:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1e12:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e14:	e8 12       	cpse	r14, r24
    1e16:	0c c0       	rjmp	.+24     	; 0x1e30 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	07 fc       	sbrc	r0, 7
    1e1c:	fa cf       	rjmp	.-12     	; 0x1e12 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1e1e:	e8 89       	ldd	r30, Y+16	; 0x10
    1e20:	f9 89       	ldd	r31, Y+17	; 0x11
    1e22:	80 81       	ld	r24, Z
    1e24:	85 ff       	sbrs	r24, 5
    1e26:	f5 cf       	rjmp	.-22     	; 0x1e12 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1e28:	ce 01       	movw	r24, r28
    1e2a:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1e2e:	f1 cf       	rjmp	.-30     	; 0x1e12 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1e30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e32:	fe 01       	movw	r30, r28
    1e34:	e8 0f       	add	r30, r24
    1e36:	f1 1d       	adc	r31, r1
    1e38:	e3 5a       	subi	r30, 0xA3	; 163
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1e3e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e40:	f8 94       	cli
    _tx_buffer_head = i;
    1e42:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1e44:	ea 89       	ldd	r30, Y+18	; 0x12
    1e46:	fb 89       	ldd	r31, Y+19	; 0x13
    1e48:	80 81       	ld	r24, Z
    1e4a:	80 62       	ori	r24, 0x20	; 32
    1e4c:	0a c0       	rjmp	.+20     	; 0x1e62 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1e4e:	9f b7       	in	r25, 0x3f	; 63
    1e50:	f8 94       	cli
      *_udr = c;
    1e52:	ee 89       	ldd	r30, Y+22	; 0x16
    1e54:	ff 89       	ldd	r31, Y+23	; 0x17
    1e56:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1e58:	e8 89       	ldd	r30, Y+16	; 0x10
    1e5a:	f9 89       	ldd	r31, Y+17	; 0x11
    1e5c:	80 81       	ld	r24, Z
    1e5e:	83 70       	andi	r24, 0x03	; 3
    1e60:	80 64       	ori	r24, 0x40	; 64
    1e62:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e64:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	df 91       	pop	r29
    1e6c:	cf 91       	pop	r28
    1e6e:	1f 91       	pop	r17
    1e70:	0f 91       	pop	r16
    1e72:	ff 90       	pop	r15
    1e74:	ef 90       	pop	r14
    1e76:	08 95       	ret

00001e78 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1e78:	cf 93       	push	r28
    1e7a:	df 93       	push	r29
    1e7c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1e7e:	88 8d       	ldd	r24, Y+24	; 0x18
    1e80:	88 23       	and	r24, r24
    1e82:	c9 f0       	breq	.+50     	; 0x1eb6 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1e84:	ea 89       	ldd	r30, Y+18	; 0x12
    1e86:	fb 89       	ldd	r31, Y+19	; 0x13
    1e88:	80 81       	ld	r24, Z
    1e8a:	85 fd       	sbrc	r24, 5
    1e8c:	05 c0       	rjmp	.+10     	; 0x1e98 <_ZN14HardwareSerial5flushEv+0x20>
    1e8e:	a8 89       	ldd	r26, Y+16	; 0x10
    1e90:	b9 89       	ldd	r27, Y+17	; 0x11
    1e92:	8c 91       	ld	r24, X
    1e94:	86 fd       	sbrc	r24, 6
    1e96:	0f c0       	rjmp	.+30     	; 0x1eb6 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1e98:	0f b6       	in	r0, 0x3f	; 63
    1e9a:	07 fc       	sbrc	r0, 7
    1e9c:	f5 cf       	rjmp	.-22     	; 0x1e88 <_ZN14HardwareSerial5flushEv+0x10>
    1e9e:	80 81       	ld	r24, Z
    1ea0:	85 ff       	sbrs	r24, 5
    1ea2:	f2 cf       	rjmp	.-28     	; 0x1e88 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1ea4:	a8 89       	ldd	r26, Y+16	; 0x10
    1ea6:	b9 89       	ldd	r27, Y+17	; 0x11
    1ea8:	8c 91       	ld	r24, X
    1eaa:	85 ff       	sbrs	r24, 5
    1eac:	ed cf       	rjmp	.-38     	; 0x1e88 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1eae:	ce 01       	movw	r24, r28
    1eb0:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1eb4:	e7 cf       	rjmp	.-50     	; 0x1e84 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1eb6:	df 91       	pop	r29
    1eb8:	cf 91       	pop	r28
    1eba:	08 95       	ret

00001ebc <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    1ebc:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <twi_state>
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <twi_sendStop>
    1ec6:	10 92 e1 04 	sts	0x04E1, r1	; 0x8004e1 <twi_inRepStart>
    1eca:	61 e0       	ldi	r22, 0x01	; 1
    1ecc:	82 e1       	ldi	r24, 0x12	; 18
    1ece:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <digitalWrite>
    1ed2:	61 e0       	ldi	r22, 0x01	; 1
    1ed4:	83 e1       	ldi	r24, 0x13	; 19
    1ed6:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <digitalWrite>
    1eda:	e9 eb       	ldi	r30, 0xB9	; 185
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	8e 7f       	andi	r24, 0xFE	; 254
    1ee2:	80 83       	st	Z, r24
    1ee4:	80 81       	ld	r24, Z
    1ee6:	8d 7f       	andi	r24, 0xFD	; 253
    1ee8:	80 83       	st	Z, r24
    1eea:	88 e4       	ldi	r24, 0x48	; 72
    1eec:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1ef0:	85 e4       	ldi	r24, 0x45	; 69
    1ef2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1ef6:	08 95       	ret

00001ef8 <twi_disable>:
    1ef8:	ec eb       	ldi	r30, 0xBC	; 188
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	8a 7b       	andi	r24, 0xBA	; 186
    1f00:	80 83       	st	Z, r24
    1f02:	60 e0       	ldi	r22, 0x00	; 0
    1f04:	82 e1       	ldi	r24, 0x12	; 18
    1f06:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <digitalWrite>
    1f0a:	60 e0       	ldi	r22, 0x00	; 0
    1f0c:	83 e1       	ldi	r24, 0x13	; 19
    1f0e:	0c 94 e4 0c 	jmp	0x19c8	; 0x19c8 <digitalWrite>

00001f12 <twi_setFrequency>:
    1f12:	9b 01       	movw	r18, r22
    1f14:	ac 01       	movw	r20, r24
    1f16:	60 e0       	ldi	r22, 0x00	; 0
    1f18:	74 e2       	ldi	r23, 0x24	; 36
    1f1a:	84 ef       	ldi	r24, 0xF4	; 244
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	0e 94 33 13 	call	0x2666	; 0x2666 <__udivmodsi4>
    1f22:	da 01       	movw	r26, r20
    1f24:	c9 01       	movw	r24, r18
    1f26:	40 97       	sbiw	r24, 0x10	; 16
    1f28:	a1 09       	sbc	r26, r1
    1f2a:	b1 09       	sbc	r27, r1
    1f2c:	b6 95       	lsr	r27
    1f2e:	a7 95       	ror	r26
    1f30:	97 95       	ror	r25
    1f32:	87 95       	ror	r24
    1f34:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1f38:	08 95       	ret

00001f3a <twi_transmit>:
    1f3a:	40 91 93 04 	lds	r20, 0x0493	; 0x800493 <twi_txBufferLength>
    1f3e:	26 2f       	mov	r18, r22
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	24 0f       	add	r18, r20
    1f44:	31 1d       	adc	r19, r1
    1f46:	21 32       	cpi	r18, 0x21	; 33
    1f48:	31 05       	cpc	r19, r1
    1f4a:	dc f4       	brge	.+54     	; 0x1f82 <twi_transmit+0x48>
    1f4c:	20 91 e4 04 	lds	r18, 0x04E4	; 0x8004e4 <twi_state>
    1f50:	24 30       	cpi	r18, 0x04	; 4
    1f52:	c9 f4       	brne	.+50     	; 0x1f86 <twi_transmit+0x4c>
    1f54:	fc 01       	movw	r30, r24
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	86 17       	cp	r24, r22
    1f5c:	58 f4       	brcc	.+22     	; 0x1f74 <twi_transmit+0x3a>
    1f5e:	30 91 93 04 	lds	r19, 0x0493	; 0x800493 <twi_txBufferLength>
    1f62:	21 91       	ld	r18, Z+
    1f64:	dc 01       	movw	r26, r24
    1f66:	ab 56       	subi	r26, 0x6B	; 107
    1f68:	bb 4f       	sbci	r27, 0xFB	; 251
    1f6a:	a3 0f       	add	r26, r19
    1f6c:	b1 1d       	adc	r27, r1
    1f6e:	2c 93       	st	X, r18
    1f70:	01 96       	adiw	r24, 0x01	; 1
    1f72:	f3 cf       	rjmp	.-26     	; 0x1f5a <twi_transmit+0x20>
    1f74:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <twi_txBufferLength>
    1f78:	68 0f       	add	r22, r24
    1f7a:	60 93 93 04 	sts	0x0493, r22	; 0x800493 <twi_txBufferLength>
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	08 95       	ret
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	08 95       	ret
    1f86:	82 e0       	ldi	r24, 0x02	; 2
    1f88:	08 95       	ret

00001f8a <twi_attachSlaveRxEvent>:
    1f8a:	90 93 d8 04 	sts	0x04D8, r25	; 0x8004d8 <twi_onSlaveReceive+0x1>
    1f8e:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <twi_onSlaveReceive>
    1f92:	08 95       	ret

00001f94 <twi_attachSlaveTxEvent>:
    1f94:	90 93 da 04 	sts	0x04DA, r25	; 0x8004da <twi_onSlaveTransmit+0x1>
    1f98:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <twi_onSlaveTransmit>
    1f9c:	08 95       	ret

00001f9e <twi_releaseBus>:
    1f9e:	85 ec       	ldi	r24, 0xC5	; 197
    1fa0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1fa4:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <twi_state>
    1fa8:	08 95       	ret

00001faa <twi_handleTimeout>:
    1faa:	cf 93       	push	r28
    1fac:	df 93       	push	r29
    1fae:	91 e0       	ldi	r25, 0x01	; 1
    1fb0:	90 93 dc 04 	sts	0x04DC, r25	; 0x8004dc <twi_timed_out_flag>
    1fb4:	88 23       	and	r24, r24
    1fb6:	61 f0       	breq	.+24     	; 0x1fd0 <twi_handleTimeout+0x26>
    1fb8:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1fbc:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
    1fc0:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <twi_disable>
    1fc4:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <twi_init>
    1fc8:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
    1fcc:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	08 95       	ret

00001fd6 <twi_readFrom>:
    1fd6:	4f 92       	push	r4
    1fd8:	5f 92       	push	r5
    1fda:	6f 92       	push	r6
    1fdc:	7f 92       	push	r7
    1fde:	8f 92       	push	r8
    1fe0:	9f 92       	push	r9
    1fe2:	af 92       	push	r10
    1fe4:	bf 92       	push	r11
    1fe6:	cf 92       	push	r12
    1fe8:	df 92       	push	r13
    1fea:	ef 92       	push	r14
    1fec:	ff 92       	push	r15
    1fee:	0f 93       	push	r16
    1ff0:	1f 93       	push	r17
    1ff2:	cf 93       	push	r28
    1ff4:	df 93       	push	r29
    1ff6:	f8 2e       	mov	r15, r24
    1ff8:	16 2f       	mov	r17, r22
    1ffa:	07 2f       	mov	r16, r23
    1ffc:	c4 2f       	mov	r28, r20
    1ffe:	e2 2e       	mov	r14, r18
    2000:	41 32       	cpi	r20, 0x21	; 33
    2002:	08 f0       	brcs	.+2      	; 0x2006 <twi_readFrom+0x30>
    2004:	be c0       	rjmp	.+380    	; 0x2182 <twi_readFrom+0x1ac>
    2006:	0e 94 1f 0c 	call	0x183e	; 0x183e <micros>
    200a:	4b 01       	movw	r8, r22
    200c:	5c 01       	movw	r10, r24
    200e:	d0 91 e4 04 	lds	r29, 0x04E4	; 0x8004e4 <twi_state>
    2012:	dd 23       	and	r29, r29
    2014:	31 f1       	breq	.+76     	; 0x2062 <twi_readFrom+0x8c>
    2016:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <twi_timeout_us>
    201a:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <twi_timeout_us+0x1>
    201e:	a0 91 df 04 	lds	r26, 0x04DF	; 0x8004df <twi_timeout_us+0x2>
    2022:	b0 91 e0 04 	lds	r27, 0x04E0	; 0x8004e0 <twi_timeout_us+0x3>
    2026:	89 2b       	or	r24, r25
    2028:	8a 2b       	or	r24, r26
    202a:	8b 2b       	or	r24, r27
    202c:	81 f3       	breq	.-32     	; 0x200e <twi_readFrom+0x38>
    202e:	0e 94 1f 0c 	call	0x183e	; 0x183e <micros>
    2032:	40 90 dd 04 	lds	r4, 0x04DD	; 0x8004dd <twi_timeout_us>
    2036:	50 90 de 04 	lds	r5, 0x04DE	; 0x8004de <twi_timeout_us+0x1>
    203a:	60 90 df 04 	lds	r6, 0x04DF	; 0x8004df <twi_timeout_us+0x2>
    203e:	70 90 e0 04 	lds	r7, 0x04E0	; 0x8004e0 <twi_timeout_us+0x3>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	88 19       	sub	r24, r8
    2048:	99 09       	sbc	r25, r9
    204a:	aa 09       	sbc	r26, r10
    204c:	bb 09       	sbc	r27, r11
    204e:	48 16       	cp	r4, r24
    2050:	59 06       	cpc	r5, r25
    2052:	6a 06       	cpc	r6, r26
    2054:	7b 06       	cpc	r7, r27
    2056:	d8 f6       	brcc	.-74     	; 0x200e <twi_readFrom+0x38>
    2058:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <twi_do_reset_on_timeout>
    205c:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <twi_handleTimeout>
    2060:	90 c0       	rjmp	.+288    	; 0x2182 <twi_readFrom+0x1ac>
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <twi_state>
    2068:	e0 92 e2 04 	sts	0x04E2, r14	; 0x8004e2 <twi_sendStop>
    206c:	9f ef       	ldi	r25, 0xFF	; 255
    206e:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <twi_error>
    2072:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <twi_masterBufferIndex>
    2076:	9c 0f       	add	r25, r28
    2078:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <twi_masterBufferLength>
    207c:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <twi_slarw>
    2080:	90 91 e3 04 	lds	r25, 0x04E3	; 0x8004e3 <twi_slarw>
    2084:	8f 2d       	mov	r24, r15
    2086:	88 0f       	add	r24, r24
    2088:	89 2b       	or	r24, r25
    208a:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <twi_slarw>
    208e:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <twi_inRepStart>
    2092:	81 30       	cpi	r24, 0x01	; 1
    2094:	89 f5       	brne	.+98     	; 0x20f8 <twi_readFrom+0x122>
    2096:	10 92 e1 04 	sts	0x04E1, r1	; 0x8004e1 <twi_inRepStart>
    209a:	0e 94 1f 0c 	call	0x183e	; 0x183e <micros>
    209e:	6b 01       	movw	r12, r22
    20a0:	7c 01       	movw	r14, r24
    20a2:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <twi_slarw>
    20a6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    20aa:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <twi_timeout_us>
    20ae:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <twi_timeout_us+0x1>
    20b2:	a0 91 df 04 	lds	r26, 0x04DF	; 0x8004df <twi_timeout_us+0x2>
    20b6:	b0 91 e0 04 	lds	r27, 0x04E0	; 0x8004e0 <twi_timeout_us+0x3>
    20ba:	89 2b       	or	r24, r25
    20bc:	8a 2b       	or	r24, r26
    20be:	8b 2b       	or	r24, r27
    20c0:	a9 f0       	breq	.+42     	; 0x20ec <twi_readFrom+0x116>
    20c2:	0e 94 1f 0c 	call	0x183e	; 0x183e <micros>
    20c6:	80 90 dd 04 	lds	r8, 0x04DD	; 0x8004dd <twi_timeout_us>
    20ca:	90 90 de 04 	lds	r9, 0x04DE	; 0x8004de <twi_timeout_us+0x1>
    20ce:	a0 90 df 04 	lds	r10, 0x04DF	; 0x8004df <twi_timeout_us+0x2>
    20d2:	b0 90 e0 04 	lds	r11, 0x04E0	; 0x8004e0 <twi_timeout_us+0x3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	8c 19       	sub	r24, r12
    20dc:	9d 09       	sbc	r25, r13
    20de:	ae 09       	sbc	r26, r14
    20e0:	bf 09       	sbc	r27, r15
    20e2:	88 16       	cp	r8, r24
    20e4:	99 06       	cpc	r9, r25
    20e6:	aa 06       	cpc	r10, r26
    20e8:	bb 06       	cpc	r11, r27
    20ea:	90 f1       	brcs	.+100    	; 0x2150 <twi_readFrom+0x17a>
    20ec:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    20f0:	83 fd       	sbrc	r24, 3
    20f2:	d7 cf       	rjmp	.-82     	; 0x20a2 <twi_readFrom+0xcc>
    20f4:	85 ec       	ldi	r24, 0xC5	; 197
    20f6:	01 c0       	rjmp	.+2      	; 0x20fa <twi_readFrom+0x124>
    20f8:	85 ee       	ldi	r24, 0xE5	; 229
    20fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    20fe:	0e 94 1f 0c 	call	0x183e	; 0x183e <micros>
    2102:	6b 01       	movw	r12, r22
    2104:	7c 01       	movw	r14, r24
    2106:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <twi_state>
    210a:	81 30       	cpi	r24, 0x01	; 1
    210c:	31 f5       	brne	.+76     	; 0x215a <twi_readFrom+0x184>
    210e:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <twi_timeout_us>
    2112:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <twi_timeout_us+0x1>
    2116:	a0 91 df 04 	lds	r26, 0x04DF	; 0x8004df <twi_timeout_us+0x2>
    211a:	b0 91 e0 04 	lds	r27, 0x04E0	; 0x8004e0 <twi_timeout_us+0x3>
    211e:	89 2b       	or	r24, r25
    2120:	8a 2b       	or	r24, r26
    2122:	8b 2b       	or	r24, r27
    2124:	81 f3       	breq	.-32     	; 0x2106 <twi_readFrom+0x130>
    2126:	0e 94 1f 0c 	call	0x183e	; 0x183e <micros>
    212a:	80 90 dd 04 	lds	r8, 0x04DD	; 0x8004dd <twi_timeout_us>
    212e:	90 90 de 04 	lds	r9, 0x04DE	; 0x8004de <twi_timeout_us+0x1>
    2132:	a0 90 df 04 	lds	r10, 0x04DF	; 0x8004df <twi_timeout_us+0x2>
    2136:	b0 90 e0 04 	lds	r11, 0x04E0	; 0x8004e0 <twi_timeout_us+0x3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	8c 19       	sub	r24, r12
    2140:	9d 09       	sbc	r25, r13
    2142:	ae 09       	sbc	r26, r14
    2144:	bf 09       	sbc	r27, r15
    2146:	88 16       	cp	r8, r24
    2148:	99 06       	cpc	r9, r25
    214a:	aa 06       	cpc	r10, r26
    214c:	bb 06       	cpc	r11, r27
    214e:	d8 f6       	brcc	.-74     	; 0x2106 <twi_readFrom+0x130>
    2150:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <twi_do_reset_on_timeout>
    2154:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <twi_handleTimeout>
    2158:	15 c0       	rjmp	.+42     	; 0x2184 <twi_readFrom+0x1ae>
    215a:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <twi_masterBufferIndex>
    215e:	8c 17       	cp	r24, r28
    2160:	10 f4       	brcc	.+4      	; 0x2166 <twi_readFrom+0x190>
    2162:	c0 91 b6 04 	lds	r28, 0x04B6	; 0x8004b6 <twi_masterBufferIndex>
    2166:	a7 eb       	ldi	r26, 0xB7	; 183
    2168:	b4 e0       	ldi	r27, 0x04	; 4
    216a:	91 2f       	mov	r25, r17
    216c:	e1 2f       	mov	r30, r17
    216e:	f0 2f       	mov	r31, r16
    2170:	8e 2f       	mov	r24, r30
    2172:	89 1b       	sub	r24, r25
    2174:	8c 17       	cp	r24, r28
    2176:	18 f4       	brcc	.+6      	; 0x217e <twi_readFrom+0x1a8>
    2178:	8d 91       	ld	r24, X+
    217a:	81 93       	st	Z+, r24
    217c:	f9 cf       	rjmp	.-14     	; 0x2170 <twi_readFrom+0x19a>
    217e:	dc 2f       	mov	r29, r28
    2180:	01 c0       	rjmp	.+2      	; 0x2184 <twi_readFrom+0x1ae>
    2182:	d0 e0       	ldi	r29, 0x00	; 0
    2184:	8d 2f       	mov	r24, r29
    2186:	df 91       	pop	r29
    2188:	cf 91       	pop	r28
    218a:	1f 91       	pop	r17
    218c:	0f 91       	pop	r16
    218e:	ff 90       	pop	r15
    2190:	ef 90       	pop	r14
    2192:	df 90       	pop	r13
    2194:	cf 90       	pop	r12
    2196:	bf 90       	pop	r11
    2198:	af 90       	pop	r10
    219a:	9f 90       	pop	r9
    219c:	8f 90       	pop	r8
    219e:	7f 90       	pop	r7
    21a0:	6f 90       	pop	r6
    21a2:	5f 90       	pop	r5
    21a4:	4f 90       	pop	r4
    21a6:	08 95       	ret

000021a8 <twi_writeTo>:
    21a8:	4f 92       	push	r4
    21aa:	5f 92       	push	r5
    21ac:	6f 92       	push	r6
    21ae:	7f 92       	push	r7
    21b0:	8f 92       	push	r8
    21b2:	9f 92       	push	r9
    21b4:	af 92       	push	r10
    21b6:	bf 92       	push	r11
    21b8:	cf 92       	push	r12
    21ba:	df 92       	push	r13
    21bc:	ef 92       	push	r14
    21be:	ff 92       	push	r15
    21c0:	0f 93       	push	r16
    21c2:	1f 93       	push	r17
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	41 32       	cpi	r20, 0x21	; 33
    21ca:	08 f0       	brcs	.+2      	; 0x21ce <twi_writeTo+0x26>
    21cc:	c6 c0       	rjmp	.+396    	; 0x235a <twi_writeTo+0x1b2>
    21ce:	12 2f       	mov	r17, r18
    21d0:	f4 2e       	mov	r15, r20
    21d2:	d7 2e       	mov	r13, r23
    21d4:	e6 2e       	mov	r14, r22
    21d6:	d8 2f       	mov	r29, r24
    21d8:	0e 94 1f 0c 	call	0x183e	; 0x183e <micros>
    21dc:	4b 01       	movw	r8, r22
    21de:	5c 01       	movw	r10, r24
    21e0:	c0 91 e4 04 	lds	r28, 0x04E4	; 0x8004e4 <twi_state>
    21e4:	cc 23       	and	r28, r28
    21e6:	11 f1       	breq	.+68     	; 0x222c <twi_writeTo+0x84>
    21e8:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <twi_timeout_us>
    21ec:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <twi_timeout_us+0x1>
    21f0:	a0 91 df 04 	lds	r26, 0x04DF	; 0x8004df <twi_timeout_us+0x2>
    21f4:	b0 91 e0 04 	lds	r27, 0x04E0	; 0x8004e0 <twi_timeout_us+0x3>
    21f8:	89 2b       	or	r24, r25
    21fa:	8a 2b       	or	r24, r26
    21fc:	8b 2b       	or	r24, r27
    21fe:	81 f3       	breq	.-32     	; 0x21e0 <twi_writeTo+0x38>
    2200:	0e 94 1f 0c 	call	0x183e	; 0x183e <micros>
    2204:	40 90 dd 04 	lds	r4, 0x04DD	; 0x8004dd <twi_timeout_us>
    2208:	50 90 de 04 	lds	r5, 0x04DE	; 0x8004de <twi_timeout_us+0x1>
    220c:	60 90 df 04 	lds	r6, 0x04DF	; 0x8004df <twi_timeout_us+0x2>
    2210:	70 90 e0 04 	lds	r7, 0x04E0	; 0x8004e0 <twi_timeout_us+0x3>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	88 19       	sub	r24, r8
    221a:	99 09       	sbc	r25, r9
    221c:	aa 09       	sbc	r26, r10
    221e:	bb 09       	sbc	r27, r11
    2220:	48 16       	cp	r4, r24
    2222:	59 06       	cpc	r5, r25
    2224:	6a 06       	cpc	r6, r26
    2226:	7b 06       	cpc	r7, r27
    2228:	d8 f6       	brcc	.-74     	; 0x21e0 <twi_writeTo+0x38>
    222a:	83 c0       	rjmp	.+262    	; 0x2332 <twi_writeTo+0x18a>
    222c:	82 e0       	ldi	r24, 0x02	; 2
    222e:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <twi_state>
    2232:	00 93 e2 04 	sts	0x04E2, r16	; 0x8004e2 <twi_sendStop>
    2236:	8f ef       	ldi	r24, 0xFF	; 255
    2238:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <twi_error>
    223c:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <twi_masterBufferIndex>
    2240:	f0 92 b5 04 	sts	0x04B5, r15	; 0x8004b5 <twi_masterBufferLength>
    2244:	9e 2d       	mov	r25, r14
    2246:	a7 eb       	ldi	r26, 0xB7	; 183
    2248:	b4 e0       	ldi	r27, 0x04	; 4
    224a:	ee 2d       	mov	r30, r14
    224c:	fd 2d       	mov	r31, r13
    224e:	8e 2f       	mov	r24, r30
    2250:	89 1b       	sub	r24, r25
    2252:	8f 15       	cp	r24, r15
    2254:	18 f4       	brcc	.+6      	; 0x225c <twi_writeTo+0xb4>
    2256:	81 91       	ld	r24, Z+
    2258:	8d 93       	st	X+, r24
    225a:	f9 cf       	rjmp	.-14     	; 0x224e <twi_writeTo+0xa6>
    225c:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <twi_slarw>
    2260:	90 91 e3 04 	lds	r25, 0x04E3	; 0x8004e3 <twi_slarw>
    2264:	dd 0f       	add	r29, r29
    2266:	d9 2b       	or	r29, r25
    2268:	d0 93 e3 04 	sts	0x04E3, r29	; 0x8004e3 <twi_slarw>
    226c:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <twi_inRepStart>
    2270:	81 30       	cpi	r24, 0x01	; 1
    2272:	89 f5       	brne	.+98     	; 0x22d6 <twi_writeTo+0x12e>
    2274:	10 92 e1 04 	sts	0x04E1, r1	; 0x8004e1 <twi_inRepStart>
    2278:	0e 94 1f 0c 	call	0x183e	; 0x183e <micros>
    227c:	6b 01       	movw	r12, r22
    227e:	7c 01       	movw	r14, r24
    2280:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <twi_slarw>
    2284:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2288:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <twi_timeout_us>
    228c:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <twi_timeout_us+0x1>
    2290:	a0 91 df 04 	lds	r26, 0x04DF	; 0x8004df <twi_timeout_us+0x2>
    2294:	b0 91 e0 04 	lds	r27, 0x04E0	; 0x8004e0 <twi_timeout_us+0x3>
    2298:	89 2b       	or	r24, r25
    229a:	8a 2b       	or	r24, r26
    229c:	8b 2b       	or	r24, r27
    229e:	a9 f0       	breq	.+42     	; 0x22ca <twi_writeTo+0x122>
    22a0:	0e 94 1f 0c 	call	0x183e	; 0x183e <micros>
    22a4:	80 90 dd 04 	lds	r8, 0x04DD	; 0x8004dd <twi_timeout_us>
    22a8:	90 90 de 04 	lds	r9, 0x04DE	; 0x8004de <twi_timeout_us+0x1>
    22ac:	a0 90 df 04 	lds	r10, 0x04DF	; 0x8004df <twi_timeout_us+0x2>
    22b0:	b0 90 e0 04 	lds	r11, 0x04E0	; 0x8004e0 <twi_timeout_us+0x3>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	8c 19       	sub	r24, r12
    22ba:	9d 09       	sbc	r25, r13
    22bc:	ae 09       	sbc	r26, r14
    22be:	bf 09       	sbc	r27, r15
    22c0:	88 16       	cp	r8, r24
    22c2:	99 06       	cpc	r9, r25
    22c4:	aa 06       	cpc	r10, r26
    22c6:	bb 06       	cpc	r11, r27
    22c8:	a0 f1       	brcs	.+104    	; 0x2332 <twi_writeTo+0x18a>
    22ca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    22ce:	83 fd       	sbrc	r24, 3
    22d0:	d7 cf       	rjmp	.-82     	; 0x2280 <twi_writeTo+0xd8>
    22d2:	85 ec       	ldi	r24, 0xC5	; 197
    22d4:	01 c0       	rjmp	.+2      	; 0x22d8 <twi_writeTo+0x130>
    22d6:	85 ee       	ldi	r24, 0xE5	; 229
    22d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    22dc:	0e 94 1f 0c 	call	0x183e	; 0x183e <micros>
    22e0:	6b 01       	movw	r12, r22
    22e2:	7c 01       	movw	r14, r24
    22e4:	11 23       	and	r17, r17
    22e6:	59 f1       	breq	.+86     	; 0x233e <twi_writeTo+0x196>
    22e8:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <twi_state>
    22ec:	82 30       	cpi	r24, 0x02	; 2
    22ee:	39 f5       	brne	.+78     	; 0x233e <twi_writeTo+0x196>
    22f0:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <twi_timeout_us>
    22f4:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <twi_timeout_us+0x1>
    22f8:	a0 91 df 04 	lds	r26, 0x04DF	; 0x8004df <twi_timeout_us+0x2>
    22fc:	b0 91 e0 04 	lds	r27, 0x04E0	; 0x8004e0 <twi_timeout_us+0x3>
    2300:	89 2b       	or	r24, r25
    2302:	8a 2b       	or	r24, r26
    2304:	8b 2b       	or	r24, r27
    2306:	71 f3       	breq	.-36     	; 0x22e4 <twi_writeTo+0x13c>
    2308:	0e 94 1f 0c 	call	0x183e	; 0x183e <micros>
    230c:	80 90 dd 04 	lds	r8, 0x04DD	; 0x8004dd <twi_timeout_us>
    2310:	90 90 de 04 	lds	r9, 0x04DE	; 0x8004de <twi_timeout_us+0x1>
    2314:	a0 90 df 04 	lds	r10, 0x04DF	; 0x8004df <twi_timeout_us+0x2>
    2318:	b0 90 e0 04 	lds	r11, 0x04E0	; 0x8004e0 <twi_timeout_us+0x3>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	8c 19       	sub	r24, r12
    2322:	9d 09       	sbc	r25, r13
    2324:	ae 09       	sbc	r26, r14
    2326:	bf 09       	sbc	r27, r15
    2328:	88 16       	cp	r8, r24
    232a:	99 06       	cpc	r9, r25
    232c:	aa 06       	cpc	r10, r26
    232e:	bb 06       	cpc	r11, r27
    2330:	c8 f6       	brcc	.-78     	; 0x22e4 <twi_writeTo+0x13c>
    2332:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <twi_do_reset_on_timeout>
    2336:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <twi_handleTimeout>
    233a:	c5 e0       	ldi	r28, 0x05	; 5
    233c:	13 c0       	rjmp	.+38     	; 0x2364 <twi_writeTo+0x1bc>
    233e:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <twi_error>
    2342:	8f 3f       	cpi	r24, 0xFF	; 255
    2344:	79 f0       	breq	.+30     	; 0x2364 <twi_writeTo+0x1bc>
    2346:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <twi_error>
    234a:	80 32       	cpi	r24, 0x20	; 32
    234c:	41 f0       	breq	.+16     	; 0x235e <twi_writeTo+0x1b6>
    234e:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <twi_error>
    2352:	80 33       	cpi	r24, 0x30	; 48
    2354:	31 f0       	breq	.+12     	; 0x2362 <twi_writeTo+0x1ba>
    2356:	c4 e0       	ldi	r28, 0x04	; 4
    2358:	05 c0       	rjmp	.+10     	; 0x2364 <twi_writeTo+0x1bc>
    235a:	c1 e0       	ldi	r28, 0x01	; 1
    235c:	03 c0       	rjmp	.+6      	; 0x2364 <twi_writeTo+0x1bc>
    235e:	c2 e0       	ldi	r28, 0x02	; 2
    2360:	01 c0       	rjmp	.+2      	; 0x2364 <twi_writeTo+0x1bc>
    2362:	c3 e0       	ldi	r28, 0x03	; 3
    2364:	8c 2f       	mov	r24, r28
    2366:	df 91       	pop	r29
    2368:	cf 91       	pop	r28
    236a:	1f 91       	pop	r17
    236c:	0f 91       	pop	r16
    236e:	ff 90       	pop	r15
    2370:	ef 90       	pop	r14
    2372:	df 90       	pop	r13
    2374:	cf 90       	pop	r12
    2376:	bf 90       	pop	r11
    2378:	af 90       	pop	r10
    237a:	9f 90       	pop	r9
    237c:	8f 90       	pop	r8
    237e:	7f 90       	pop	r7
    2380:	6f 90       	pop	r6
    2382:	5f 90       	pop	r5
    2384:	4f 90       	pop	r4
    2386:	08 95       	ret

00002388 <twi_stop>:
    2388:	85 ed       	ldi	r24, 0xD5	; 213
    238a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    238e:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <twi_timeout_us>
    2392:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <twi_timeout_us+0x1>
    2396:	a0 91 df 04 	lds	r26, 0x04DF	; 0x8004df <twi_timeout_us+0x2>
    239a:	b0 91 e0 04 	lds	r27, 0x04E0	; 0x8004e0 <twi_timeout_us+0x3>
    239e:	07 96       	adiw	r24, 0x07	; 7
    23a0:	a1 1d       	adc	r26, r1
    23a2:	b1 1d       	adc	r27, r1
    23a4:	23 e0       	ldi	r18, 0x03	; 3
    23a6:	b6 95       	lsr	r27
    23a8:	a7 95       	ror	r26
    23aa:	97 95       	ror	r25
    23ac:	87 95       	ror	r24
    23ae:	2a 95       	dec	r18
    23b0:	d1 f7       	brne	.-12     	; 0x23a6 <twi_stop+0x1e>
    23b2:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    23b6:	24 ff       	sbrs	r18, 4
    23b8:	1c c0       	rjmp	.+56     	; 0x23f2 <twi_stop+0x6a>
    23ba:	40 91 dd 04 	lds	r20, 0x04DD	; 0x8004dd <twi_timeout_us>
    23be:	50 91 de 04 	lds	r21, 0x04DE	; 0x8004de <twi_timeout_us+0x1>
    23c2:	60 91 df 04 	lds	r22, 0x04DF	; 0x8004df <twi_timeout_us+0x2>
    23c6:	70 91 e0 04 	lds	r23, 0x04E0	; 0x8004e0 <twi_timeout_us+0x3>
    23ca:	45 2b       	or	r20, r21
    23cc:	46 2b       	or	r20, r22
    23ce:	47 2b       	or	r20, r23
    23d0:	81 f3       	breq	.-32     	; 0x23b2 <twi_stop+0x2a>
    23d2:	00 97       	sbiw	r24, 0x00	; 0
    23d4:	a1 05       	cpc	r26, r1
    23d6:	b1 05       	cpc	r27, r1
    23d8:	41 f0       	breq	.+16     	; 0x23ea <twi_stop+0x62>
    23da:	25 e3       	ldi	r18, 0x35	; 53
    23dc:	2a 95       	dec	r18
    23de:	f1 f7       	brne	.-4      	; 0x23dc <twi_stop+0x54>
    23e0:	00 00       	nop
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	a1 09       	sbc	r26, r1
    23e6:	b1 09       	sbc	r27, r1
    23e8:	e4 cf       	rjmp	.-56     	; 0x23b2 <twi_stop+0x2a>
    23ea:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <twi_do_reset_on_timeout>
    23ee:	0c 94 d5 0f 	jmp	0x1faa	; 0x1faa <twi_handleTimeout>
    23f2:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <twi_state>
    23f6:	08 95       	ret

000023f8 <__vector_24>:

ISR(TWI_vect)
{
    23f8:	1f 92       	push	r1
    23fa:	0f 92       	push	r0
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	0f 92       	push	r0
    2400:	11 24       	eor	r1, r1
    2402:	2f 93       	push	r18
    2404:	3f 93       	push	r19
    2406:	4f 93       	push	r20
    2408:	5f 93       	push	r21
    240a:	6f 93       	push	r22
    240c:	7f 93       	push	r23
    240e:	8f 93       	push	r24
    2410:	9f 93       	push	r25
    2412:	af 93       	push	r26
    2414:	bf 93       	push	r27
    2416:	ef 93       	push	r30
    2418:	ff 93       	push	r31
  switch(TW_STATUS){
    241a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    241e:	88 7f       	andi	r24, 0xF8	; 248
    2420:	80 36       	cpi	r24, 0x60	; 96
    2422:	09 f4       	brne	.+2      	; 0x2426 <__vector_24+0x2e>
    2424:	9e c0       	rjmp	.+316    	; 0x2562 <__vector_24+0x16a>
    2426:	78 f5       	brcc	.+94     	; 0x2486 <__vector_24+0x8e>
    2428:	88 32       	cpi	r24, 0x28	; 40
    242a:	09 f4       	brne	.+2      	; 0x242e <__vector_24+0x36>
    242c:	5d c0       	rjmp	.+186    	; 0x24e8 <__vector_24+0xf0>
    242e:	90 f4       	brcc	.+36     	; 0x2454 <__vector_24+0x5c>
    2430:	80 31       	cpi	r24, 0x10	; 16
    2432:	09 f4       	brne	.+2      	; 0x2436 <__vector_24+0x3e>
    2434:	56 c0       	rjmp	.+172    	; 0x24e2 <__vector_24+0xea>
    2436:	38 f4       	brcc	.+14     	; 0x2446 <__vector_24+0x4e>
    2438:	88 23       	and	r24, r24
    243a:	09 f4       	brne	.+2      	; 0x243e <__vector_24+0x46>
    243c:	f5 c0       	rjmp	.+490    	; 0x2628 <__vector_24+0x230>
    243e:	88 30       	cpi	r24, 0x08	; 8
    2440:	09 f4       	brne	.+2      	; 0x2444 <__vector_24+0x4c>
    2442:	4f c0       	rjmp	.+158    	; 0x24e2 <__vector_24+0xea>
    2444:	f5 c0       	rjmp	.+490    	; 0x2630 <__vector_24+0x238>
    2446:	88 31       	cpi	r24, 0x18	; 24
    2448:	09 f4       	brne	.+2      	; 0x244c <__vector_24+0x54>
    244a:	4e c0       	rjmp	.+156    	; 0x24e8 <__vector_24+0xf0>
    244c:	80 32       	cpi	r24, 0x20	; 32
    244e:	09 f4       	brne	.+2      	; 0x2452 <__vector_24+0x5a>
    2450:	5f c0       	rjmp	.+190    	; 0x2510 <__vector_24+0x118>
    2452:	ee c0       	rjmp	.+476    	; 0x2630 <__vector_24+0x238>
    2454:	80 34       	cpi	r24, 0x40	; 64
    2456:	09 f4       	brne	.+2      	; 0x245a <__vector_24+0x62>
    2458:	6a c0       	rjmp	.+212    	; 0x252e <__vector_24+0x136>
    245a:	58 f4       	brcc	.+22     	; 0x2472 <__vector_24+0x7a>
    245c:	80 33       	cpi	r24, 0x30	; 48
    245e:	09 f4       	brne	.+2      	; 0x2462 <__vector_24+0x6a>
    2460:	57 c0       	rjmp	.+174    	; 0x2510 <__vector_24+0x118>
    2462:	88 33       	cpi	r24, 0x38	; 56
    2464:	09 f0       	breq	.+2      	; 0x2468 <__vector_24+0x70>
    2466:	e4 c0       	rjmp	.+456    	; 0x2630 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2468:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <twi_error>
      twi_releaseBus();
    246c:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <twi_releaseBus>
      break;
    2470:	df c0       	rjmp	.+446    	; 0x2630 <__vector_24+0x238>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2472:	80 35       	cpi	r24, 0x50	; 80
    2474:	09 f4       	brne	.+2      	; 0x2478 <__vector_24+0x80>
    2476:	4f c0       	rjmp	.+158    	; 0x2516 <__vector_24+0x11e>
    2478:	88 35       	cpi	r24, 0x58	; 88
    247a:	09 f4       	brne	.+2      	; 0x247e <__vector_24+0x86>
    247c:	5d c0       	rjmp	.+186    	; 0x2538 <__vector_24+0x140>
    247e:	88 34       	cpi	r24, 0x48	; 72
    2480:	09 f0       	breq	.+2      	; 0x2484 <__vector_24+0x8c>
    2482:	d6 c0       	rjmp	.+428    	; 0x2630 <__vector_24+0x238>
    2484:	d3 c0       	rjmp	.+422    	; 0x262c <__vector_24+0x234>
    2486:	88 39       	cpi	r24, 0x98	; 152
    2488:	09 f4       	brne	.+2      	; 0x248c <__vector_24+0x94>
    248a:	c4 c0       	rjmp	.+392    	; 0x2614 <__vector_24+0x21c>
    248c:	a8 f4       	brcc	.+42     	; 0x24b8 <__vector_24+0xc0>
    248e:	88 37       	cpi	r24, 0x78	; 120
    2490:	09 f4       	brne	.+2      	; 0x2494 <__vector_24+0x9c>
    2492:	67 c0       	rjmp	.+206    	; 0x2562 <__vector_24+0x16a>
    2494:	38 f4       	brcc	.+14     	; 0x24a4 <__vector_24+0xac>
    2496:	88 36       	cpi	r24, 0x68	; 104
    2498:	09 f4       	brne	.+2      	; 0x249c <__vector_24+0xa4>
    249a:	63 c0       	rjmp	.+198    	; 0x2562 <__vector_24+0x16a>
    249c:	80 37       	cpi	r24, 0x70	; 112
    249e:	09 f4       	brne	.+2      	; 0x24a2 <__vector_24+0xaa>
    24a0:	60 c0       	rjmp	.+192    	; 0x2562 <__vector_24+0x16a>
    24a2:	c6 c0       	rjmp	.+396    	; 0x2630 <__vector_24+0x238>
    24a4:	88 38       	cpi	r24, 0x88	; 136
    24a6:	09 f4       	brne	.+2      	; 0x24aa <__vector_24+0xb2>
    24a8:	b5 c0       	rjmp	.+362    	; 0x2614 <__vector_24+0x21c>
    24aa:	80 39       	cpi	r24, 0x90	; 144
    24ac:	09 f4       	brne	.+2      	; 0x24b0 <__vector_24+0xb8>
    24ae:	5f c0       	rjmp	.+190    	; 0x256e <__vector_24+0x176>
    24b0:	80 38       	cpi	r24, 0x80	; 128
    24b2:	09 f0       	breq	.+2      	; 0x24b6 <__vector_24+0xbe>
    24b4:	bd c0       	rjmp	.+378    	; 0x2630 <__vector_24+0x238>
    24b6:	5b c0       	rjmp	.+182    	; 0x256e <__vector_24+0x176>
    24b8:	80 3b       	cpi	r24, 0xB0	; 176
    24ba:	09 f4       	brne	.+2      	; 0x24be <__vector_24+0xc6>
    24bc:	83 c0       	rjmp	.+262    	; 0x25c4 <__vector_24+0x1cc>
    24be:	38 f4       	brcc	.+14     	; 0x24ce <__vector_24+0xd6>
    24c0:	80 3a       	cpi	r24, 0xA0	; 160
    24c2:	09 f4       	brne	.+2      	; 0x24c6 <__vector_24+0xce>
    24c4:	66 c0       	rjmp	.+204    	; 0x2592 <__vector_24+0x19a>
    24c6:	88 3a       	cpi	r24, 0xA8	; 168
    24c8:	09 f4       	brne	.+2      	; 0x24cc <__vector_24+0xd4>
    24ca:	7c c0       	rjmp	.+248    	; 0x25c4 <__vector_24+0x1cc>
    24cc:	b1 c0       	rjmp	.+354    	; 0x2630 <__vector_24+0x238>
    24ce:	80 3c       	cpi	r24, 0xC0	; 192
    24d0:	09 f4       	brne	.+2      	; 0x24d4 <__vector_24+0xdc>
    24d2:	a4 c0       	rjmp	.+328    	; 0x261c <__vector_24+0x224>
    24d4:	88 3c       	cpi	r24, 0xC8	; 200
    24d6:	09 f4       	brne	.+2      	; 0x24da <__vector_24+0xe2>
    24d8:	a1 c0       	rjmp	.+322    	; 0x261c <__vector_24+0x224>
    24da:	88 3b       	cpi	r24, 0xB8	; 184
    24dc:	09 f4       	brne	.+2      	; 0x24e0 <__vector_24+0xe8>
    24de:	87 c0       	rjmp	.+270    	; 0x25ee <__vector_24+0x1f6>
    24e0:	a7 c0       	rjmp	.+334    	; 0x2630 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    24e2:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <twi_slarw>
    24e6:	10 c0       	rjmp	.+32     	; 0x2508 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    24e8:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <twi_masterBufferIndex>
    24ec:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <twi_masterBufferLength>
    24f0:	98 17       	cp	r25, r24
    24f2:	70 f5       	brcc	.+92     	; 0x2550 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    24f4:	e0 91 b6 04 	lds	r30, 0x04B6	; 0x8004b6 <twi_masterBufferIndex>
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	8e 0f       	add	r24, r30
    24fc:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <twi_masterBufferIndex>
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	e9 54       	subi	r30, 0x49	; 73
    2504:	fb 4f       	sbci	r31, 0xFB	; 251
    2506:	80 81       	ld	r24, Z
    2508:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    250c:	85 ec       	ldi	r24, 0xC5	; 197
    250e:	83 c0       	rjmp	.+262    	; 0x2616 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2510:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <twi_error>
    2514:	8b c0       	rjmp	.+278    	; 0x262c <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2516:	e0 91 b6 04 	lds	r30, 0x04B6	; 0x8004b6 <twi_masterBufferIndex>
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	8e 0f       	add	r24, r30
    251e:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <twi_masterBufferIndex>
    2522:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	e9 54       	subi	r30, 0x49	; 73
    252a:	fb 4f       	sbci	r31, 0xFB	; 251
    252c:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    252e:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <twi_masterBufferIndex>
    2532:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <twi_masterBufferLength>
    2536:	6b c0       	rjmp	.+214    	; 0x260e <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2538:	e0 91 b6 04 	lds	r30, 0x04B6	; 0x8004b6 <twi_masterBufferIndex>
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	8e 0f       	add	r24, r30
    2540:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <twi_masterBufferIndex>
    2544:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	e9 54       	subi	r30, 0x49	; 73
    254c:	fb 4f       	sbci	r31, 0xFB	; 251
    254e:	80 83       	st	Z, r24
      if (twi_sendStop){
    2550:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <twi_sendStop>
    2554:	81 11       	cpse	r24, r1
    2556:	6a c0       	rjmp	.+212    	; 0x262c <__vector_24+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    255e:	84 ea       	ldi	r24, 0xA4	; 164
    2560:	5e c0       	rjmp	.+188    	; 0x261e <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2562:	83 e0       	ldi	r24, 0x03	; 3
    2564:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2568:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <twi_rxBufferIndex>
    256c:	cf cf       	rjmp	.-98     	; 0x250c <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    256e:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <twi_rxBufferIndex>
    2572:	80 32       	cpi	r24, 0x20	; 32
    2574:	08 f0       	brcs	.+2      	; 0x2578 <__vector_24+0x180>
    2576:	4e c0       	rjmp	.+156    	; 0x2614 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2578:	e0 91 72 04 	lds	r30, 0x0472	; 0x800472 <twi_rxBufferIndex>
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	8e 0f       	add	r24, r30
    2580:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <twi_rxBufferIndex>
    2584:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	ed 58       	subi	r30, 0x8D	; 141
    258c:	fb 4f       	sbci	r31, 0xFB	; 251
    258e:	80 83       	st	Z, r24
    2590:	bd cf       	rjmp	.-134    	; 0x250c <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2592:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2596:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <twi_rxBufferIndex>
    259a:	80 32       	cpi	r24, 0x20	; 32
    259c:	30 f4       	brcc	.+12     	; 0x25aa <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    259e:	e0 91 72 04 	lds	r30, 0x0472	; 0x800472 <twi_rxBufferIndex>
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	ed 58       	subi	r30, 0x8D	; 141
    25a6:	fb 4f       	sbci	r31, 0xFB	; 251
    25a8:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    25aa:	60 91 72 04 	lds	r22, 0x0472	; 0x800472 <twi_rxBufferIndex>
    25ae:	70 e0       	ldi	r23, 0x00	; 0
    25b0:	e0 91 d7 04 	lds	r30, 0x04D7	; 0x8004d7 <twi_onSlaveReceive>
    25b4:	f0 91 d8 04 	lds	r31, 0x04D8	; 0x8004d8 <twi_onSlaveReceive+0x1>
    25b8:	83 e7       	ldi	r24, 0x73	; 115
    25ba:	94 e0       	ldi	r25, 0x04	; 4
    25bc:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    25be:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <twi_rxBufferIndex>
      break;
    25c2:	36 c0       	rjmp	.+108    	; 0x2630 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    25c4:	84 e0       	ldi	r24, 0x04	; 4
    25c6:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    25ca:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    25ce:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    25d2:	e0 91 d9 04 	lds	r30, 0x04D9	; 0x8004d9 <twi_onSlaveTransmit>
    25d6:	f0 91 da 04 	lds	r31, 0x04DA	; 0x8004da <twi_onSlaveTransmit+0x1>
    25da:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    25dc:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <twi_txBufferLength>
    25e0:	81 11       	cpse	r24, r1
    25e2:	05 c0       	rjmp	.+10     	; 0x25ee <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    25ea:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    25ee:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <twi_txBufferIndex>
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	8e 0f       	add	r24, r30
    25f6:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <twi_txBufferIndex>
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	eb 56       	subi	r30, 0x6B	; 107
    25fe:	fb 4f       	sbci	r31, 0xFB	; 251
    2600:	80 81       	ld	r24, Z
    2602:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2606:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <twi_txBufferIndex>
    260a:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <twi_txBufferLength>
    260e:	98 17       	cp	r25, r24
    2610:	08 f4       	brcc	.+2      	; 0x2614 <__vector_24+0x21c>
    2612:	7c cf       	rjmp	.-264    	; 0x250c <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2614:	85 e8       	ldi	r24, 0x85	; 133
    2616:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    261a:	0a c0       	rjmp	.+20     	; 0x2630 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    261c:	85 ec       	ldi	r24, 0xC5	; 197
    261e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2622:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <twi_state>
      break;
    2626:	04 c0       	rjmp	.+8      	; 0x2630 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2628:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <twi_error>
      twi_stop();
    262c:	0e 94 c4 11 	call	0x2388	; 0x2388 <twi_stop>
      break;
  }
}
    2630:	ff 91       	pop	r31
    2632:	ef 91       	pop	r30
    2634:	bf 91       	pop	r27
    2636:	af 91       	pop	r26
    2638:	9f 91       	pop	r25
    263a:	8f 91       	pop	r24
    263c:	7f 91       	pop	r23
    263e:	6f 91       	pop	r22
    2640:	5f 91       	pop	r21
    2642:	4f 91       	pop	r20
    2644:	3f 91       	pop	r19
    2646:	2f 91       	pop	r18
    2648:	0f 90       	pop	r0
    264a:	0f be       	out	0x3f, r0	; 63
    264c:	0f 90       	pop	r0
    264e:	1f 90       	pop	r1
    2650:	18 95       	reti

00002652 <__cmpsf2>:
    2652:	0e 94 ac 08 	call	0x1158	; 0x1158 <__fp_cmp>
    2656:	08 f4       	brcc	.+2      	; 0x265a <__cmpsf2+0x8>
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	08 95       	ret

0000265c <__unordsf2>:
    265c:	0e 94 ac 08 	call	0x1158	; 0x1158 <__fp_cmp>
    2660:	88 0b       	sbc	r24, r24
    2662:	99 0b       	sbc	r25, r25
    2664:	08 95       	ret

00002666 <__udivmodsi4>:
    2666:	a1 e2       	ldi	r26, 0x21	; 33
    2668:	1a 2e       	mov	r1, r26
    266a:	aa 1b       	sub	r26, r26
    266c:	bb 1b       	sub	r27, r27
    266e:	fd 01       	movw	r30, r26
    2670:	0d c0       	rjmp	.+26     	; 0x268c <__udivmodsi4_ep>

00002672 <__udivmodsi4_loop>:
    2672:	aa 1f       	adc	r26, r26
    2674:	bb 1f       	adc	r27, r27
    2676:	ee 1f       	adc	r30, r30
    2678:	ff 1f       	adc	r31, r31
    267a:	a2 17       	cp	r26, r18
    267c:	b3 07       	cpc	r27, r19
    267e:	e4 07       	cpc	r30, r20
    2680:	f5 07       	cpc	r31, r21
    2682:	20 f0       	brcs	.+8      	; 0x268c <__udivmodsi4_ep>
    2684:	a2 1b       	sub	r26, r18
    2686:	b3 0b       	sbc	r27, r19
    2688:	e4 0b       	sbc	r30, r20
    268a:	f5 0b       	sbc	r31, r21

0000268c <__udivmodsi4_ep>:
    268c:	66 1f       	adc	r22, r22
    268e:	77 1f       	adc	r23, r23
    2690:	88 1f       	adc	r24, r24
    2692:	99 1f       	adc	r25, r25
    2694:	1a 94       	dec	r1
    2696:	69 f7       	brne	.-38     	; 0x2672 <__udivmodsi4_loop>
    2698:	60 95       	com	r22
    269a:	70 95       	com	r23
    269c:	80 95       	com	r24
    269e:	90 95       	com	r25
    26a0:	9b 01       	movw	r18, r22
    26a2:	ac 01       	movw	r20, r24
    26a4:	bd 01       	movw	r22, r26
    26a6:	cf 01       	movw	r24, r30
    26a8:	08 95       	ret

000026aa <__tablejump2__>:
    26aa:	ee 0f       	add	r30, r30
    26ac:	ff 1f       	adc	r31, r31
    26ae:	05 90       	lpm	r0, Z+
    26b0:	f4 91       	lpm	r31, Z
    26b2:	e0 2d       	mov	r30, r0
    26b4:	09 94       	ijmp

000026b6 <_exit>:
    26b6:	f8 94       	cli

000026b8 <__stop_program>:
    26b8:	ff cf       	rjmp	.-2      	; 0x26b8 <__stop_program>
