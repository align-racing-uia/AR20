
src.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000168  00800100  0000297a  00002a0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000297a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000254  00800268  00800268  00002b76  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002b76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ba8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000530  00000000  00000000  00002be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d31e  00000000  00000000  00003118  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002615  00000000  00000000  00010436  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002eb9  00000000  00000000  00012a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ff8  00000000  00000000  00015904  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000030a8  00000000  00000000  000168fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000055eb  00000000  00000000  000199a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004a0  00000000  00000000  0001ef8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__ctors_end>
       4:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
       8:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
       c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      10:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      14:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      18:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      1c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      20:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      24:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      28:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      2c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      30:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      34:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      38:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      3c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      40:	0c 94 b8 0d 	jmp	0x1b70	; 0x1b70 <__vector_16>
      44:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      48:	0c 94 b0 0a 	jmp	0x1560	; 0x1560 <__vector_18>
      4c:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <__vector_19>
      50:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      54:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      58:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      5c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      60:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__vector_24>
      64:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	73 65       	ori	r23, 0x53	; 83
      6a:	74 20       	and	r7, r4
      6c:	63 61       	ori	r22, 0x13	; 19
      6e:	6c 69       	ori	r22, 0x9C	; 156
      70:	62 72       	andi	r22, 0x22	; 34
      72:	61 74       	andi	r22, 0x41	; 65
      74:	69 6f       	ori	r22, 0xF9	; 249
      76:	6e 00       	.word	0x006e	; ????

00000078 <_ZZN8INA233_S10resetAlarmEvE3__c>:
      78:	72 65 73 65 74 20 61 6c 61 72 6d 00                 reset alarm.

00000084 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_4>:
      84:	55 56 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     UV WARN LIMIT re
      94:	61 64 62 61 63 6b 3a 20 00                          adback: .

0000009d <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_3>:
      9d:	55 56 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     UV WARN LIMIT: .

000000ad <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_2>:
      ad:	4f 56 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     OV WARN LIMIT re
      bd:	61 64 62 61 63 6b 3a 20 00                          adback: .

000000c6 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_1>:
      c6:	4f 56 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     OV WARN LIMIT: .

000000d6 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_0>:
      d6:	4f 43 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     OC WARN LIMIT re
      e6:	61 64 62 61 63 6b 3a 20 00                          adback: .

000000ef <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c>:
      ef:	4f 43 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     OC WARN LIMIT: .

000000ff <_ZZ4loopE3__c_0>:
      ff:	66 72 65 65 4d 65 6d 6f 72 79 28 29 3d 00           freeMemory()=.

0000010d <_ZZ4loopE3__c>:
     10d:	6c 6f 6f 70 69 6e 67 00                             looping.

00000115 <_ZZ5setupE3__c>:
     115:	66 72 65 65 4d 65 6d 6f 72 79 28 29 3d 00           freeMemory()=.

00000123 <digital_pin_to_timer_PGM>:
     123:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     133:	00 00 00 00                                         ....

00000137 <digital_pin_to_bit_mask_PGM>:
     137:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     147:	04 08 10 20                                         ... 

0000014b <digital_pin_to_port_PGM>:
     14b:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     15b:	03 03 03 03                                         ....

0000015f <port_to_output_PGM>:
     15f:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000169 <port_to_mode_PGM>:
     169:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000174 <__ctors_start>:
     174:	8a 06       	cpc	r8, r26
     176:	12 0b       	sbc	r17, r18
     178:	b9 10       	cpse	r11, r9

0000017a <__ctors_end>:
     17a:	11 24       	eor	r1, r1
     17c:	1f be       	out	0x3f, r1	; 63
     17e:	cf ef       	ldi	r28, 0xFF	; 255
     180:	d8 e0       	ldi	r29, 0x08	; 8
     182:	de bf       	out	0x3e, r29	; 62
     184:	cd bf       	out	0x3d, r28	; 61

00000186 <__do_copy_data>:
     186:	12 e0       	ldi	r17, 0x02	; 2
     188:	a0 e0       	ldi	r26, 0x00	; 0
     18a:	b1 e0       	ldi	r27, 0x01	; 1
     18c:	ea e7       	ldi	r30, 0x7A	; 122
     18e:	f9 e2       	ldi	r31, 0x29	; 41
     190:	02 c0       	rjmp	.+4      	; 0x196 <__do_copy_data+0x10>
     192:	05 90       	lpm	r0, Z+
     194:	0d 92       	st	X+, r0
     196:	a8 36       	cpi	r26, 0x68	; 104
     198:	b1 07       	cpc	r27, r17
     19a:	d9 f7       	brne	.-10     	; 0x192 <__do_copy_data+0xc>

0000019c <__do_clear_bss>:
     19c:	24 e0       	ldi	r18, 0x04	; 4
     19e:	a8 e6       	ldi	r26, 0x68	; 104
     1a0:	b2 e0       	ldi	r27, 0x02	; 2
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <.do_clear_bss_start>

000001a4 <.do_clear_bss_loop>:
     1a4:	1d 92       	st	X+, r1

000001a6 <.do_clear_bss_start>:
     1a6:	ac 3b       	cpi	r26, 0xBC	; 188
     1a8:	b2 07       	cpc	r27, r18
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <.do_clear_bss_loop>

000001ac <__do_global_ctors>:
     1ac:	10 e0       	ldi	r17, 0x00	; 0
     1ae:	cd eb       	ldi	r28, 0xBD	; 189
     1b0:	d0 e0       	ldi	r29, 0x00	; 0
     1b2:	04 c0       	rjmp	.+8      	; 0x1bc <__do_global_ctors+0x10>
     1b4:	21 97       	sbiw	r28, 0x01	; 1
     1b6:	fe 01       	movw	r30, r28
     1b8:	0e 94 b5 14 	call	0x296a	; 0x296a <__tablejump2__>
     1bc:	ca 3b       	cpi	r28, 0xBA	; 186
     1be:	d1 07       	cpc	r29, r17
     1c0:	c9 f7       	brne	.-14     	; 0x1b4 <__do_global_ctors+0x8>
     1c2:	0e 94 40 0b 	call	0x1680	; 0x1680 <main>
     1c6:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <_exit>

000001ca <__bad_interrupt>:
     1ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ce <_ZN8INA233_S15transmitCommandEh>:
    INA233_Data_Package readback = receiveData_(0xD5, 1);
    Serial.print(F("mfr config Readback: "));
    Serial.println(readback.msg[0], BIN);
	
	return 10;
}
     1ce:	cf 93       	push	r28
     1d0:	c6 2f       	mov	r28, r22
     1d2:	fc 01       	movw	r30, r24
     1d4:	60 81       	ld	r22, Z
     1d6:	8e ee       	ldi	r24, 0xEE	; 238
     1d8:	93 e0       	ldi	r25, 0x03	; 3
     1da:	0e 94 32 10 	call	0x2064	; 0x2064 <_ZN7TwoWire17beginTransmissionEh>
     1de:	6c 2f       	mov	r22, r28
     1e0:	8e ee       	ldi	r24, 0xEE	; 238
     1e2:	93 e0       	ldi	r25, 0x03	; 3
     1e4:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <_ZN7TwoWire5writeEh>
     1e8:	8e ee       	ldi	r24, 0xEE	; 238
     1ea:	93 e0       	ldi	r25, 0x03	; 3
     1ec:	cf 91       	pop	r28
     1ee:	0c 94 b6 10 	jmp	0x216c	; 0x216c <_ZN7TwoWire15endTransmissionEv>

000001f2 <_ZN8INA233_S10resetAlarmEv>:
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
     1f6:	ec 01       	movw	r28, r24
     1f8:	68 e7       	ldi	r22, 0x78	; 120
     1fa:	70 e0       	ldi	r23, 0x00	; 0
     1fc:	88 e4       	ldi	r24, 0x48	; 72
     1fe:	93 e0       	ldi	r25, 0x03	; 3
     200:	0e 94 bf 0b 	call	0x177e	; 0x177e <_ZN5Print7printlnEPK19__FlashStringHelper>
     204:	63 e0       	ldi	r22, 0x03	; 3
     206:	ce 01       	movw	r24, r28
     208:	df 91       	pop	r29
     20a:	cf 91       	pop	r28
     20c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_ZN8INA233_S15transmitCommandEh>

00000210 <_ZN8INA233_S9resetChipEv>:
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	ec 01       	movw	r28, r24
     216:	62 e0       	ldi	r22, 0x02	; 2
     218:	71 e0       	ldi	r23, 0x01	; 1
     21a:	88 e4       	ldi	r24, 0x48	; 72
     21c:	93 e0       	ldi	r25, 0x03	; 3
     21e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_ZN5Print7printlnEPKc>
     222:	62 e1       	ldi	r22, 0x12	; 18
     224:	ce 01       	movw	r24, r28
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_ZN8INA233_S15transmitCommandEh>

0000022e <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>:
     22e:	1f 93       	push	r17
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	fc 01       	movw	r30, r24
     236:	eb 01       	movw	r28, r22
     238:	14 2f       	mov	r17, r20
     23a:	9a 85       	ldd	r25, Y+10	; 0x0a
     23c:	93 30       	cpi	r25, 0x03	; 3
     23e:	18 f0       	brcs	.+6      	; 0x246 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x18>
     240:	6d e0       	ldi	r22, 0x0D	; 13
     242:	71 e0       	ldi	r23, 0x01	; 1
     244:	04 c0       	rjmp	.+8      	; 0x24e <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x20>
     246:	91 11       	cpse	r25, r1
     248:	0f c0       	rjmp	.+30     	; 0x268 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x3a>
     24a:	63 e7       	ldi	r22, 0x73	; 115
     24c:	71 e0       	ldi	r23, 0x01	; 1
     24e:	88 e4       	ldi	r24, 0x48	; 72
     250:	93 e0       	ldi	r25, 0x03	; 3
     252:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_ZN5Print7printlnEPKc>
     256:	62 e5       	ldi	r22, 0x52	; 82
     258:	71 e0       	ldi	r23, 0x01	; 1
     25a:	88 e4       	ldi	r24, 0x48	; 72
     25c:	93 e0       	ldi	r25, 0x03	; 3
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	1f 91       	pop	r17
     264:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <_ZN5Print7printlnEPKc>
     268:	60 81       	ld	r22, Z
     26a:	8e ee       	ldi	r24, 0xEE	; 238
     26c:	93 e0       	ldi	r25, 0x03	; 3
     26e:	0e 94 32 10 	call	0x2064	; 0x2064 <_ZN7TwoWire17beginTransmissionEh>
     272:	61 2f       	mov	r22, r17
     274:	8e ee       	ldi	r24, 0xEE	; 238
     276:	93 e0       	ldi	r25, 0x03	; 3
     278:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <_ZN7TwoWire5writeEh>
     27c:	68 81       	ld	r22, Y
     27e:	8e ee       	ldi	r24, 0xEE	; 238
     280:	93 e0       	ldi	r25, 0x03	; 3
     282:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <_ZN7TwoWire5writeEh>
     286:	8a 85       	ldd	r24, Y+10	; 0x0a
     288:	82 30       	cpi	r24, 0x02	; 2
     28a:	29 f4       	brne	.+10     	; 0x296 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x68>
     28c:	69 81       	ldd	r22, Y+1	; 0x01
     28e:	8e ee       	ldi	r24, 0xEE	; 238
     290:	93 e0       	ldi	r25, 0x03	; 3
     292:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <_ZN7TwoWire5writeEh>
     296:	8e ee       	ldi	r24, 0xEE	; 238
     298:	93 e0       	ldi	r25, 0x03	; 3
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	1f 91       	pop	r17
     2a0:	0c 94 b6 10 	jmp	0x216c	; 0x216c <_ZN7TwoWire15endTransmissionEv>

000002a4 <_ZN8INA233_S15setCallibrationEj>:
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	2f 97       	sbiw	r28, 0x0f	; 15
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	f8 94       	cli
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	cd bf       	out	0x3d, r28	; 61
     2c0:	8c 01       	movw	r16, r24
     2c2:	7b 01       	movw	r14, r22
     2c4:	68 e6       	ldi	r22, 0x68	; 104
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	88 e4       	ldi	r24, 0x48	; 72
     2ca:	93 e0       	ldi	r25, 0x03	; 3
     2cc:	0e 94 bf 0b 	call	0x177e	; 0x177e <_ZN5Print7printlnEPK19__FlashStringHelper>
     2d0:	be 01       	movw	r22, r28
     2d2:	6f 5f       	subi	r22, 0xFF	; 255
     2d4:	7f 4f       	sbci	r23, 0xFF	; 255
     2d6:	8f e0       	ldi	r24, 0x0F	; 15
     2d8:	fb 01       	movw	r30, r22
     2da:	11 92       	st	Z+, r1
     2dc:	8a 95       	dec	r24
     2de:	e9 f7       	brne	.-6      	; 0x2da <_ZN8INA233_S15setCallibrationEj+0x36>
     2e0:	8a e0       	ldi	r24, 0x0A	; 10
     2e2:	8c 87       	std	Y+12, r24	; 0x0c
     2e4:	e9 82       	std	Y+1, r14	; 0x01
     2e6:	fa 82       	std	Y+2, r15	; 0x02
     2e8:	82 e0       	ldi	r24, 0x02	; 2
     2ea:	8b 87       	std	Y+11, r24	; 0x0b
     2ec:	44 ed       	ldi	r20, 0xD4	; 212
     2ee:	c8 01       	movw	r24, r16
     2f0:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     2f4:	2f 96       	adiw	r28, 0x0f	; 15
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	cd bf       	out	0x3d, r28	; 61
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	ff 90       	pop	r15
     30a:	ef 90       	pop	r14
     30c:	08 95       	ret

0000030e <_ZN8INA233_S10initializeEv>:
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	ec 01       	movw	r28, r24
     314:	0e 94 08 01 	call	0x210	; 0x210 <_ZN8INA233_S9resetChipEv>
     318:	6b 81       	ldd	r22, Y+3	; 0x03
     31a:	7c 81       	ldd	r23, Y+4	; 0x04
     31c:	ce 01       	movw	r24, r28
     31e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN8INA233_S15setCallibrationEj>
     322:	ce 01       	movw	r24, r28
     324:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_ZN8INA233_S10resetAlarmEv>
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	08 95       	ret

00000332 <_ZN8INA233_SC1Ehjj>:
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	fc 01       	movw	r30, r24
     338:	60 83       	st	Z, r22
     33a:	52 83       	std	Z+2, r21	; 0x02
     33c:	41 83       	std	Z+1, r20	; 0x01
     33e:	34 83       	std	Z+4, r19	; 0x04
     340:	23 83       	std	Z+3, r18	; 0x03
     342:	8a e0       	ldi	r24, 0x0A	; 10
     344:	df 01       	movw	r26, r30
     346:	15 96       	adiw	r26, 0x05	; 5
     348:	ed 01       	movw	r28, r26
     34a:	98 2f       	mov	r25, r24
     34c:	19 92       	st	Y+, r1
     34e:	9a 95       	dec	r25
     350:	e9 f7       	brne	.-6      	; 0x34c <_ZN8INA233_SC1Ehjj+0x1a>
     352:	17 86       	std	Z+15, r1	; 0x0f
     354:	80 8b       	std	Z+16, r24	; 0x10
     356:	11 8a       	std	Z+17, r1	; 0x11
     358:	12 8a       	std	Z+18, r1	; 0x12
     35a:	13 8a       	std	Z+19, r1	; 0x13
     35c:	cf 01       	movw	r24, r30
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	0c 94 87 01 	jmp	0x30e	; 0x30e <_ZN8INA233_S10initializeEv>

00000366 <_ZN8INA233_S12receiveData_Ehh>:
     366:	ef 92       	push	r14
     368:	ff 92       	push	r15
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	ec 01       	movw	r28, r24
     374:	7b 01       	movw	r14, r22
     376:	02 2f       	mov	r16, r18
     378:	8f e0       	ldi	r24, 0x0F	; 15
     37a:	fe 01       	movw	r30, r28
     37c:	11 92       	st	Z+, r1
     37e:	8a 95       	dec	r24
     380:	e9 f7       	brne	.-6      	; 0x37c <_ZN8INA233_S12receiveData_Ehh+0x16>
     382:	8a e0       	ldi	r24, 0x0A	; 10
     384:	8b 87       	std	Y+11, r24	; 0x0b
     386:	64 2f       	mov	r22, r20
     388:	c7 01       	movw	r24, r14
     38a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN8INA233_S15transmitCommandEh>
     38e:	40 2f       	mov	r20, r16
     390:	f7 01       	movw	r30, r14
     392:	60 81       	ld	r22, Z
     394:	8e ee       	ldi	r24, 0xEE	; 238
     396:	93 e0       	ldi	r25, 0x03	; 3
     398:	0e 94 b3 10 	call	0x2166	; 0x2166 <_ZN7TwoWire11requestFromEhh>
     39c:	8e ee       	ldi	r24, 0xEE	; 238
     39e:	93 e0       	ldi	r25, 0x03	; 3
     3a0:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <_ZN7TwoWire9availableEv>
     3a4:	89 2b       	or	r24, r25
     3a6:	79 f0       	breq	.+30     	; 0x3c6 <_ZN8INA233_S12receiveData_Ehh+0x60>
     3a8:	1a 85       	ldd	r17, Y+10	; 0x0a
     3aa:	8e ee       	ldi	r24, 0xEE	; 238
     3ac:	93 e0       	ldi	r25, 0x03	; 3
     3ae:	0e 94 56 0f 	call	0x1eac	; 0x1eac <_ZN7TwoWire4readEv>
     3b2:	fe 01       	movw	r30, r28
     3b4:	e1 0f       	add	r30, r17
     3b6:	f1 1d       	adc	r31, r1
     3b8:	80 83       	st	Z, r24
     3ba:	1f 5f       	subi	r17, 0xFF	; 255
     3bc:	1a 87       	std	Y+10, r17	; 0x0a
     3be:	1a 30       	cpi	r17, 0x0A	; 10
     3c0:	68 f3       	brcs	.-38     	; 0x39c <_ZN8INA233_S12receiveData_Ehh+0x36>
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	8c 87       	std	Y+12, r24	; 0x0c
     3c6:	8a 85       	ldd	r24, Y+10	; 0x0a
     3c8:	80 17       	cp	r24, r16
     3ca:	18 f4       	brcc	.+6      	; 0x3d2 <_ZN8INA233_S12receiveData_Ehh+0x6c>
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	8d 87       	std	Y+13, r24	; 0x0d
     3d0:	04 c0       	rjmp	.+8      	; 0x3da <_ZN8INA233_S12receiveData_Ehh+0x74>
     3d2:	08 17       	cp	r16, r24
     3d4:	10 f4       	brcc	.+4      	; 0x3da <_ZN8INA233_S12receiveData_Ehh+0x74>
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	8e 87       	std	Y+14, r24	; 0x0e
     3da:	ce 01       	movw	r24, r28
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	08 95       	ret

000003ea <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>:
     3ea:	ef 92       	push	r14
     3ec:	ff 92       	push	r15
     3ee:	0f 93       	push	r16
     3f0:	1f 93       	push	r17
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	2f 97       	sbiw	r28, 0x0f	; 15
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	de bf       	out	0x3e, r29	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	cd bf       	out	0x3d, r28	; 61
     406:	8b 01       	movw	r16, r22
     408:	fb 01       	movw	r30, r22
     40a:	22 85       	ldd	r18, Z+10	; 0x0a
     40c:	bc 01       	movw	r22, r24
     40e:	ce 01       	movw	r24, r28
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	7c 01       	movw	r14, r24
     414:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN8INA233_S12receiveData_Ehh>
     418:	f8 01       	movw	r30, r16
     41a:	62 85       	ldd	r22, Z+10	; 0x0a
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	a8 01       	movw	r20, r16
     420:	d7 01       	movw	r26, r14
     422:	c8 01       	movw	r24, r16
     424:	9d 01       	movw	r18, r26
     426:	2e 19       	sub	r18, r14
     428:	3f 09       	sbc	r19, r15
     42a:	26 17       	cp	r18, r22
     42c:	37 07       	cpc	r19, r23
     42e:	48 f4       	brcc	.+18     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     430:	fc 01       	movw	r30, r24
     432:	31 91       	ld	r19, Z+
     434:	cf 01       	movw	r24, r30
     436:	2d 91       	ld	r18, X+
     438:	32 17       	cp	r19, r18
     43a:	a1 f3       	breq	.-24     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0b c0       	rjmp	.+22     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     442:	60 0f       	add	r22, r16
     444:	71 1f       	adc	r23, r17
     446:	46 17       	cp	r20, r22
     448:	57 07       	cpc	r21, r23
     44a:	21 f0       	breq	.+8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     44c:	fa 01       	movw	r30, r20
     44e:	11 92       	st	Z+, r1
     450:	af 01       	movw	r20, r30
     452:	f9 cf       	rjmp	.-14     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	2f 96       	adiw	r28, 0x0f	; 15
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	f8 94       	cli
     45e:	de bf       	out	0x3e, r29	; 62
     460:	0f be       	out	0x3f, r0	; 63
     462:	cd bf       	out	0x3d, r28	; 61
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	1f 91       	pop	r17
     46a:	0f 91       	pop	r16
     46c:	ff 90       	pop	r15
     46e:	ef 90       	pop	r14
     470:	08 95       	ret

00000472 <_ZN8INA233_S15setADC_SettingsEj>:
     472:	ef 92       	push	r14
     474:	ff 92       	push	r15
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	2f 97       	sbiw	r28, 0x0f	; 15
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	7c 01       	movw	r14, r24
     490:	8e 01       	movw	r16, r28
     492:	0f 5f       	subi	r16, 0xFF	; 255
     494:	1f 4f       	sbci	r17, 0xFF	; 255
     496:	8f e0       	ldi	r24, 0x0F	; 15
     498:	f8 01       	movw	r30, r16
     49a:	11 92       	st	Z+, r1
     49c:	8a 95       	dec	r24
     49e:	e9 f7       	brne	.-6      	; 0x49a <_ZN8INA233_S15setADC_SettingsEj+0x28>
     4a0:	8a e0       	ldi	r24, 0x0A	; 10
     4a2:	8c 87       	std	Y+12, r24	; 0x0c
     4a4:	69 83       	std	Y+1, r22	; 0x01
     4a6:	7a 83       	std	Y+2, r23	; 0x02
     4a8:	82 e0       	ldi	r24, 0x02	; 2
     4aa:	8b 87       	std	Y+11, r24	; 0x0b
     4ac:	40 ed       	ldi	r20, 0xD0	; 208
     4ae:	b8 01       	movw	r22, r16
     4b0:	c7 01       	movw	r24, r14
     4b2:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     4b6:	40 ed       	ldi	r20, 0xD0	; 208
     4b8:	b8 01       	movw	r22, r16
     4ba:	c7 01       	movw	r24, r14
     4bc:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>
     4c0:	2f 96       	adiw	r28, 0x0f	; 15
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	f8 94       	cli
     4c6:	de bf       	out	0x3e, r29	; 62
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	cd bf       	out	0x3d, r28	; 61
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	1f 91       	pop	r17
     4d2:	0f 91       	pop	r16
     4d4:	ff 90       	pop	r15
     4d6:	ef 90       	pop	r14
     4d8:	08 95       	ret

000004da <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config>:
     4da:	4f 92       	push	r4
     4dc:	5f 92       	push	r5
     4de:	6f 92       	push	r6
     4e0:	7f 92       	push	r7
     4e2:	af 92       	push	r10
     4e4:	bf 92       	push	r11
     4e6:	cf 92       	push	r12
     4e8:	df 92       	push	r13
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
     4fa:	ae 97       	sbiw	r28, 0x2e	; 46
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	f8 94       	cli
     500:	de bf       	out	0x3e, r29	; 62
     502:	0f be       	out	0x3f, r0	; 63
     504:	cd bf       	out	0x3d, r28	; 61
     506:	5c 01       	movw	r10, r24
     508:	cf 8e       	std	Y+31, r12	; 0x1f
     50a:	d8 a2       	std	Y+32, r13	; 0x20
     50c:	e9 a2       	std	Y+33, r14	; 0x21
     50e:	fa a2       	std	Y+34, r15	; 0x22
     510:	0b a3       	std	Y+35, r16	; 0x23
     512:	1c a3       	std	Y+36, r17	; 0x24
     514:	2d a3       	std	Y+37, r18	; 0x25
     516:	3e a3       	std	Y+38, r19	; 0x26
     518:	4f a3       	std	Y+39, r20	; 0x27
     51a:	58 a7       	std	Y+40, r21	; 0x28
     51c:	69 a7       	std	Y+41, r22	; 0x29
     51e:	7a a7       	std	Y+42, r23	; 0x2a
     520:	cf 8c       	ldd	r12, Y+31	; 0x1f
     522:	d8 a0       	ldd	r13, Y+32	; 0x20
     524:	e9 a0       	ldd	r14, Y+33	; 0x21
     526:	fa a0       	ldd	r15, Y+34	; 0x22
     528:	8b a1       	ldd	r24, Y+35	; 0x23
     52a:	9c a1       	ldd	r25, Y+36	; 0x24
     52c:	ad a1       	ldd	r26, Y+37	; 0x25
     52e:	be a1       	ldd	r27, Y+38	; 0x26
     530:	8b a7       	std	Y+43, r24	; 0x2b
     532:	9c a7       	std	Y+44, r25	; 0x2c
     534:	ad a7       	std	Y+45, r26	; 0x2d
     536:	be a7       	std	Y+46, r27	; 0x2e
     538:	4f a0       	ldd	r4, Y+39	; 0x27
     53a:	58 a4       	ldd	r5, Y+40	; 0x28
     53c:	69 a4       	ldd	r6, Y+41	; 0x29
     53e:	7a a4       	ldd	r7, Y+42	; 0x2a
     540:	6f e8       	ldi	r22, 0x8F	; 143
     542:	71 e0       	ldi	r23, 0x01	; 1
     544:	88 e4       	ldi	r24, 0x48	; 72
     546:	93 e0       	ldi	r25, 0x03	; 3
     548:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_ZN5Print7printlnEPKc>
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	a9 01       	movw	r20, r18
     552:	c7 01       	movw	r24, r14
     554:	b6 01       	movw	r22, r12
     556:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__gesf2>
     55a:	18 16       	cp	r1, r24
     55c:	0c f0       	brlt	.+2      	; 0x560 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x86>
     55e:	51 c0       	rjmp	.+162    	; 0x602 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x128>
     560:	d5 01       	movw	r26, r10
     562:	11 96       	adiw	r26, 0x01	; 1
     564:	6d 91       	ld	r22, X+
     566:	7c 91       	ld	r23, X
     568:	12 97       	sbiw	r26, 0x02	; 2
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e 94 48 08 	call	0x1090	; 0x1090 <__floatunsisf>
     572:	a7 01       	movw	r20, r14
     574:	96 01       	movw	r18, r12
     576:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__mulsf3>
     57a:	6b 01       	movw	r12, r22
     57c:	7c 01       	movw	r14, r24
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	a9 01       	movw	r20, r18
     584:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__gesf2>
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	40 e0       	ldi	r20, 0x00	; 0
     58e:	5f e3       	ldi	r21, 0x3F	; 63
     590:	87 fd       	sbrc	r24, 7
     592:	05 c0       	rjmp	.+10     	; 0x59e <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xc4>
     594:	c7 01       	movw	r24, r14
     596:	b6 01       	movw	r22, r12
     598:	0e 94 34 07 	call	0xe68	; 0xe68 <__addsf3>
     59c:	04 c0       	rjmp	.+8      	; 0x5a6 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xcc>
     59e:	c7 01       	movw	r24, r14
     5a0:	b6 01       	movw	r22, r12
     5a2:	0e 94 33 07 	call	0xe66	; 0xe66 <__subsf3>
     5a6:	0e 94 12 08 	call	0x1024	; 0x1024 <__fixsfsi>
     5aa:	8b 01       	movw	r16, r22
     5ac:	7e 01       	movw	r14, r28
     5ae:	b0 e1       	ldi	r27, 0x10	; 16
     5b0:	eb 0e       	add	r14, r27
     5b2:	f1 1c       	adc	r15, r1
     5b4:	8f e0       	ldi	r24, 0x0F	; 15
     5b6:	f7 01       	movw	r30, r14
     5b8:	11 92       	st	Z+, r1
     5ba:	8a 95       	dec	r24
     5bc:	e9 f7       	brne	.-6      	; 0x5b8 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xde>
     5be:	8a e0       	ldi	r24, 0x0A	; 10
     5c0:	8b 8f       	std	Y+27, r24	; 0x1b
     5c2:	08 8b       	std	Y+16, r16	; 0x10
     5c4:	19 8b       	std	Y+17, r17	; 0x11
     5c6:	82 e0       	ldi	r24, 0x02	; 2
     5c8:	8a 8f       	std	Y+26, r24	; 0x1a
     5ca:	6f ee       	ldi	r22, 0xEF	; 239
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	88 e4       	ldi	r24, 0x48	; 72
     5d0:	93 e0       	ldi	r25, 0x03	; 3
     5d2:	0e 94 bf 0b 	call	0x177e	; 0x177e <_ZN5Print7printlnEPK19__FlashStringHelper>
     5d6:	4a e0       	ldi	r20, 0x0A	; 10
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	b8 01       	movw	r22, r16
     5dc:	88 e4       	ldi	r24, 0x48	; 72
     5de:	93 e0       	ldi	r25, 0x03	; 3
     5e0:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN5Print7printlnEji>
     5e4:	4a e4       	ldi	r20, 0x4A	; 74
     5e6:	b7 01       	movw	r22, r14
     5e8:	c5 01       	movw	r24, r10
     5ea:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     5ee:	22 e0       	ldi	r18, 0x02	; 2
     5f0:	4a e4       	ldi	r20, 0x4A	; 74
     5f2:	b5 01       	movw	r22, r10
     5f4:	ce 01       	movw	r24, r28
     5f6:	01 96       	adiw	r24, 0x01	; 1
     5f8:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN8INA233_S12receiveData_Ehh>
     5fc:	66 ed       	ldi	r22, 0xD6	; 214
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	af c0       	rjmp	.+350    	; 0x760 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x286>
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	a9 01       	movw	r20, r18
     608:	6b a5       	ldd	r22, Y+43	; 0x2b
     60a:	7c a5       	ldd	r23, Y+44	; 0x2c
     60c:	8d a5       	ldd	r24, Y+45	; 0x2d
     60e:	9e a5       	ldd	r25, Y+46	; 0x2e
     610:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__gesf2>
     614:	18 16       	cp	r1, r24
     616:	0c f0       	brlt	.+2      	; 0x61a <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x140>
     618:	4e c0       	rjmp	.+156    	; 0x6b6 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x1dc>
     61a:	20 e0       	ldi	r18, 0x00	; 0
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	48 e4       	ldi	r20, 0x48	; 72
     620:	54 e4       	ldi	r21, 0x44	; 68
     622:	6b a5       	ldd	r22, Y+43	; 0x2b
     624:	7c a5       	ldd	r23, Y+44	; 0x2c
     626:	8d a5       	ldd	r24, Y+45	; 0x2d
     628:	9e a5       	ldd	r25, Y+46	; 0x2e
     62a:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__mulsf3>
     62e:	6b 01       	movw	r12, r22
     630:	7c 01       	movw	r14, r24
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	a9 01       	movw	r20, r18
     638:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__gesf2>
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	40 e0       	ldi	r20, 0x00	; 0
     642:	5f e3       	ldi	r21, 0x3F	; 63
     644:	87 fd       	sbrc	r24, 7
     646:	05 c0       	rjmp	.+10     	; 0x652 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x178>
     648:	c7 01       	movw	r24, r14
     64a:	b6 01       	movw	r22, r12
     64c:	0e 94 34 07 	call	0xe68	; 0xe68 <__addsf3>
     650:	04 c0       	rjmp	.+8      	; 0x65a <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x180>
     652:	c7 01       	movw	r24, r14
     654:	b6 01       	movw	r22, r12
     656:	0e 94 33 07 	call	0xe66	; 0xe66 <__subsf3>
     65a:	0e 94 12 08 	call	0x1024	; 0x1024 <__fixsfsi>
     65e:	8b 01       	movw	r16, r22
     660:	7e 01       	movw	r14, r28
     662:	f0 e1       	ldi	r31, 0x10	; 16
     664:	ef 0e       	add	r14, r31
     666:	f1 1c       	adc	r15, r1
     668:	8f e0       	ldi	r24, 0x0F	; 15
     66a:	d7 01       	movw	r26, r14
     66c:	1d 92       	st	X+, r1
     66e:	8a 95       	dec	r24
     670:	e9 f7       	brne	.-6      	; 0x66c <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x192>
     672:	8a e0       	ldi	r24, 0x0A	; 10
     674:	8b 8f       	std	Y+27, r24	; 0x1b
     676:	08 8b       	std	Y+16, r16	; 0x10
     678:	19 8b       	std	Y+17, r17	; 0x11
     67a:	82 e0       	ldi	r24, 0x02	; 2
     67c:	8a 8f       	std	Y+26, r24	; 0x1a
     67e:	66 ec       	ldi	r22, 0xC6	; 198
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	88 e4       	ldi	r24, 0x48	; 72
     684:	93 e0       	ldi	r25, 0x03	; 3
     686:	0e 94 bf 0b 	call	0x177e	; 0x177e <_ZN5Print7printlnEPK19__FlashStringHelper>
     68a:	4a e0       	ldi	r20, 0x0A	; 10
     68c:	50 e0       	ldi	r21, 0x00	; 0
     68e:	b8 01       	movw	r22, r16
     690:	88 e4       	ldi	r24, 0x48	; 72
     692:	93 e0       	ldi	r25, 0x03	; 3
     694:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN5Print7printlnEji>
     698:	47 e5       	ldi	r20, 0x57	; 87
     69a:	b7 01       	movw	r22, r14
     69c:	c5 01       	movw	r24, r10
     69e:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     6a2:	22 e0       	ldi	r18, 0x02	; 2
     6a4:	47 e5       	ldi	r20, 0x57	; 87
     6a6:	b5 01       	movw	r22, r10
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN8INA233_S12receiveData_Ehh>
     6b0:	6d ea       	ldi	r22, 0xAD	; 173
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	55 c0       	rjmp	.+170    	; 0x760 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x286>
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	a9 01       	movw	r20, r18
     6bc:	c3 01       	movw	r24, r6
     6be:	b2 01       	movw	r22, r4
     6c0:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__gesf2>
     6c4:	18 16       	cp	r1, r24
     6c6:	0c f0       	brlt	.+2      	; 0x6ca <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x1f0>
     6c8:	5a c0       	rjmp	.+180    	; 0x77e <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x2a4>
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	48 e4       	ldi	r20, 0x48	; 72
     6d0:	54 e4       	ldi	r21, 0x44	; 68
     6d2:	c3 01       	movw	r24, r6
     6d4:	b2 01       	movw	r22, r4
     6d6:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__mulsf3>
     6da:	6b 01       	movw	r12, r22
     6dc:	7c 01       	movw	r14, r24
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	a9 01       	movw	r20, r18
     6e4:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__gesf2>
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	5f e3       	ldi	r21, 0x3F	; 63
     6f0:	87 fd       	sbrc	r24, 7
     6f2:	05 c0       	rjmp	.+10     	; 0x6fe <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x224>
     6f4:	c7 01       	movw	r24, r14
     6f6:	b6 01       	movw	r22, r12
     6f8:	0e 94 34 07 	call	0xe68	; 0xe68 <__addsf3>
     6fc:	04 c0       	rjmp	.+8      	; 0x706 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x22c>
     6fe:	c7 01       	movw	r24, r14
     700:	b6 01       	movw	r22, r12
     702:	0e 94 33 07 	call	0xe66	; 0xe66 <__subsf3>
     706:	0e 94 12 08 	call	0x1024	; 0x1024 <__fixsfsi>
     70a:	8b 01       	movw	r16, r22
     70c:	7e 01       	movw	r14, r28
     70e:	b0 e1       	ldi	r27, 0x10	; 16
     710:	eb 0e       	add	r14, r27
     712:	f1 1c       	adc	r15, r1
     714:	8f e0       	ldi	r24, 0x0F	; 15
     716:	f7 01       	movw	r30, r14
     718:	11 92       	st	Z+, r1
     71a:	8a 95       	dec	r24
     71c:	e9 f7       	brne	.-6      	; 0x718 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x23e>
     71e:	8a e0       	ldi	r24, 0x0A	; 10
     720:	8b 8f       	std	Y+27, r24	; 0x1b
     722:	08 8b       	std	Y+16, r16	; 0x10
     724:	19 8b       	std	Y+17, r17	; 0x11
     726:	82 e0       	ldi	r24, 0x02	; 2
     728:	8a 8f       	std	Y+26, r24	; 0x1a
     72a:	6d e9       	ldi	r22, 0x9D	; 157
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	88 e4       	ldi	r24, 0x48	; 72
     730:	93 e0       	ldi	r25, 0x03	; 3
     732:	0e 94 bf 0b 	call	0x177e	; 0x177e <_ZN5Print7printlnEPK19__FlashStringHelper>
     736:	4a e0       	ldi	r20, 0x0A	; 10
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	b8 01       	movw	r22, r16
     73c:	88 e4       	ldi	r24, 0x48	; 72
     73e:	93 e0       	ldi	r25, 0x03	; 3
     740:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN5Print7printlnEji>
     744:	48 e5       	ldi	r20, 0x58	; 88
     746:	b7 01       	movw	r22, r14
     748:	c5 01       	movw	r24, r10
     74a:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     74e:	22 e0       	ldi	r18, 0x02	; 2
     750:	48 e5       	ldi	r20, 0x58	; 88
     752:	b5 01       	movw	r22, r10
     754:	ce 01       	movw	r24, r28
     756:	01 96       	adiw	r24, 0x01	; 1
     758:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN8INA233_S12receiveData_Ehh>
     75c:	64 e8       	ldi	r22, 0x84	; 132
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	88 e4       	ldi	r24, 0x48	; 72
     762:	93 e0       	ldi	r25, 0x03	; 3
     764:	0e 94 bf 0b 	call	0x177e	; 0x177e <_ZN5Print7printlnEPK19__FlashStringHelper>
     768:	69 81       	ldd	r22, Y+1	; 0x01
     76a:	7a 81       	ldd	r23, Y+2	; 0x02
     76c:	4a e0       	ldi	r20, 0x0A	; 10
     76e:	50 e0       	ldi	r21, 0x00	; 0
     770:	88 e4       	ldi	r24, 0x48	; 72
     772:	93 e0       	ldi	r25, 0x03	; 3
     774:	0e 94 b9 0c 	call	0x1972	; 0x1972 <_ZN5Print7printlnEii>
     778:	8a e0       	ldi	r24, 0x0A	; 10
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	00 c0       	rjmp	.+0      	; 0x77e <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x2a4>
     77e:	ae 96       	adiw	r28, 0x2e	; 46
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	f8 94       	cli
     784:	de bf       	out	0x3e, r29	; 62
     786:	0f be       	out	0x3f, r0	; 63
     788:	cd bf       	out	0x3d, r28	; 61
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	ff 90       	pop	r15
     794:	ef 90       	pop	r14
     796:	df 90       	pop	r13
     798:	cf 90       	pop	r12
     79a:	bf 90       	pop	r11
     79c:	af 90       	pop	r10
     79e:	7f 90       	pop	r7
     7a0:	6f 90       	pop	r6
     7a2:	5f 90       	pop	r5
     7a4:	4f 90       	pop	r4
     7a6:	08 95       	ret

000007a8 <_ZN8INA233_S12getVoltage_LEv>:

float INA233_S::getVoltage_L()
{
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	cd b7       	in	r28, 0x3d	; 61
     7ae:	de b7       	in	r29, 0x3e	; 62
     7b0:	2f 97       	sbiw	r28, 0x0f	; 15
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	f8 94       	cli
     7b6:	de bf       	out	0x3e, r29	; 62
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	cd bf       	out	0x3d, r28	; 61
    INA233_Data_Package data = receiveData_(0x88, 2);
     7bc:	22 e0       	ldi	r18, 0x02	; 2
     7be:	48 e8       	ldi	r20, 0x88	; 136
     7c0:	bc 01       	movw	r22, r24
     7c2:	ce 01       	movw	r24, r28
     7c4:	01 96       	adiw	r24, 0x01	; 1
     7c6:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN8INA233_S12receiveData_Ehh>
    int16_t dataWord = unpackWord(&data);
    return (static_cast<float>(dataWord) * 1.0 / 800.0);
     7ca:	69 81       	ldd	r22, Y+1	; 0x01
     7cc:	7a 81       	ldd	r23, Y+2	; 0x02
     7ce:	07 2e       	mov	r0, r23
     7d0:	00 0c       	add	r0, r0
     7d2:	88 0b       	sbc	r24, r24
     7d4:	99 0b       	sbc	r25, r25
     7d6:	0e 94 4a 08 	call	0x1094	; 0x1094 <__floatsisf>
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	48 e4       	ldi	r20, 0x48	; 72
     7e0:	54 e4       	ldi	r21, 0x44	; 68
     7e2:	0e 94 a0 07 	call	0xf40	; 0xf40 <__divsf3>
}
     7e6:	2f 96       	adiw	r28, 0x0f	; 15
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	f8 94       	cli
     7ec:	de bf       	out	0x3e, r29	; 62
     7ee:	0f be       	out	0x3f, r0	; 63
     7f0:	cd bf       	out	0x3d, r28	; 61
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	08 95       	ret

000007f8 <_ZN8INA233_S12getVoltage_SEv>:

float INA233_S::getVoltage_S()
{
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	cd b7       	in	r28, 0x3d	; 61
     7fe:	de b7       	in	r29, 0x3e	; 62
     800:	2f 97       	sbiw	r28, 0x0f	; 15
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	f8 94       	cli
     806:	de bf       	out	0x3e, r29	; 62
     808:	0f be       	out	0x3f, r0	; 63
     80a:	cd bf       	out	0x3d, r28	; 61
    INA233_Data_Package data = receiveData_(0XD1, 2);
     80c:	22 e0       	ldi	r18, 0x02	; 2
     80e:	41 ed       	ldi	r20, 0xD1	; 209
     810:	bc 01       	movw	r22, r24
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN8INA233_S12receiveData_Ehh>
    int16_t dataWord = unpackWord(&data);
    return (25.0 * static_cast<float>(dataWord) / 10000000.0); //Returns shunt voltage reading.
     81a:	69 81       	ldd	r22, Y+1	; 0x01
     81c:	7a 81       	ldd	r23, Y+2	; 0x02
     81e:	07 2e       	mov	r0, r23
     820:	00 0c       	add	r0, r0
     822:	88 0b       	sbc	r24, r24
     824:	99 0b       	sbc	r25, r25
     826:	0e 94 4a 08 	call	0x1094	; 0x1094 <__floatsisf>
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	48 ec       	ldi	r20, 0xC8	; 200
     830:	51 e4       	ldi	r21, 0x41	; 65
     832:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__mulsf3>
     836:	20 e8       	ldi	r18, 0x80	; 128
     838:	36 e9       	ldi	r19, 0x96	; 150
     83a:	48 e1       	ldi	r20, 0x18	; 24
     83c:	5b e4       	ldi	r21, 0x4B	; 75
     83e:	0e 94 a0 07 	call	0xf40	; 0xf40 <__divsf3>
}
     842:	2f 96       	adiw	r28, 0x0f	; 15
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	f8 94       	cli
     848:	de bf       	out	0x3e, r29	; 62
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	cd bf       	out	0x3d, r28	; 61
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <_ZN8INA233_S10getCurrentEv>:

float INA233_S::getCurrent()
{
     854:	cf 92       	push	r12
     856:	df 92       	push	r13
     858:	ef 92       	push	r14
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
     868:	2f 97       	sbiw	r28, 0x0f	; 15
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	de bf       	out	0x3e, r29	; 62
     870:	0f be       	out	0x3f, r0	; 63
     872:	cd bf       	out	0x3d, r28	; 61
     874:	7c 01       	movw	r14, r24
    INA233_Data_Package data = receiveData_(0x89, 2);
     876:	22 e0       	ldi	r18, 0x02	; 2
     878:	49 e8       	ldi	r20, 0x89	; 137
     87a:	bc 01       	movw	r22, r24
     87c:	ce 01       	movw	r24, r28
     87e:	01 96       	adiw	r24, 0x01	; 1
     880:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN8INA233_S12receiveData_Ehh>

int16_t INA233_S::unpackWord(INA233_Data_Package *data)
{
    int16_t word;
    word = static_cast<int>(data->msg[0]);
    word |= (static_cast<int>(data->msg[1]) << 8);
     884:	09 81       	ldd	r16, Y+1	; 0x01
     886:	1a 81       	ldd	r17, Y+2	; 0x02

float INA233_S::getCurrent()
{
    INA233_Data_Package data = receiveData_(0x89, 2);
    int16_t dataWord = unpackWord(&data);
    Serial.print("Current bitsnbuts");
     888:	6c e9       	ldi	r22, 0x9C	; 156
     88a:	71 e0       	ldi	r23, 0x01	; 1
     88c:	88 e4       	ldi	r24, 0x48	; 72
     88e:	93 e0       	ldi	r25, 0x03	; 3
     890:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_ZN5Print5printEPKc>
    Serial.println(dataWord);
     894:	4a e0       	ldi	r20, 0x0A	; 10
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	b8 01       	movw	r22, r16
     89a:	88 e4       	ldi	r24, 0x48	; 72
     89c:	93 e0       	ldi	r25, 0x03	; 3
     89e:	0e 94 b9 0c 	call	0x1972	; 0x1972 <_ZN5Print7printlnEii>
    return (static_cast<float>(dataWord) * (1.0 / m_value_));
     8a2:	f7 01       	movw	r30, r14
     8a4:	61 81       	ldd	r22, Z+1	; 0x01
     8a6:	72 81       	ldd	r23, Z+2	; 0x02
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 48 08 	call	0x1090	; 0x1090 <__floatunsisf>
     8b0:	9b 01       	movw	r18, r22
     8b2:	ac 01       	movw	r20, r24
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	80 e8       	ldi	r24, 0x80	; 128
     8ba:	9f e3       	ldi	r25, 0x3F	; 63
     8bc:	0e 94 a0 07 	call	0xf40	; 0xf40 <__divsf3>
     8c0:	6b 01       	movw	r12, r22
     8c2:	7c 01       	movw	r14, r24
     8c4:	b8 01       	movw	r22, r16
     8c6:	11 0f       	add	r17, r17
     8c8:	88 0b       	sbc	r24, r24
     8ca:	99 0b       	sbc	r25, r25
     8cc:	0e 94 4a 08 	call	0x1094	; 0x1094 <__floatsisf>
     8d0:	9b 01       	movw	r18, r22
     8d2:	ac 01       	movw	r20, r24
     8d4:	c7 01       	movw	r24, r14
     8d6:	b6 01       	movw	r22, r12
     8d8:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__mulsf3>
}
     8dc:	2f 96       	adiw	r28, 0x0f	; 15
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	f8 94       	cli
     8e2:	de bf       	out	0x3e, r29	; 62
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	cd bf       	out	0x3d, r28	; 61
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	df 90       	pop	r13
     8f6:	cf 90       	pop	r12
     8f8:	08 95       	ret

000008fa <_ZN8INA233_S8getAlarmEv>:

void INA233_S::getAlarm()
{
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
     902:	2f 97       	sbiw	r28, 0x0f	; 15
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	de bf       	out	0x3e, r29	; 62
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	cd bf       	out	0x3d, r28	; 61
    INA233_Data_Package data = receiveData_(0x7C, 1);
     90e:	21 e0       	ldi	r18, 0x01	; 1
     910:	4c e7       	ldi	r20, 0x7C	; 124
     912:	bc 01       	movw	r22, r24
     914:	ce 01       	movw	r24, r28
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN8INA233_S12receiveData_Ehh>
    Serial.print("status input: ");
     91c:	6e ea       	ldi	r22, 0xAE	; 174
     91e:	71 e0       	ldi	r23, 0x01	; 1
     920:	88 e4       	ldi	r24, 0x48	; 72
     922:	93 e0       	ldi	r25, 0x03	; 3
     924:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_ZN5Print5printEPKc>
    Serial.println(data.msg[0], BIN);
     928:	42 e0       	ldi	r20, 0x02	; 2
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	69 81       	ldd	r22, Y+1	; 0x01
     92e:	88 e4       	ldi	r24, 0x48	; 72
     930:	93 e0       	ldi	r25, 0x03	; 3
}
     932:	2f 96       	adiw	r28, 0x0f	; 15
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	f8 94       	cli
     938:	de bf       	out	0x3e, r29	; 62
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	cd bf       	out	0x3d, r28	; 61
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28

void INA233_S::getAlarm()
{
    INA233_Data_Package data = receiveData_(0x7C, 1);
    Serial.print("status input: ");
    Serial.println(data.msg[0], BIN);
     942:	0c 94 40 0c 	jmp	0x1880	; 0x1880 <_ZN5Print7printlnEhi>

00000946 <setup>:
INA233_S Sensor5(adrSensor5, m_valueSensor5, cal_valueSensor5);
INA233_S Sensor6(adrSensor6, m_valueSensor6, cal_valueSensor6);
INA233_S Sensor7(adrSensor7, m_valueSensor7, cal_valueSensor7);
//TI_TCA6424A_S expander (adrExpander);

void setup() {
     946:	cf 92       	push	r12
     948:	df 92       	push	r13
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
  
  Wire.begin();
     952:	8e ee       	ldi	r24, 0xEE	; 238
     954:	93 e0       	ldi	r25, 0x03	; 3
     956:	0e 94 1c 10 	call	0x2038	; 0x2038 <_ZN7TwoWire5beginEv>
  Wire.setClock(10000);
     95a:	40 e1       	ldi	r20, 0x10	; 16
     95c:	57 e2       	ldi	r21, 0x27	; 39
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	8e ee       	ldi	r24, 0xEE	; 238
     964:	93 e0       	ldi	r25, 0x03	; 3
     966:	0e 94 2e 10 	call	0x205c	; 0x205c <_ZN7TwoWire8setClockEm>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     96a:	26 e0       	ldi	r18, 0x06	; 6
     96c:	40 e8       	ldi	r20, 0x80	; 128
     96e:	55 e2       	ldi	r21, 0x25	; 37
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	88 e4       	ldi	r24, 0x48	; 72
     976:	93 e0       	ldi	r25, 0x03	; 3
     978:	0e 94 48 0a 	call	0x1490	; 0x1490 <_ZN14HardwareSerial5beginEmh>
  Serial.begin(9600);  
  Serial.println("Initialization");
     97c:	6a ef       	ldi	r22, 0xFA	; 250
     97e:	71 e0       	ldi	r23, 0x01	; 1
     980:	88 e4       	ldi	r24, 0x48	; 72
     982:	93 e0       	ldi	r25, 0x03	; 3
     984:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_ZN5Print7printlnEPKc>

  Sensor1.initialize();
     988:	80 ee       	ldi	r24, 0xE0	; 224
     98a:	92 e0       	ldi	r25, 0x02	; 2
     98c:	0e 94 87 01 	call	0x30e	; 0x30e <_ZN8INA233_S10initializeEv>
  Sensor1.setAlarmLimits(alarmConfigSensor1);
     990:	c0 90 3c 03 	lds	r12, 0x033C	; 0x80033c <_ZL18alarmConfigSensor1>
     994:	d0 90 3d 03 	lds	r13, 0x033D	; 0x80033d <_ZL18alarmConfigSensor1+0x1>
     998:	e0 90 3e 03 	lds	r14, 0x033E	; 0x80033e <_ZL18alarmConfigSensor1+0x2>
     99c:	f0 90 3f 03 	lds	r15, 0x033F	; 0x80033f <_ZL18alarmConfigSensor1+0x3>
     9a0:	00 91 40 03 	lds	r16, 0x0340	; 0x800340 <_ZL18alarmConfigSensor1+0x4>
     9a4:	10 91 41 03 	lds	r17, 0x0341	; 0x800341 <_ZL18alarmConfigSensor1+0x5>
     9a8:	20 91 42 03 	lds	r18, 0x0342	; 0x800342 <_ZL18alarmConfigSensor1+0x6>
     9ac:	30 91 43 03 	lds	r19, 0x0343	; 0x800343 <_ZL18alarmConfigSensor1+0x7>
     9b0:	40 91 44 03 	lds	r20, 0x0344	; 0x800344 <_ZL18alarmConfigSensor1+0x8>
     9b4:	50 91 45 03 	lds	r21, 0x0345	; 0x800345 <_ZL18alarmConfigSensor1+0x9>
     9b8:	60 91 46 03 	lds	r22, 0x0346	; 0x800346 <_ZL18alarmConfigSensor1+0xa>
     9bc:	70 91 47 03 	lds	r23, 0x0347	; 0x800347 <_ZL18alarmConfigSensor1+0xb>
     9c0:	80 ee       	ldi	r24, 0xE0	; 224
     9c2:	92 e0       	ldi	r25, 0x02	; 2
     9c4:	0e 94 6d 02 	call	0x4da	; 0x4da <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config>
  Sensor1.setADC_Settings(default_address);
     9c8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     9cc:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     9d0:	80 ee       	ldi	r24, 0xE0	; 224
     9d2:	92 e0       	ldi	r25, 0x02	; 2
     9d4:	0e 94 39 02 	call	0x472	; 0x472 <_ZN8INA233_S15setADC_SettingsEj>

  pinMode(p1_ACM_E_Pin,OUTPUT);
     9d8:	61 e0       	ldi	r22, 0x01	; 1
     9da:	83 e0       	ldi	r24, 0x03	; 3
     9dc:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <pinMode>
  digitalWrite(p1_ACM_E_Pin, HIGH);
     9e0:	61 e0       	ldi	r22, 0x01	; 1
     9e2:	83 e0       	ldi	r24, 0x03	; 3
     9e4:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <digitalWrite>

  Sensor2.initialize();
     9e8:	8c ec       	ldi	r24, 0xCC	; 204
     9ea:	92 e0       	ldi	r25, 0x02	; 2
     9ec:	0e 94 87 01 	call	0x30e	; 0x30e <_ZN8INA233_S10initializeEv>
  Sensor2.setAlarmLimits(alarmConfigSensor2);
     9f0:	c0 90 30 03 	lds	r12, 0x0330	; 0x800330 <_ZL18alarmConfigSensor2>
     9f4:	d0 90 31 03 	lds	r13, 0x0331	; 0x800331 <_ZL18alarmConfigSensor2+0x1>
     9f8:	e0 90 32 03 	lds	r14, 0x0332	; 0x800332 <_ZL18alarmConfigSensor2+0x2>
     9fc:	f0 90 33 03 	lds	r15, 0x0333	; 0x800333 <_ZL18alarmConfigSensor2+0x3>
     a00:	00 91 34 03 	lds	r16, 0x0334	; 0x800334 <_ZL18alarmConfigSensor2+0x4>
     a04:	10 91 35 03 	lds	r17, 0x0335	; 0x800335 <_ZL18alarmConfigSensor2+0x5>
     a08:	20 91 36 03 	lds	r18, 0x0336	; 0x800336 <_ZL18alarmConfigSensor2+0x6>
     a0c:	30 91 37 03 	lds	r19, 0x0337	; 0x800337 <_ZL18alarmConfigSensor2+0x7>
     a10:	40 91 38 03 	lds	r20, 0x0338	; 0x800338 <_ZL18alarmConfigSensor2+0x8>
     a14:	50 91 39 03 	lds	r21, 0x0339	; 0x800339 <_ZL18alarmConfigSensor2+0x9>
     a18:	60 91 3a 03 	lds	r22, 0x033A	; 0x80033a <_ZL18alarmConfigSensor2+0xa>
     a1c:	70 91 3b 03 	lds	r23, 0x033B	; 0x80033b <_ZL18alarmConfigSensor2+0xb>
     a20:	8c ec       	ldi	r24, 0xCC	; 204
     a22:	92 e0       	ldi	r25, 0x02	; 2
     a24:	0e 94 6d 02 	call	0x4da	; 0x4da <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config>
  Sensor2.setADC_Settings(default_address);
     a28:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     a2c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     a30:	8c ec       	ldi	r24, 0xCC	; 204
     a32:	92 e0       	ldi	r25, 0x02	; 2
     a34:	0e 94 39 02 	call	0x472	; 0x472 <_ZN8INA233_S15setADC_SettingsEj>

 pinMode(p2_ACM_E_Pin,OUTPUT);
     a38:	61 e0       	ldi	r22, 0x01	; 1
     a3a:	85 e0       	ldi	r24, 0x05	; 5
     a3c:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <pinMode>
 digitalWrite(p2_ACM_E_Pin, HIGH);
     a40:	61 e0       	ldi	r22, 0x01	; 1
     a42:	85 e0       	ldi	r24, 0x05	; 5
     a44:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <digitalWrite>
 
 Sensor3.initialize();
     a48:	88 eb       	ldi	r24, 0xB8	; 184
     a4a:	92 e0       	ldi	r25, 0x02	; 2
     a4c:	0e 94 87 01 	call	0x30e	; 0x30e <_ZN8INA233_S10initializeEv>
 Sensor3.setAlarmLimits(alarmConfigSensor3);
     a50:	c0 90 24 03 	lds	r12, 0x0324	; 0x800324 <_ZL18alarmConfigSensor3>
     a54:	d0 90 25 03 	lds	r13, 0x0325	; 0x800325 <_ZL18alarmConfigSensor3+0x1>
     a58:	e0 90 26 03 	lds	r14, 0x0326	; 0x800326 <_ZL18alarmConfigSensor3+0x2>
     a5c:	f0 90 27 03 	lds	r15, 0x0327	; 0x800327 <_ZL18alarmConfigSensor3+0x3>
     a60:	00 91 28 03 	lds	r16, 0x0328	; 0x800328 <_ZL18alarmConfigSensor3+0x4>
     a64:	10 91 29 03 	lds	r17, 0x0329	; 0x800329 <_ZL18alarmConfigSensor3+0x5>
     a68:	20 91 2a 03 	lds	r18, 0x032A	; 0x80032a <_ZL18alarmConfigSensor3+0x6>
     a6c:	30 91 2b 03 	lds	r19, 0x032B	; 0x80032b <_ZL18alarmConfigSensor3+0x7>
     a70:	40 91 2c 03 	lds	r20, 0x032C	; 0x80032c <_ZL18alarmConfigSensor3+0x8>
     a74:	50 91 2d 03 	lds	r21, 0x032D	; 0x80032d <_ZL18alarmConfigSensor3+0x9>
     a78:	60 91 2e 03 	lds	r22, 0x032E	; 0x80032e <_ZL18alarmConfigSensor3+0xa>
     a7c:	70 91 2f 03 	lds	r23, 0x032F	; 0x80032f <_ZL18alarmConfigSensor3+0xb>
     a80:	88 eb       	ldi	r24, 0xB8	; 184
     a82:	92 e0       	ldi	r25, 0x02	; 2
     a84:	0e 94 6d 02 	call	0x4da	; 0x4da <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config>
 Sensor3.setADC_Settings(default_address);
     a88:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     a8c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     a90:	88 eb       	ldi	r24, 0xB8	; 184
     a92:	92 e0       	ldi	r25, 0x02	; 2
     a94:	0e 94 39 02 	call	0x472	; 0x472 <_ZN8INA233_S15setADC_SettingsEj>

 pinMode(p3_ACM_E_Pin,OUTPUT);
     a98:	61 e0       	ldi	r22, 0x01	; 1
     a9a:	86 e0       	ldi	r24, 0x06	; 6
     a9c:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <pinMode>
 digitalWrite(p3_ACM_E_Pin, HIGH);
     aa0:	61 e0       	ldi	r22, 0x01	; 1
     aa2:	86 e0       	ldi	r24, 0x06	; 6
     aa4:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <digitalWrite>

 Sensor4.initialize();
     aa8:	84 ea       	ldi	r24, 0xA4	; 164
     aaa:	92 e0       	ldi	r25, 0x02	; 2
     aac:	0e 94 87 01 	call	0x30e	; 0x30e <_ZN8INA233_S10initializeEv>
 Sensor4.setAlarmLimits(alarmConfigSensor4);
     ab0:	c0 90 18 03 	lds	r12, 0x0318	; 0x800318 <_ZL18alarmConfigSensor4>
     ab4:	d0 90 19 03 	lds	r13, 0x0319	; 0x800319 <_ZL18alarmConfigSensor4+0x1>
     ab8:	e0 90 1a 03 	lds	r14, 0x031A	; 0x80031a <_ZL18alarmConfigSensor4+0x2>
     abc:	f0 90 1b 03 	lds	r15, 0x031B	; 0x80031b <_ZL18alarmConfigSensor4+0x3>
     ac0:	00 91 1c 03 	lds	r16, 0x031C	; 0x80031c <_ZL18alarmConfigSensor4+0x4>
     ac4:	10 91 1d 03 	lds	r17, 0x031D	; 0x80031d <_ZL18alarmConfigSensor4+0x5>
     ac8:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <_ZL18alarmConfigSensor4+0x6>
     acc:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <_ZL18alarmConfigSensor4+0x7>
     ad0:	40 91 20 03 	lds	r20, 0x0320	; 0x800320 <_ZL18alarmConfigSensor4+0x8>
     ad4:	50 91 21 03 	lds	r21, 0x0321	; 0x800321 <_ZL18alarmConfigSensor4+0x9>
     ad8:	60 91 22 03 	lds	r22, 0x0322	; 0x800322 <_ZL18alarmConfigSensor4+0xa>
     adc:	70 91 23 03 	lds	r23, 0x0323	; 0x800323 <_ZL18alarmConfigSensor4+0xb>
     ae0:	84 ea       	ldi	r24, 0xA4	; 164
     ae2:	92 e0       	ldi	r25, 0x02	; 2
     ae4:	0e 94 6d 02 	call	0x4da	; 0x4da <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config>
 Sensor4.setADC_Settings(default_address);
     ae8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     aec:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     af0:	84 ea       	ldi	r24, 0xA4	; 164
     af2:	92 e0       	ldi	r25, 0x02	; 2
     af4:	0e 94 39 02 	call	0x472	; 0x472 <_ZN8INA233_S15setADC_SettingsEj>

  pinMode(p4_ACM_E_Pin,OUTPUT);
     af8:	61 e0       	ldi	r22, 0x01	; 1
     afa:	8a e0       	ldi	r24, 0x0A	; 10
     afc:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <pinMode>
  digitalWrite(p4_ACM_E_Pin, HIGH);
     b00:	61 e0       	ldi	r22, 0x01	; 1
     b02:	8a e0       	ldi	r24, 0x0A	; 10
     b04:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <digitalWrite>

 Sensor5.initialize();
     b08:	80 e9       	ldi	r24, 0x90	; 144
     b0a:	92 e0       	ldi	r25, 0x02	; 2
     b0c:	0e 94 87 01 	call	0x30e	; 0x30e <_ZN8INA233_S10initializeEv>
 Sensor5.setAlarmLimits(alarmConfigSensor5);
     b10:	c0 90 0c 03 	lds	r12, 0x030C	; 0x80030c <_ZL18alarmConfigSensor5>
     b14:	d0 90 0d 03 	lds	r13, 0x030D	; 0x80030d <_ZL18alarmConfigSensor5+0x1>
     b18:	e0 90 0e 03 	lds	r14, 0x030E	; 0x80030e <_ZL18alarmConfigSensor5+0x2>
     b1c:	f0 90 0f 03 	lds	r15, 0x030F	; 0x80030f <_ZL18alarmConfigSensor5+0x3>
     b20:	00 91 10 03 	lds	r16, 0x0310	; 0x800310 <_ZL18alarmConfigSensor5+0x4>
     b24:	10 91 11 03 	lds	r17, 0x0311	; 0x800311 <_ZL18alarmConfigSensor5+0x5>
     b28:	20 91 12 03 	lds	r18, 0x0312	; 0x800312 <_ZL18alarmConfigSensor5+0x6>
     b2c:	30 91 13 03 	lds	r19, 0x0313	; 0x800313 <_ZL18alarmConfigSensor5+0x7>
     b30:	40 91 14 03 	lds	r20, 0x0314	; 0x800314 <_ZL18alarmConfigSensor5+0x8>
     b34:	50 91 15 03 	lds	r21, 0x0315	; 0x800315 <_ZL18alarmConfigSensor5+0x9>
     b38:	60 91 16 03 	lds	r22, 0x0316	; 0x800316 <_ZL18alarmConfigSensor5+0xa>
     b3c:	70 91 17 03 	lds	r23, 0x0317	; 0x800317 <_ZL18alarmConfigSensor5+0xb>
     b40:	80 e9       	ldi	r24, 0x90	; 144
     b42:	92 e0       	ldi	r25, 0x02	; 2
     b44:	0e 94 6d 02 	call	0x4da	; 0x4da <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config>
  Sensor5.setADC_Settings(default_address);
     b48:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     b4c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     b50:	80 e9       	ldi	r24, 0x90	; 144
     b52:	92 e0       	ldi	r25, 0x02	; 2
     b54:	0e 94 39 02 	call	0x472	; 0x472 <_ZN8INA233_S15setADC_SettingsEj>

  pinMode(p5_ACM_E_Pin,OUTPUT);
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	8f e0       	ldi	r24, 0x0F	; 15
     b5c:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <pinMode>
  digitalWrite(p5_ACM_E_Pin, HIGH);
     b60:	61 e0       	ldi	r22, 0x01	; 1
     b62:	8f e0       	ldi	r24, 0x0F	; 15
     b64:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <digitalWrite>

  Sensor6.initialize();
     b68:	8c e7       	ldi	r24, 0x7C	; 124
     b6a:	92 e0       	ldi	r25, 0x02	; 2
     b6c:	0e 94 87 01 	call	0x30e	; 0x30e <_ZN8INA233_S10initializeEv>
  Sensor6.setAlarmLimits(alarmConfigSensor6);
     b70:	c0 90 00 03 	lds	r12, 0x0300	; 0x800300 <_ZL18alarmConfigSensor6>
     b74:	d0 90 01 03 	lds	r13, 0x0301	; 0x800301 <_ZL18alarmConfigSensor6+0x1>
     b78:	e0 90 02 03 	lds	r14, 0x0302	; 0x800302 <_ZL18alarmConfigSensor6+0x2>
     b7c:	f0 90 03 03 	lds	r15, 0x0303	; 0x800303 <_ZL18alarmConfigSensor6+0x3>
     b80:	00 91 04 03 	lds	r16, 0x0304	; 0x800304 <_ZL18alarmConfigSensor6+0x4>
     b84:	10 91 05 03 	lds	r17, 0x0305	; 0x800305 <_ZL18alarmConfigSensor6+0x5>
     b88:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <_ZL18alarmConfigSensor6+0x6>
     b8c:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <_ZL18alarmConfigSensor6+0x7>
     b90:	40 91 08 03 	lds	r20, 0x0308	; 0x800308 <_ZL18alarmConfigSensor6+0x8>
     b94:	50 91 09 03 	lds	r21, 0x0309	; 0x800309 <_ZL18alarmConfigSensor6+0x9>
     b98:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <_ZL18alarmConfigSensor6+0xa>
     b9c:	70 91 0b 03 	lds	r23, 0x030B	; 0x80030b <_ZL18alarmConfigSensor6+0xb>
     ba0:	8c e7       	ldi	r24, 0x7C	; 124
     ba2:	92 e0       	ldi	r25, 0x02	; 2
     ba4:	0e 94 6d 02 	call	0x4da	; 0x4da <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config>
  Sensor6.setADC_Settings(default_address);
     ba8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     bac:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     bb0:	8c e7       	ldi	r24, 0x7C	; 124
     bb2:	92 e0       	ldi	r25, 0x02	; 2
     bb4:	0e 94 39 02 	call	0x472	; 0x472 <_ZN8INA233_S15setADC_SettingsEj>

  pinMode(p6_ACM_E_Pin,OUTPUT);
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	80 e1       	ldi	r24, 0x10	; 16
     bbc:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <pinMode>
  digitalWrite(p6_ACM_E_Pin, HIGH);
     bc0:	61 e0       	ldi	r22, 0x01	; 1
     bc2:	80 e1       	ldi	r24, 0x10	; 16
     bc4:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <digitalWrite>

  Sensor7.initialize();
     bc8:	88 e6       	ldi	r24, 0x68	; 104
     bca:	92 e0       	ldi	r25, 0x02	; 2
     bcc:	0e 94 87 01 	call	0x30e	; 0x30e <_ZN8INA233_S10initializeEv>
  Sensor7.setAlarmLimits(alarmConfigSensor7);
     bd0:	c0 90 f4 02 	lds	r12, 0x02F4	; 0x8002f4 <_ZL18alarmConfigSensor7>
     bd4:	d0 90 f5 02 	lds	r13, 0x02F5	; 0x8002f5 <_ZL18alarmConfigSensor7+0x1>
     bd8:	e0 90 f6 02 	lds	r14, 0x02F6	; 0x8002f6 <_ZL18alarmConfigSensor7+0x2>
     bdc:	f0 90 f7 02 	lds	r15, 0x02F7	; 0x8002f7 <_ZL18alarmConfigSensor7+0x3>
     be0:	00 91 f8 02 	lds	r16, 0x02F8	; 0x8002f8 <_ZL18alarmConfigSensor7+0x4>
     be4:	10 91 f9 02 	lds	r17, 0x02F9	; 0x8002f9 <_ZL18alarmConfigSensor7+0x5>
     be8:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <_ZL18alarmConfigSensor7+0x6>
     bec:	30 91 fb 02 	lds	r19, 0x02FB	; 0x8002fb <_ZL18alarmConfigSensor7+0x7>
     bf0:	40 91 fc 02 	lds	r20, 0x02FC	; 0x8002fc <_ZL18alarmConfigSensor7+0x8>
     bf4:	50 91 fd 02 	lds	r21, 0x02FD	; 0x8002fd <_ZL18alarmConfigSensor7+0x9>
     bf8:	60 91 fe 02 	lds	r22, 0x02FE	; 0x8002fe <_ZL18alarmConfigSensor7+0xa>
     bfc:	70 91 ff 02 	lds	r23, 0x02FF	; 0x8002ff <_ZL18alarmConfigSensor7+0xb>
     c00:	88 e6       	ldi	r24, 0x68	; 104
     c02:	92 e0       	ldi	r25, 0x02	; 2
     c04:	0e 94 6d 02 	call	0x4da	; 0x4da <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config>
  Sensor7.setADC_Settings(default_address);
     c08:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     c0c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     c10:	88 e6       	ldi	r24, 0x68	; 104
     c12:	92 e0       	ldi	r25, 0x02	; 2
     c14:	0e 94 39 02 	call	0x472	; 0x472 <_ZN8INA233_S15setADC_SettingsEj>

  //pinMode(p7_ACM_E_Pin,OUTPUT);
  //digitalWrite(p7_ACM_E_Pin, HIGH);

  Serial.print(F("freeMemory()="));
     c18:	65 e1       	ldi	r22, 0x15	; 21
     c1a:	71 e0       	ldi	r23, 0x01	; 1
     c1c:	88 e4       	ldi	r24, 0x48	; 72
     c1e:	93 e0       	ldi	r25, 0x03	; 3
     c20:	0e 94 8e 0b 	call	0x171c	; 0x171c <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(freeMemory());
     c24:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <freeMemory>
     c28:	4a e0       	ldi	r20, 0x0A	; 10
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	bc 01       	movw	r22, r24
     c2e:	88 e4       	ldi	r24, 0x48	; 72
     c30:	93 e0       	ldi	r25, 0x03	; 3

  //Sensor1.setAlarmMask (0b11011111);
  //Sensor1.setMFRConfig (0b00000001);
  //expander.setPin (1,true);
  
}
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	df 90       	pop	r13
     c3c:	cf 90       	pop	r12

  //pinMode(p7_ACM_E_Pin,OUTPUT);
  //digitalWrite(p7_ACM_E_Pin, HIGH);

  Serial.print(F("freeMemory()="));
  Serial.println(freeMemory());
     c3e:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <_ZN5Print7printlnEii>

00000c42 <loop>:
  //expander.setPin (1,true);
  
}


void loop() {
     c42:	cf 92       	push	r12
     c44:	df 92       	push	r13
     c46:	ef 92       	push	r14
     c48:	ff 92       	push	r15
  Serial.println(F("looping"));
     c4a:	6d e0       	ldi	r22, 0x0D	; 13
     c4c:	71 e0       	ldi	r23, 0x01	; 1
     c4e:	88 e4       	ldi	r24, 0x48	; 72
     c50:	93 e0       	ldi	r25, 0x03	; 3
     c52:	0e 94 bf 0b 	call	0x177e	; 0x177e <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.print(F("freeMemory()="));
     c56:	6f ef       	ldi	r22, 0xFF	; 255
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	88 e4       	ldi	r24, 0x48	; 72
     c5c:	93 e0       	ldi	r25, 0x03	; 3
     c5e:	0e 94 8e 0b 	call	0x171c	; 0x171c <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(freeMemory());
     c62:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <freeMemory>
     c66:	4a e0       	ldi	r20, 0x0A	; 10
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	bc 01       	movw	r22, r24
     c6c:	88 e4       	ldi	r24, 0x48	; 72
     c6e:	93 e0       	ldi	r25, 0x03	; 3
     c70:	0e 94 b9 0c 	call	0x1972	; 0x1972 <_ZN5Print7printlnEii>

  float voltage_s;
  float voltage_l;
  float current;

  Serial.println("Looping 2");
     c74:	69 e0       	ldi	r22, 0x09	; 9
     c76:	72 e0       	ldi	r23, 0x02	; 2
     c78:	88 e4       	ldi	r24, 0x48	; 72
     c7a:	93 e0       	ldi	r25, 0x03	; 3
     c7c:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <_ZN5Print7printlnEPKc>

  voltage_s = Sensor2.getVoltage_S();
     c80:	8c ec       	ldi	r24, 0xCC	; 204
     c82:	92 e0       	ldi	r25, 0x02	; 2
     c84:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <_ZN8INA233_S12getVoltage_SEv>
     c88:	6b 01       	movw	r12, r22
     c8a:	7c 01       	movw	r14, r24
  Serial.print("Voltage S: ");
     c8c:	63 e1       	ldi	r22, 0x13	; 19
     c8e:	72 e0       	ldi	r23, 0x02	; 2
     c90:	88 e4       	ldi	r24, 0x48	; 72
     c92:	93 e0       	ldi	r25, 0x03	; 3
     c94:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_ZN5Print5printEPKc>
  Serial.println(voltage_s, 5);
     c98:	25 e0       	ldi	r18, 0x05	; 5
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	b7 01       	movw	r22, r14
     c9e:	a6 01       	movw	r20, r12
     ca0:	88 e4       	ldi	r24, 0x48	; 72
     ca2:	93 e0       	ldi	r25, 0x03	; 3
     ca4:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_ZN5Print7printlnEdi>

  voltage_l = Sensor2.getVoltage_L();
     ca8:	8c ec       	ldi	r24, 0xCC	; 204
     caa:	92 e0       	ldi	r25, 0x02	; 2
     cac:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <_ZN8INA233_S12getVoltage_LEv>
     cb0:	6b 01       	movw	r12, r22
     cb2:	7c 01       	movw	r14, r24
  Serial.print("Voltage L: ");
     cb4:	6f e1       	ldi	r22, 0x1F	; 31
     cb6:	72 e0       	ldi	r23, 0x02	; 2
     cb8:	88 e4       	ldi	r24, 0x48	; 72
     cba:	93 e0       	ldi	r25, 0x03	; 3
     cbc:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_ZN5Print5printEPKc>
  Serial.println(voltage_l, 5);
     cc0:	25 e0       	ldi	r18, 0x05	; 5
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	b7 01       	movw	r22, r14
     cc6:	a6 01       	movw	r20, r12
     cc8:	88 e4       	ldi	r24, 0x48	; 72
     cca:	93 e0       	ldi	r25, 0x03	; 3
     ccc:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_ZN5Print7printlnEdi>

  current = Sensor2.getCurrent();
     cd0:	8c ec       	ldi	r24, 0xCC	; 204
     cd2:	92 e0       	ldi	r25, 0x02	; 2
     cd4:	0e 94 2a 04 	call	0x854	; 0x854 <_ZN8INA233_S10getCurrentEv>
     cd8:	6b 01       	movw	r12, r22
     cda:	7c 01       	movw	r14, r24
  Serial.print("Current: ");
     cdc:	6b e2       	ldi	r22, 0x2B	; 43
     cde:	72 e0       	ldi	r23, 0x02	; 2
     ce0:	88 e4       	ldi	r24, 0x48	; 72
     ce2:	93 e0       	ldi	r25, 0x03	; 3
     ce4:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_ZN5Print5printEPKc>
  Serial.println(current, 5);
     ce8:	25 e0       	ldi	r18, 0x05	; 5
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	b7 01       	movw	r22, r14
     cee:	a6 01       	movw	r20, r12
     cf0:	88 e4       	ldi	r24, 0x48	; 72
     cf2:	93 e0       	ldi	r25, 0x03	; 3
     cf4:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_ZN5Print7printlnEdi>

  Sensor2.getAlarm(); 
     cf8:	8c ec       	ldi	r24, 0xCC	; 204
     cfa:	92 e0       	ldi	r25, 0x02	; 2
     cfc:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_ZN8INA233_S8getAlarmEv>


  delay(700);
     d00:	6c eb       	ldi	r22, 0xBC	; 188
     d02:	72 e0       	ldi	r23, 0x02	; 2
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	90 e0       	ldi	r25, 0x00	; 0
}
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	df 90       	pop	r13
     d0e:	cf 90       	pop	r12
  Serial.println(current, 5);

  Sensor2.getAlarm(); 


  delay(700);
     d10:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <delay>

00000d14 <_GLOBAL__sub_I_default_address>:
};

struct INA233_Alarm_Config
{
  float overCurrent = 0, overVoltage = 0, underVoltage = 0;
  INA233_Alarm_Config(float oc, float ov, float uv) : overCurrent(oc), overVoltage(ov), underVoltage(uv) {}  
     d14:	ec e3       	ldi	r30, 0x3C	; 60
     d16:	f3 e0       	ldi	r31, 0x03	; 3
     d18:	40 e0       	ldi	r20, 0x00	; 0
     d1a:	50 e0       	ldi	r21, 0x00	; 0
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	70 e4       	ldi	r23, 0x40	; 64
     d20:	40 83       	st	Z, r20
     d22:	51 83       	std	Z+1, r21	; 0x01
     d24:	62 83       	std	Z+2, r22	; 0x02
     d26:	73 83       	std	Z+3, r23	; 0x03
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	a0 e5       	ldi	r26, 0x50	; 80
     d2e:	b1 e4       	ldi	r27, 0x41	; 65
     d30:	84 83       	std	Z+4, r24	; 0x04
     d32:	95 83       	std	Z+5, r25	; 0x05
     d34:	a6 83       	std	Z+6, r26	; 0x06
     d36:	b7 83       	std	Z+7, r27	; 0x07
     d38:	10 86       	std	Z+8, r1	; 0x08
     d3a:	11 86       	std	Z+9, r1	; 0x09
     d3c:	12 86       	std	Z+10, r1	; 0x0a
     d3e:	13 86       	std	Z+11, r1	; 0x0b
     d40:	e0 e3       	ldi	r30, 0x30	; 48
     d42:	f3 e0       	ldi	r31, 0x03	; 3
     d44:	40 83       	st	Z, r20
     d46:	51 83       	std	Z+1, r21	; 0x01
     d48:	62 83       	std	Z+2, r22	; 0x02
     d4a:	73 83       	std	Z+3, r23	; 0x03
     d4c:	84 83       	std	Z+4, r24	; 0x04
     d4e:	95 83       	std	Z+5, r25	; 0x05
     d50:	a6 83       	std	Z+6, r26	; 0x06
     d52:	b7 83       	std	Z+7, r27	; 0x07
     d54:	10 86       	std	Z+8, r1	; 0x08
     d56:	11 86       	std	Z+9, r1	; 0x09
     d58:	12 86       	std	Z+10, r1	; 0x0a
     d5a:	13 86       	std	Z+11, r1	; 0x0b
     d5c:	e4 e2       	ldi	r30, 0x24	; 36
     d5e:	f3 e0       	ldi	r31, 0x03	; 3
     d60:	40 83       	st	Z, r20
     d62:	51 83       	std	Z+1, r21	; 0x01
     d64:	62 83       	std	Z+2, r22	; 0x02
     d66:	73 83       	std	Z+3, r23	; 0x03
     d68:	84 83       	std	Z+4, r24	; 0x04
     d6a:	95 83       	std	Z+5, r25	; 0x05
     d6c:	a6 83       	std	Z+6, r26	; 0x06
     d6e:	b7 83       	std	Z+7, r27	; 0x07
     d70:	10 86       	std	Z+8, r1	; 0x08
     d72:	11 86       	std	Z+9, r1	; 0x09
     d74:	12 86       	std	Z+10, r1	; 0x0a
     d76:	13 86       	std	Z+11, r1	; 0x0b
     d78:	e8 e1       	ldi	r30, 0x18	; 24
     d7a:	f3 e0       	ldi	r31, 0x03	; 3
     d7c:	40 83       	st	Z, r20
     d7e:	51 83       	std	Z+1, r21	; 0x01
     d80:	62 83       	std	Z+2, r22	; 0x02
     d82:	73 83       	std	Z+3, r23	; 0x03
     d84:	84 83       	std	Z+4, r24	; 0x04
     d86:	95 83       	std	Z+5, r25	; 0x05
     d88:	a6 83       	std	Z+6, r26	; 0x06
     d8a:	b7 83       	std	Z+7, r27	; 0x07
     d8c:	10 86       	std	Z+8, r1	; 0x08
     d8e:	11 86       	std	Z+9, r1	; 0x09
     d90:	12 86       	std	Z+10, r1	; 0x0a
     d92:	13 86       	std	Z+11, r1	; 0x0b
     d94:	ec e0       	ldi	r30, 0x0C	; 12
     d96:	f3 e0       	ldi	r31, 0x03	; 3
     d98:	40 83       	st	Z, r20
     d9a:	51 83       	std	Z+1, r21	; 0x01
     d9c:	62 83       	std	Z+2, r22	; 0x02
     d9e:	73 83       	std	Z+3, r23	; 0x03
     da0:	84 83       	std	Z+4, r24	; 0x04
     da2:	95 83       	std	Z+5, r25	; 0x05
     da4:	a6 83       	std	Z+6, r26	; 0x06
     da6:	b7 83       	std	Z+7, r27	; 0x07
     da8:	10 86       	std	Z+8, r1	; 0x08
     daa:	11 86       	std	Z+9, r1	; 0x09
     dac:	12 86       	std	Z+10, r1	; 0x0a
     dae:	13 86       	std	Z+11, r1	; 0x0b
     db0:	e0 e0       	ldi	r30, 0x00	; 0
     db2:	f3 e0       	ldi	r31, 0x03	; 3
     db4:	40 83       	st	Z, r20
     db6:	51 83       	std	Z+1, r21	; 0x01
     db8:	62 83       	std	Z+2, r22	; 0x02
     dba:	73 83       	std	Z+3, r23	; 0x03
     dbc:	84 83       	std	Z+4, r24	; 0x04
     dbe:	95 83       	std	Z+5, r25	; 0x05
     dc0:	a6 83       	std	Z+6, r26	; 0x06
     dc2:	b7 83       	std	Z+7, r27	; 0x07
     dc4:	10 86       	std	Z+8, r1	; 0x08
     dc6:	11 86       	std	Z+9, r1	; 0x09
     dc8:	12 86       	std	Z+10, r1	; 0x0a
     dca:	13 86       	std	Z+11, r1	; 0x0b
     dcc:	e4 ef       	ldi	r30, 0xF4	; 244
     dce:	f2 e0       	ldi	r31, 0x02	; 2
     dd0:	40 83       	st	Z, r20
     dd2:	51 83       	std	Z+1, r21	; 0x01
     dd4:	62 83       	std	Z+2, r22	; 0x02
     dd6:	73 83       	std	Z+3, r23	; 0x03
     dd8:	84 83       	std	Z+4, r24	; 0x04
     dda:	95 83       	std	Z+5, r25	; 0x05
     ddc:	a6 83       	std	Z+6, r26	; 0x06
     dde:	b7 83       	std	Z+7, r27	; 0x07
     de0:	10 86       	std	Z+8, r1	; 0x08
     de2:	11 86       	std	Z+9, r1	; 0x09
     de4:	12 86       	std	Z+10, r1	; 0x0a
     de6:	13 86       	std	Z+11, r1	; 0x0b
//End of Auto generated function prototypes by Atmel Studio

ErrorHandler errorHandler();
uint16_t default_address = 0b0100011100100111;

INA233_S Sensor1(adrSensor1, m_valueSensor1, cal_valueSensor1);
     de8:	23 e3       	ldi	r18, 0x33	; 51
     dea:	38 e0       	ldi	r19, 0x08	; 8
     dec:	44 e3       	ldi	r20, 0x34	; 52
     dee:	53 e0       	ldi	r21, 0x03	; 3
     df0:	60 e4       	ldi	r22, 0x40	; 64
     df2:	80 ee       	ldi	r24, 0xE0	; 224
     df4:	92 e0       	ldi	r25, 0x02	; 2
     df6:	0e 94 99 01 	call	0x332	; 0x332 <_ZN8INA233_SC1Ehjj>
INA233_S Sensor2(adrSensor2, m_valueSensor2, cal_valueSensor2);
     dfa:	23 e3       	ldi	r18, 0x33	; 51
     dfc:	38 e0       	ldi	r19, 0x08	; 8
     dfe:	44 e3       	ldi	r20, 0x34	; 52
     e00:	53 e0       	ldi	r21, 0x03	; 3
     e02:	61 e4       	ldi	r22, 0x41	; 65
     e04:	8c ec       	ldi	r24, 0xCC	; 204
     e06:	92 e0       	ldi	r25, 0x02	; 2
     e08:	0e 94 99 01 	call	0x332	; 0x332 <_ZN8INA233_SC1Ehjj>
INA233_S Sensor3(adrSensor3, m_valueSensor3, cal_valueSensor3);
     e0c:	23 e3       	ldi	r18, 0x33	; 51
     e0e:	38 e0       	ldi	r19, 0x08	; 8
     e10:	44 e3       	ldi	r20, 0x34	; 52
     e12:	53 e0       	ldi	r21, 0x03	; 3
     e14:	62 e4       	ldi	r22, 0x42	; 66
     e16:	88 eb       	ldi	r24, 0xB8	; 184
     e18:	92 e0       	ldi	r25, 0x02	; 2
     e1a:	0e 94 99 01 	call	0x332	; 0x332 <_ZN8INA233_SC1Ehjj>
INA233_S Sensor4(adrSensor4, m_valueSensor4, cal_valueSensor4);
     e1e:	23 e3       	ldi	r18, 0x33	; 51
     e20:	38 e0       	ldi	r19, 0x08	; 8
     e22:	44 e3       	ldi	r20, 0x34	; 52
     e24:	53 e0       	ldi	r21, 0x03	; 3
     e26:	63 e4       	ldi	r22, 0x43	; 67
     e28:	84 ea       	ldi	r24, 0xA4	; 164
     e2a:	92 e0       	ldi	r25, 0x02	; 2
     e2c:	0e 94 99 01 	call	0x332	; 0x332 <_ZN8INA233_SC1Ehjj>
INA233_S Sensor5(adrSensor5, m_valueSensor5, cal_valueSensor5);
     e30:	23 e3       	ldi	r18, 0x33	; 51
     e32:	38 e0       	ldi	r19, 0x08	; 8
     e34:	44 e3       	ldi	r20, 0x34	; 52
     e36:	53 e0       	ldi	r21, 0x03	; 3
     e38:	64 e4       	ldi	r22, 0x44	; 68
     e3a:	80 e9       	ldi	r24, 0x90	; 144
     e3c:	92 e0       	ldi	r25, 0x02	; 2
     e3e:	0e 94 99 01 	call	0x332	; 0x332 <_ZN8INA233_SC1Ehjj>
INA233_S Sensor6(adrSensor6, m_valueSensor6, cal_valueSensor6);
     e42:	23 e3       	ldi	r18, 0x33	; 51
     e44:	38 e0       	ldi	r19, 0x08	; 8
     e46:	44 e3       	ldi	r20, 0x34	; 52
     e48:	53 e0       	ldi	r21, 0x03	; 3
     e4a:	65 e4       	ldi	r22, 0x45	; 69
     e4c:	8c e7       	ldi	r24, 0x7C	; 124
     e4e:	92 e0       	ldi	r25, 0x02	; 2
     e50:	0e 94 99 01 	call	0x332	; 0x332 <_ZN8INA233_SC1Ehjj>
INA233_S Sensor7(adrSensor7, m_valueSensor7, cal_valueSensor7);
     e54:	23 e3       	ldi	r18, 0x33	; 51
     e56:	38 e0       	ldi	r19, 0x08	; 8
     e58:	44 e3       	ldi	r20, 0x34	; 52
     e5a:	53 e0       	ldi	r21, 0x03	; 3
     e5c:	66 e4       	ldi	r22, 0x46	; 70
     e5e:	88 e6       	ldi	r24, 0x68	; 104
     e60:	92 e0       	ldi	r25, 0x02	; 2
     e62:	0c 94 99 01 	jmp	0x332	; 0x332 <_ZN8INA233_SC1Ehjj>

00000e66 <__subsf3>:
     e66:	50 58       	subi	r21, 0x80	; 128

00000e68 <__addsf3>:
     e68:	bb 27       	eor	r27, r27
     e6a:	aa 27       	eor	r26, r26
     e6c:	0e 94 4b 07 	call	0xe96	; 0xe96 <__addsf3x>
     e70:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <__fp_round>
     e74:	0e 94 8e 08 	call	0x111c	; 0x111c <__fp_pscA>
     e78:	38 f0       	brcs	.+14     	; 0xe88 <__addsf3+0x20>
     e7a:	0e 94 95 08 	call	0x112a	; 0x112a <__fp_pscB>
     e7e:	20 f0       	brcs	.+8      	; 0xe88 <__addsf3+0x20>
     e80:	39 f4       	brne	.+14     	; 0xe90 <__addsf3+0x28>
     e82:	9f 3f       	cpi	r25, 0xFF	; 255
     e84:	19 f4       	brne	.+6      	; 0xe8c <__addsf3+0x24>
     e86:	26 f4       	brtc	.+8      	; 0xe90 <__addsf3+0x28>
     e88:	0c 94 8b 08 	jmp	0x1116	; 0x1116 <__fp_nan>
     e8c:	0e f4       	brtc	.+2      	; 0xe90 <__addsf3+0x28>
     e8e:	e0 95       	com	r30
     e90:	e7 fb       	bst	r30, 7
     e92:	0c 94 85 08 	jmp	0x110a	; 0x110a <__fp_inf>

00000e96 <__addsf3x>:
     e96:	e9 2f       	mov	r30, r25
     e98:	0e 94 ad 08 	call	0x115a	; 0x115a <__fp_split3>
     e9c:	58 f3       	brcs	.-42     	; 0xe74 <__addsf3+0xc>
     e9e:	ba 17       	cp	r27, r26
     ea0:	62 07       	cpc	r22, r18
     ea2:	73 07       	cpc	r23, r19
     ea4:	84 07       	cpc	r24, r20
     ea6:	95 07       	cpc	r25, r21
     ea8:	20 f0       	brcs	.+8      	; 0xeb2 <__addsf3x+0x1c>
     eaa:	79 f4       	brne	.+30     	; 0xeca <__addsf3x+0x34>
     eac:	a6 f5       	brtc	.+104    	; 0xf16 <__addsf3x+0x80>
     eae:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__fp_zero>
     eb2:	0e f4       	brtc	.+2      	; 0xeb6 <__addsf3x+0x20>
     eb4:	e0 95       	com	r30
     eb6:	0b 2e       	mov	r0, r27
     eb8:	ba 2f       	mov	r27, r26
     eba:	a0 2d       	mov	r26, r0
     ebc:	0b 01       	movw	r0, r22
     ebe:	b9 01       	movw	r22, r18
     ec0:	90 01       	movw	r18, r0
     ec2:	0c 01       	movw	r0, r24
     ec4:	ca 01       	movw	r24, r20
     ec6:	a0 01       	movw	r20, r0
     ec8:	11 24       	eor	r1, r1
     eca:	ff 27       	eor	r31, r31
     ecc:	59 1b       	sub	r21, r25
     ece:	99 f0       	breq	.+38     	; 0xef6 <__addsf3x+0x60>
     ed0:	59 3f       	cpi	r21, 0xF9	; 249
     ed2:	50 f4       	brcc	.+20     	; 0xee8 <__addsf3x+0x52>
     ed4:	50 3e       	cpi	r21, 0xE0	; 224
     ed6:	68 f1       	brcs	.+90     	; 0xf32 <__addsf3x+0x9c>
     ed8:	1a 16       	cp	r1, r26
     eda:	f0 40       	sbci	r31, 0x00	; 0
     edc:	a2 2f       	mov	r26, r18
     ede:	23 2f       	mov	r18, r19
     ee0:	34 2f       	mov	r19, r20
     ee2:	44 27       	eor	r20, r20
     ee4:	58 5f       	subi	r21, 0xF8	; 248
     ee6:	f3 cf       	rjmp	.-26     	; 0xece <__addsf3x+0x38>
     ee8:	46 95       	lsr	r20
     eea:	37 95       	ror	r19
     eec:	27 95       	ror	r18
     eee:	a7 95       	ror	r26
     ef0:	f0 40       	sbci	r31, 0x00	; 0
     ef2:	53 95       	inc	r21
     ef4:	c9 f7       	brne	.-14     	; 0xee8 <__addsf3x+0x52>
     ef6:	7e f4       	brtc	.+30     	; 0xf16 <__addsf3x+0x80>
     ef8:	1f 16       	cp	r1, r31
     efa:	ba 0b       	sbc	r27, r26
     efc:	62 0b       	sbc	r22, r18
     efe:	73 0b       	sbc	r23, r19
     f00:	84 0b       	sbc	r24, r20
     f02:	ba f0       	brmi	.+46     	; 0xf32 <__addsf3x+0x9c>
     f04:	91 50       	subi	r25, 0x01	; 1
     f06:	a1 f0       	breq	.+40     	; 0xf30 <__addsf3x+0x9a>
     f08:	ff 0f       	add	r31, r31
     f0a:	bb 1f       	adc	r27, r27
     f0c:	66 1f       	adc	r22, r22
     f0e:	77 1f       	adc	r23, r23
     f10:	88 1f       	adc	r24, r24
     f12:	c2 f7       	brpl	.-16     	; 0xf04 <__addsf3x+0x6e>
     f14:	0e c0       	rjmp	.+28     	; 0xf32 <__addsf3x+0x9c>
     f16:	ba 0f       	add	r27, r26
     f18:	62 1f       	adc	r22, r18
     f1a:	73 1f       	adc	r23, r19
     f1c:	84 1f       	adc	r24, r20
     f1e:	48 f4       	brcc	.+18     	; 0xf32 <__addsf3x+0x9c>
     f20:	87 95       	ror	r24
     f22:	77 95       	ror	r23
     f24:	67 95       	ror	r22
     f26:	b7 95       	ror	r27
     f28:	f7 95       	ror	r31
     f2a:	9e 3f       	cpi	r25, 0xFE	; 254
     f2c:	08 f0       	brcs	.+2      	; 0xf30 <__addsf3x+0x9a>
     f2e:	b0 cf       	rjmp	.-160    	; 0xe90 <__addsf3+0x28>
     f30:	93 95       	inc	r25
     f32:	88 0f       	add	r24, r24
     f34:	08 f0       	brcs	.+2      	; 0xf38 <__addsf3x+0xa2>
     f36:	99 27       	eor	r25, r25
     f38:	ee 0f       	add	r30, r30
     f3a:	97 95       	ror	r25
     f3c:	87 95       	ror	r24
     f3e:	08 95       	ret

00000f40 <__divsf3>:
     f40:	0e 94 b4 07 	call	0xf68	; 0xf68 <__divsf3x>
     f44:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <__fp_round>
     f48:	0e 94 95 08 	call	0x112a	; 0x112a <__fp_pscB>
     f4c:	58 f0       	brcs	.+22     	; 0xf64 <__divsf3+0x24>
     f4e:	0e 94 8e 08 	call	0x111c	; 0x111c <__fp_pscA>
     f52:	40 f0       	brcs	.+16     	; 0xf64 <__divsf3+0x24>
     f54:	29 f4       	brne	.+10     	; 0xf60 <__divsf3+0x20>
     f56:	5f 3f       	cpi	r21, 0xFF	; 255
     f58:	29 f0       	breq	.+10     	; 0xf64 <__divsf3+0x24>
     f5a:	0c 94 85 08 	jmp	0x110a	; 0x110a <__fp_inf>
     f5e:	51 11       	cpse	r21, r1
     f60:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <__fp_szero>
     f64:	0c 94 8b 08 	jmp	0x1116	; 0x1116 <__fp_nan>

00000f68 <__divsf3x>:
     f68:	0e 94 ad 08 	call	0x115a	; 0x115a <__fp_split3>
     f6c:	68 f3       	brcs	.-38     	; 0xf48 <__divsf3+0x8>

00000f6e <__divsf3_pse>:
     f6e:	99 23       	and	r25, r25
     f70:	b1 f3       	breq	.-20     	; 0xf5e <__divsf3+0x1e>
     f72:	55 23       	and	r21, r21
     f74:	91 f3       	breq	.-28     	; 0xf5a <__divsf3+0x1a>
     f76:	95 1b       	sub	r25, r21
     f78:	55 0b       	sbc	r21, r21
     f7a:	bb 27       	eor	r27, r27
     f7c:	aa 27       	eor	r26, r26
     f7e:	62 17       	cp	r22, r18
     f80:	73 07       	cpc	r23, r19
     f82:	84 07       	cpc	r24, r20
     f84:	38 f0       	brcs	.+14     	; 0xf94 <__divsf3_pse+0x26>
     f86:	9f 5f       	subi	r25, 0xFF	; 255
     f88:	5f 4f       	sbci	r21, 0xFF	; 255
     f8a:	22 0f       	add	r18, r18
     f8c:	33 1f       	adc	r19, r19
     f8e:	44 1f       	adc	r20, r20
     f90:	aa 1f       	adc	r26, r26
     f92:	a9 f3       	breq	.-22     	; 0xf7e <__divsf3_pse+0x10>
     f94:	35 d0       	rcall	.+106    	; 0x1000 <__divsf3_pse+0x92>
     f96:	0e 2e       	mov	r0, r30
     f98:	3a f0       	brmi	.+14     	; 0xfa8 <__divsf3_pse+0x3a>
     f9a:	e0 e8       	ldi	r30, 0x80	; 128
     f9c:	32 d0       	rcall	.+100    	; 0x1002 <__divsf3_pse+0x94>
     f9e:	91 50       	subi	r25, 0x01	; 1
     fa0:	50 40       	sbci	r21, 0x00	; 0
     fa2:	e6 95       	lsr	r30
     fa4:	00 1c       	adc	r0, r0
     fa6:	ca f7       	brpl	.-14     	; 0xf9a <__divsf3_pse+0x2c>
     fa8:	2b d0       	rcall	.+86     	; 0x1000 <__divsf3_pse+0x92>
     faa:	fe 2f       	mov	r31, r30
     fac:	29 d0       	rcall	.+82     	; 0x1000 <__divsf3_pse+0x92>
     fae:	66 0f       	add	r22, r22
     fb0:	77 1f       	adc	r23, r23
     fb2:	88 1f       	adc	r24, r24
     fb4:	bb 1f       	adc	r27, r27
     fb6:	26 17       	cp	r18, r22
     fb8:	37 07       	cpc	r19, r23
     fba:	48 07       	cpc	r20, r24
     fbc:	ab 07       	cpc	r26, r27
     fbe:	b0 e8       	ldi	r27, 0x80	; 128
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <__divsf3_pse+0x56>
     fc2:	bb 0b       	sbc	r27, r27
     fc4:	80 2d       	mov	r24, r0
     fc6:	bf 01       	movw	r22, r30
     fc8:	ff 27       	eor	r31, r31
     fca:	93 58       	subi	r25, 0x83	; 131
     fcc:	5f 4f       	sbci	r21, 0xFF	; 255
     fce:	3a f0       	brmi	.+14     	; 0xfde <__divsf3_pse+0x70>
     fd0:	9e 3f       	cpi	r25, 0xFE	; 254
     fd2:	51 05       	cpc	r21, r1
     fd4:	78 f0       	brcs	.+30     	; 0xff4 <__divsf3_pse+0x86>
     fd6:	0c 94 85 08 	jmp	0x110a	; 0x110a <__fp_inf>
     fda:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <__fp_szero>
     fde:	5f 3f       	cpi	r21, 0xFF	; 255
     fe0:	e4 f3       	brlt	.-8      	; 0xfda <__divsf3_pse+0x6c>
     fe2:	98 3e       	cpi	r25, 0xE8	; 232
     fe4:	d4 f3       	brlt	.-12     	; 0xfda <__divsf3_pse+0x6c>
     fe6:	86 95       	lsr	r24
     fe8:	77 95       	ror	r23
     fea:	67 95       	ror	r22
     fec:	b7 95       	ror	r27
     fee:	f7 95       	ror	r31
     ff0:	9f 5f       	subi	r25, 0xFF	; 255
     ff2:	c9 f7       	brne	.-14     	; 0xfe6 <__divsf3_pse+0x78>
     ff4:	88 0f       	add	r24, r24
     ff6:	91 1d       	adc	r25, r1
     ff8:	96 95       	lsr	r25
     ffa:	87 95       	ror	r24
     ffc:	97 f9       	bld	r25, 7
     ffe:	08 95       	ret
    1000:	e1 e0       	ldi	r30, 0x01	; 1
    1002:	66 0f       	add	r22, r22
    1004:	77 1f       	adc	r23, r23
    1006:	88 1f       	adc	r24, r24
    1008:	bb 1f       	adc	r27, r27
    100a:	62 17       	cp	r22, r18
    100c:	73 07       	cpc	r23, r19
    100e:	84 07       	cpc	r24, r20
    1010:	ba 07       	cpc	r27, r26
    1012:	20 f0       	brcs	.+8      	; 0x101c <__divsf3_pse+0xae>
    1014:	62 1b       	sub	r22, r18
    1016:	73 0b       	sbc	r23, r19
    1018:	84 0b       	sbc	r24, r20
    101a:	ba 0b       	sbc	r27, r26
    101c:	ee 1f       	adc	r30, r30
    101e:	88 f7       	brcc	.-30     	; 0x1002 <__divsf3_pse+0x94>
    1020:	e0 95       	com	r30
    1022:	08 95       	ret

00001024 <__fixsfsi>:
    1024:	0e 94 19 08 	call	0x1032	; 0x1032 <__fixunssfsi>
    1028:	68 94       	set
    102a:	b1 11       	cpse	r27, r1
    102c:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <__fp_szero>
    1030:	08 95       	ret

00001032 <__fixunssfsi>:
    1032:	0e 94 b5 08 	call	0x116a	; 0x116a <__fp_splitA>
    1036:	88 f0       	brcs	.+34     	; 0x105a <__fixunssfsi+0x28>
    1038:	9f 57       	subi	r25, 0x7F	; 127
    103a:	98 f0       	brcs	.+38     	; 0x1062 <__fixunssfsi+0x30>
    103c:	b9 2f       	mov	r27, r25
    103e:	99 27       	eor	r25, r25
    1040:	b7 51       	subi	r27, 0x17	; 23
    1042:	b0 f0       	brcs	.+44     	; 0x1070 <__fixunssfsi+0x3e>
    1044:	e1 f0       	breq	.+56     	; 0x107e <__fixunssfsi+0x4c>
    1046:	66 0f       	add	r22, r22
    1048:	77 1f       	adc	r23, r23
    104a:	88 1f       	adc	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	1a f0       	brmi	.+6      	; 0x1056 <__fixunssfsi+0x24>
    1050:	ba 95       	dec	r27
    1052:	c9 f7       	brne	.-14     	; 0x1046 <__fixunssfsi+0x14>
    1054:	14 c0       	rjmp	.+40     	; 0x107e <__fixunssfsi+0x4c>
    1056:	b1 30       	cpi	r27, 0x01	; 1
    1058:	91 f0       	breq	.+36     	; 0x107e <__fixunssfsi+0x4c>
    105a:	0e 94 cf 08 	call	0x119e	; 0x119e <__fp_zero>
    105e:	b1 e0       	ldi	r27, 0x01	; 1
    1060:	08 95       	ret
    1062:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__fp_zero>
    1066:	67 2f       	mov	r22, r23
    1068:	78 2f       	mov	r23, r24
    106a:	88 27       	eor	r24, r24
    106c:	b8 5f       	subi	r27, 0xF8	; 248
    106e:	39 f0       	breq	.+14     	; 0x107e <__fixunssfsi+0x4c>
    1070:	b9 3f       	cpi	r27, 0xF9	; 249
    1072:	cc f3       	brlt	.-14     	; 0x1066 <__fixunssfsi+0x34>
    1074:	86 95       	lsr	r24
    1076:	77 95       	ror	r23
    1078:	67 95       	ror	r22
    107a:	b3 95       	inc	r27
    107c:	d9 f7       	brne	.-10     	; 0x1074 <__fixunssfsi+0x42>
    107e:	3e f4       	brtc	.+14     	; 0x108e <__fixunssfsi+0x5c>
    1080:	90 95       	com	r25
    1082:	80 95       	com	r24
    1084:	70 95       	com	r23
    1086:	61 95       	neg	r22
    1088:	7f 4f       	sbci	r23, 0xFF	; 255
    108a:	8f 4f       	sbci	r24, 0xFF	; 255
    108c:	9f 4f       	sbci	r25, 0xFF	; 255
    108e:	08 95       	ret

00001090 <__floatunsisf>:
    1090:	e8 94       	clt
    1092:	09 c0       	rjmp	.+18     	; 0x10a6 <__floatsisf+0x12>

00001094 <__floatsisf>:
    1094:	97 fb       	bst	r25, 7
    1096:	3e f4       	brtc	.+14     	; 0x10a6 <__floatsisf+0x12>
    1098:	90 95       	com	r25
    109a:	80 95       	com	r24
    109c:	70 95       	com	r23
    109e:	61 95       	neg	r22
    10a0:	7f 4f       	sbci	r23, 0xFF	; 255
    10a2:	8f 4f       	sbci	r24, 0xFF	; 255
    10a4:	9f 4f       	sbci	r25, 0xFF	; 255
    10a6:	99 23       	and	r25, r25
    10a8:	a9 f0       	breq	.+42     	; 0x10d4 <__floatsisf+0x40>
    10aa:	f9 2f       	mov	r31, r25
    10ac:	96 e9       	ldi	r25, 0x96	; 150
    10ae:	bb 27       	eor	r27, r27
    10b0:	93 95       	inc	r25
    10b2:	f6 95       	lsr	r31
    10b4:	87 95       	ror	r24
    10b6:	77 95       	ror	r23
    10b8:	67 95       	ror	r22
    10ba:	b7 95       	ror	r27
    10bc:	f1 11       	cpse	r31, r1
    10be:	f8 cf       	rjmp	.-16     	; 0x10b0 <__floatsisf+0x1c>
    10c0:	fa f4       	brpl	.+62     	; 0x1100 <__floatsisf+0x6c>
    10c2:	bb 0f       	add	r27, r27
    10c4:	11 f4       	brne	.+4      	; 0x10ca <__floatsisf+0x36>
    10c6:	60 ff       	sbrs	r22, 0
    10c8:	1b c0       	rjmp	.+54     	; 0x1100 <__floatsisf+0x6c>
    10ca:	6f 5f       	subi	r22, 0xFF	; 255
    10cc:	7f 4f       	sbci	r23, 0xFF	; 255
    10ce:	8f 4f       	sbci	r24, 0xFF	; 255
    10d0:	9f 4f       	sbci	r25, 0xFF	; 255
    10d2:	16 c0       	rjmp	.+44     	; 0x1100 <__floatsisf+0x6c>
    10d4:	88 23       	and	r24, r24
    10d6:	11 f0       	breq	.+4      	; 0x10dc <__floatsisf+0x48>
    10d8:	96 e9       	ldi	r25, 0x96	; 150
    10da:	11 c0       	rjmp	.+34     	; 0x10fe <__floatsisf+0x6a>
    10dc:	77 23       	and	r23, r23
    10de:	21 f0       	breq	.+8      	; 0x10e8 <__floatsisf+0x54>
    10e0:	9e e8       	ldi	r25, 0x8E	; 142
    10e2:	87 2f       	mov	r24, r23
    10e4:	76 2f       	mov	r23, r22
    10e6:	05 c0       	rjmp	.+10     	; 0x10f2 <__floatsisf+0x5e>
    10e8:	66 23       	and	r22, r22
    10ea:	71 f0       	breq	.+28     	; 0x1108 <__floatsisf+0x74>
    10ec:	96 e8       	ldi	r25, 0x86	; 134
    10ee:	86 2f       	mov	r24, r22
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	2a f0       	brmi	.+10     	; 0x1100 <__floatsisf+0x6c>
    10f6:	9a 95       	dec	r25
    10f8:	66 0f       	add	r22, r22
    10fa:	77 1f       	adc	r23, r23
    10fc:	88 1f       	adc	r24, r24
    10fe:	da f7       	brpl	.-10     	; 0x10f6 <__floatsisf+0x62>
    1100:	88 0f       	add	r24, r24
    1102:	96 95       	lsr	r25
    1104:	87 95       	ror	r24
    1106:	97 f9       	bld	r25, 7
    1108:	08 95       	ret

0000110a <__fp_inf>:
    110a:	97 f9       	bld	r25, 7
    110c:	9f 67       	ori	r25, 0x7F	; 127
    110e:	80 e8       	ldi	r24, 0x80	; 128
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	08 95       	ret

00001116 <__fp_nan>:
    1116:	9f ef       	ldi	r25, 0xFF	; 255
    1118:	80 ec       	ldi	r24, 0xC0	; 192
    111a:	08 95       	ret

0000111c <__fp_pscA>:
    111c:	00 24       	eor	r0, r0
    111e:	0a 94       	dec	r0
    1120:	16 16       	cp	r1, r22
    1122:	17 06       	cpc	r1, r23
    1124:	18 06       	cpc	r1, r24
    1126:	09 06       	cpc	r0, r25
    1128:	08 95       	ret

0000112a <__fp_pscB>:
    112a:	00 24       	eor	r0, r0
    112c:	0a 94       	dec	r0
    112e:	12 16       	cp	r1, r18
    1130:	13 06       	cpc	r1, r19
    1132:	14 06       	cpc	r1, r20
    1134:	05 06       	cpc	r0, r21
    1136:	08 95       	ret

00001138 <__fp_round>:
    1138:	09 2e       	mov	r0, r25
    113a:	03 94       	inc	r0
    113c:	00 0c       	add	r0, r0
    113e:	11 f4       	brne	.+4      	; 0x1144 <__fp_round+0xc>
    1140:	88 23       	and	r24, r24
    1142:	52 f0       	brmi	.+20     	; 0x1158 <__fp_round+0x20>
    1144:	bb 0f       	add	r27, r27
    1146:	40 f4       	brcc	.+16     	; 0x1158 <__fp_round+0x20>
    1148:	bf 2b       	or	r27, r31
    114a:	11 f4       	brne	.+4      	; 0x1150 <__fp_round+0x18>
    114c:	60 ff       	sbrs	r22, 0
    114e:	04 c0       	rjmp	.+8      	; 0x1158 <__fp_round+0x20>
    1150:	6f 5f       	subi	r22, 0xFF	; 255
    1152:	7f 4f       	sbci	r23, 0xFF	; 255
    1154:	8f 4f       	sbci	r24, 0xFF	; 255
    1156:	9f 4f       	sbci	r25, 0xFF	; 255
    1158:	08 95       	ret

0000115a <__fp_split3>:
    115a:	57 fd       	sbrc	r21, 7
    115c:	90 58       	subi	r25, 0x80	; 128
    115e:	44 0f       	add	r20, r20
    1160:	55 1f       	adc	r21, r21
    1162:	59 f0       	breq	.+22     	; 0x117a <__fp_splitA+0x10>
    1164:	5f 3f       	cpi	r21, 0xFF	; 255
    1166:	71 f0       	breq	.+28     	; 0x1184 <__fp_splitA+0x1a>
    1168:	47 95       	ror	r20

0000116a <__fp_splitA>:
    116a:	88 0f       	add	r24, r24
    116c:	97 fb       	bst	r25, 7
    116e:	99 1f       	adc	r25, r25
    1170:	61 f0       	breq	.+24     	; 0x118a <__fp_splitA+0x20>
    1172:	9f 3f       	cpi	r25, 0xFF	; 255
    1174:	79 f0       	breq	.+30     	; 0x1194 <__fp_splitA+0x2a>
    1176:	87 95       	ror	r24
    1178:	08 95       	ret
    117a:	12 16       	cp	r1, r18
    117c:	13 06       	cpc	r1, r19
    117e:	14 06       	cpc	r1, r20
    1180:	55 1f       	adc	r21, r21
    1182:	f2 cf       	rjmp	.-28     	; 0x1168 <__fp_split3+0xe>
    1184:	46 95       	lsr	r20
    1186:	f1 df       	rcall	.-30     	; 0x116a <__fp_splitA>
    1188:	08 c0       	rjmp	.+16     	; 0x119a <__fp_splitA+0x30>
    118a:	16 16       	cp	r1, r22
    118c:	17 06       	cpc	r1, r23
    118e:	18 06       	cpc	r1, r24
    1190:	99 1f       	adc	r25, r25
    1192:	f1 cf       	rjmp	.-30     	; 0x1176 <__fp_splitA+0xc>
    1194:	86 95       	lsr	r24
    1196:	71 05       	cpc	r23, r1
    1198:	61 05       	cpc	r22, r1
    119a:	08 94       	sec
    119c:	08 95       	ret

0000119e <__fp_zero>:
    119e:	e8 94       	clt

000011a0 <__fp_szero>:
    11a0:	bb 27       	eor	r27, r27
    11a2:	66 27       	eor	r22, r22
    11a4:	77 27       	eor	r23, r23
    11a6:	cb 01       	movw	r24, r22
    11a8:	97 f9       	bld	r25, 7
    11aa:	08 95       	ret

000011ac <__gesf2>:
    11ac:	0e 94 48 09 	call	0x1290	; 0x1290 <__fp_cmp>
    11b0:	08 f4       	brcc	.+2      	; 0x11b4 <__gesf2+0x8>
    11b2:	8f ef       	ldi	r24, 0xFF	; 255
    11b4:	08 95       	ret

000011b6 <__mulsf3>:
    11b6:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__mulsf3x>
    11ba:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <__fp_round>
    11be:	0e 94 8e 08 	call	0x111c	; 0x111c <__fp_pscA>
    11c2:	38 f0       	brcs	.+14     	; 0x11d2 <__mulsf3+0x1c>
    11c4:	0e 94 95 08 	call	0x112a	; 0x112a <__fp_pscB>
    11c8:	20 f0       	brcs	.+8      	; 0x11d2 <__mulsf3+0x1c>
    11ca:	95 23       	and	r25, r21
    11cc:	11 f0       	breq	.+4      	; 0x11d2 <__mulsf3+0x1c>
    11ce:	0c 94 85 08 	jmp	0x110a	; 0x110a <__fp_inf>
    11d2:	0c 94 8b 08 	jmp	0x1116	; 0x1116 <__fp_nan>
    11d6:	11 24       	eor	r1, r1
    11d8:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <__fp_szero>

000011dc <__mulsf3x>:
    11dc:	0e 94 ad 08 	call	0x115a	; 0x115a <__fp_split3>
    11e0:	70 f3       	brcs	.-36     	; 0x11be <__mulsf3+0x8>

000011e2 <__mulsf3_pse>:
    11e2:	95 9f       	mul	r25, r21
    11e4:	c1 f3       	breq	.-16     	; 0x11d6 <__mulsf3+0x20>
    11e6:	95 0f       	add	r25, r21
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	55 1f       	adc	r21, r21
    11ec:	62 9f       	mul	r22, r18
    11ee:	f0 01       	movw	r30, r0
    11f0:	72 9f       	mul	r23, r18
    11f2:	bb 27       	eor	r27, r27
    11f4:	f0 0d       	add	r31, r0
    11f6:	b1 1d       	adc	r27, r1
    11f8:	63 9f       	mul	r22, r19
    11fa:	aa 27       	eor	r26, r26
    11fc:	f0 0d       	add	r31, r0
    11fe:	b1 1d       	adc	r27, r1
    1200:	aa 1f       	adc	r26, r26
    1202:	64 9f       	mul	r22, r20
    1204:	66 27       	eor	r22, r22
    1206:	b0 0d       	add	r27, r0
    1208:	a1 1d       	adc	r26, r1
    120a:	66 1f       	adc	r22, r22
    120c:	82 9f       	mul	r24, r18
    120e:	22 27       	eor	r18, r18
    1210:	b0 0d       	add	r27, r0
    1212:	a1 1d       	adc	r26, r1
    1214:	62 1f       	adc	r22, r18
    1216:	73 9f       	mul	r23, r19
    1218:	b0 0d       	add	r27, r0
    121a:	a1 1d       	adc	r26, r1
    121c:	62 1f       	adc	r22, r18
    121e:	83 9f       	mul	r24, r19
    1220:	a0 0d       	add	r26, r0
    1222:	61 1d       	adc	r22, r1
    1224:	22 1f       	adc	r18, r18
    1226:	74 9f       	mul	r23, r20
    1228:	33 27       	eor	r19, r19
    122a:	a0 0d       	add	r26, r0
    122c:	61 1d       	adc	r22, r1
    122e:	23 1f       	adc	r18, r19
    1230:	84 9f       	mul	r24, r20
    1232:	60 0d       	add	r22, r0
    1234:	21 1d       	adc	r18, r1
    1236:	82 2f       	mov	r24, r18
    1238:	76 2f       	mov	r23, r22
    123a:	6a 2f       	mov	r22, r26
    123c:	11 24       	eor	r1, r1
    123e:	9f 57       	subi	r25, 0x7F	; 127
    1240:	50 40       	sbci	r21, 0x00	; 0
    1242:	9a f0       	brmi	.+38     	; 0x126a <__mulsf3_pse+0x88>
    1244:	f1 f0       	breq	.+60     	; 0x1282 <__mulsf3_pse+0xa0>
    1246:	88 23       	and	r24, r24
    1248:	4a f0       	brmi	.+18     	; 0x125c <__mulsf3_pse+0x7a>
    124a:	ee 0f       	add	r30, r30
    124c:	ff 1f       	adc	r31, r31
    124e:	bb 1f       	adc	r27, r27
    1250:	66 1f       	adc	r22, r22
    1252:	77 1f       	adc	r23, r23
    1254:	88 1f       	adc	r24, r24
    1256:	91 50       	subi	r25, 0x01	; 1
    1258:	50 40       	sbci	r21, 0x00	; 0
    125a:	a9 f7       	brne	.-22     	; 0x1246 <__mulsf3_pse+0x64>
    125c:	9e 3f       	cpi	r25, 0xFE	; 254
    125e:	51 05       	cpc	r21, r1
    1260:	80 f0       	brcs	.+32     	; 0x1282 <__mulsf3_pse+0xa0>
    1262:	0c 94 85 08 	jmp	0x110a	; 0x110a <__fp_inf>
    1266:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <__fp_szero>
    126a:	5f 3f       	cpi	r21, 0xFF	; 255
    126c:	e4 f3       	brlt	.-8      	; 0x1266 <__mulsf3_pse+0x84>
    126e:	98 3e       	cpi	r25, 0xE8	; 232
    1270:	d4 f3       	brlt	.-12     	; 0x1266 <__mulsf3_pse+0x84>
    1272:	86 95       	lsr	r24
    1274:	77 95       	ror	r23
    1276:	67 95       	ror	r22
    1278:	b7 95       	ror	r27
    127a:	f7 95       	ror	r31
    127c:	e7 95       	ror	r30
    127e:	9f 5f       	subi	r25, 0xFF	; 255
    1280:	c1 f7       	brne	.-16     	; 0x1272 <__mulsf3_pse+0x90>
    1282:	fe 2b       	or	r31, r30
    1284:	88 0f       	add	r24, r24
    1286:	91 1d       	adc	r25, r1
    1288:	96 95       	lsr	r25
    128a:	87 95       	ror	r24
    128c:	97 f9       	bld	r25, 7
    128e:	08 95       	ret

00001290 <__fp_cmp>:
    1290:	99 0f       	add	r25, r25
    1292:	00 08       	sbc	r0, r0
    1294:	55 0f       	add	r21, r21
    1296:	aa 0b       	sbc	r26, r26
    1298:	e0 e8       	ldi	r30, 0x80	; 128
    129a:	fe ef       	ldi	r31, 0xFE	; 254
    129c:	16 16       	cp	r1, r22
    129e:	17 06       	cpc	r1, r23
    12a0:	e8 07       	cpc	r30, r24
    12a2:	f9 07       	cpc	r31, r25
    12a4:	c0 f0       	brcs	.+48     	; 0x12d6 <__fp_cmp+0x46>
    12a6:	12 16       	cp	r1, r18
    12a8:	13 06       	cpc	r1, r19
    12aa:	e4 07       	cpc	r30, r20
    12ac:	f5 07       	cpc	r31, r21
    12ae:	98 f0       	brcs	.+38     	; 0x12d6 <__fp_cmp+0x46>
    12b0:	62 1b       	sub	r22, r18
    12b2:	73 0b       	sbc	r23, r19
    12b4:	84 0b       	sbc	r24, r20
    12b6:	95 0b       	sbc	r25, r21
    12b8:	39 f4       	brne	.+14     	; 0x12c8 <__fp_cmp+0x38>
    12ba:	0a 26       	eor	r0, r26
    12bc:	61 f0       	breq	.+24     	; 0x12d6 <__fp_cmp+0x46>
    12be:	23 2b       	or	r18, r19
    12c0:	24 2b       	or	r18, r20
    12c2:	25 2b       	or	r18, r21
    12c4:	21 f4       	brne	.+8      	; 0x12ce <__fp_cmp+0x3e>
    12c6:	08 95       	ret
    12c8:	0a 26       	eor	r0, r26
    12ca:	09 f4       	brne	.+2      	; 0x12ce <__fp_cmp+0x3e>
    12cc:	a1 40       	sbci	r26, 0x01	; 1
    12ce:	a6 95       	lsr	r26
    12d0:	8f ef       	ldi	r24, 0xFF	; 255
    12d2:	81 1d       	adc	r24, r1
    12d4:	81 1d       	adc	r24, r1
    12d6:	08 95       	ret

000012d8 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    12d8:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    12da:	91 8d       	ldd	r25, Z+25	; 0x19
    12dc:	22 8d       	ldd	r18, Z+26	; 0x1a
    12de:	89 2f       	mov	r24, r25
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	80 5c       	subi	r24, 0xC0	; 192
    12e4:	9f 4f       	sbci	r25, 0xFF	; 255
    12e6:	82 1b       	sub	r24, r18
    12e8:	91 09       	sbc	r25, r1
}
    12ea:	8f 73       	andi	r24, 0x3F	; 63
    12ec:	99 27       	eor	r25, r25
    12ee:	08 95       	ret

000012f0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    12f0:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    12f2:	91 8d       	ldd	r25, Z+25	; 0x19
    12f4:	82 8d       	ldd	r24, Z+26	; 0x1a
    12f6:	98 17       	cp	r25, r24
    12f8:	31 f0       	breq	.+12     	; 0x1306 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    12fa:	82 8d       	ldd	r24, Z+26	; 0x1a
    12fc:	e8 0f       	add	r30, r24
    12fe:	f1 1d       	adc	r31, r1
    1300:	85 8d       	ldd	r24, Z+29	; 0x1d
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1306:	8f ef       	ldi	r24, 0xFF	; 255
    1308:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    130a:	08 95       	ret

0000130c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    130c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    130e:	91 8d       	ldd	r25, Z+25	; 0x19
    1310:	82 8d       	ldd	r24, Z+26	; 0x1a
    1312:	98 17       	cp	r25, r24
    1314:	61 f0       	breq	.+24     	; 0x132e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1316:	82 8d       	ldd	r24, Z+26	; 0x1a
    1318:	df 01       	movw	r26, r30
    131a:	a8 0f       	add	r26, r24
    131c:	b1 1d       	adc	r27, r1
    131e:	5d 96       	adiw	r26, 0x1d	; 29
    1320:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1322:	92 8d       	ldd	r25, Z+26	; 0x1a
    1324:	9f 5f       	subi	r25, 0xFF	; 255
    1326:	9f 73       	andi	r25, 0x3F	; 63
    1328:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    132e:	8f ef       	ldi	r24, 0xFF	; 255
    1330:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1332:	08 95       	ret

00001334 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1334:	fc 01       	movw	r30, r24
    1336:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1338:	44 8d       	ldd	r20, Z+28	; 0x1c
    133a:	25 2f       	mov	r18, r21
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	84 2f       	mov	r24, r20
    1340:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1342:	82 1b       	sub	r24, r18
    1344:	93 0b       	sbc	r25, r19
    1346:	54 17       	cp	r21, r20
    1348:	10 f0       	brcs	.+4      	; 0x134e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    134a:	cf 96       	adiw	r24, 0x3f	; 63
    134c:	08 95       	ret
  return tail - head - 1;
    134e:	01 97       	sbiw	r24, 0x01	; 1
}
    1350:	08 95       	ret

00001352 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1352:	88 e0       	ldi	r24, 0x08	; 8
    1354:	9b e0       	ldi	r25, 0x0B	; 11
    1356:	89 2b       	or	r24, r25
    1358:	49 f0       	breq	.+18     	; 0x136c <_Z14serialEventRunv+0x1a>
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	89 2b       	or	r24, r25
    1360:	29 f0       	breq	.+10     	; 0x136c <_Z14serialEventRunv+0x1a>
    1362:	0e 94 08 0b 	call	0x1610	; 0x1610 <_Z17Serial0_availablev>
    1366:	81 11       	cpse	r24, r1
    1368:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    136c:	08 95       	ret

0000136e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    136e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1370:	84 8d       	ldd	r24, Z+28	; 0x1c
    1372:	df 01       	movw	r26, r30
    1374:	a8 0f       	add	r26, r24
    1376:	b1 1d       	adc	r27, r1
    1378:	a3 5a       	subi	r26, 0xA3	; 163
    137a:	bf 4f       	sbci	r27, 0xFF	; 255
    137c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    137e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	01 96       	adiw	r24, 0x01	; 1
    1384:	8f 73       	andi	r24, 0x3F	; 63
    1386:	99 27       	eor	r25, r25
    1388:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    138a:	a6 89       	ldd	r26, Z+22	; 0x16
    138c:	b7 89       	ldd	r27, Z+23	; 0x17
    138e:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1390:	a0 89       	ldd	r26, Z+16	; 0x10
    1392:	b1 89       	ldd	r27, Z+17	; 0x11
    1394:	8c 91       	ld	r24, X
    1396:	83 70       	andi	r24, 0x03	; 3
    1398:	80 64       	ori	r24, 0x40	; 64
    139a:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    139c:	93 8d       	ldd	r25, Z+27	; 0x1b
    139e:	84 8d       	ldd	r24, Z+28	; 0x1c
    13a0:	98 13       	cpse	r25, r24
    13a2:	06 c0       	rjmp	.+12     	; 0x13b0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    13a4:	02 88       	ldd	r0, Z+18	; 0x12
    13a6:	f3 89       	ldd	r31, Z+19	; 0x13
    13a8:	e0 2d       	mov	r30, r0
    13aa:	80 81       	ld	r24, Z
    13ac:	8f 7d       	andi	r24, 0xDF	; 223
    13ae:	80 83       	st	Z, r24
    13b0:	08 95       	ret

000013b2 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    13b2:	ef 92       	push	r14
    13b4:	ff 92       	push	r15
    13b6:	0f 93       	push	r16
    13b8:	1f 93       	push	r17
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	ec 01       	movw	r28, r24
  _written = true;
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    13c4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    13c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13c8:	98 13       	cpse	r25, r24
    13ca:	05 c0       	rjmp	.+10     	; 0x13d6 <_ZN14HardwareSerial5writeEh+0x24>
    13cc:	e8 89       	ldd	r30, Y+16	; 0x10
    13ce:	f9 89       	ldd	r31, Y+17	; 0x11
    13d0:	80 81       	ld	r24, Z
    13d2:	85 fd       	sbrc	r24, 5
    13d4:	26 c0       	rjmp	.+76     	; 0x1422 <_ZN14HardwareSerial5writeEh+0x70>
    13d6:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    13d8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    13da:	10 e0       	ldi	r17, 0x00	; 0
    13dc:	0f 5f       	subi	r16, 0xFF	; 255
    13de:	1f 4f       	sbci	r17, 0xFF	; 255
    13e0:	0f 73       	andi	r16, 0x3F	; 63
    13e2:	11 27       	eor	r17, r17
    13e4:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    13e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13e8:	e8 12       	cpse	r14, r24
    13ea:	0c c0       	rjmp	.+24     	; 0x1404 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	07 fc       	sbrc	r0, 7
    13f0:	fa cf       	rjmp	.-12     	; 0x13e6 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    13f2:	e8 89       	ldd	r30, Y+16	; 0x10
    13f4:	f9 89       	ldd	r31, Y+17	; 0x11
    13f6:	80 81       	ld	r24, Z
    13f8:	85 ff       	sbrs	r24, 5
    13fa:	f5 cf       	rjmp	.-22     	; 0x13e6 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    13fc:	ce 01       	movw	r24, r28
    13fe:	0e 94 b7 09 	call	0x136e	; 0x136e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1402:	f1 cf       	rjmp	.-30     	; 0x13e6 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1404:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1406:	fe 01       	movw	r30, r28
    1408:	e8 0f       	add	r30, r24
    140a:	f1 1d       	adc	r31, r1
    140c:	e3 5a       	subi	r30, 0xA3	; 163
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1412:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1414:	f8 94       	cli
    _tx_buffer_head = i;
    1416:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1418:	ea 89       	ldd	r30, Y+18	; 0x12
    141a:	fb 89       	ldd	r31, Y+19	; 0x13
    141c:	80 81       	ld	r24, Z
    141e:	80 62       	ori	r24, 0x20	; 32
    1420:	0a c0       	rjmp	.+20     	; 0x1436 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1422:	9f b7       	in	r25, 0x3f	; 63
    1424:	f8 94       	cli
      *_udr = c;
    1426:	ee 89       	ldd	r30, Y+22	; 0x16
    1428:	ff 89       	ldd	r31, Y+23	; 0x17
    142a:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    142c:	e8 89       	ldd	r30, Y+16	; 0x10
    142e:	f9 89       	ldd	r31, Y+17	; 0x11
    1430:	80 81       	ld	r24, Z
    1432:	83 70       	andi	r24, 0x03	; 3
    1434:	80 64       	ori	r24, 0x40	; 64
    1436:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1438:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	1f 91       	pop	r17
    1444:	0f 91       	pop	r16
    1446:	ff 90       	pop	r15
    1448:	ef 90       	pop	r14
    144a:	08 95       	ret

0000144c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1452:	88 8d       	ldd	r24, Y+24	; 0x18
    1454:	88 23       	and	r24, r24
    1456:	c9 f0       	breq	.+50     	; 0x148a <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1458:	ea 89       	ldd	r30, Y+18	; 0x12
    145a:	fb 89       	ldd	r31, Y+19	; 0x13
    145c:	80 81       	ld	r24, Z
    145e:	85 fd       	sbrc	r24, 5
    1460:	05 c0       	rjmp	.+10     	; 0x146c <_ZN14HardwareSerial5flushEv+0x20>
    1462:	a8 89       	ldd	r26, Y+16	; 0x10
    1464:	b9 89       	ldd	r27, Y+17	; 0x11
    1466:	8c 91       	ld	r24, X
    1468:	86 fd       	sbrc	r24, 6
    146a:	0f c0       	rjmp	.+30     	; 0x148a <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	07 fc       	sbrc	r0, 7
    1470:	f5 cf       	rjmp	.-22     	; 0x145c <_ZN14HardwareSerial5flushEv+0x10>
    1472:	80 81       	ld	r24, Z
    1474:	85 ff       	sbrs	r24, 5
    1476:	f2 cf       	rjmp	.-28     	; 0x145c <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1478:	a8 89       	ldd	r26, Y+16	; 0x10
    147a:	b9 89       	ldd	r27, Y+17	; 0x11
    147c:	8c 91       	ld	r24, X
    147e:	85 ff       	sbrs	r24, 5
    1480:	ed cf       	rjmp	.-38     	; 0x145c <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1482:	ce 01       	movw	r24, r28
    1484:	0e 94 b7 09 	call	0x136e	; 0x136e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1488:	e7 cf       	rjmp	.-50     	; 0x1458 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    148a:	df 91       	pop	r29
    148c:	cf 91       	pop	r28
    148e:	08 95       	ret

00001490 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1490:	cf 92       	push	r12
    1492:	df 92       	push	r13
    1494:	ef 92       	push	r14
    1496:	ff 92       	push	r15
    1498:	1f 93       	push	r17
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	ec 01       	movw	r28, r24
    14a0:	6a 01       	movw	r12, r20
    14a2:	7b 01       	movw	r14, r22
    14a4:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    14a6:	e8 89       	ldd	r30, Y+16	; 0x10
    14a8:	f9 89       	ldd	r31, Y+17	; 0x11
    14aa:	82 e0       	ldi	r24, 0x02	; 2
    14ac:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    14ae:	41 15       	cp	r20, r1
    14b0:	51 4e       	sbci	r21, 0xE1	; 225
    14b2:	61 05       	cpc	r22, r1
    14b4:	71 05       	cpc	r23, r1
    14b6:	b1 f0       	breq	.+44     	; 0x14e4 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	79 e0       	ldi	r23, 0x09	; 9
    14bc:	8d e3       	ldi	r24, 0x3D	; 61
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	a7 01       	movw	r20, r14
    14c2:	96 01       	movw	r18, r12
    14c4:	0e 94 93 14 	call	0x2926	; 0x2926 <__udivmodsi4>
    14c8:	da 01       	movw	r26, r20
    14ca:	c9 01       	movw	r24, r18
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	a1 09       	sbc	r26, r1
    14d0:	b1 09       	sbc	r27, r1
    14d2:	b6 95       	lsr	r27
    14d4:	a7 95       	ror	r26
    14d6:	97 95       	ror	r25
    14d8:	87 95       	ror	r24
    14da:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    14dc:	21 15       	cp	r18, r1
    14de:	80 e1       	ldi	r24, 0x10	; 16
    14e0:	38 07       	cpc	r19, r24
    14e2:	a8 f0       	brcs	.+42     	; 0x150e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    14e4:	e8 89       	ldd	r30, Y+16	; 0x10
    14e6:	f9 89       	ldd	r31, Y+17	; 0x11
    14e8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    14ea:	60 e8       	ldi	r22, 0x80	; 128
    14ec:	74 e8       	ldi	r23, 0x84	; 132
    14ee:	8e e1       	ldi	r24, 0x1E	; 30
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	a7 01       	movw	r20, r14
    14f4:	96 01       	movw	r18, r12
    14f6:	0e 94 93 14 	call	0x2926	; 0x2926 <__udivmodsi4>
    14fa:	da 01       	movw	r26, r20
    14fc:	c9 01       	movw	r24, r18
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	a1 09       	sbc	r26, r1
    1502:	b1 09       	sbc	r27, r1
    1504:	b6 95       	lsr	r27
    1506:	a7 95       	ror	r26
    1508:	97 95       	ror	r25
    150a:	87 95       	ror	r24
    150c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    150e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1510:	fd 85       	ldd	r31, Y+13	; 0x0d
    1512:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1514:	ee 85       	ldd	r30, Y+14	; 0x0e
    1516:	ff 85       	ldd	r31, Y+15	; 0x0f
    1518:	20 83       	st	Z, r18

  _written = false;
    151a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    151c:	ec 89       	ldd	r30, Y+20	; 0x14
    151e:	fd 89       	ldd	r31, Y+21	; 0x15
    1520:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1522:	ea 89       	ldd	r30, Y+18	; 0x12
    1524:	fb 89       	ldd	r31, Y+19	; 0x13
    1526:	80 81       	ld	r24, Z
    1528:	80 61       	ori	r24, 0x10	; 16
    152a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    152c:	ea 89       	ldd	r30, Y+18	; 0x12
    152e:	fb 89       	ldd	r31, Y+19	; 0x13
    1530:	80 81       	ld	r24, Z
    1532:	88 60       	ori	r24, 0x08	; 8
    1534:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1536:	ea 89       	ldd	r30, Y+18	; 0x12
    1538:	fb 89       	ldd	r31, Y+19	; 0x13
    153a:	80 81       	ld	r24, Z
    153c:	80 68       	ori	r24, 0x80	; 128
    153e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1540:	ea 89       	ldd	r30, Y+18	; 0x12
    1542:	fb 89       	ldd	r31, Y+19	; 0x13
    1544:	80 81       	ld	r24, Z
    1546:	8f 7d       	andi	r24, 0xDF	; 223
    1548:	80 83       	st	Z, r24
}
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	1f 91       	pop	r17
    1550:	ff 90       	pop	r15
    1552:	ef 90       	pop	r14
    1554:	df 90       	pop	r13
    1556:	cf 90       	pop	r12
    1558:	08 95       	ret

0000155a <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	08 95       	ret

00001560 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1560:	1f 92       	push	r1
    1562:	0f 92       	push	r0
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	0f 92       	push	r0
    1568:	11 24       	eor	r1, r1
    156a:	2f 93       	push	r18
    156c:	8f 93       	push	r24
    156e:	9f 93       	push	r25
    1570:	ef 93       	push	r30
    1572:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1574:	e0 91 58 03 	lds	r30, 0x0358	; 0x800358 <Serial+0x10>
    1578:	f0 91 59 03 	lds	r31, 0x0359	; 0x800359 <Serial+0x11>
    157c:	80 81       	ld	r24, Z
    157e:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <Serial+0x16>
    1582:	f0 91 5f 03 	lds	r31, 0x035F	; 0x80035f <Serial+0x17>
    1586:	82 fd       	sbrc	r24, 2
    1588:	12 c0       	rjmp	.+36     	; 0x15ae <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    158a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    158c:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <Serial+0x19>
    1590:	8f 5f       	subi	r24, 0xFF	; 255
    1592:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1594:	20 91 62 03 	lds	r18, 0x0362	; 0x800362 <Serial+0x1a>
    1598:	82 17       	cp	r24, r18
    159a:	51 f0       	breq	.+20     	; 0x15b0 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    159c:	e0 91 61 03 	lds	r30, 0x0361	; 0x800361 <Serial+0x19>
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	e8 5b       	subi	r30, 0xB8	; 184
    15a4:	fc 4f       	sbci	r31, 0xFC	; 252
    15a6:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    15a8:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <Serial+0x19>
    15ac:	01 c0       	rjmp	.+2      	; 0x15b0 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    15ae:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    15b0:	ff 91       	pop	r31
    15b2:	ef 91       	pop	r30
    15b4:	9f 91       	pop	r25
    15b6:	8f 91       	pop	r24
    15b8:	2f 91       	pop	r18
    15ba:	0f 90       	pop	r0
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	0f 90       	pop	r0
    15c0:	1f 90       	pop	r1
    15c2:	18 95       	reti

000015c4 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    15c4:	1f 92       	push	r1
    15c6:	0f 92       	push	r0
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	0f 92       	push	r0
    15cc:	11 24       	eor	r1, r1
    15ce:	2f 93       	push	r18
    15d0:	3f 93       	push	r19
    15d2:	4f 93       	push	r20
    15d4:	5f 93       	push	r21
    15d6:	6f 93       	push	r22
    15d8:	7f 93       	push	r23
    15da:	8f 93       	push	r24
    15dc:	9f 93       	push	r25
    15de:	af 93       	push	r26
    15e0:	bf 93       	push	r27
    15e2:	ef 93       	push	r30
    15e4:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    15e6:	88 e4       	ldi	r24, 0x48	; 72
    15e8:	93 e0       	ldi	r25, 0x03	; 3
    15ea:	0e 94 b7 09 	call	0x136e	; 0x136e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    15ee:	ff 91       	pop	r31
    15f0:	ef 91       	pop	r30
    15f2:	bf 91       	pop	r27
    15f4:	af 91       	pop	r26
    15f6:	9f 91       	pop	r25
    15f8:	8f 91       	pop	r24
    15fa:	7f 91       	pop	r23
    15fc:	6f 91       	pop	r22
    15fe:	5f 91       	pop	r21
    1600:	4f 91       	pop	r20
    1602:	3f 91       	pop	r19
    1604:	2f 91       	pop	r18
    1606:	0f 90       	pop	r0
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	0f 90       	pop	r0
    160c:	1f 90       	pop	r1
    160e:	18 95       	reti

00001610 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1610:	88 e4       	ldi	r24, 0x48	; 72
    1612:	93 e0       	ldi	r25, 0x03	; 3
    1614:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <_ZN14HardwareSerial9availableEv>
    1618:	21 e0       	ldi	r18, 0x01	; 1
    161a:	89 2b       	or	r24, r25
    161c:	09 f4       	brne	.+2      	; 0x1620 <_Z17Serial0_availablev+0x10>
    161e:	20 e0       	ldi	r18, 0x00	; 0
}
    1620:	82 2f       	mov	r24, r18
    1622:	08 95       	ret

00001624 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1624:	e8 e4       	ldi	r30, 0x48	; 72
    1626:	f3 e0       	ldi	r31, 0x03	; 3
    1628:	13 82       	std	Z+3, r1	; 0x03
    162a:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    162c:	88 ee       	ldi	r24, 0xE8	; 232
    162e:	93 e0       	ldi	r25, 0x03	; 3
    1630:	a0 e0       	ldi	r26, 0x00	; 0
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	84 83       	std	Z+4, r24	; 0x04
    1636:	95 83       	std	Z+5, r25	; 0x05
    1638:	a6 83       	std	Z+6, r26	; 0x06
    163a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    163c:	89 e3       	ldi	r24, 0x39	; 57
    163e:	92 e0       	ldi	r25, 0x02	; 2
    1640:	91 83       	std	Z+1, r25	; 0x01
    1642:	80 83       	st	Z, r24
    1644:	85 ec       	ldi	r24, 0xC5	; 197
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	95 87       	std	Z+13, r25	; 0x0d
    164a:	84 87       	std	Z+12, r24	; 0x0c
    164c:	84 ec       	ldi	r24, 0xC4	; 196
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	97 87       	std	Z+15, r25	; 0x0f
    1652:	86 87       	std	Z+14, r24	; 0x0e
    1654:	80 ec       	ldi	r24, 0xC0	; 192
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	91 8b       	std	Z+17, r25	; 0x11
    165a:	80 8b       	std	Z+16, r24	; 0x10
    165c:	81 ec       	ldi	r24, 0xC1	; 193
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	93 8b       	std	Z+19, r25	; 0x13
    1662:	82 8b       	std	Z+18, r24	; 0x12
    1664:	82 ec       	ldi	r24, 0xC2	; 194
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	95 8b       	std	Z+21, r25	; 0x15
    166a:	84 8b       	std	Z+20, r24	; 0x14
    166c:	86 ec       	ldi	r24, 0xC6	; 198
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	97 8b       	std	Z+23, r25	; 0x17
    1672:	86 8b       	std	Z+22, r24	; 0x16
    1674:	11 8e       	std	Z+25, r1	; 0x19
    1676:	12 8e       	std	Z+26, r1	; 0x1a
    1678:	13 8e       	std	Z+27, r1	; 0x1b
    167a:	14 8e       	std	Z+28, r1	; 0x1c
    167c:	08 95       	ret

0000167e <initVariant>:
    167e:	08 95       	ret

00001680 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1680:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <init>

	initVariant();
    1684:	0e 94 3f 0b 	call	0x167e	; 0x167e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1688:	0e 94 a3 04 	call	0x946	; 0x946 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    168c:	c9 ea       	ldi	r28, 0xA9	; 169
    168e:	d9 e0       	ldi	r29, 0x09	; 9
#endif
	
	setup();
    
	for (;;) {
		loop();
    1690:	0e 94 21 06 	call	0xc42	; 0xc42 <loop>
		if (serialEventRun) serialEventRun();
    1694:	20 97       	sbiw	r28, 0x00	; 0
    1696:	e1 f3       	breq	.-8      	; 0x1690 <main+0x10>
    1698:	0e 94 a9 09 	call	0x1352	; 0x1352 <_Z14serialEventRunv>
    169c:	f9 cf       	rjmp	.-14     	; 0x1690 <main+0x10>

0000169e <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    169e:	cf 92       	push	r12
    16a0:	df 92       	push	r13
    16a2:	ef 92       	push	r14
    16a4:	ff 92       	push	r15
    16a6:	0f 93       	push	r16
    16a8:	1f 93       	push	r17
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
    16ae:	6c 01       	movw	r12, r24
    16b0:	7a 01       	movw	r14, r20
    16b2:	8b 01       	movw	r16, r22
    16b4:	c0 e0       	ldi	r28, 0x00	; 0
    16b6:	d0 e0       	ldi	r29, 0x00	; 0
    16b8:	ce 15       	cp	r28, r14
    16ba:	df 05       	cpc	r29, r15
    16bc:	81 f0       	breq	.+32     	; 0x16de <_ZN5Print5writeEPKhj+0x40>
    16be:	d8 01       	movw	r26, r16
    16c0:	6d 91       	ld	r22, X+
    16c2:	8d 01       	movw	r16, r26
    16c4:	d6 01       	movw	r26, r12
    16c6:	ed 91       	ld	r30, X+
    16c8:	fc 91       	ld	r31, X
    16ca:	01 90       	ld	r0, Z+
    16cc:	f0 81       	ld	r31, Z
    16ce:	e0 2d       	mov	r30, r0
    16d0:	c6 01       	movw	r24, r12
    16d2:	09 95       	icall
    16d4:	89 2b       	or	r24, r25
    16d6:	11 f0       	breq	.+4      	; 0x16dc <_ZN5Print5writeEPKhj+0x3e>
    16d8:	21 96       	adiw	r28, 0x01	; 1
    16da:	ee cf       	rjmp	.-36     	; 0x16b8 <_ZN5Print5writeEPKhj+0x1a>
    16dc:	7e 01       	movw	r14, r28
    16de:	c7 01       	movw	r24, r14
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	1f 91       	pop	r17
    16e6:	0f 91       	pop	r16
    16e8:	ff 90       	pop	r15
    16ea:	ef 90       	pop	r14
    16ec:	df 90       	pop	r13
    16ee:	cf 90       	pop	r12
    16f0:	08 95       	ret

000016f2 <_ZN5Print5writeEPKc>:
    16f2:	61 15       	cp	r22, r1
    16f4:	71 05       	cpc	r23, r1
    16f6:	79 f0       	breq	.+30     	; 0x1716 <_ZN5Print5writeEPKc+0x24>
    16f8:	fb 01       	movw	r30, r22
    16fa:	01 90       	ld	r0, Z+
    16fc:	00 20       	and	r0, r0
    16fe:	e9 f7       	brne	.-6      	; 0x16fa <_ZN5Print5writeEPKc+0x8>
    1700:	31 97       	sbiw	r30, 0x01	; 1
    1702:	af 01       	movw	r20, r30
    1704:	46 1b       	sub	r20, r22
    1706:	57 0b       	sbc	r21, r23
    1708:	dc 01       	movw	r26, r24
    170a:	ed 91       	ld	r30, X+
    170c:	fc 91       	ld	r31, X
    170e:	02 80       	ldd	r0, Z+2	; 0x02
    1710:	f3 81       	ldd	r31, Z+3	; 0x03
    1712:	e0 2d       	mov	r30, r0
    1714:	09 94       	ijmp
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	08 95       	ret

0000171c <_ZN5Print5printEPK19__FlashStringHelper>:
    171c:	ef 92       	push	r14
    171e:	ff 92       	push	r15
    1720:	0f 93       	push	r16
    1722:	1f 93       	push	r17
    1724:	cf 93       	push	r28
    1726:	df 93       	push	r29
    1728:	8c 01       	movw	r16, r24
    172a:	7b 01       	movw	r14, r22
    172c:	c0 e0       	ldi	r28, 0x00	; 0
    172e:	d0 e0       	ldi	r29, 0x00	; 0
    1730:	f7 01       	movw	r30, r14
    1732:	ec 0f       	add	r30, r28
    1734:	fd 1f       	adc	r31, r29
    1736:	64 91       	lpm	r22, Z
    1738:	66 23       	and	r22, r22
    173a:	61 f0       	breq	.+24     	; 0x1754 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    173c:	d8 01       	movw	r26, r16
    173e:	ed 91       	ld	r30, X+
    1740:	fc 91       	ld	r31, X
    1742:	01 90       	ld	r0, Z+
    1744:	f0 81       	ld	r31, Z
    1746:	e0 2d       	mov	r30, r0
    1748:	c8 01       	movw	r24, r16
    174a:	09 95       	icall
    174c:	89 2b       	or	r24, r25
    174e:	11 f0       	breq	.+4      	; 0x1754 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1750:	21 96       	adiw	r28, 0x01	; 1
    1752:	ee cf       	rjmp	.-36     	; 0x1730 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    1754:	ce 01       	movw	r24, r28
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	1f 91       	pop	r17
    175c:	0f 91       	pop	r16
    175e:	ff 90       	pop	r15
    1760:	ef 90       	pop	r14
    1762:	08 95       	ret

00001764 <_ZN5Print5printEPKc>:
    1764:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <_ZN5Print5writeEPKc>

00001768 <_ZN5Print5printEc>:
    1768:	dc 01       	movw	r26, r24
    176a:	ed 91       	ld	r30, X+
    176c:	fc 91       	ld	r31, X
    176e:	01 90       	ld	r0, Z+
    1770:	f0 81       	ld	r31, Z
    1772:	e0 2d       	mov	r30, r0
    1774:	09 94       	ijmp

00001776 <_ZN5Print7printlnEv>:
    1776:	67 e4       	ldi	r22, 0x47	; 71
    1778:	72 e0       	ldi	r23, 0x02	; 2
    177a:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <_ZN5Print5writeEPKc>

0000177e <_ZN5Print7printlnEPK19__FlashStringHelper>:
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	ec 01       	movw	r28, r24
    1788:	0e 94 8e 0b 	call	0x171c	; 0x171c <_ZN5Print5printEPK19__FlashStringHelper>
    178c:	8c 01       	movw	r16, r24
    178e:	ce 01       	movw	r24, r28
    1790:	0e 94 bb 0b 	call	0x1776	; 0x1776 <_ZN5Print7printlnEv>
    1794:	80 0f       	add	r24, r16
    1796:	91 1f       	adc	r25, r17
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	1f 91       	pop	r17
    179e:	0f 91       	pop	r16
    17a0:	08 95       	ret

000017a2 <_ZN5Print7printlnEPKc>:
    17a2:	0f 93       	push	r16
    17a4:	1f 93       	push	r17
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
    17aa:	ec 01       	movw	r28, r24
    17ac:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Print5writeEPKc>
    17b0:	8c 01       	movw	r16, r24
    17b2:	ce 01       	movw	r24, r28
    17b4:	0e 94 bb 0b 	call	0x1776	; 0x1776 <_ZN5Print7printlnEv>
    17b8:	80 0f       	add	r24, r16
    17ba:	91 1f       	adc	r25, r17
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	08 95       	ret

000017c6 <_ZN5Print11printNumberEmh>:
    17c6:	8f 92       	push	r8
    17c8:	9f 92       	push	r9
    17ca:	af 92       	push	r10
    17cc:	bf 92       	push	r11
    17ce:	ef 92       	push	r14
    17d0:	ff 92       	push	r15
    17d2:	0f 93       	push	r16
    17d4:	1f 93       	push	r17
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	a1 97       	sbiw	r28, 0x21	; 33
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	7c 01       	movw	r14, r24
    17ec:	fa 01       	movw	r30, r20
    17ee:	cb 01       	movw	r24, r22
    17f0:	19 a2       	std	Y+33, r1	; 0x21
    17f2:	22 30       	cpi	r18, 0x02	; 2
    17f4:	08 f4       	brcc	.+2      	; 0x17f8 <_ZN5Print11printNumberEmh+0x32>
    17f6:	2a e0       	ldi	r18, 0x0A	; 10
    17f8:	8e 01       	movw	r16, r28
    17fa:	0f 5d       	subi	r16, 0xDF	; 223
    17fc:	1f 4f       	sbci	r17, 0xFF	; 255
    17fe:	82 2e       	mov	r8, r18
    1800:	91 2c       	mov	r9, r1
    1802:	a1 2c       	mov	r10, r1
    1804:	b1 2c       	mov	r11, r1
    1806:	bf 01       	movw	r22, r30
    1808:	a5 01       	movw	r20, r10
    180a:	94 01       	movw	r18, r8
    180c:	0e 94 93 14 	call	0x2926	; 0x2926 <__udivmodsi4>
    1810:	f9 01       	movw	r30, r18
    1812:	ca 01       	movw	r24, r20
    1814:	01 50       	subi	r16, 0x01	; 1
    1816:	11 09       	sbc	r17, r1
    1818:	6a 30       	cpi	r22, 0x0A	; 10
    181a:	10 f4       	brcc	.+4      	; 0x1820 <_ZN5Print11printNumberEmh+0x5a>
    181c:	60 5d       	subi	r22, 0xD0	; 208
    181e:	01 c0       	rjmp	.+2      	; 0x1822 <_ZN5Print11printNumberEmh+0x5c>
    1820:	69 5c       	subi	r22, 0xC9	; 201
    1822:	d8 01       	movw	r26, r16
    1824:	6c 93       	st	X, r22
    1826:	23 2b       	or	r18, r19
    1828:	24 2b       	or	r18, r20
    182a:	25 2b       	or	r18, r21
    182c:	61 f7       	brne	.-40     	; 0x1806 <_ZN5Print11printNumberEmh+0x40>
    182e:	b8 01       	movw	r22, r16
    1830:	c7 01       	movw	r24, r14
    1832:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Print5writeEPKc>
    1836:	a1 96       	adiw	r28, 0x21	; 33
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	df 91       	pop	r29
    1844:	cf 91       	pop	r28
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	ff 90       	pop	r15
    184c:	ef 90       	pop	r14
    184e:	bf 90       	pop	r11
    1850:	af 90       	pop	r10
    1852:	9f 90       	pop	r9
    1854:	8f 90       	pop	r8
    1856:	08 95       	ret

00001858 <_ZN5Print5printEmi>:
    1858:	21 15       	cp	r18, r1
    185a:	31 05       	cpc	r19, r1
    185c:	41 f4       	brne	.+16     	; 0x186e <_ZN5Print5printEmi+0x16>
    185e:	dc 01       	movw	r26, r24
    1860:	ed 91       	ld	r30, X+
    1862:	fc 91       	ld	r31, X
    1864:	01 90       	ld	r0, Z+
    1866:	f0 81       	ld	r31, Z
    1868:	e0 2d       	mov	r30, r0
    186a:	64 2f       	mov	r22, r20
    186c:	09 94       	ijmp
    186e:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <_ZN5Print11printNumberEmh>

00001872 <_ZN5Print5printEhi>:
    1872:	9a 01       	movw	r18, r20
    1874:	46 2f       	mov	r20, r22
    1876:	50 e0       	ldi	r21, 0x00	; 0
    1878:	60 e0       	ldi	r22, 0x00	; 0
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <_ZN5Print5printEmi>

00001880 <_ZN5Print7printlnEhi>:
    1880:	0f 93       	push	r16
    1882:	1f 93       	push	r17
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	ec 01       	movw	r28, r24
    188a:	0e 94 39 0c 	call	0x1872	; 0x1872 <_ZN5Print5printEhi>
    188e:	8c 01       	movw	r16, r24
    1890:	ce 01       	movw	r24, r28
    1892:	0e 94 bb 0b 	call	0x1776	; 0x1776 <_ZN5Print7printlnEv>
    1896:	80 0f       	add	r24, r16
    1898:	91 1f       	adc	r25, r17
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	1f 91       	pop	r17
    18a0:	0f 91       	pop	r16
    18a2:	08 95       	ret

000018a4 <_ZN5Print5printEji>:
    18a4:	9a 01       	movw	r18, r20
    18a6:	ab 01       	movw	r20, r22
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <_ZN5Print5printEmi>

000018b0 <_ZN5Print7printlnEji>:
    18b0:	0f 93       	push	r16
    18b2:	1f 93       	push	r17
    18b4:	cf 93       	push	r28
    18b6:	df 93       	push	r29
    18b8:	ec 01       	movw	r28, r24
    18ba:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <_ZN5Print5printEji>
    18be:	8c 01       	movw	r16, r24
    18c0:	ce 01       	movw	r24, r28
    18c2:	0e 94 bb 0b 	call	0x1776	; 0x1776 <_ZN5Print7printlnEv>
    18c6:	80 0f       	add	r24, r16
    18c8:	91 1f       	adc	r25, r17
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	1f 91       	pop	r17
    18d0:	0f 91       	pop	r16
    18d2:	08 95       	ret

000018d4 <_ZN5Print5printEli>:
    18d4:	cf 92       	push	r12
    18d6:	df 92       	push	r13
    18d8:	ef 92       	push	r14
    18da:	ff 92       	push	r15
    18dc:	0f 93       	push	r16
    18de:	1f 93       	push	r17
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
    18e4:	21 15       	cp	r18, r1
    18e6:	31 05       	cpc	r19, r1
    18e8:	81 f4       	brne	.+32     	; 0x190a <_ZN5Print5printEli+0x36>
    18ea:	dc 01       	movw	r26, r24
    18ec:	ed 91       	ld	r30, X+
    18ee:	fc 91       	ld	r31, X
    18f0:	01 90       	ld	r0, Z+
    18f2:	f0 81       	ld	r31, Z
    18f4:	e0 2d       	mov	r30, r0
    18f6:	64 2f       	mov	r22, r20
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	1f 91       	pop	r17
    18fe:	0f 91       	pop	r16
    1900:	ff 90       	pop	r15
    1902:	ef 90       	pop	r14
    1904:	df 90       	pop	r13
    1906:	cf 90       	pop	r12
    1908:	09 94       	ijmp
    190a:	2a 30       	cpi	r18, 0x0A	; 10
    190c:	31 05       	cpc	r19, r1
    190e:	01 f5       	brne	.+64     	; 0x1950 <_ZN5Print5printEli+0x7c>
    1910:	77 ff       	sbrs	r23, 7
    1912:	1d c0       	rjmp	.+58     	; 0x194e <_ZN5Print5printEli+0x7a>
    1914:	6a 01       	movw	r12, r20
    1916:	7b 01       	movw	r14, r22
    1918:	ec 01       	movw	r28, r24
    191a:	6d e2       	ldi	r22, 0x2D	; 45
    191c:	0e 94 b4 0b 	call	0x1768	; 0x1768 <_ZN5Print5printEc>
    1920:	8c 01       	movw	r16, r24
    1922:	44 27       	eor	r20, r20
    1924:	55 27       	eor	r21, r21
    1926:	ba 01       	movw	r22, r20
    1928:	4c 19       	sub	r20, r12
    192a:	5d 09       	sbc	r21, r13
    192c:	6e 09       	sbc	r22, r14
    192e:	7f 09       	sbc	r23, r15
    1930:	2a e0       	ldi	r18, 0x0A	; 10
    1932:	ce 01       	movw	r24, r28
    1934:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_ZN5Print11printNumberEmh>
    1938:	80 0f       	add	r24, r16
    193a:	91 1f       	adc	r25, r17
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	ff 90       	pop	r15
    1946:	ef 90       	pop	r14
    1948:	df 90       	pop	r13
    194a:	cf 90       	pop	r12
    194c:	08 95       	ret
    194e:	2a e0       	ldi	r18, 0x0A	; 10
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	1f 91       	pop	r17
    1956:	0f 91       	pop	r16
    1958:	ff 90       	pop	r15
    195a:	ef 90       	pop	r14
    195c:	df 90       	pop	r13
    195e:	cf 90       	pop	r12
    1960:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <_ZN5Print11printNumberEmh>

00001964 <_ZN5Print5printEii>:
    1964:	9a 01       	movw	r18, r20
    1966:	ab 01       	movw	r20, r22
    1968:	77 0f       	add	r23, r23
    196a:	66 0b       	sbc	r22, r22
    196c:	77 0b       	sbc	r23, r23
    196e:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <_ZN5Print5printEli>

00001972 <_ZN5Print7printlnEii>:
    1972:	0f 93       	push	r16
    1974:	1f 93       	push	r17
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	ec 01       	movw	r28, r24
    197c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN5Print5printEii>
    1980:	8c 01       	movw	r16, r24
    1982:	ce 01       	movw	r24, r28
    1984:	0e 94 bb 0b 	call	0x1776	; 0x1776 <_ZN5Print7printlnEv>
    1988:	80 0f       	add	r24, r16
    198a:	91 1f       	adc	r25, r17
    198c:	df 91       	pop	r29
    198e:	cf 91       	pop	r28
    1990:	1f 91       	pop	r17
    1992:	0f 91       	pop	r16
    1994:	08 95       	ret

00001996 <_ZN5Print10printFloatEdh>:
    1996:	7f 92       	push	r7
    1998:	8f 92       	push	r8
    199a:	9f 92       	push	r9
    199c:	af 92       	push	r10
    199e:	bf 92       	push	r11
    19a0:	cf 92       	push	r12
    19a2:	df 92       	push	r13
    19a4:	ef 92       	push	r14
    19a6:	ff 92       	push	r15
    19a8:	0f 93       	push	r16
    19aa:	1f 93       	push	r17
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	8c 01       	movw	r16, r24
    19b2:	6a 01       	movw	r12, r20
    19b4:	7b 01       	movw	r14, r22
    19b6:	72 2e       	mov	r7, r18
    19b8:	9a 01       	movw	r18, r20
    19ba:	ab 01       	movw	r20, r22
    19bc:	c7 01       	movw	r24, r14
    19be:	b6 01       	movw	r22, r12
    19c0:	0e 94 8e 14 	call	0x291c	; 0x291c <__unordsf2>
    19c4:	88 23       	and	r24, r24
    19c6:	19 f0       	breq	.+6      	; 0x19ce <_ZN5Print10printFloatEdh+0x38>
    19c8:	6a e4       	ldi	r22, 0x4A	; 74
    19ca:	72 e0       	ldi	r23, 0x02	; 2
    19cc:	27 c0       	rjmp	.+78     	; 0x1a1c <_ZN5Print10printFloatEdh+0x86>
    19ce:	46 01       	movw	r8, r12
    19d0:	57 01       	movw	r10, r14
    19d2:	e8 94       	clt
    19d4:	b7 f8       	bld	r11, 7
    19d6:	2f ef       	ldi	r18, 0xFF	; 255
    19d8:	3f ef       	ldi	r19, 0xFF	; 255
    19da:	4f e7       	ldi	r20, 0x7F	; 127
    19dc:	5f e7       	ldi	r21, 0x7F	; 127
    19de:	c5 01       	movw	r24, r10
    19e0:	b4 01       	movw	r22, r8
    19e2:	0e 94 8e 14 	call	0x291c	; 0x291c <__unordsf2>
    19e6:	81 11       	cpse	r24, r1
    19e8:	0d c0       	rjmp	.+26     	; 0x1a04 <_ZN5Print10printFloatEdh+0x6e>
    19ea:	2f ef       	ldi	r18, 0xFF	; 255
    19ec:	3f ef       	ldi	r19, 0xFF	; 255
    19ee:	4f e7       	ldi	r20, 0x7F	; 127
    19f0:	5f e7       	ldi	r21, 0x7F	; 127
    19f2:	c5 01       	movw	r24, r10
    19f4:	b4 01       	movw	r22, r8
    19f6:	0e 94 89 14 	call	0x2912	; 0x2912 <__cmpsf2>
    19fa:	18 16       	cp	r1, r24
    19fc:	1c f4       	brge	.+6      	; 0x1a04 <_ZN5Print10printFloatEdh+0x6e>
    19fe:	6e e4       	ldi	r22, 0x4E	; 78
    1a00:	72 e0       	ldi	r23, 0x02	; 2
    1a02:	0c c0       	rjmp	.+24     	; 0x1a1c <_ZN5Print10printFloatEdh+0x86>
    1a04:	2f ef       	ldi	r18, 0xFF	; 255
    1a06:	3f ef       	ldi	r19, 0xFF	; 255
    1a08:	4f e7       	ldi	r20, 0x7F	; 127
    1a0a:	5f e4       	ldi	r21, 0x4F	; 79
    1a0c:	c7 01       	movw	r24, r14
    1a0e:	b6 01       	movw	r22, r12
    1a10:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__gesf2>
    1a14:	18 16       	cp	r1, r24
    1a16:	94 f4       	brge	.+36     	; 0x1a3c <_ZN5Print10printFloatEdh+0xa6>
    1a18:	62 e5       	ldi	r22, 0x52	; 82
    1a1a:	72 e0       	ldi	r23, 0x02	; 2
    1a1c:	c8 01       	movw	r24, r16
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	1f 91       	pop	r17
    1a24:	0f 91       	pop	r16
    1a26:	ff 90       	pop	r15
    1a28:	ef 90       	pop	r14
    1a2a:	df 90       	pop	r13
    1a2c:	cf 90       	pop	r12
    1a2e:	bf 90       	pop	r11
    1a30:	af 90       	pop	r10
    1a32:	9f 90       	pop	r9
    1a34:	8f 90       	pop	r8
    1a36:	7f 90       	pop	r7
    1a38:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <_ZN5Print5writeEPKc>
    1a3c:	2f ef       	ldi	r18, 0xFF	; 255
    1a3e:	3f ef       	ldi	r19, 0xFF	; 255
    1a40:	4f e7       	ldi	r20, 0x7F	; 127
    1a42:	5f ec       	ldi	r21, 0xCF	; 207
    1a44:	c7 01       	movw	r24, r14
    1a46:	b6 01       	movw	r22, r12
    1a48:	0e 94 89 14 	call	0x2912	; 0x2912 <__cmpsf2>
    1a4c:	87 fd       	sbrc	r24, 7
    1a4e:	e4 cf       	rjmp	.-56     	; 0x1a18 <_ZN5Print10printFloatEdh+0x82>
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	a9 01       	movw	r20, r18
    1a56:	c7 01       	movw	r24, r14
    1a58:	b6 01       	movw	r22, r12
    1a5a:	0e 94 89 14 	call	0x2912	; 0x2912 <__cmpsf2>
    1a5e:	87 ff       	sbrs	r24, 7
    1a60:	0a c0       	rjmp	.+20     	; 0x1a76 <_ZN5Print10printFloatEdh+0xe0>
    1a62:	6d e2       	ldi	r22, 0x2D	; 45
    1a64:	c8 01       	movw	r24, r16
    1a66:	0e 94 b4 0b 	call	0x1768	; 0x1768 <_ZN5Print5printEc>
    1a6a:	ec 01       	movw	r28, r24
    1a6c:	f7 fa       	bst	r15, 7
    1a6e:	f0 94       	com	r15
    1a70:	f7 f8       	bld	r15, 7
    1a72:	f0 94       	com	r15
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <_ZN5Print10printFloatEdh+0xe4>
    1a76:	c0 e0       	ldi	r28, 0x00	; 0
    1a78:	d0 e0       	ldi	r29, 0x00	; 0
    1a7a:	b1 2c       	mov	r11, r1
    1a7c:	60 e0       	ldi	r22, 0x00	; 0
    1a7e:	70 e0       	ldi	r23, 0x00	; 0
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	9f e3       	ldi	r25, 0x3F	; 63
    1a84:	7b 14       	cp	r7, r11
    1a86:	41 f0       	breq	.+16     	; 0x1a98 <_ZN5Print10printFloatEdh+0x102>
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e2       	ldi	r20, 0x20	; 32
    1a8e:	51 e4       	ldi	r21, 0x41	; 65
    1a90:	0e 94 a0 07 	call	0xf40	; 0xf40 <__divsf3>
    1a94:	b3 94       	inc	r11
    1a96:	f6 cf       	rjmp	.-20     	; 0x1a84 <_ZN5Print10printFloatEdh+0xee>
    1a98:	a7 01       	movw	r20, r14
    1a9a:	96 01       	movw	r18, r12
    1a9c:	0e 94 34 07 	call	0xe68	; 0xe68 <__addsf3>
    1aa0:	6b 01       	movw	r12, r22
    1aa2:	7c 01       	movw	r14, r24
    1aa4:	0e 94 19 08 	call	0x1032	; 0x1032 <__fixunssfsi>
    1aa8:	4b 01       	movw	r8, r22
    1aaa:	5c 01       	movw	r10, r24
    1aac:	2a e0       	ldi	r18, 0x0A	; 10
    1aae:	ab 01       	movw	r20, r22
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	c8 01       	movw	r24, r16
    1ab4:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_ZN5Print11printNumberEmh>
    1ab8:	c8 0f       	add	r28, r24
    1aba:	d9 1f       	adc	r29, r25
    1abc:	77 20       	and	r7, r7
    1abe:	b9 f1       	breq	.+110    	; 0x1b2e <_ZN5Print10printFloatEdh+0x198>
    1ac0:	c5 01       	movw	r24, r10
    1ac2:	b4 01       	movw	r22, r8
    1ac4:	0e 94 48 08 	call	0x1090	; 0x1090 <__floatunsisf>
    1ac8:	9b 01       	movw	r18, r22
    1aca:	ac 01       	movw	r20, r24
    1acc:	c7 01       	movw	r24, r14
    1ace:	b6 01       	movw	r22, r12
    1ad0:	0e 94 33 07 	call	0xe66	; 0xe66 <__subsf3>
    1ad4:	6b 01       	movw	r12, r22
    1ad6:	7c 01       	movw	r14, r24
    1ad8:	6e e2       	ldi	r22, 0x2E	; 46
    1ada:	c8 01       	movw	r24, r16
    1adc:	0e 94 b4 0b 	call	0x1768	; 0x1768 <_ZN5Print5printEc>
    1ae0:	c8 0f       	add	r28, r24
    1ae2:	d9 1f       	adc	r29, r25
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	40 e2       	ldi	r20, 0x20	; 32
    1aea:	51 e4       	ldi	r21, 0x41	; 65
    1aec:	c7 01       	movw	r24, r14
    1aee:	b6 01       	movw	r22, r12
    1af0:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__mulsf3>
    1af4:	4b 01       	movw	r8, r22
    1af6:	5c 01       	movw	r10, r24
    1af8:	0e 94 19 08 	call	0x1032	; 0x1032 <__fixunssfsi>
    1afc:	6b 01       	movw	r12, r22
    1afe:	7c 01       	movw	r14, r24
    1b00:	4a e0       	ldi	r20, 0x0A	; 10
    1b02:	50 e0       	ldi	r21, 0x00	; 0
    1b04:	c8 01       	movw	r24, r16
    1b06:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <_ZN5Print5printEji>
    1b0a:	c8 0f       	add	r28, r24
    1b0c:	d9 1f       	adc	r29, r25
    1b0e:	b6 01       	movw	r22, r12
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	0e 94 48 08 	call	0x1090	; 0x1090 <__floatunsisf>
    1b18:	9b 01       	movw	r18, r22
    1b1a:	ac 01       	movw	r20, r24
    1b1c:	c5 01       	movw	r24, r10
    1b1e:	b4 01       	movw	r22, r8
    1b20:	0e 94 33 07 	call	0xe66	; 0xe66 <__subsf3>
    1b24:	6b 01       	movw	r12, r22
    1b26:	7c 01       	movw	r14, r24
    1b28:	7a 94       	dec	r7
    1b2a:	71 10       	cpse	r7, r1
    1b2c:	db cf       	rjmp	.-74     	; 0x1ae4 <_ZN5Print10printFloatEdh+0x14e>
    1b2e:	ce 01       	movw	r24, r28
    1b30:	df 91       	pop	r29
    1b32:	cf 91       	pop	r28
    1b34:	1f 91       	pop	r17
    1b36:	0f 91       	pop	r16
    1b38:	ff 90       	pop	r15
    1b3a:	ef 90       	pop	r14
    1b3c:	df 90       	pop	r13
    1b3e:	cf 90       	pop	r12
    1b40:	bf 90       	pop	r11
    1b42:	af 90       	pop	r10
    1b44:	9f 90       	pop	r9
    1b46:	8f 90       	pop	r8
    1b48:	7f 90       	pop	r7
    1b4a:	08 95       	ret

00001b4c <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    1b4c:	0f 93       	push	r16
    1b4e:	1f 93       	push	r17
    1b50:	cf 93       	push	r28
    1b52:	df 93       	push	r29
    1b54:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1b56:	0e 94 cb 0c 	call	0x1996	; 0x1996 <_ZN5Print10printFloatEdh>
    1b5a:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	0e 94 bb 0b 	call	0x1776	; 0x1776 <_ZN5Print7printlnEv>
  return n;
}
    1b62:	80 0f       	add	r24, r16
    1b64:	91 1f       	adc	r25, r17
    1b66:	df 91       	pop	r29
    1b68:	cf 91       	pop	r28
    1b6a:	1f 91       	pop	r17
    1b6c:	0f 91       	pop	r16
    1b6e:	08 95       	ret

00001b70 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1b70:	1f 92       	push	r1
    1b72:	0f 92       	push	r0
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	0f 92       	push	r0
    1b78:	11 24       	eor	r1, r1
    1b7a:	2f 93       	push	r18
    1b7c:	3f 93       	push	r19
    1b7e:	8f 93       	push	r24
    1b80:	9f 93       	push	r25
    1b82:	af 93       	push	r26
    1b84:	bf 93       	push	r27
    1b86:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <timer0_millis>
    1b8a:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <timer0_millis+0x1>
    1b8e:	a0 91 e8 03 	lds	r26, 0x03E8	; 0x8003e8 <timer0_millis+0x2>
    1b92:	b0 91 e9 03 	lds	r27, 0x03E9	; 0x8003e9 <timer0_millis+0x3>
    1b96:	30 91 e5 03 	lds	r19, 0x03E5	; 0x8003e5 <timer0_fract>
    1b9a:	23 e0       	ldi	r18, 0x03	; 3
    1b9c:	23 0f       	add	r18, r19
    1b9e:	2d 37       	cpi	r18, 0x7D	; 125
    1ba0:	20 f4       	brcc	.+8      	; 0x1baa <__vector_16+0x3a>
    1ba2:	01 96       	adiw	r24, 0x01	; 1
    1ba4:	a1 1d       	adc	r26, r1
    1ba6:	b1 1d       	adc	r27, r1
    1ba8:	05 c0       	rjmp	.+10     	; 0x1bb4 <__vector_16+0x44>
    1baa:	26 e8       	ldi	r18, 0x86	; 134
    1bac:	23 0f       	add	r18, r19
    1bae:	02 96       	adiw	r24, 0x02	; 2
    1bb0:	a1 1d       	adc	r26, r1
    1bb2:	b1 1d       	adc	r27, r1
    1bb4:	20 93 e5 03 	sts	0x03E5, r18	; 0x8003e5 <timer0_fract>
    1bb8:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <timer0_millis>
    1bbc:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <timer0_millis+0x1>
    1bc0:	a0 93 e8 03 	sts	0x03E8, r26	; 0x8003e8 <timer0_millis+0x2>
    1bc4:	b0 93 e9 03 	sts	0x03E9, r27	; 0x8003e9 <timer0_millis+0x3>
    1bc8:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <timer0_overflow_count>
    1bcc:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <timer0_overflow_count+0x1>
    1bd0:	a0 91 ec 03 	lds	r26, 0x03EC	; 0x8003ec <timer0_overflow_count+0x2>
    1bd4:	b0 91 ed 03 	lds	r27, 0x03ED	; 0x8003ed <timer0_overflow_count+0x3>
    1bd8:	01 96       	adiw	r24, 0x01	; 1
    1bda:	a1 1d       	adc	r26, r1
    1bdc:	b1 1d       	adc	r27, r1
    1bde:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <timer0_overflow_count>
    1be2:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <timer0_overflow_count+0x1>
    1be6:	a0 93 ec 03 	sts	0x03EC, r26	; 0x8003ec <timer0_overflow_count+0x2>
    1bea:	b0 93 ed 03 	sts	0x03ED, r27	; 0x8003ed <timer0_overflow_count+0x3>
    1bee:	bf 91       	pop	r27
    1bf0:	af 91       	pop	r26
    1bf2:	9f 91       	pop	r25
    1bf4:	8f 91       	pop	r24
    1bf6:	3f 91       	pop	r19
    1bf8:	2f 91       	pop	r18
    1bfa:	0f 90       	pop	r0
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	0f 90       	pop	r0
    1c00:	1f 90       	pop	r1
    1c02:	18 95       	reti

00001c04 <micros>:
    1c04:	3f b7       	in	r19, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <timer0_overflow_count>
    1c0c:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <timer0_overflow_count+0x1>
    1c10:	a0 91 ec 03 	lds	r26, 0x03EC	; 0x8003ec <timer0_overflow_count+0x2>
    1c14:	b0 91 ed 03 	lds	r27, 0x03ED	; 0x8003ed <timer0_overflow_count+0x3>
    1c18:	26 b5       	in	r18, 0x26	; 38
    1c1a:	a8 9b       	sbis	0x15, 0	; 21
    1c1c:	05 c0       	rjmp	.+10     	; 0x1c28 <micros+0x24>
    1c1e:	2f 3f       	cpi	r18, 0xFF	; 255
    1c20:	19 f0       	breq	.+6      	; 0x1c28 <micros+0x24>
    1c22:	01 96       	adiw	r24, 0x01	; 1
    1c24:	a1 1d       	adc	r26, r1
    1c26:	b1 1d       	adc	r27, r1
    1c28:	3f bf       	out	0x3f, r19	; 63
    1c2a:	ba 2f       	mov	r27, r26
    1c2c:	a9 2f       	mov	r26, r25
    1c2e:	98 2f       	mov	r25, r24
    1c30:	88 27       	eor	r24, r24
    1c32:	82 0f       	add	r24, r18
    1c34:	91 1d       	adc	r25, r1
    1c36:	a1 1d       	adc	r26, r1
    1c38:	b1 1d       	adc	r27, r1
    1c3a:	bc 01       	movw	r22, r24
    1c3c:	cd 01       	movw	r24, r26
    1c3e:	42 e0       	ldi	r20, 0x02	; 2
    1c40:	66 0f       	add	r22, r22
    1c42:	77 1f       	adc	r23, r23
    1c44:	88 1f       	adc	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	4a 95       	dec	r20
    1c4a:	d1 f7       	brne	.-12     	; 0x1c40 <micros+0x3c>
    1c4c:	08 95       	ret

00001c4e <delay>:
    1c4e:	8f 92       	push	r8
    1c50:	9f 92       	push	r9
    1c52:	af 92       	push	r10
    1c54:	bf 92       	push	r11
    1c56:	cf 92       	push	r12
    1c58:	df 92       	push	r13
    1c5a:	ef 92       	push	r14
    1c5c:	ff 92       	push	r15
    1c5e:	6b 01       	movw	r12, r22
    1c60:	7c 01       	movw	r14, r24
    1c62:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <micros>
    1c66:	4b 01       	movw	r8, r22
    1c68:	5c 01       	movw	r10, r24
    1c6a:	c1 14       	cp	r12, r1
    1c6c:	d1 04       	cpc	r13, r1
    1c6e:	e1 04       	cpc	r14, r1
    1c70:	f1 04       	cpc	r15, r1
    1c72:	01 f1       	breq	.+64     	; 0x1cb4 <delay+0x66>
    1c74:	0e 94 bd 10 	call	0x217a	; 0x217a <yield>
    1c78:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <micros>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	88 19       	sub	r24, r8
    1c82:	99 09       	sbc	r25, r9
    1c84:	aa 09       	sbc	r26, r10
    1c86:	bb 09       	sbc	r27, r11
    1c88:	88 3e       	cpi	r24, 0xE8	; 232
    1c8a:	93 40       	sbci	r25, 0x03	; 3
    1c8c:	a1 05       	cpc	r26, r1
    1c8e:	b1 05       	cpc	r27, r1
    1c90:	60 f3       	brcs	.-40     	; 0x1c6a <delay+0x1c>
    1c92:	21 e0       	ldi	r18, 0x01	; 1
    1c94:	c2 1a       	sub	r12, r18
    1c96:	d1 08       	sbc	r13, r1
    1c98:	e1 08       	sbc	r14, r1
    1c9a:	f1 08       	sbc	r15, r1
    1c9c:	88 ee       	ldi	r24, 0xE8	; 232
    1c9e:	88 0e       	add	r8, r24
    1ca0:	83 e0       	ldi	r24, 0x03	; 3
    1ca2:	98 1e       	adc	r9, r24
    1ca4:	a1 1c       	adc	r10, r1
    1ca6:	b1 1c       	adc	r11, r1
    1ca8:	c1 14       	cp	r12, r1
    1caa:	d1 04       	cpc	r13, r1
    1cac:	e1 04       	cpc	r14, r1
    1cae:	f1 04       	cpc	r15, r1
    1cb0:	19 f7       	brne	.-58     	; 0x1c78 <delay+0x2a>
    1cb2:	db cf       	rjmp	.-74     	; 0x1c6a <delay+0x1c>
    1cb4:	ff 90       	pop	r15
    1cb6:	ef 90       	pop	r14
    1cb8:	df 90       	pop	r13
    1cba:	cf 90       	pop	r12
    1cbc:	bf 90       	pop	r11
    1cbe:	af 90       	pop	r10
    1cc0:	9f 90       	pop	r9
    1cc2:	8f 90       	pop	r8
    1cc4:	08 95       	ret

00001cc6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1cc6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1cc8:	84 b5       	in	r24, 0x24	; 36
    1cca:	82 60       	ori	r24, 0x02	; 2
    1ccc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1cce:	84 b5       	in	r24, 0x24	; 36
    1cd0:	81 60       	ori	r24, 0x01	; 1
    1cd2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1cd4:	85 b5       	in	r24, 0x25	; 37
    1cd6:	82 60       	ori	r24, 0x02	; 2
    1cd8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1cda:	85 b5       	in	r24, 0x25	; 37
    1cdc:	81 60       	ori	r24, 0x01	; 1
    1cde:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1ce0:	ee e6       	ldi	r30, 0x6E	; 110
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	81 60       	ori	r24, 0x01	; 1
    1ce8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1cea:	e1 e8       	ldi	r30, 0x81	; 129
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1cf0:	80 81       	ld	r24, Z
    1cf2:	82 60       	ori	r24, 0x02	; 2
    1cf4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1cf6:	80 81       	ld	r24, Z
    1cf8:	81 60       	ori	r24, 0x01	; 1
    1cfa:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1cfc:	e0 e8       	ldi	r30, 0x80	; 128
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	81 60       	ori	r24, 0x01	; 1
    1d04:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1d06:	e1 eb       	ldi	r30, 0xB1	; 177
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	84 60       	ori	r24, 0x04	; 4
    1d0e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1d10:	e0 eb       	ldi	r30, 0xB0	; 176
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	81 60       	ori	r24, 0x01	; 1
    1d18:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1d1a:	ea e7       	ldi	r30, 0x7A	; 122
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	84 60       	ori	r24, 0x04	; 4
    1d22:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1d24:	80 81       	ld	r24, Z
    1d26:	82 60       	ori	r24, 0x02	; 2
    1d28:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1d2a:	80 81       	ld	r24, Z
    1d2c:	81 60       	ori	r24, 0x01	; 1
    1d2e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1d30:	80 81       	ld	r24, Z
    1d32:	80 68       	ori	r24, 0x80	; 128
    1d34:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1d36:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    1d3a:	08 95       	ret

00001d3c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1d3c:	83 30       	cpi	r24, 0x03	; 3
    1d3e:	81 f0       	breq	.+32     	; 0x1d60 <turnOffPWM+0x24>
    1d40:	28 f4       	brcc	.+10     	; 0x1d4c <turnOffPWM+0x10>
    1d42:	81 30       	cpi	r24, 0x01	; 1
    1d44:	99 f0       	breq	.+38     	; 0x1d6c <turnOffPWM+0x30>
    1d46:	82 30       	cpi	r24, 0x02	; 2
    1d48:	a1 f0       	breq	.+40     	; 0x1d72 <turnOffPWM+0x36>
    1d4a:	08 95       	ret
    1d4c:	87 30       	cpi	r24, 0x07	; 7
    1d4e:	a9 f0       	breq	.+42     	; 0x1d7a <turnOffPWM+0x3e>
    1d50:	88 30       	cpi	r24, 0x08	; 8
    1d52:	b9 f0       	breq	.+46     	; 0x1d82 <turnOffPWM+0x46>
    1d54:	84 30       	cpi	r24, 0x04	; 4
    1d56:	d1 f4       	brne	.+52     	; 0x1d8c <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1d58:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1d5c:	8f 7d       	andi	r24, 0xDF	; 223
    1d5e:	03 c0       	rjmp	.+6      	; 0x1d66 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1d60:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1d64:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1d66:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1d6a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1d6c:	84 b5       	in	r24, 0x24	; 36
    1d6e:	8f 77       	andi	r24, 0x7F	; 127
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1d72:	84 b5       	in	r24, 0x24	; 36
    1d74:	8f 7d       	andi	r24, 0xDF	; 223
    1d76:	84 bd       	out	0x24, r24	; 36
    1d78:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1d7a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1d7e:	8f 77       	andi	r24, 0x7F	; 127
    1d80:	03 c0       	rjmp	.+6      	; 0x1d88 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1d82:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1d86:	8f 7d       	andi	r24, 0xDF	; 223
    1d88:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1d8c:	08 95       	ret

00001d8e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1d8e:	cf 93       	push	r28
    1d90:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	fc 01       	movw	r30, r24
    1d96:	e9 5c       	subi	r30, 0xC9	; 201
    1d98:	fe 4f       	sbci	r31, 0xFE	; 254
    1d9a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	e5 5b       	subi	r30, 0xB5	; 181
    1da0:	fe 4f       	sbci	r31, 0xFE	; 254
    1da2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1da4:	88 23       	and	r24, r24
    1da6:	61 f1       	breq	.+88     	; 0x1e00 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	fc 01       	movw	r30, r24
    1db0:	e7 59       	subi	r30, 0x97	; 151
    1db2:	fe 4f       	sbci	r31, 0xFE	; 254
    1db4:	c5 91       	lpm	r28, Z+
    1db6:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1db8:	fc 01       	movw	r30, r24
    1dba:	e1 5a       	subi	r30, 0xA1	; 161
    1dbc:	fe 4f       	sbci	r31, 0xFE	; 254
    1dbe:	a5 91       	lpm	r26, Z+
    1dc0:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1dc2:	61 11       	cpse	r22, r1
    1dc4:	09 c0       	rjmp	.+18     	; 0x1dd8 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1dc6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1dc8:	f8 94       	cli
		*reg &= ~bit;
    1dca:	88 81       	ld	r24, Y
    1dcc:	20 95       	com	r18
    1dce:	82 23       	and	r24, r18
    1dd0:	88 83       	st	Y, r24
		*out &= ~bit;
    1dd2:	ec 91       	ld	r30, X
    1dd4:	2e 23       	and	r18, r30
    1dd6:	0b c0       	rjmp	.+22     	; 0x1dee <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1dd8:	62 30       	cpi	r22, 0x02	; 2
    1dda:	61 f4       	brne	.+24     	; 0x1df4 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1ddc:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1dde:	f8 94       	cli
		*reg &= ~bit;
    1de0:	88 81       	ld	r24, Y
    1de2:	32 2f       	mov	r19, r18
    1de4:	30 95       	com	r19
    1de6:	83 23       	and	r24, r19
    1de8:	88 83       	st	Y, r24
		*out |= bit;
    1dea:	ec 91       	ld	r30, X
    1dec:	2e 2b       	or	r18, r30
    1dee:	2c 93       	st	X, r18
		SREG = oldSREG;
    1df0:	9f bf       	out	0x3f, r25	; 63
    1df2:	06 c0       	rjmp	.+12     	; 0x1e00 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1df4:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1df6:	f8 94       	cli
		*reg |= bit;
    1df8:	e8 81       	ld	r30, Y
    1dfa:	2e 2b       	or	r18, r30
    1dfc:	28 83       	st	Y, r18
		SREG = oldSREG;
    1dfe:	8f bf       	out	0x3f, r24	; 63
	}
}
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	08 95       	ret

00001e06 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1e06:	1f 93       	push	r17
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	f9 01       	movw	r30, r18
    1e12:	ed 5d       	subi	r30, 0xDD	; 221
    1e14:	fe 4f       	sbci	r31, 0xFE	; 254
    1e16:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1e18:	f9 01       	movw	r30, r18
    1e1a:	e9 5c       	subi	r30, 0xC9	; 201
    1e1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e1e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1e20:	f9 01       	movw	r30, r18
    1e22:	e5 5b       	subi	r30, 0xB5	; 181
    1e24:	fe 4f       	sbci	r31, 0xFE	; 254
    1e26:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1e28:	cc 23       	and	r28, r28
    1e2a:	c1 f0       	breq	.+48     	; 0x1e5c <digitalWrite+0x56>
    1e2c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1e2e:	81 11       	cpse	r24, r1
    1e30:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <turnOffPWM>

	out = portOutputRegister(port);
    1e34:	ec 2f       	mov	r30, r28
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	ee 0f       	add	r30, r30
    1e3a:	ff 1f       	adc	r31, r31
    1e3c:	e1 5a       	subi	r30, 0xA1	; 161
    1e3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e40:	a5 91       	lpm	r26, Z+
    1e42:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1e44:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1e46:	f8 94       	cli

	if (val == LOW) {
    1e48:	11 11       	cpse	r17, r1
    1e4a:	04 c0       	rjmp	.+8      	; 0x1e54 <digitalWrite+0x4e>
		*out &= ~bit;
    1e4c:	8c 91       	ld	r24, X
    1e4e:	d0 95       	com	r29
    1e50:	d8 23       	and	r29, r24
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1e54:	ec 91       	ld	r30, X
    1e56:	de 2b       	or	r29, r30
    1e58:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1e5a:	9f bf       	out	0x3f, r25	; 63
}
    1e5c:	df 91       	pop	r29
    1e5e:	cf 91       	pop	r28
    1e60:	1f 91       	pop	r17
    1e62:	08 95       	ret

00001e64 <freeMemory>:


#include "MemoryFree.h"


int freeMemory() {
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <freeMemory+0x6>
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
  int free_memory;

  if((int)__brkval == 0)
    1e6e:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <__brkval>
    1e72:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <__brkval+0x1>
    1e76:	ce 01       	movw	r24, r28
    1e78:	01 96       	adiw	r24, 0x01	; 1
    1e7a:	21 15       	cp	r18, r1
    1e7c:	31 05       	cpc	r19, r1
    1e7e:	19 f4       	brne	.+6      	; 0x1e86 <freeMemory+0x22>
     free_memory = ((int)&free_memory) - ((int)&__bss_end);
    1e80:	8c 5b       	subi	r24, 0xBC	; 188
    1e82:	94 40       	sbci	r25, 0x04	; 4
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <freeMemory+0x26>
  else
    free_memory = ((int)&free_memory) - ((int)__brkval);
    1e86:	82 1b       	sub	r24, r18
    1e88:	93 0b       	sbc	r25, r19
    1e8a:	9a 83       	std	Y+2, r25	; 0x02
    1e8c:	89 83       	std	Y+1, r24	; 0x01

  return free_memory;
}
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	9a 81       	ldd	r25, Y+2	; 0x02
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	df 91       	pop	r29
    1e98:	cf 91       	pop	r28
    1e9a:	08 95       	ret

00001e9c <_ZN7TwoWire9availableEv>:
    1e9c:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <_ZN7TwoWire14rxBufferLengthE>
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	20 91 23 04 	lds	r18, 0x0423	; 0x800423 <_ZN7TwoWire13rxBufferIndexE>
    1ea6:	82 1b       	sub	r24, r18
    1ea8:	91 09       	sbc	r25, r1
    1eaa:	08 95       	ret

00001eac <_ZN7TwoWire4readEv>:
    1eac:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <_ZN7TwoWire13rxBufferIndexE>
    1eb0:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <_ZN7TwoWire14rxBufferLengthE>
    1eb4:	98 17       	cp	r25, r24
    1eb6:	50 f4       	brcc	.+20     	; 0x1ecc <_ZN7TwoWire4readEv+0x20>
    1eb8:	e9 2f       	mov	r30, r25
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	ec 5d       	subi	r30, 0xDC	; 220
    1ebe:	fb 4f       	sbci	r31, 0xFB	; 251
    1ec0:	20 81       	ld	r18, Z
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	9f 5f       	subi	r25, 0xFF	; 255
    1ec6:	90 93 23 04 	sts	0x0423, r25	; 0x800423 <_ZN7TwoWire13rxBufferIndexE>
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <_ZN7TwoWire4readEv+0x24>
    1ecc:	2f ef       	ldi	r18, 0xFF	; 255
    1ece:	3f ef       	ldi	r19, 0xFF	; 255
    1ed0:	c9 01       	movw	r24, r18
    1ed2:	08 95       	ret

00001ed4 <_ZN7TwoWire4peekEv>:
    1ed4:	e0 91 23 04 	lds	r30, 0x0423	; 0x800423 <_ZN7TwoWire13rxBufferIndexE>
    1ed8:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <_ZN7TwoWire14rxBufferLengthE>
    1edc:	e8 17       	cp	r30, r24
    1ede:	30 f4       	brcc	.+12     	; 0x1eec <_ZN7TwoWire4peekEv+0x18>
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	ec 5d       	subi	r30, 0xDC	; 220
    1ee4:	fb 4f       	sbci	r31, 0xFB	; 251
    1ee6:	80 81       	ld	r24, Z
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	08 95       	ret
    1eec:	8f ef       	ldi	r24, 0xFF	; 255
    1eee:	9f ef       	ldi	r25, 0xFF	; 255
    1ef0:	08 95       	ret

00001ef2 <_ZN7TwoWire5flushEv>:
    1ef2:	08 95       	ret

00001ef4 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1ef4:	cf 93       	push	r28
    1ef6:	df 93       	push	r29
    1ef8:	ec 01       	movw	r28, r24
    1efa:	e0 91 fa 03 	lds	r30, 0x03FA	; 0x8003fa <_ZN7TwoWire14user_onReceiveE>
    1efe:	f0 91 fb 03 	lds	r31, 0x03FB	; 0x8003fb <_ZN7TwoWire14user_onReceiveE+0x1>
    1f02:	30 97       	sbiw	r30, 0x00	; 0
    1f04:	f1 f0       	breq	.+60     	; 0x1f42 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1f06:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <_ZN7TwoWire13rxBufferIndexE>
    1f0a:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <_ZN7TwoWire14rxBufferLengthE>
    1f0e:	98 17       	cp	r25, r24
    1f10:	c0 f0       	brcs	.+48     	; 0x1f42 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	29 2f       	mov	r18, r25
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	26 17       	cp	r18, r22
    1f1a:	37 07       	cpc	r19, r23
    1f1c:	54 f4       	brge	.+20     	; 0x1f32 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1f1e:	de 01       	movw	r26, r28
    1f20:	a2 0f       	add	r26, r18
    1f22:	b3 1f       	adc	r27, r19
    1f24:	4c 91       	ld	r20, X
    1f26:	d9 01       	movw	r26, r18
    1f28:	ac 5d       	subi	r26, 0xDC	; 220
    1f2a:	bb 4f       	sbci	r27, 0xFB	; 251
    1f2c:	4c 93       	st	X, r20
    1f2e:	9f 5f       	subi	r25, 0xFF	; 255
    1f30:	f1 cf       	rjmp	.-30     	; 0x1f14 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1f32:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <_ZN7TwoWire13rxBufferIndexE>
    1f36:	60 93 22 04 	sts	0x0422, r22	; 0x800422 <_ZN7TwoWire14rxBufferLengthE>
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	df 91       	pop	r29
    1f3e:	cf 91       	pop	r28
    1f40:	09 94       	ijmp
    1f42:	df 91       	pop	r29
    1f44:	cf 91       	pop	r28
    1f46:	08 95       	ret

00001f48 <_ZN7TwoWire16onRequestServiceEv>:
    1f48:	e0 91 fc 03 	lds	r30, 0x03FC	; 0x8003fc <_ZN7TwoWire14user_onRequestE>
    1f4c:	f0 91 fd 03 	lds	r31, 0x03FD	; 0x8003fd <_ZN7TwoWire14user_onRequestE+0x1>
    1f50:	30 97       	sbiw	r30, 0x00	; 0
    1f52:	29 f0       	breq	.+10     	; 0x1f5e <_ZN7TwoWire16onRequestServiceEv+0x16>
    1f54:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <_ZN7TwoWire13txBufferIndexE>
    1f58:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <_ZN7TwoWire14txBufferLengthE>
    1f5c:	09 94       	ijmp
    1f5e:	08 95       	ret

00001f60 <_ZN7TwoWire5writeEPKhj>:
    1f60:	cf 92       	push	r12
    1f62:	df 92       	push	r13
    1f64:	ef 92       	push	r14
    1f66:	ff 92       	push	r15
    1f68:	0f 93       	push	r16
    1f6a:	1f 93       	push	r17
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	7c 01       	movw	r14, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	8a 01       	movw	r16, r20
    1f76:	20 91 fe 03 	lds	r18, 0x03FE	; 0x8003fe <_ZN7TwoWire12transmittingE>
    1f7a:	22 23       	and	r18, r18
    1f7c:	89 f0       	breq	.+34     	; 0x1fa0 <_ZN7TwoWire5writeEPKhj+0x40>
    1f7e:	eb 01       	movw	r28, r22
    1f80:	6b 01       	movw	r12, r22
    1f82:	c4 0e       	add	r12, r20
    1f84:	d5 1e       	adc	r13, r21
    1f86:	cc 15       	cp	r28, r12
    1f88:	dd 05       	cpc	r29, r13
    1f8a:	69 f0       	breq	.+26     	; 0x1fa6 <_ZN7TwoWire5writeEPKhj+0x46>
    1f8c:	69 91       	ld	r22, Y+
    1f8e:	d7 01       	movw	r26, r14
    1f90:	ed 91       	ld	r30, X+
    1f92:	fc 91       	ld	r31, X
    1f94:	01 90       	ld	r0, Z+
    1f96:	f0 81       	ld	r31, Z
    1f98:	e0 2d       	mov	r30, r0
    1f9a:	c7 01       	movw	r24, r14
    1f9c:	09 95       	icall
    1f9e:	f3 cf       	rjmp	.-26     	; 0x1f86 <_ZN7TwoWire5writeEPKhj+0x26>
    1fa0:	64 2f       	mov	r22, r20
    1fa2:	0e 94 fd 10 	call	0x21fa	; 0x21fa <twi_transmit>
    1fa6:	c8 01       	movw	r24, r16
    1fa8:	df 91       	pop	r29
    1faa:	cf 91       	pop	r28
    1fac:	1f 91       	pop	r17
    1fae:	0f 91       	pop	r16
    1fb0:	ff 90       	pop	r15
    1fb2:	ef 90       	pop	r14
    1fb4:	df 90       	pop	r13
    1fb6:	cf 90       	pop	r12
    1fb8:	08 95       	ret

00001fba <_ZN7TwoWire5writeEh>:
    1fba:	cf 93       	push	r28
    1fbc:	df 93       	push	r29
    1fbe:	1f 92       	push	r1
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	69 83       	std	Y+1, r22	; 0x01
    1fc6:	20 91 fe 03 	lds	r18, 0x03FE	; 0x8003fe <_ZN7TwoWire12transmittingE>
    1fca:	22 23       	and	r18, r18
    1fcc:	d1 f0       	breq	.+52     	; 0x2002 <_ZN7TwoWire5writeEh+0x48>
    1fce:	20 91 ff 03 	lds	r18, 0x03FF	; 0x8003ff <_ZN7TwoWire14txBufferLengthE>
    1fd2:	20 32       	cpi	r18, 0x20	; 32
    1fd4:	40 f0       	brcs	.+16     	; 0x1fe6 <_ZN7TwoWire5writeEh+0x2c>
    1fd6:	21 e0       	ldi	r18, 0x01	; 1
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	fc 01       	movw	r30, r24
    1fdc:	33 83       	std	Z+3, r19	; 0x03
    1fde:	22 83       	std	Z+2, r18	; 0x02
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	15 c0       	rjmp	.+42     	; 0x2010 <_ZN7TwoWire5writeEh+0x56>
    1fe6:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <_ZN7TwoWire13txBufferIndexE>
    1fea:	e8 2f       	mov	r30, r24
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	ef 5f       	subi	r30, 0xFF	; 255
    1ff0:	fb 4f       	sbci	r31, 0xFB	; 251
    1ff2:	99 81       	ldd	r25, Y+1	; 0x01
    1ff4:	90 83       	st	Z, r25
    1ff6:	8f 5f       	subi	r24, 0xFF	; 255
    1ff8:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <_ZN7TwoWire13txBufferIndexE>
    1ffc:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <_ZN7TwoWire14txBufferLengthE>
    2000:	05 c0       	rjmp	.+10     	; 0x200c <_ZN7TwoWire5writeEh+0x52>
    2002:	61 e0       	ldi	r22, 0x01	; 1
    2004:	ce 01       	movw	r24, r28
    2006:	01 96       	adiw	r24, 0x01	; 1
    2008:	0e 94 fd 10 	call	0x21fa	; 0x21fa <twi_transmit>
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	0f 90       	pop	r0
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	08 95       	ret

00002018 <_ZN7TwoWireC1Ev>:
    2018:	fc 01       	movw	r30, r24
    201a:	13 82       	std	Z+3, r1	; 0x03
    201c:	12 82       	std	Z+2, r1	; 0x02
    201e:	88 ee       	ldi	r24, 0xE8	; 232
    2020:	93 e0       	ldi	r25, 0x03	; 3
    2022:	a0 e0       	ldi	r26, 0x00	; 0
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	84 83       	std	Z+4, r24	; 0x04
    2028:	95 83       	std	Z+5, r25	; 0x05
    202a:	a6 83       	std	Z+6, r26	; 0x06
    202c:	b7 83       	std	Z+7, r27	; 0x07
    202e:	8a e5       	ldi	r24, 0x5A	; 90
    2030:	92 e0       	ldi	r25, 0x02	; 2
    2032:	91 83       	std	Z+1, r25	; 0x01
    2034:	80 83       	st	Z, r24
    2036:	08 95       	ret

00002038 <_ZN7TwoWire5beginEv>:
    2038:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <_ZN7TwoWire13rxBufferIndexE>
    203c:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <_ZN7TwoWire14rxBufferLengthE>
    2040:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <_ZN7TwoWire13txBufferIndexE>
    2044:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <_ZN7TwoWire14txBufferLengthE>
    2048:	0e 94 be 10 	call	0x217c	; 0x217c <twi_init>
    204c:	84 ea       	ldi	r24, 0xA4	; 164
    204e:	9f e0       	ldi	r25, 0x0F	; 15
    2050:	0e 94 2a 11 	call	0x2254	; 0x2254 <twi_attachSlaveTxEvent>
    2054:	8a e7       	ldi	r24, 0x7A	; 122
    2056:	9f e0       	ldi	r25, 0x0F	; 15
    2058:	0c 94 25 11 	jmp	0x224a	; 0x224a <twi_attachSlaveRxEvent>

0000205c <_ZN7TwoWire8setClockEm>:
    205c:	cb 01       	movw	r24, r22
    205e:	ba 01       	movw	r22, r20
    2060:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <twi_setFrequency>

00002064 <_ZN7TwoWire17beginTransmissionEh>:
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <_ZN7TwoWire12transmittingE>
    206a:	60 93 21 04 	sts	0x0421, r22	; 0x800421 <_ZN7TwoWire9txAddressE>
    206e:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <_ZN7TwoWire13txBufferIndexE>
    2072:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <_ZN7TwoWire14txBufferLengthE>
    2076:	08 95       	ret

00002078 <_ZN7TwoWire15endTransmissionEh>:
    2078:	0f 93       	push	r16
    207a:	06 2f       	mov	r16, r22
    207c:	21 e0       	ldi	r18, 0x01	; 1
    207e:	40 91 ff 03 	lds	r20, 0x03FF	; 0x8003ff <_ZN7TwoWire14txBufferLengthE>
    2082:	61 e0       	ldi	r22, 0x01	; 1
    2084:	74 e0       	ldi	r23, 0x04	; 4
    2086:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <_ZN7TwoWire9txAddressE>
    208a:	0e 94 34 12 	call	0x2468	; 0x2468 <twi_writeTo>
    208e:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <_ZN7TwoWire13txBufferIndexE>
    2092:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <_ZN7TwoWire14txBufferLengthE>
    2096:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <_ZN7TwoWire12transmittingE>
    209a:	0f 91       	pop	r16
    209c:	08 95       	ret

0000209e <_ZN7TwoWire11requestFromEhhmhh>:
    209e:	4f 92       	push	r4
    20a0:	5f 92       	push	r5
    20a2:	6f 92       	push	r6
    20a4:	7f 92       	push	r7
    20a6:	af 92       	push	r10
    20a8:	bf 92       	push	r11
    20aa:	cf 92       	push	r12
    20ac:	ef 92       	push	r14
    20ae:	ff 92       	push	r15
    20b0:	0f 93       	push	r16
    20b2:	1f 93       	push	r17
    20b4:	cf 93       	push	r28
    20b6:	df 93       	push	r29
    20b8:	5c 01       	movw	r10, r24
    20ba:	f6 2e       	mov	r15, r22
    20bc:	d4 2f       	mov	r29, r20
    20be:	28 01       	movw	r4, r16
    20c0:	39 01       	movw	r6, r18
    20c2:	ee 20       	and	r14, r14
    20c4:	21 f1       	breq	.+72     	; 0x210e <_ZN7TwoWire11requestFromEhhmhh+0x70>
    20c6:	0e 94 32 10 	call	0x2064	; 0x2064 <_ZN7TwoWire17beginTransmissionEh>
    20ca:	ce 2d       	mov	r28, r14
    20cc:	c4 30       	cpi	r28, 0x04	; 4
    20ce:	08 f0       	brcs	.+2      	; 0x20d2 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    20d0:	c3 e0       	ldi	r28, 0x03	; 3
    20d2:	c1 50       	subi	r28, 0x01	; 1
    20d4:	c0 f0       	brcs	.+48     	; 0x2106 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    20d6:	28 e0       	ldi	r18, 0x08	; 8
    20d8:	c2 9f       	mul	r28, r18
    20da:	c0 01       	movw	r24, r0
    20dc:	11 24       	eor	r1, r1
    20de:	a3 01       	movw	r20, r6
    20e0:	92 01       	movw	r18, r4
    20e2:	04 c0       	rjmp	.+8      	; 0x20ec <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    20e4:	56 95       	lsr	r21
    20e6:	47 95       	ror	r20
    20e8:	37 95       	ror	r19
    20ea:	27 95       	ror	r18
    20ec:	8a 95       	dec	r24
    20ee:	d2 f7       	brpl	.-12     	; 0x20e4 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    20f0:	ca 01       	movw	r24, r20
    20f2:	b9 01       	movw	r22, r18
    20f4:	d5 01       	movw	r26, r10
    20f6:	ed 91       	ld	r30, X+
    20f8:	fc 91       	ld	r31, X
    20fa:	01 90       	ld	r0, Z+
    20fc:	f0 81       	ld	r31, Z
    20fe:	e0 2d       	mov	r30, r0
    2100:	c5 01       	movw	r24, r10
    2102:	09 95       	icall
    2104:	e6 cf       	rjmp	.-52     	; 0x20d2 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2106:	60 e0       	ldi	r22, 0x00	; 0
    2108:	c5 01       	movw	r24, r10
    210a:	0e 94 3c 10 	call	0x2078	; 0x2078 <_ZN7TwoWire15endTransmissionEh>
    210e:	4d 2f       	mov	r20, r29
    2110:	d1 32       	cpi	r29, 0x21	; 33
    2112:	08 f0       	brcs	.+2      	; 0x2116 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2114:	40 e2       	ldi	r20, 0x20	; 32
    2116:	2c 2d       	mov	r18, r12
    2118:	64 e2       	ldi	r22, 0x24	; 36
    211a:	74 e0       	ldi	r23, 0x04	; 4
    211c:	8f 2d       	mov	r24, r15
    211e:	0e 94 4b 11 	call	0x2296	; 0x2296 <twi_readFrom>
    2122:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <_ZN7TwoWire13rxBufferIndexE>
    2126:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <_ZN7TwoWire14rxBufferLengthE>
    212a:	df 91       	pop	r29
    212c:	cf 91       	pop	r28
    212e:	1f 91       	pop	r17
    2130:	0f 91       	pop	r16
    2132:	ff 90       	pop	r15
    2134:	ef 90       	pop	r14
    2136:	cf 90       	pop	r12
    2138:	bf 90       	pop	r11
    213a:	af 90       	pop	r10
    213c:	7f 90       	pop	r7
    213e:	6f 90       	pop	r6
    2140:	5f 90       	pop	r5
    2142:	4f 90       	pop	r4
    2144:	08 95       	ret

00002146 <_ZN7TwoWire11requestFromEhhh>:
    2146:	cf 92       	push	r12
    2148:	ef 92       	push	r14
    214a:	0f 93       	push	r16
    214c:	1f 93       	push	r17
    214e:	c2 2e       	mov	r12, r18
    2150:	e1 2c       	mov	r14, r1
    2152:	00 e0       	ldi	r16, 0x00	; 0
    2154:	10 e0       	ldi	r17, 0x00	; 0
    2156:	98 01       	movw	r18, r16
    2158:	0e 94 4f 10 	call	0x209e	; 0x209e <_ZN7TwoWire11requestFromEhhmhh>
    215c:	1f 91       	pop	r17
    215e:	0f 91       	pop	r16
    2160:	ef 90       	pop	r14
    2162:	cf 90       	pop	r12
    2164:	08 95       	ret

00002166 <_ZN7TwoWire11requestFromEhh>:
    2166:	21 e0       	ldi	r18, 0x01	; 1
    2168:	0c 94 a3 10 	jmp	0x2146	; 0x2146 <_ZN7TwoWire11requestFromEhhh>

0000216c <_ZN7TwoWire15endTransmissionEv>:
    216c:	61 e0       	ldi	r22, 0x01	; 1
    216e:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <_ZN7TwoWire15endTransmissionEh>

00002172 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    2172:	8e ee       	ldi	r24, 0xEE	; 238
    2174:	93 e0       	ldi	r25, 0x03	; 3
    2176:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <_ZN7TwoWireC1Ev>

0000217a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    217a:	08 95       	ret

0000217c <twi_init>:
    217c:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <twi_state>
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <twi_sendStop>
    2186:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_inRepStart>
    218a:	61 e0       	ldi	r22, 0x01	; 1
    218c:	82 e1       	ldi	r24, 0x12	; 18
    218e:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <digitalWrite>
    2192:	61 e0       	ldi	r22, 0x01	; 1
    2194:	83 e1       	ldi	r24, 0x13	; 19
    2196:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <digitalWrite>
    219a:	e9 eb       	ldi	r30, 0xB9	; 185
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	8e 7f       	andi	r24, 0xFE	; 254
    21a2:	80 83       	st	Z, r24
    21a4:	80 81       	ld	r24, Z
    21a6:	8d 7f       	andi	r24, 0xFD	; 253
    21a8:	80 83       	st	Z, r24
    21aa:	88 e4       	ldi	r24, 0x48	; 72
    21ac:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    21b0:	85 e4       	ldi	r24, 0x45	; 69
    21b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    21b6:	08 95       	ret

000021b8 <twi_disable>:
    21b8:	ec eb       	ldi	r30, 0xBC	; 188
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	8a 7b       	andi	r24, 0xBA	; 186
    21c0:	80 83       	st	Z, r24
    21c2:	60 e0       	ldi	r22, 0x00	; 0
    21c4:	82 e1       	ldi	r24, 0x12	; 18
    21c6:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <digitalWrite>
    21ca:	60 e0       	ldi	r22, 0x00	; 0
    21cc:	83 e1       	ldi	r24, 0x13	; 19
    21ce:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <digitalWrite>

000021d2 <twi_setFrequency>:
    21d2:	9b 01       	movw	r18, r22
    21d4:	ac 01       	movw	r20, r24
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	74 e2       	ldi	r23, 0x24	; 36
    21da:	84 ef       	ldi	r24, 0xF4	; 244
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	0e 94 93 14 	call	0x2926	; 0x2926 <__udivmodsi4>
    21e2:	da 01       	movw	r26, r20
    21e4:	c9 01       	movw	r24, r18
    21e6:	40 97       	sbiw	r24, 0x10	; 16
    21e8:	a1 09       	sbc	r26, r1
    21ea:	b1 09       	sbc	r27, r1
    21ec:	b6 95       	lsr	r27
    21ee:	a7 95       	ror	r26
    21f0:	97 95       	ror	r25
    21f2:	87 95       	ror	r24
    21f4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    21f8:	08 95       	ret

000021fa <twi_transmit>:
    21fa:	40 91 66 04 	lds	r20, 0x0466	; 0x800466 <twi_txBufferLength>
    21fe:	26 2f       	mov	r18, r22
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	24 0f       	add	r18, r20
    2204:	31 1d       	adc	r19, r1
    2206:	21 32       	cpi	r18, 0x21	; 33
    2208:	31 05       	cpc	r19, r1
    220a:	dc f4       	brge	.+54     	; 0x2242 <twi_transmit+0x48>
    220c:	20 91 b7 04 	lds	r18, 0x04B7	; 0x8004b7 <twi_state>
    2210:	24 30       	cpi	r18, 0x04	; 4
    2212:	c9 f4       	brne	.+50     	; 0x2246 <twi_transmit+0x4c>
    2214:	fc 01       	movw	r30, r24
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	86 17       	cp	r24, r22
    221c:	58 f4       	brcc	.+22     	; 0x2234 <twi_transmit+0x3a>
    221e:	30 91 66 04 	lds	r19, 0x0466	; 0x800466 <twi_txBufferLength>
    2222:	21 91       	ld	r18, Z+
    2224:	dc 01       	movw	r26, r24
    2226:	a8 59       	subi	r26, 0x98	; 152
    2228:	bb 4f       	sbci	r27, 0xFB	; 251
    222a:	a3 0f       	add	r26, r19
    222c:	b1 1d       	adc	r27, r1
    222e:	2c 93       	st	X, r18
    2230:	01 96       	adiw	r24, 0x01	; 1
    2232:	f3 cf       	rjmp	.-26     	; 0x221a <twi_transmit+0x20>
    2234:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <twi_txBufferLength>
    2238:	68 0f       	add	r22, r24
    223a:	60 93 66 04 	sts	0x0466, r22	; 0x800466 <twi_txBufferLength>
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	08 95       	ret
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	08 95       	ret
    2246:	82 e0       	ldi	r24, 0x02	; 2
    2248:	08 95       	ret

0000224a <twi_attachSlaveRxEvent>:
    224a:	90 93 ab 04 	sts	0x04AB, r25	; 0x8004ab <twi_onSlaveReceive+0x1>
    224e:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <twi_onSlaveReceive>
    2252:	08 95       	ret

00002254 <twi_attachSlaveTxEvent>:
    2254:	90 93 ad 04 	sts	0x04AD, r25	; 0x8004ad <twi_onSlaveTransmit+0x1>
    2258:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <twi_onSlaveTransmit>
    225c:	08 95       	ret

0000225e <twi_releaseBus>:
    225e:	85 ec       	ldi	r24, 0xC5	; 197
    2260:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2264:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <twi_state>
    2268:	08 95       	ret

0000226a <twi_handleTimeout>:
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	91 e0       	ldi	r25, 0x01	; 1
    2270:	90 93 af 04 	sts	0x04AF, r25	; 0x8004af <twi_timed_out_flag>
    2274:	88 23       	and	r24, r24
    2276:	61 f0       	breq	.+24     	; 0x2290 <twi_handleTimeout+0x26>
    2278:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    227c:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
    2280:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <twi_disable>
    2284:	0e 94 be 10 	call	0x217c	; 0x217c <twi_init>
    2288:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
    228c:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    2290:	df 91       	pop	r29
    2292:	cf 91       	pop	r28
    2294:	08 95       	ret

00002296 <twi_readFrom>:
    2296:	4f 92       	push	r4
    2298:	5f 92       	push	r5
    229a:	6f 92       	push	r6
    229c:	7f 92       	push	r7
    229e:	8f 92       	push	r8
    22a0:	9f 92       	push	r9
    22a2:	af 92       	push	r10
    22a4:	bf 92       	push	r11
    22a6:	cf 92       	push	r12
    22a8:	df 92       	push	r13
    22aa:	ef 92       	push	r14
    22ac:	ff 92       	push	r15
    22ae:	0f 93       	push	r16
    22b0:	1f 93       	push	r17
    22b2:	cf 93       	push	r28
    22b4:	df 93       	push	r29
    22b6:	f8 2e       	mov	r15, r24
    22b8:	16 2f       	mov	r17, r22
    22ba:	07 2f       	mov	r16, r23
    22bc:	c4 2f       	mov	r28, r20
    22be:	e2 2e       	mov	r14, r18
    22c0:	41 32       	cpi	r20, 0x21	; 33
    22c2:	08 f0       	brcs	.+2      	; 0x22c6 <twi_readFrom+0x30>
    22c4:	be c0       	rjmp	.+380    	; 0x2442 <twi_readFrom+0x1ac>
    22c6:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <micros>
    22ca:	4b 01       	movw	r8, r22
    22cc:	5c 01       	movw	r10, r24
    22ce:	d0 91 b7 04 	lds	r29, 0x04B7	; 0x8004b7 <twi_state>
    22d2:	dd 23       	and	r29, r29
    22d4:	31 f1       	breq	.+76     	; 0x2322 <twi_readFrom+0x8c>
    22d6:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <twi_timeout_us>
    22da:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    22de:	a0 91 b2 04 	lds	r26, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    22e2:	b0 91 b3 04 	lds	r27, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    22e6:	89 2b       	or	r24, r25
    22e8:	8a 2b       	or	r24, r26
    22ea:	8b 2b       	or	r24, r27
    22ec:	81 f3       	breq	.-32     	; 0x22ce <twi_readFrom+0x38>
    22ee:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <micros>
    22f2:	40 90 b0 04 	lds	r4, 0x04B0	; 0x8004b0 <twi_timeout_us>
    22f6:	50 90 b1 04 	lds	r5, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    22fa:	60 90 b2 04 	lds	r6, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    22fe:	70 90 b3 04 	lds	r7, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	88 19       	sub	r24, r8
    2308:	99 09       	sbc	r25, r9
    230a:	aa 09       	sbc	r26, r10
    230c:	bb 09       	sbc	r27, r11
    230e:	48 16       	cp	r4, r24
    2310:	59 06       	cpc	r5, r25
    2312:	6a 06       	cpc	r6, r26
    2314:	7b 06       	cpc	r7, r27
    2316:	d8 f6       	brcc	.-74     	; 0x22ce <twi_readFrom+0x38>
    2318:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <twi_do_reset_on_timeout>
    231c:	0e 94 35 11 	call	0x226a	; 0x226a <twi_handleTimeout>
    2320:	90 c0       	rjmp	.+288    	; 0x2442 <twi_readFrom+0x1ac>
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <twi_state>
    2328:	e0 92 b5 04 	sts	0x04B5, r14	; 0x8004b5 <twi_sendStop>
    232c:	9f ef       	ldi	r25, 0xFF	; 255
    232e:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <twi_error>
    2332:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <twi_masterBufferIndex>
    2336:	9c 0f       	add	r25, r28
    2338:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <twi_masterBufferLength>
    233c:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <twi_slarw>
    2340:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <twi_slarw>
    2344:	8f 2d       	mov	r24, r15
    2346:	88 0f       	add	r24, r24
    2348:	89 2b       	or	r24, r25
    234a:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <twi_slarw>
    234e:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <twi_inRepStart>
    2352:	81 30       	cpi	r24, 0x01	; 1
    2354:	89 f5       	brne	.+98     	; 0x23b8 <twi_readFrom+0x122>
    2356:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_inRepStart>
    235a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <micros>
    235e:	6b 01       	movw	r12, r22
    2360:	7c 01       	movw	r14, r24
    2362:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <twi_slarw>
    2366:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    236a:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <twi_timeout_us>
    236e:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    2372:	a0 91 b2 04 	lds	r26, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    2376:	b0 91 b3 04 	lds	r27, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    237a:	89 2b       	or	r24, r25
    237c:	8a 2b       	or	r24, r26
    237e:	8b 2b       	or	r24, r27
    2380:	a9 f0       	breq	.+42     	; 0x23ac <twi_readFrom+0x116>
    2382:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <micros>
    2386:	80 90 b0 04 	lds	r8, 0x04B0	; 0x8004b0 <twi_timeout_us>
    238a:	90 90 b1 04 	lds	r9, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    238e:	a0 90 b2 04 	lds	r10, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    2392:	b0 90 b3 04 	lds	r11, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	8c 19       	sub	r24, r12
    239c:	9d 09       	sbc	r25, r13
    239e:	ae 09       	sbc	r26, r14
    23a0:	bf 09       	sbc	r27, r15
    23a2:	88 16       	cp	r8, r24
    23a4:	99 06       	cpc	r9, r25
    23a6:	aa 06       	cpc	r10, r26
    23a8:	bb 06       	cpc	r11, r27
    23aa:	90 f1       	brcs	.+100    	; 0x2410 <twi_readFrom+0x17a>
    23ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    23b0:	83 fd       	sbrc	r24, 3
    23b2:	d7 cf       	rjmp	.-82     	; 0x2362 <twi_readFrom+0xcc>
    23b4:	85 ec       	ldi	r24, 0xC5	; 197
    23b6:	01 c0       	rjmp	.+2      	; 0x23ba <twi_readFrom+0x124>
    23b8:	85 ee       	ldi	r24, 0xE5	; 229
    23ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    23be:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <micros>
    23c2:	6b 01       	movw	r12, r22
    23c4:	7c 01       	movw	r14, r24
    23c6:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <twi_state>
    23ca:	81 30       	cpi	r24, 0x01	; 1
    23cc:	31 f5       	brne	.+76     	; 0x241a <twi_readFrom+0x184>
    23ce:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <twi_timeout_us>
    23d2:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    23d6:	a0 91 b2 04 	lds	r26, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    23da:	b0 91 b3 04 	lds	r27, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    23de:	89 2b       	or	r24, r25
    23e0:	8a 2b       	or	r24, r26
    23e2:	8b 2b       	or	r24, r27
    23e4:	81 f3       	breq	.-32     	; 0x23c6 <twi_readFrom+0x130>
    23e6:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <micros>
    23ea:	80 90 b0 04 	lds	r8, 0x04B0	; 0x8004b0 <twi_timeout_us>
    23ee:	90 90 b1 04 	lds	r9, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    23f2:	a0 90 b2 04 	lds	r10, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    23f6:	b0 90 b3 04 	lds	r11, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	8c 19       	sub	r24, r12
    2400:	9d 09       	sbc	r25, r13
    2402:	ae 09       	sbc	r26, r14
    2404:	bf 09       	sbc	r27, r15
    2406:	88 16       	cp	r8, r24
    2408:	99 06       	cpc	r9, r25
    240a:	aa 06       	cpc	r10, r26
    240c:	bb 06       	cpc	r11, r27
    240e:	d8 f6       	brcc	.-74     	; 0x23c6 <twi_readFrom+0x130>
    2410:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <twi_do_reset_on_timeout>
    2414:	0e 94 35 11 	call	0x226a	; 0x226a <twi_handleTimeout>
    2418:	15 c0       	rjmp	.+42     	; 0x2444 <twi_readFrom+0x1ae>
    241a:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <twi_masterBufferIndex>
    241e:	8c 17       	cp	r24, r28
    2420:	10 f4       	brcc	.+4      	; 0x2426 <twi_readFrom+0x190>
    2422:	c0 91 89 04 	lds	r28, 0x0489	; 0x800489 <twi_masterBufferIndex>
    2426:	aa e8       	ldi	r26, 0x8A	; 138
    2428:	b4 e0       	ldi	r27, 0x04	; 4
    242a:	91 2f       	mov	r25, r17
    242c:	e1 2f       	mov	r30, r17
    242e:	f0 2f       	mov	r31, r16
    2430:	8e 2f       	mov	r24, r30
    2432:	89 1b       	sub	r24, r25
    2434:	8c 17       	cp	r24, r28
    2436:	18 f4       	brcc	.+6      	; 0x243e <twi_readFrom+0x1a8>
    2438:	8d 91       	ld	r24, X+
    243a:	81 93       	st	Z+, r24
    243c:	f9 cf       	rjmp	.-14     	; 0x2430 <twi_readFrom+0x19a>
    243e:	dc 2f       	mov	r29, r28
    2440:	01 c0       	rjmp	.+2      	; 0x2444 <twi_readFrom+0x1ae>
    2442:	d0 e0       	ldi	r29, 0x00	; 0
    2444:	8d 2f       	mov	r24, r29
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	1f 91       	pop	r17
    244c:	0f 91       	pop	r16
    244e:	ff 90       	pop	r15
    2450:	ef 90       	pop	r14
    2452:	df 90       	pop	r13
    2454:	cf 90       	pop	r12
    2456:	bf 90       	pop	r11
    2458:	af 90       	pop	r10
    245a:	9f 90       	pop	r9
    245c:	8f 90       	pop	r8
    245e:	7f 90       	pop	r7
    2460:	6f 90       	pop	r6
    2462:	5f 90       	pop	r5
    2464:	4f 90       	pop	r4
    2466:	08 95       	ret

00002468 <twi_writeTo>:
    2468:	4f 92       	push	r4
    246a:	5f 92       	push	r5
    246c:	6f 92       	push	r6
    246e:	7f 92       	push	r7
    2470:	8f 92       	push	r8
    2472:	9f 92       	push	r9
    2474:	af 92       	push	r10
    2476:	bf 92       	push	r11
    2478:	cf 92       	push	r12
    247a:	df 92       	push	r13
    247c:	ef 92       	push	r14
    247e:	ff 92       	push	r15
    2480:	0f 93       	push	r16
    2482:	1f 93       	push	r17
    2484:	cf 93       	push	r28
    2486:	df 93       	push	r29
    2488:	41 32       	cpi	r20, 0x21	; 33
    248a:	08 f0       	brcs	.+2      	; 0x248e <twi_writeTo+0x26>
    248c:	c6 c0       	rjmp	.+396    	; 0x261a <twi_writeTo+0x1b2>
    248e:	12 2f       	mov	r17, r18
    2490:	f4 2e       	mov	r15, r20
    2492:	d7 2e       	mov	r13, r23
    2494:	e6 2e       	mov	r14, r22
    2496:	d8 2f       	mov	r29, r24
    2498:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <micros>
    249c:	4b 01       	movw	r8, r22
    249e:	5c 01       	movw	r10, r24
    24a0:	c0 91 b7 04 	lds	r28, 0x04B7	; 0x8004b7 <twi_state>
    24a4:	cc 23       	and	r28, r28
    24a6:	11 f1       	breq	.+68     	; 0x24ec <twi_writeTo+0x84>
    24a8:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <twi_timeout_us>
    24ac:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    24b0:	a0 91 b2 04 	lds	r26, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    24b4:	b0 91 b3 04 	lds	r27, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    24b8:	89 2b       	or	r24, r25
    24ba:	8a 2b       	or	r24, r26
    24bc:	8b 2b       	or	r24, r27
    24be:	81 f3       	breq	.-32     	; 0x24a0 <twi_writeTo+0x38>
    24c0:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <micros>
    24c4:	40 90 b0 04 	lds	r4, 0x04B0	; 0x8004b0 <twi_timeout_us>
    24c8:	50 90 b1 04 	lds	r5, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    24cc:	60 90 b2 04 	lds	r6, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    24d0:	70 90 b3 04 	lds	r7, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	88 19       	sub	r24, r8
    24da:	99 09       	sbc	r25, r9
    24dc:	aa 09       	sbc	r26, r10
    24de:	bb 09       	sbc	r27, r11
    24e0:	48 16       	cp	r4, r24
    24e2:	59 06       	cpc	r5, r25
    24e4:	6a 06       	cpc	r6, r26
    24e6:	7b 06       	cpc	r7, r27
    24e8:	d8 f6       	brcc	.-74     	; 0x24a0 <twi_writeTo+0x38>
    24ea:	83 c0       	rjmp	.+262    	; 0x25f2 <twi_writeTo+0x18a>
    24ec:	82 e0       	ldi	r24, 0x02	; 2
    24ee:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <twi_state>
    24f2:	00 93 b5 04 	sts	0x04B5, r16	; 0x8004b5 <twi_sendStop>
    24f6:	8f ef       	ldi	r24, 0xFF	; 255
    24f8:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <twi_error>
    24fc:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <twi_masterBufferIndex>
    2500:	f0 92 88 04 	sts	0x0488, r15	; 0x800488 <twi_masterBufferLength>
    2504:	9e 2d       	mov	r25, r14
    2506:	aa e8       	ldi	r26, 0x8A	; 138
    2508:	b4 e0       	ldi	r27, 0x04	; 4
    250a:	ee 2d       	mov	r30, r14
    250c:	fd 2d       	mov	r31, r13
    250e:	8e 2f       	mov	r24, r30
    2510:	89 1b       	sub	r24, r25
    2512:	8f 15       	cp	r24, r15
    2514:	18 f4       	brcc	.+6      	; 0x251c <twi_writeTo+0xb4>
    2516:	81 91       	ld	r24, Z+
    2518:	8d 93       	st	X+, r24
    251a:	f9 cf       	rjmp	.-14     	; 0x250e <twi_writeTo+0xa6>
    251c:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <twi_slarw>
    2520:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <twi_slarw>
    2524:	dd 0f       	add	r29, r29
    2526:	d9 2b       	or	r29, r25
    2528:	d0 93 b6 04 	sts	0x04B6, r29	; 0x8004b6 <twi_slarw>
    252c:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <twi_inRepStart>
    2530:	81 30       	cpi	r24, 0x01	; 1
    2532:	89 f5       	brne	.+98     	; 0x2596 <twi_writeTo+0x12e>
    2534:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_inRepStart>
    2538:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <micros>
    253c:	6b 01       	movw	r12, r22
    253e:	7c 01       	movw	r14, r24
    2540:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <twi_slarw>
    2544:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2548:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <twi_timeout_us>
    254c:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    2550:	a0 91 b2 04 	lds	r26, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    2554:	b0 91 b3 04 	lds	r27, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    2558:	89 2b       	or	r24, r25
    255a:	8a 2b       	or	r24, r26
    255c:	8b 2b       	or	r24, r27
    255e:	a9 f0       	breq	.+42     	; 0x258a <twi_writeTo+0x122>
    2560:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <micros>
    2564:	80 90 b0 04 	lds	r8, 0x04B0	; 0x8004b0 <twi_timeout_us>
    2568:	90 90 b1 04 	lds	r9, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    256c:	a0 90 b2 04 	lds	r10, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    2570:	b0 90 b3 04 	lds	r11, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	8c 19       	sub	r24, r12
    257a:	9d 09       	sbc	r25, r13
    257c:	ae 09       	sbc	r26, r14
    257e:	bf 09       	sbc	r27, r15
    2580:	88 16       	cp	r8, r24
    2582:	99 06       	cpc	r9, r25
    2584:	aa 06       	cpc	r10, r26
    2586:	bb 06       	cpc	r11, r27
    2588:	a0 f1       	brcs	.+104    	; 0x25f2 <twi_writeTo+0x18a>
    258a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    258e:	83 fd       	sbrc	r24, 3
    2590:	d7 cf       	rjmp	.-82     	; 0x2540 <twi_writeTo+0xd8>
    2592:	85 ec       	ldi	r24, 0xC5	; 197
    2594:	01 c0       	rjmp	.+2      	; 0x2598 <twi_writeTo+0x130>
    2596:	85 ee       	ldi	r24, 0xE5	; 229
    2598:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    259c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <micros>
    25a0:	6b 01       	movw	r12, r22
    25a2:	7c 01       	movw	r14, r24
    25a4:	11 23       	and	r17, r17
    25a6:	59 f1       	breq	.+86     	; 0x25fe <twi_writeTo+0x196>
    25a8:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <twi_state>
    25ac:	82 30       	cpi	r24, 0x02	; 2
    25ae:	39 f5       	brne	.+78     	; 0x25fe <twi_writeTo+0x196>
    25b0:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <twi_timeout_us>
    25b4:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    25b8:	a0 91 b2 04 	lds	r26, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    25bc:	b0 91 b3 04 	lds	r27, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    25c0:	89 2b       	or	r24, r25
    25c2:	8a 2b       	or	r24, r26
    25c4:	8b 2b       	or	r24, r27
    25c6:	71 f3       	breq	.-36     	; 0x25a4 <twi_writeTo+0x13c>
    25c8:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <micros>
    25cc:	80 90 b0 04 	lds	r8, 0x04B0	; 0x8004b0 <twi_timeout_us>
    25d0:	90 90 b1 04 	lds	r9, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    25d4:	a0 90 b2 04 	lds	r10, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    25d8:	b0 90 b3 04 	lds	r11, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	8c 19       	sub	r24, r12
    25e2:	9d 09       	sbc	r25, r13
    25e4:	ae 09       	sbc	r26, r14
    25e6:	bf 09       	sbc	r27, r15
    25e8:	88 16       	cp	r8, r24
    25ea:	99 06       	cpc	r9, r25
    25ec:	aa 06       	cpc	r10, r26
    25ee:	bb 06       	cpc	r11, r27
    25f0:	c8 f6       	brcc	.-78     	; 0x25a4 <twi_writeTo+0x13c>
    25f2:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <twi_do_reset_on_timeout>
    25f6:	0e 94 35 11 	call	0x226a	; 0x226a <twi_handleTimeout>
    25fa:	c5 e0       	ldi	r28, 0x05	; 5
    25fc:	13 c0       	rjmp	.+38     	; 0x2624 <twi_writeTo+0x1bc>
    25fe:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <twi_error>
    2602:	8f 3f       	cpi	r24, 0xFF	; 255
    2604:	79 f0       	breq	.+30     	; 0x2624 <twi_writeTo+0x1bc>
    2606:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <twi_error>
    260a:	80 32       	cpi	r24, 0x20	; 32
    260c:	41 f0       	breq	.+16     	; 0x261e <twi_writeTo+0x1b6>
    260e:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <twi_error>
    2612:	80 33       	cpi	r24, 0x30	; 48
    2614:	31 f0       	breq	.+12     	; 0x2622 <twi_writeTo+0x1ba>
    2616:	c4 e0       	ldi	r28, 0x04	; 4
    2618:	05 c0       	rjmp	.+10     	; 0x2624 <twi_writeTo+0x1bc>
    261a:	c1 e0       	ldi	r28, 0x01	; 1
    261c:	03 c0       	rjmp	.+6      	; 0x2624 <twi_writeTo+0x1bc>
    261e:	c2 e0       	ldi	r28, 0x02	; 2
    2620:	01 c0       	rjmp	.+2      	; 0x2624 <twi_writeTo+0x1bc>
    2622:	c3 e0       	ldi	r28, 0x03	; 3
    2624:	8c 2f       	mov	r24, r28
    2626:	df 91       	pop	r29
    2628:	cf 91       	pop	r28
    262a:	1f 91       	pop	r17
    262c:	0f 91       	pop	r16
    262e:	ff 90       	pop	r15
    2630:	ef 90       	pop	r14
    2632:	df 90       	pop	r13
    2634:	cf 90       	pop	r12
    2636:	bf 90       	pop	r11
    2638:	af 90       	pop	r10
    263a:	9f 90       	pop	r9
    263c:	8f 90       	pop	r8
    263e:	7f 90       	pop	r7
    2640:	6f 90       	pop	r6
    2642:	5f 90       	pop	r5
    2644:	4f 90       	pop	r4
    2646:	08 95       	ret

00002648 <twi_stop>:
    2648:	85 ed       	ldi	r24, 0xD5	; 213
    264a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    264e:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <twi_timeout_us>
    2652:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    2656:	a0 91 b2 04 	lds	r26, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    265a:	b0 91 b3 04 	lds	r27, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    265e:	07 96       	adiw	r24, 0x07	; 7
    2660:	a1 1d       	adc	r26, r1
    2662:	b1 1d       	adc	r27, r1
    2664:	23 e0       	ldi	r18, 0x03	; 3
    2666:	b6 95       	lsr	r27
    2668:	a7 95       	ror	r26
    266a:	97 95       	ror	r25
    266c:	87 95       	ror	r24
    266e:	2a 95       	dec	r18
    2670:	d1 f7       	brne	.-12     	; 0x2666 <twi_stop+0x1e>
    2672:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2676:	24 ff       	sbrs	r18, 4
    2678:	1c c0       	rjmp	.+56     	; 0x26b2 <twi_stop+0x6a>
    267a:	40 91 b0 04 	lds	r20, 0x04B0	; 0x8004b0 <twi_timeout_us>
    267e:	50 91 b1 04 	lds	r21, 0x04B1	; 0x8004b1 <twi_timeout_us+0x1>
    2682:	60 91 b2 04 	lds	r22, 0x04B2	; 0x8004b2 <twi_timeout_us+0x2>
    2686:	70 91 b3 04 	lds	r23, 0x04B3	; 0x8004b3 <twi_timeout_us+0x3>
    268a:	45 2b       	or	r20, r21
    268c:	46 2b       	or	r20, r22
    268e:	47 2b       	or	r20, r23
    2690:	81 f3       	breq	.-32     	; 0x2672 <twi_stop+0x2a>
    2692:	00 97       	sbiw	r24, 0x00	; 0
    2694:	a1 05       	cpc	r26, r1
    2696:	b1 05       	cpc	r27, r1
    2698:	41 f0       	breq	.+16     	; 0x26aa <twi_stop+0x62>
    269a:	25 e3       	ldi	r18, 0x35	; 53
    269c:	2a 95       	dec	r18
    269e:	f1 f7       	brne	.-4      	; 0x269c <twi_stop+0x54>
    26a0:	00 00       	nop
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	a1 09       	sbc	r26, r1
    26a6:	b1 09       	sbc	r27, r1
    26a8:	e4 cf       	rjmp	.-56     	; 0x2672 <twi_stop+0x2a>
    26aa:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <twi_do_reset_on_timeout>
    26ae:	0c 94 35 11 	jmp	0x226a	; 0x226a <twi_handleTimeout>
    26b2:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <twi_state>
    26b6:	08 95       	ret

000026b8 <__vector_24>:
    26b8:	1f 92       	push	r1
    26ba:	0f 92       	push	r0
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	0f 92       	push	r0
    26c0:	11 24       	eor	r1, r1
    26c2:	2f 93       	push	r18
    26c4:	3f 93       	push	r19
    26c6:	4f 93       	push	r20
    26c8:	5f 93       	push	r21
    26ca:	6f 93       	push	r22
    26cc:	7f 93       	push	r23
    26ce:	8f 93       	push	r24
    26d0:	9f 93       	push	r25
    26d2:	af 93       	push	r26
    26d4:	bf 93       	push	r27
    26d6:	ef 93       	push	r30
    26d8:	ff 93       	push	r31
    26da:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    26de:	88 7f       	andi	r24, 0xF8	; 248
    26e0:	80 36       	cpi	r24, 0x60	; 96
    26e2:	09 f4       	brne	.+2      	; 0x26e6 <__vector_24+0x2e>
    26e4:	9e c0       	rjmp	.+316    	; 0x2822 <__vector_24+0x16a>
    26e6:	78 f5       	brcc	.+94     	; 0x2746 <__vector_24+0x8e>
    26e8:	88 32       	cpi	r24, 0x28	; 40
    26ea:	09 f4       	brne	.+2      	; 0x26ee <__vector_24+0x36>
    26ec:	5d c0       	rjmp	.+186    	; 0x27a8 <__vector_24+0xf0>
    26ee:	90 f4       	brcc	.+36     	; 0x2714 <__vector_24+0x5c>
    26f0:	80 31       	cpi	r24, 0x10	; 16
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <__vector_24+0x3e>
    26f4:	56 c0       	rjmp	.+172    	; 0x27a2 <__vector_24+0xea>
    26f6:	38 f4       	brcc	.+14     	; 0x2706 <__vector_24+0x4e>
    26f8:	88 23       	and	r24, r24
    26fa:	09 f4       	brne	.+2      	; 0x26fe <__vector_24+0x46>
    26fc:	f5 c0       	rjmp	.+490    	; 0x28e8 <__vector_24+0x230>
    26fe:	88 30       	cpi	r24, 0x08	; 8
    2700:	09 f4       	brne	.+2      	; 0x2704 <__vector_24+0x4c>
    2702:	4f c0       	rjmp	.+158    	; 0x27a2 <__vector_24+0xea>
    2704:	f5 c0       	rjmp	.+490    	; 0x28f0 <__vector_24+0x238>
    2706:	88 31       	cpi	r24, 0x18	; 24
    2708:	09 f4       	brne	.+2      	; 0x270c <__vector_24+0x54>
    270a:	4e c0       	rjmp	.+156    	; 0x27a8 <__vector_24+0xf0>
    270c:	80 32       	cpi	r24, 0x20	; 32
    270e:	09 f4       	brne	.+2      	; 0x2712 <__vector_24+0x5a>
    2710:	5f c0       	rjmp	.+190    	; 0x27d0 <__vector_24+0x118>
    2712:	ee c0       	rjmp	.+476    	; 0x28f0 <__vector_24+0x238>
    2714:	80 34       	cpi	r24, 0x40	; 64
    2716:	09 f4       	brne	.+2      	; 0x271a <__vector_24+0x62>
    2718:	6a c0       	rjmp	.+212    	; 0x27ee <__vector_24+0x136>
    271a:	58 f4       	brcc	.+22     	; 0x2732 <__vector_24+0x7a>
    271c:	80 33       	cpi	r24, 0x30	; 48
    271e:	09 f4       	brne	.+2      	; 0x2722 <__vector_24+0x6a>
    2720:	57 c0       	rjmp	.+174    	; 0x27d0 <__vector_24+0x118>
    2722:	88 33       	cpi	r24, 0x38	; 56
    2724:	09 f0       	breq	.+2      	; 0x2728 <__vector_24+0x70>
    2726:	e4 c0       	rjmp	.+456    	; 0x28f0 <__vector_24+0x238>
    2728:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <twi_error>
    272c:	0e 94 2f 11 	call	0x225e	; 0x225e <twi_releaseBus>
    2730:	df c0       	rjmp	.+446    	; 0x28f0 <__vector_24+0x238>
    2732:	80 35       	cpi	r24, 0x50	; 80
    2734:	09 f4       	brne	.+2      	; 0x2738 <__vector_24+0x80>
    2736:	4f c0       	rjmp	.+158    	; 0x27d6 <__vector_24+0x11e>
    2738:	88 35       	cpi	r24, 0x58	; 88
    273a:	09 f4       	brne	.+2      	; 0x273e <__vector_24+0x86>
    273c:	5d c0       	rjmp	.+186    	; 0x27f8 <__vector_24+0x140>
    273e:	88 34       	cpi	r24, 0x48	; 72
    2740:	09 f0       	breq	.+2      	; 0x2744 <__vector_24+0x8c>
    2742:	d6 c0       	rjmp	.+428    	; 0x28f0 <__vector_24+0x238>
    2744:	d3 c0       	rjmp	.+422    	; 0x28ec <__vector_24+0x234>
    2746:	88 39       	cpi	r24, 0x98	; 152
    2748:	09 f4       	brne	.+2      	; 0x274c <__vector_24+0x94>
    274a:	c4 c0       	rjmp	.+392    	; 0x28d4 <__vector_24+0x21c>
    274c:	a8 f4       	brcc	.+42     	; 0x2778 <__vector_24+0xc0>
    274e:	88 37       	cpi	r24, 0x78	; 120
    2750:	09 f4       	brne	.+2      	; 0x2754 <__vector_24+0x9c>
    2752:	67 c0       	rjmp	.+206    	; 0x2822 <__vector_24+0x16a>
    2754:	38 f4       	brcc	.+14     	; 0x2764 <__vector_24+0xac>
    2756:	88 36       	cpi	r24, 0x68	; 104
    2758:	09 f4       	brne	.+2      	; 0x275c <__vector_24+0xa4>
    275a:	63 c0       	rjmp	.+198    	; 0x2822 <__vector_24+0x16a>
    275c:	80 37       	cpi	r24, 0x70	; 112
    275e:	09 f4       	brne	.+2      	; 0x2762 <__vector_24+0xaa>
    2760:	60 c0       	rjmp	.+192    	; 0x2822 <__vector_24+0x16a>
    2762:	c6 c0       	rjmp	.+396    	; 0x28f0 <__vector_24+0x238>
    2764:	88 38       	cpi	r24, 0x88	; 136
    2766:	09 f4       	brne	.+2      	; 0x276a <__vector_24+0xb2>
    2768:	b5 c0       	rjmp	.+362    	; 0x28d4 <__vector_24+0x21c>
    276a:	80 39       	cpi	r24, 0x90	; 144
    276c:	09 f4       	brne	.+2      	; 0x2770 <__vector_24+0xb8>
    276e:	5f c0       	rjmp	.+190    	; 0x282e <__vector_24+0x176>
    2770:	80 38       	cpi	r24, 0x80	; 128
    2772:	09 f0       	breq	.+2      	; 0x2776 <__vector_24+0xbe>
    2774:	bd c0       	rjmp	.+378    	; 0x28f0 <__vector_24+0x238>
    2776:	5b c0       	rjmp	.+182    	; 0x282e <__vector_24+0x176>
    2778:	80 3b       	cpi	r24, 0xB0	; 176
    277a:	09 f4       	brne	.+2      	; 0x277e <__vector_24+0xc6>
    277c:	83 c0       	rjmp	.+262    	; 0x2884 <__vector_24+0x1cc>
    277e:	38 f4       	brcc	.+14     	; 0x278e <__vector_24+0xd6>
    2780:	80 3a       	cpi	r24, 0xA0	; 160
    2782:	09 f4       	brne	.+2      	; 0x2786 <__vector_24+0xce>
    2784:	66 c0       	rjmp	.+204    	; 0x2852 <__vector_24+0x19a>
    2786:	88 3a       	cpi	r24, 0xA8	; 168
    2788:	09 f4       	brne	.+2      	; 0x278c <__vector_24+0xd4>
    278a:	7c c0       	rjmp	.+248    	; 0x2884 <__vector_24+0x1cc>
    278c:	b1 c0       	rjmp	.+354    	; 0x28f0 <__vector_24+0x238>
    278e:	80 3c       	cpi	r24, 0xC0	; 192
    2790:	09 f4       	brne	.+2      	; 0x2794 <__vector_24+0xdc>
    2792:	a4 c0       	rjmp	.+328    	; 0x28dc <__vector_24+0x224>
    2794:	88 3c       	cpi	r24, 0xC8	; 200
    2796:	09 f4       	brne	.+2      	; 0x279a <__vector_24+0xe2>
    2798:	a1 c0       	rjmp	.+322    	; 0x28dc <__vector_24+0x224>
    279a:	88 3b       	cpi	r24, 0xB8	; 184
    279c:	09 f4       	brne	.+2      	; 0x27a0 <__vector_24+0xe8>
    279e:	87 c0       	rjmp	.+270    	; 0x28ae <__vector_24+0x1f6>
    27a0:	a7 c0       	rjmp	.+334    	; 0x28f0 <__vector_24+0x238>
    27a2:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <twi_slarw>
    27a6:	10 c0       	rjmp	.+32     	; 0x27c8 <__vector_24+0x110>
    27a8:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <twi_masterBufferIndex>
    27ac:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <twi_masterBufferLength>
    27b0:	98 17       	cp	r25, r24
    27b2:	70 f5       	brcc	.+92     	; 0x2810 <__vector_24+0x158>
    27b4:	e0 91 89 04 	lds	r30, 0x0489	; 0x800489 <twi_masterBufferIndex>
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	8e 0f       	add	r24, r30
    27bc:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <twi_masterBufferIndex>
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	e6 57       	subi	r30, 0x76	; 118
    27c4:	fb 4f       	sbci	r31, 0xFB	; 251
    27c6:	80 81       	ld	r24, Z
    27c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    27cc:	85 ec       	ldi	r24, 0xC5	; 197
    27ce:	83 c0       	rjmp	.+262    	; 0x28d6 <__vector_24+0x21e>
    27d0:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <twi_error>
    27d4:	8b c0       	rjmp	.+278    	; 0x28ec <__vector_24+0x234>
    27d6:	e0 91 89 04 	lds	r30, 0x0489	; 0x800489 <twi_masterBufferIndex>
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	8e 0f       	add	r24, r30
    27de:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <twi_masterBufferIndex>
    27e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	e6 57       	subi	r30, 0x76	; 118
    27ea:	fb 4f       	sbci	r31, 0xFB	; 251
    27ec:	80 83       	st	Z, r24
    27ee:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <twi_masterBufferIndex>
    27f2:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <twi_masterBufferLength>
    27f6:	6b c0       	rjmp	.+214    	; 0x28ce <__vector_24+0x216>
    27f8:	e0 91 89 04 	lds	r30, 0x0489	; 0x800489 <twi_masterBufferIndex>
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	8e 0f       	add	r24, r30
    2800:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <twi_masterBufferIndex>
    2804:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	e6 57       	subi	r30, 0x76	; 118
    280c:	fb 4f       	sbci	r31, 0xFB	; 251
    280e:	80 83       	st	Z, r24
    2810:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <twi_sendStop>
    2814:	81 11       	cpse	r24, r1
    2816:	6a c0       	rjmp	.+212    	; 0x28ec <__vector_24+0x234>
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <twi_inRepStart>
    281e:	84 ea       	ldi	r24, 0xA4	; 164
    2820:	5e c0       	rjmp	.+188    	; 0x28de <__vector_24+0x226>
    2822:	83 e0       	ldi	r24, 0x03	; 3
    2824:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <twi_state>
    2828:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <twi_rxBufferIndex>
    282c:	cf cf       	rjmp	.-98     	; 0x27cc <__vector_24+0x114>
    282e:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <twi_rxBufferIndex>
    2832:	80 32       	cpi	r24, 0x20	; 32
    2834:	08 f0       	brcs	.+2      	; 0x2838 <__vector_24+0x180>
    2836:	4e c0       	rjmp	.+156    	; 0x28d4 <__vector_24+0x21c>
    2838:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <twi_rxBufferIndex>
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	8e 0f       	add	r24, r30
    2840:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <twi_rxBufferIndex>
    2844:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	ea 5b       	subi	r30, 0xBA	; 186
    284c:	fb 4f       	sbci	r31, 0xFB	; 251
    284e:	80 83       	st	Z, r24
    2850:	bd cf       	rjmp	.-134    	; 0x27cc <__vector_24+0x114>
    2852:	0e 94 2f 11 	call	0x225e	; 0x225e <twi_releaseBus>
    2856:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <twi_rxBufferIndex>
    285a:	80 32       	cpi	r24, 0x20	; 32
    285c:	30 f4       	brcc	.+12     	; 0x286a <__vector_24+0x1b2>
    285e:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <twi_rxBufferIndex>
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	ea 5b       	subi	r30, 0xBA	; 186
    2866:	fb 4f       	sbci	r31, 0xFB	; 251
    2868:	10 82       	st	Z, r1
    286a:	60 91 45 04 	lds	r22, 0x0445	; 0x800445 <twi_rxBufferIndex>
    286e:	70 e0       	ldi	r23, 0x00	; 0
    2870:	e0 91 aa 04 	lds	r30, 0x04AA	; 0x8004aa <twi_onSlaveReceive>
    2874:	f0 91 ab 04 	lds	r31, 0x04AB	; 0x8004ab <twi_onSlaveReceive+0x1>
    2878:	86 e4       	ldi	r24, 0x46	; 70
    287a:	94 e0       	ldi	r25, 0x04	; 4
    287c:	09 95       	icall
    287e:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <twi_rxBufferIndex>
    2882:	36 c0       	rjmp	.+108    	; 0x28f0 <__vector_24+0x238>
    2884:	84 e0       	ldi	r24, 0x04	; 4
    2886:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <twi_state>
    288a:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <twi_txBufferIndex>
    288e:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <twi_txBufferLength>
    2892:	e0 91 ac 04 	lds	r30, 0x04AC	; 0x8004ac <twi_onSlaveTransmit>
    2896:	f0 91 ad 04 	lds	r31, 0x04AD	; 0x8004ad <twi_onSlaveTransmit+0x1>
    289a:	09 95       	icall
    289c:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <twi_txBufferLength>
    28a0:	81 11       	cpse	r24, r1
    28a2:	05 c0       	rjmp	.+10     	; 0x28ae <__vector_24+0x1f6>
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <twi_txBufferLength>
    28aa:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <twi_txBuffer>
    28ae:	e0 91 67 04 	lds	r30, 0x0467	; 0x800467 <twi_txBufferIndex>
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	8e 0f       	add	r24, r30
    28b6:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <twi_txBufferIndex>
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	e8 59       	subi	r30, 0x98	; 152
    28be:	fb 4f       	sbci	r31, 0xFB	; 251
    28c0:	80 81       	ld	r24, Z
    28c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    28c6:	90 91 67 04 	lds	r25, 0x0467	; 0x800467 <twi_txBufferIndex>
    28ca:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <twi_txBufferLength>
    28ce:	98 17       	cp	r25, r24
    28d0:	08 f4       	brcc	.+2      	; 0x28d4 <__vector_24+0x21c>
    28d2:	7c cf       	rjmp	.-264    	; 0x27cc <__vector_24+0x114>
    28d4:	85 e8       	ldi	r24, 0x85	; 133
    28d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    28da:	0a c0       	rjmp	.+20     	; 0x28f0 <__vector_24+0x238>
    28dc:	85 ec       	ldi	r24, 0xC5	; 197
    28de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    28e2:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <twi_state>
    28e6:	04 c0       	rjmp	.+8      	; 0x28f0 <__vector_24+0x238>
    28e8:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <twi_error>
    28ec:	0e 94 24 13 	call	0x2648	; 0x2648 <twi_stop>
    28f0:	ff 91       	pop	r31
    28f2:	ef 91       	pop	r30
    28f4:	bf 91       	pop	r27
    28f6:	af 91       	pop	r26
    28f8:	9f 91       	pop	r25
    28fa:	8f 91       	pop	r24
    28fc:	7f 91       	pop	r23
    28fe:	6f 91       	pop	r22
    2900:	5f 91       	pop	r21
    2902:	4f 91       	pop	r20
    2904:	3f 91       	pop	r19
    2906:	2f 91       	pop	r18
    2908:	0f 90       	pop	r0
    290a:	0f be       	out	0x3f, r0	; 63
    290c:	0f 90       	pop	r0
    290e:	1f 90       	pop	r1
    2910:	18 95       	reti

00002912 <__cmpsf2>:
    2912:	0e 94 48 09 	call	0x1290	; 0x1290 <__fp_cmp>
    2916:	08 f4       	brcc	.+2      	; 0x291a <__cmpsf2+0x8>
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	08 95       	ret

0000291c <__unordsf2>:
    291c:	0e 94 48 09 	call	0x1290	; 0x1290 <__fp_cmp>
    2920:	88 0b       	sbc	r24, r24
    2922:	99 0b       	sbc	r25, r25
    2924:	08 95       	ret

00002926 <__udivmodsi4>:
    2926:	a1 e2       	ldi	r26, 0x21	; 33
    2928:	1a 2e       	mov	r1, r26
    292a:	aa 1b       	sub	r26, r26
    292c:	bb 1b       	sub	r27, r27
    292e:	fd 01       	movw	r30, r26
    2930:	0d c0       	rjmp	.+26     	; 0x294c <__udivmodsi4_ep>

00002932 <__udivmodsi4_loop>:
    2932:	aa 1f       	adc	r26, r26
    2934:	bb 1f       	adc	r27, r27
    2936:	ee 1f       	adc	r30, r30
    2938:	ff 1f       	adc	r31, r31
    293a:	a2 17       	cp	r26, r18
    293c:	b3 07       	cpc	r27, r19
    293e:	e4 07       	cpc	r30, r20
    2940:	f5 07       	cpc	r31, r21
    2942:	20 f0       	brcs	.+8      	; 0x294c <__udivmodsi4_ep>
    2944:	a2 1b       	sub	r26, r18
    2946:	b3 0b       	sbc	r27, r19
    2948:	e4 0b       	sbc	r30, r20
    294a:	f5 0b       	sbc	r31, r21

0000294c <__udivmodsi4_ep>:
    294c:	66 1f       	adc	r22, r22
    294e:	77 1f       	adc	r23, r23
    2950:	88 1f       	adc	r24, r24
    2952:	99 1f       	adc	r25, r25
    2954:	1a 94       	dec	r1
    2956:	69 f7       	brne	.-38     	; 0x2932 <__udivmodsi4_loop>
    2958:	60 95       	com	r22
    295a:	70 95       	com	r23
    295c:	80 95       	com	r24
    295e:	90 95       	com	r25
    2960:	9b 01       	movw	r18, r22
    2962:	ac 01       	movw	r20, r24
    2964:	bd 01       	movw	r22, r26
    2966:	cf 01       	movw	r24, r30
    2968:	08 95       	ret

0000296a <__tablejump2__>:
    296a:	ee 0f       	add	r30, r30
    296c:	ff 1f       	adc	r31, r31
    296e:	05 90       	lpm	r0, Z+
    2970:	f4 91       	lpm	r31, Z
    2972:	e0 2d       	mov	r30, r0
    2974:	09 94       	ijmp

00002976 <_exit>:
    2976:	f8 94       	cli

00002978 <__stop_program>:
    2978:	ff cf       	rjmp	.-2      	; 0x2978 <__stop_program>
