
pdm_sketch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d8  00800100  00004c40  00004cd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004c40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000036a  008002d8  008002d8  00004eac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004eac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004edc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007b0  00000000  00000000  00004f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000151e4  00000000  00000000  000056cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000394f  00000000  00000000  0001a8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004e17  00000000  00000000  0001e1ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001b2c  00000000  00000000  00023018  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005fef  00000000  00000000  00024b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009f05  00000000  00000000  0002ab33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000788  00000000  00000000  00034a38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ac 00 	jmp	0x158	; 0x158 <__dtors_end>
       4:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <__vector_1>
       8:	0c 94 10 20 	jmp	0x4020	; 0x4020 <__vector_2>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__vector_16>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__vector_18>
      4c:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__vector_19>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d5 22 	jmp	0x45aa	; 0x45aa <__vector_24>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	73 65       	ori	r23, 0x53	; 83
      6a:	74 20       	and	r7, r4
      6c:	63 61       	ori	r22, 0x13	; 19
      6e:	6c 69       	ori	r22, 0x9C	; 156
      70:	62 72       	andi	r22, 0x22	; 34
      72:	61 74       	andi	r22, 0x41	; 65
      74:	69 6f       	ori	r22, 0xF9	; 249
      76:	6e 00       	.word	0x006e	; ????

00000078 <_ZZN8INA233_S10resetAlarmEvE3__c>:
      78:	72 65 73 65 74 20 61 6c 61 72 6d 00                 reset alarm.

00000084 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_4>:
      84:	55 56 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     UV WARN LIMIT re
      94:	61 64 62 61 63 6b 3a 20 00                          adback: .

0000009d <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_3>:
      9d:	55 56 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     UV WARN LIMIT: .

000000ad <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_2>:
      ad:	4f 56 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     OV WARN LIMIT re
      bd:	61 64 62 61 63 6b 3a 20 00                          adback: .

000000c6 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_1>:
      c6:	4f 56 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     OV WARN LIMIT: .

000000d6 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_0>:
      d6:	4f 43 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     OC WARN LIMIT re
      e6:	61 64 62 61 63 6b 3a 20 00                          adback: .

000000ef <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c>:
      ef:	4f 43 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     OC WARN LIMIT: .

000000ff <digital_pin_to_timer_PGM>:
      ff:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     10f:	00 00 00 00                                         ....

00000113 <digital_pin_to_bit_mask_PGM>:
     113:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     123:	04 08 10 20                                         ... 

00000127 <digital_pin_to_port_PGM>:
     127:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     137:	03 03 03 03                                         ....

0000013b <port_to_output_PGM>:
     13b:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000145 <port_to_mode_PGM>:
     145:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000150 <__ctors_start>:
     150:	50 06       	cpc	r5, r16
     152:	08 0a       	sbc	r0, r24
     154:	e8 1e       	adc	r14, r24

00000156 <__ctors_end>:
     156:	59 07       	cpc	r21, r25

00000158 <__dtors_end>:
     158:	11 24       	eor	r1, r1
     15a:	1f be       	out	0x3f, r1	; 63
     15c:	cf ef       	ldi	r28, 0xFF	; 255
     15e:	d8 e0       	ldi	r29, 0x08	; 8
     160:	de bf       	out	0x3e, r29	; 62
     162:	cd bf       	out	0x3d, r28	; 61

00000164 <__do_copy_data>:
     164:	12 e0       	ldi	r17, 0x02	; 2
     166:	a0 e0       	ldi	r26, 0x00	; 0
     168:	b1 e0       	ldi	r27, 0x01	; 1
     16a:	e0 e4       	ldi	r30, 0x40	; 64
     16c:	fc e4       	ldi	r31, 0x4C	; 76
     16e:	02 c0       	rjmp	.+4      	; 0x174 <__do_copy_data+0x10>
     170:	05 90       	lpm	r0, Z+
     172:	0d 92       	st	X+, r0
     174:	a8 3d       	cpi	r26, 0xD8	; 216
     176:	b1 07       	cpc	r27, r17
     178:	d9 f7       	brne	.-10     	; 0x170 <__do_copy_data+0xc>

0000017a <__do_clear_bss>:
     17a:	26 e0       	ldi	r18, 0x06	; 6
     17c:	a8 ed       	ldi	r26, 0xD8	; 216
     17e:	b2 e0       	ldi	r27, 0x02	; 2
     180:	01 c0       	rjmp	.+2      	; 0x184 <.do_clear_bss_start>

00000182 <.do_clear_bss_loop>:
     182:	1d 92       	st	X+, r1

00000184 <.do_clear_bss_start>:
     184:	a2 34       	cpi	r26, 0x42	; 66
     186:	b2 07       	cpc	r27, r18
     188:	e1 f7       	brne	.-8      	; 0x182 <.do_clear_bss_loop>

0000018a <__do_global_ctors>:
     18a:	10 e0       	ldi	r17, 0x00	; 0
     18c:	cb ea       	ldi	r28, 0xAB	; 171
     18e:	d0 e0       	ldi	r29, 0x00	; 0
     190:	04 c0       	rjmp	.+8      	; 0x19a <__do_global_ctors+0x10>
     192:	21 97       	sbiw	r28, 0x01	; 1
     194:	fe 01       	movw	r30, r28
     196:	0e 94 ec 24 	call	0x49d8	; 0x49d8 <__tablejump2__>
     19a:	c8 3a       	cpi	r28, 0xA8	; 168
     19c:	d1 07       	cpc	r29, r17
     19e:	c9 f7       	brne	.-14     	; 0x192 <__do_global_ctors+0x8>
     1a0:	0e 94 36 0a 	call	0x146c	; 0x146c <main>
     1a4:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__do_global_dtors>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>:

void INA233_S::getAlarm()
{
    INA233_Data_Package data = receiveData_(0x7C, 1);
    Serial.print("status input: ");
    Serial.println(data.msg[0], BIN);
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
     1b4:	dc 01       	movw	r26, r24
     1b6:	6c 93       	st	X, r22
     1b8:	12 96       	adiw	r26, 0x02	; 2
     1ba:	5c 93       	st	X, r21
     1bc:	4e 93       	st	-X, r20
     1be:	11 97       	sbiw	r26, 0x01	; 1
     1c0:	14 96       	adiw	r26, 0x04	; 4
     1c2:	3c 93       	st	X, r19
     1c4:	2e 93       	st	-X, r18
     1c6:	13 97       	sbiw	r26, 0x03	; 3
     1c8:	2c e0       	ldi	r18, 0x0C	; 12
     1ca:	fe 01       	movw	r30, r28
     1cc:	35 96       	adiw	r30, 0x05	; 5
     1ce:	15 96       	adiw	r26, 0x05	; 5
     1d0:	01 90       	ld	r0, Z+
     1d2:	0d 92       	st	X+, r0
     1d4:	2a 95       	dec	r18
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config+0x24>
     1d8:	2a e0       	ldi	r18, 0x0A	; 10
     1da:	fc 01       	movw	r30, r24
     1dc:	71 96       	adiw	r30, 0x11	; 17
     1de:	df 01       	movw	r26, r30
     1e0:	32 2f       	mov	r19, r18
     1e2:	1d 92       	st	X+, r1
     1e4:	3a 95       	dec	r19
     1e6:	e9 f7       	brne	.-6      	; 0x1e2 <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config+0x36>
     1e8:	dc 01       	movw	r26, r24
     1ea:	5b 96       	adiw	r26, 0x1b	; 27
     1ec:	1c 92       	st	X, r1
     1ee:	5b 97       	sbiw	r26, 0x1b	; 27
     1f0:	5c 96       	adiw	r26, 0x1c	; 28
     1f2:	2c 93       	st	X, r18
     1f4:	5c 97       	sbiw	r26, 0x1c	; 28
     1f6:	5d 96       	adiw	r26, 0x1d	; 29
     1f8:	1c 92       	st	X, r1
     1fa:	5d 97       	sbiw	r26, 0x1d	; 29
     1fc:	5e 96       	adiw	r26, 0x1e	; 30
     1fe:	1c 92       	st	X, r1
     200:	5e 97       	sbiw	r26, 0x1e	; 30
     202:	5f 96       	adiw	r26, 0x1f	; 31
     204:	1c 92       	st	X, r1
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <_ZN8INA233_S15transmitCommandEh>:
     20c:	cf 93       	push	r28
     20e:	c6 2f       	mov	r28, r22
     210:	fc 01       	movw	r30, r24
     212:	60 81       	ld	r22, Z
     214:	84 e7       	ldi	r24, 0x74	; 116
     216:	95 e0       	ldi	r25, 0x05	; 5
     218:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <_ZN7TwoWire17beginTransmissionEh>
     21c:	6c 2f       	mov	r22, r28
     21e:	84 e7       	ldi	r24, 0x74	; 116
     220:	95 e0       	ldi	r25, 0x05	; 5
     222:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <_ZN7TwoWire5writeEh>
     226:	84 e7       	ldi	r24, 0x74	; 116
     228:	95 e0       	ldi	r25, 0x05	; 5
     22a:	cf 91       	pop	r28
     22c:	0c 94 e5 1e 	jmp	0x3dca	; 0x3dca <_ZN7TwoWire15endTransmissionEv>

00000230 <_ZN8INA233_S10resetAlarmEv>:
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	ec 01       	movw	r28, r24
     236:	68 e7       	ldi	r22, 0x78	; 120
     238:	70 e0       	ldi	r23, 0x00	; 0
     23a:	89 ec       	ldi	r24, 0xC9	; 201
     23c:	94 e0       	ldi	r25, 0x04	; 4
     23e:	0e 94 bd 0a 	call	0x157a	; 0x157a <_ZN5Print7printlnEPK19__FlashStringHelper>
     242:	63 e0       	ldi	r22, 0x03	; 3
     244:	ce 01       	movw	r24, r28
     246:	df 91       	pop	r29
     248:	cf 91       	pop	r28
     24a:	0c 94 06 01 	jmp	0x20c	; 0x20c <_ZN8INA233_S15transmitCommandEh>

0000024e <_ZN8INA233_S9resetChipEv>:
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	ec 01       	movw	r28, r24
     254:	68 e2       	ldi	r22, 0x28	; 40
     256:	71 e0       	ldi	r23, 0x01	; 1
     258:	89 ec       	ldi	r24, 0xC9	; 201
     25a:	94 e0       	ldi	r25, 0x04	; 4
     25c:	0e 94 cf 0a 	call	0x159e	; 0x159e <_ZN5Print7printlnEPKc>
     260:	62 e1       	ldi	r22, 0x12	; 18
     262:	ce 01       	movw	r24, r28
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	0c 94 06 01 	jmp	0x20c	; 0x20c <_ZN8INA233_S15transmitCommandEh>

0000026c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>:
     26c:	1f 93       	push	r17
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	fc 01       	movw	r30, r24
     274:	eb 01       	movw	r28, r22
     276:	14 2f       	mov	r17, r20
     278:	9a 85       	ldd	r25, Y+10	; 0x0a
     27a:	93 30       	cpi	r25, 0x03	; 3
     27c:	18 f0       	brcs	.+6      	; 0x284 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x18>
     27e:	63 e3       	ldi	r22, 0x33	; 51
     280:	71 e0       	ldi	r23, 0x01	; 1
     282:	04 c0       	rjmp	.+8      	; 0x28c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x20>
     284:	91 11       	cpse	r25, r1
     286:	0f c0       	rjmp	.+30     	; 0x2a6 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x3a>
     288:	69 e9       	ldi	r22, 0x99	; 153
     28a:	71 e0       	ldi	r23, 0x01	; 1
     28c:	89 ec       	ldi	r24, 0xC9	; 201
     28e:	94 e0       	ldi	r25, 0x04	; 4
     290:	0e 94 cf 0a 	call	0x159e	; 0x159e <_ZN5Print7printlnEPKc>
     294:	68 e7       	ldi	r22, 0x78	; 120
     296:	71 e0       	ldi	r23, 0x01	; 1
     298:	89 ec       	ldi	r24, 0xC9	; 201
     29a:	94 e0       	ldi	r25, 0x04	; 4
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	1f 91       	pop	r17
     2a2:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <_ZN5Print7printlnEPKc>
     2a6:	60 81       	ld	r22, Z
     2a8:	84 e7       	ldi	r24, 0x74	; 116
     2aa:	95 e0       	ldi	r25, 0x05	; 5
     2ac:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <_ZN7TwoWire17beginTransmissionEh>
     2b0:	61 2f       	mov	r22, r17
     2b2:	84 e7       	ldi	r24, 0x74	; 116
     2b4:	95 e0       	ldi	r25, 0x05	; 5
     2b6:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <_ZN7TwoWire5writeEh>
     2ba:	68 81       	ld	r22, Y
     2bc:	84 e7       	ldi	r24, 0x74	; 116
     2be:	95 e0       	ldi	r25, 0x05	; 5
     2c0:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <_ZN7TwoWire5writeEh>
     2c4:	8a 85       	ldd	r24, Y+10	; 0x0a
     2c6:	82 30       	cpi	r24, 0x02	; 2
     2c8:	29 f4       	brne	.+10     	; 0x2d4 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x68>
     2ca:	69 81       	ldd	r22, Y+1	; 0x01
     2cc:	84 e7       	ldi	r24, 0x74	; 116
     2ce:	95 e0       	ldi	r25, 0x05	; 5
     2d0:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <_ZN7TwoWire5writeEh>
     2d4:	84 e7       	ldi	r24, 0x74	; 116
     2d6:	95 e0       	ldi	r25, 0x05	; 5
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	1f 91       	pop	r17
     2de:	0c 94 e5 1e 	jmp	0x3dca	; 0x3dca <_ZN7TwoWire15endTransmissionEv>

000002e2 <_ZN8INA233_S12receiveData_Ehh>:
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	0f 93       	push	r16
     2e8:	1f 93       	push	r17
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	ec 01       	movw	r28, r24
     2f0:	7b 01       	movw	r14, r22
     2f2:	02 2f       	mov	r16, r18
     2f4:	8f e0       	ldi	r24, 0x0F	; 15
     2f6:	fe 01       	movw	r30, r28
     2f8:	11 92       	st	Z+, r1
     2fa:	8a 95       	dec	r24
     2fc:	e9 f7       	brne	.-6      	; 0x2f8 <_ZN8INA233_S12receiveData_Ehh+0x16>
     2fe:	8a e0       	ldi	r24, 0x0A	; 10
     300:	8b 87       	std	Y+11, r24	; 0x0b
     302:	64 2f       	mov	r22, r20
     304:	c7 01       	movw	r24, r14
     306:	0e 94 06 01 	call	0x20c	; 0x20c <_ZN8INA233_S15transmitCommandEh>
     30a:	40 2f       	mov	r20, r16
     30c:	f7 01       	movw	r30, r14
     30e:	60 81       	ld	r22, Z
     310:	84 e7       	ldi	r24, 0x74	; 116
     312:	95 e0       	ldi	r25, 0x05	; 5
     314:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <_ZN7TwoWire11requestFromEhh>
     318:	84 e7       	ldi	r24, 0x74	; 116
     31a:	95 e0       	ldi	r25, 0x05	; 5
     31c:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <_ZN7TwoWire9availableEv>
     320:	89 2b       	or	r24, r25
     322:	79 f0       	breq	.+30     	; 0x342 <_ZN8INA233_S12receiveData_Ehh+0x60>
     324:	1a 85       	ldd	r17, Y+10	; 0x0a
     326:	84 e7       	ldi	r24, 0x74	; 116
     328:	95 e0       	ldi	r25, 0x05	; 5
     32a:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <_ZN7TwoWire4readEv>
     32e:	fe 01       	movw	r30, r28
     330:	e1 0f       	add	r30, r17
     332:	f1 1d       	adc	r31, r1
     334:	80 83       	st	Z, r24
     336:	1f 5f       	subi	r17, 0xFF	; 255
     338:	1a 87       	std	Y+10, r17	; 0x0a
     33a:	1a 30       	cpi	r17, 0x0A	; 10
     33c:	68 f3       	brcs	.-38     	; 0x318 <_ZN8INA233_S12receiveData_Ehh+0x36>
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	8c 87       	std	Y+12, r24	; 0x0c
     342:	8a 85       	ldd	r24, Y+10	; 0x0a
     344:	80 17       	cp	r24, r16
     346:	18 f4       	brcc	.+6      	; 0x34e <_ZN8INA233_S12receiveData_Ehh+0x6c>
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	8d 87       	std	Y+13, r24	; 0x0d
     34c:	04 c0       	rjmp	.+8      	; 0x356 <_ZN8INA233_S12receiveData_Ehh+0x74>
     34e:	08 17       	cp	r16, r24
     350:	10 f4       	brcc	.+4      	; 0x356 <_ZN8INA233_S12receiveData_Ehh+0x74>
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	8e 87       	std	Y+14, r24	; 0x0e
     356:	ce 01       	movw	r24, r28
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	1f 91       	pop	r17
     35e:	0f 91       	pop	r16
     360:	ff 90       	pop	r15
     362:	ef 90       	pop	r14
     364:	08 95       	ret

00000366 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>:
     366:	ef 92       	push	r14
     368:	ff 92       	push	r15
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	2f 97       	sbiw	r28, 0x0f	; 15
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	f8 94       	cli
     37c:	de bf       	out	0x3e, r29	; 62
     37e:	0f be       	out	0x3f, r0	; 63
     380:	cd bf       	out	0x3d, r28	; 61
     382:	8b 01       	movw	r16, r22
     384:	fb 01       	movw	r30, r22
     386:	22 85       	ldd	r18, Z+10	; 0x0a
     388:	bc 01       	movw	r22, r24
     38a:	ce 01       	movw	r24, r28
     38c:	01 96       	adiw	r24, 0x01	; 1
     38e:	7c 01       	movw	r14, r24
     390:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
     394:	f8 01       	movw	r30, r16
     396:	62 85       	ldd	r22, Z+10	; 0x0a
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	a8 01       	movw	r20, r16
     39c:	d7 01       	movw	r26, r14
     39e:	c8 01       	movw	r24, r16
     3a0:	9d 01       	movw	r18, r26
     3a2:	2e 19       	sub	r18, r14
     3a4:	3f 09       	sbc	r19, r15
     3a6:	26 17       	cp	r18, r22
     3a8:	37 07       	cpc	r19, r23
     3aa:	40 f4       	brcc	.+16     	; 0x3bc <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x56>
     3ac:	fc 01       	movw	r30, r24
     3ae:	31 91       	ld	r19, Z+
     3b0:	cf 01       	movw	r24, r30
     3b2:	2d 91       	ld	r18, X+
     3b4:	32 17       	cp	r19, r18
     3b6:	a1 f3       	breq	.-24     	; 0x3a0 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x3a>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	0a c0       	rjmp	.+20     	; 0x3d0 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x6a>
     3bc:	60 0f       	add	r22, r16
     3be:	71 1f       	adc	r23, r17
     3c0:	46 17       	cp	r20, r22
     3c2:	57 07       	cpc	r21, r23
     3c4:	21 f0       	breq	.+8      	; 0x3ce <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x68>
     3c6:	fa 01       	movw	r30, r20
     3c8:	11 92       	st	Z+, r1
     3ca:	af 01       	movw	r20, r30
     3cc:	f9 cf       	rjmp	.-14     	; 0x3c0 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x5a>
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	2f 96       	adiw	r28, 0x0f	; 15
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	de bf       	out	0x3e, r29	; 62
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	cd bf       	out	0x3d, r28	; 61
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	08 95       	ret

000003ea <_ZN8INA233_S15setADC_SettingsEj>:
     3ea:	ef 92       	push	r14
     3ec:	ff 92       	push	r15
     3ee:	0f 93       	push	r16
     3f0:	1f 93       	push	r17
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	2f 97       	sbiw	r28, 0x0f	; 15
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	de bf       	out	0x3e, r29	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	cd bf       	out	0x3d, r28	; 61
     406:	7c 01       	movw	r14, r24
     408:	8e 01       	movw	r16, r28
     40a:	0f 5f       	subi	r16, 0xFF	; 255
     40c:	1f 4f       	sbci	r17, 0xFF	; 255
     40e:	8f e0       	ldi	r24, 0x0F	; 15
     410:	f8 01       	movw	r30, r16
     412:	11 92       	st	Z+, r1
     414:	8a 95       	dec	r24
     416:	e9 f7       	brne	.-6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     418:	8a e0       	ldi	r24, 0x0A	; 10
     41a:	8c 87       	std	Y+12, r24	; 0x0c
     41c:	69 83       	std	Y+1, r22	; 0x01
     41e:	7a 83       	std	Y+2, r23	; 0x02
     420:	82 e0       	ldi	r24, 0x02	; 2
     422:	8b 87       	std	Y+11, r24	; 0x0b
     424:	40 ed       	ldi	r20, 0xD0	; 208
     426:	b8 01       	movw	r22, r16
     428:	c7 01       	movw	r24, r14
     42a:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     42e:	40 ed       	ldi	r20, 0xD0	; 208
     430:	b8 01       	movw	r22, r16
     432:	c7 01       	movw	r24, r14
     434:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	2f 96       	adiw	r28, 0x0f	; 15
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	f8 94       	cli
     440:	de bf       	out	0x3e, r29	; 62
     442:	0f be       	out	0x3f, r0	; 63
     444:	cd bf       	out	0x3d, r28	; 61
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
     452:	08 95       	ret

00000454 <_ZN8INA233_S15setCallibrationEj>:
     454:	cf 92       	push	r12
     456:	df 92       	push	r13
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
     468:	2f 97       	sbiw	r28, 0x0f	; 15
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	7c 01       	movw	r14, r24
     476:	6b 01       	movw	r12, r22
     478:	68 e6       	ldi	r22, 0x68	; 104
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	89 ec       	ldi	r24, 0xC9	; 201
     47e:	94 e0       	ldi	r25, 0x04	; 4
     480:	0e 94 bd 0a 	call	0x157a	; 0x157a <_ZN5Print7printlnEPK19__FlashStringHelper>
     484:	8e 01       	movw	r16, r28
     486:	0f 5f       	subi	r16, 0xFF	; 255
     488:	1f 4f       	sbci	r17, 0xFF	; 255
     48a:	8f e0       	ldi	r24, 0x0F	; 15
     48c:	f8 01       	movw	r30, r16
     48e:	11 92       	st	Z+, r1
     490:	8a 95       	dec	r24
     492:	e9 f7       	brne	.-6      	; 0x48e <_ZN8INA233_S15setCallibrationEj+0x3a>
     494:	8a e0       	ldi	r24, 0x0A	; 10
     496:	8c 87       	std	Y+12, r24	; 0x0c
     498:	c9 82       	std	Y+1, r12	; 0x01
     49a:	da 82       	std	Y+2, r13	; 0x02
     49c:	82 e0       	ldi	r24, 0x02	; 2
     49e:	8b 87       	std	Y+11, r24	; 0x0b
     4a0:	44 ed       	ldi	r20, 0xD4	; 212
     4a2:	b8 01       	movw	r22, r16
     4a4:	c7 01       	movw	r24, r14
     4a6:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     4aa:	44 ed       	ldi	r20, 0xD4	; 212
     4ac:	b8 01       	movw	r22, r16
     4ae:	c7 01       	movw	r24, r14
     4b0:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	2f 96       	adiw	r28, 0x0f	; 15
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	f8 94       	cli
     4bc:	de bf       	out	0x3e, r29	; 62
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	cd bf       	out	0x3d, r28	; 61
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	df 90       	pop	r13
     4d0:	cf 90       	pop	r12
     4d2:	08 95       	ret

000004d4 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config>:
     4d4:	4f 92       	push	r4
     4d6:	5f 92       	push	r5
     4d8:	6f 92       	push	r6
     4da:	7f 92       	push	r7
     4dc:	af 92       	push	r10
     4de:	bf 92       	push	r11
     4e0:	cf 92       	push	r12
     4e2:	df 92       	push	r13
     4e4:	ef 92       	push	r14
     4e6:	ff 92       	push	r15
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	ae 97       	sbiw	r28, 0x2e	; 46
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	cd bf       	out	0x3d, r28	; 61
     500:	5c 01       	movw	r10, r24
     502:	cf 8e       	std	Y+31, r12	; 0x1f
     504:	d8 a2       	std	Y+32, r13	; 0x20
     506:	e9 a2       	std	Y+33, r14	; 0x21
     508:	fa a2       	std	Y+34, r15	; 0x22
     50a:	0b a3       	std	Y+35, r16	; 0x23
     50c:	1c a3       	std	Y+36, r17	; 0x24
     50e:	2d a3       	std	Y+37, r18	; 0x25
     510:	3e a3       	std	Y+38, r19	; 0x26
     512:	4f a3       	std	Y+39, r20	; 0x27
     514:	58 a7       	std	Y+40, r21	; 0x28
     516:	69 a7       	std	Y+41, r22	; 0x29
     518:	7a a7       	std	Y+42, r23	; 0x2a
     51a:	cf 8c       	ldd	r12, Y+31	; 0x1f
     51c:	d8 a0       	ldd	r13, Y+32	; 0x20
     51e:	e9 a0       	ldd	r14, Y+33	; 0x21
     520:	fa a0       	ldd	r15, Y+34	; 0x22
     522:	8b a1       	ldd	r24, Y+35	; 0x23
     524:	9c a1       	ldd	r25, Y+36	; 0x24
     526:	ad a1       	ldd	r26, Y+37	; 0x25
     528:	be a1       	ldd	r27, Y+38	; 0x26
     52a:	8b a7       	std	Y+43, r24	; 0x2b
     52c:	9c a7       	std	Y+44, r25	; 0x2c
     52e:	ad a7       	std	Y+45, r26	; 0x2d
     530:	be a7       	std	Y+46, r27	; 0x2e
     532:	4f a0       	ldd	r4, Y+39	; 0x27
     534:	58 a4       	ldd	r5, Y+40	; 0x28
     536:	69 a4       	ldd	r6, Y+41	; 0x29
     538:	7a a4       	ldd	r7, Y+42	; 0x2a
     53a:	65 eb       	ldi	r22, 0xB5	; 181
     53c:	71 e0       	ldi	r23, 0x01	; 1
     53e:	89 ec       	ldi	r24, 0xC9	; 201
     540:	94 e0       	ldi	r25, 0x04	; 4
     542:	0e 94 cf 0a 	call	0x159e	; 0x159e <_ZN5Print7printlnEPKc>
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	a9 01       	movw	r20, r18
     54c:	c7 01       	movw	r24, r14
     54e:	b6 01       	movw	r22, r12
     550:	0e 94 0d 09 	call	0x121a	; 0x121a <__gesf2>
     554:	18 16       	cp	r1, r24
     556:	0c f0       	brlt	.+2      	; 0x55a <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x86>
     558:	51 c0       	rjmp	.+162    	; 0x5fc <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x128>
     55a:	d5 01       	movw	r26, r10
     55c:	11 96       	adiw	r26, 0x01	; 1
     55e:	6d 91       	ld	r22, X+
     560:	7c 91       	ld	r23, X
     562:	12 97       	sbiw	r26, 0x02	; 2
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__floatunsisf>
     56c:	a7 01       	movw	r20, r14
     56e:	96 01       	movw	r18, r12
     570:	0e 94 12 09 	call	0x1224	; 0x1224 <__mulsf3>
     574:	6b 01       	movw	r12, r22
     576:	7c 01       	movw	r14, r24
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	a9 01       	movw	r20, r18
     57e:	0e 94 0d 09 	call	0x121a	; 0x121a <__gesf2>
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	40 e0       	ldi	r20, 0x00	; 0
     588:	5f e3       	ldi	r21, 0x3F	; 63
     58a:	87 fd       	sbrc	r24, 7
     58c:	05 c0       	rjmp	.+10     	; 0x598 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xc4>
     58e:	c7 01       	movw	r24, r14
     590:	b6 01       	movw	r22, r12
     592:	0e 94 6b 07 	call	0xed6	; 0xed6 <__addsf3>
     596:	04 c0       	rjmp	.+8      	; 0x5a0 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xcc>
     598:	c7 01       	movw	r24, r14
     59a:	b6 01       	movw	r22, r12
     59c:	0e 94 6a 07 	call	0xed4	; 0xed4 <__subsf3>
     5a0:	0e 94 49 08 	call	0x1092	; 0x1092 <__fixsfsi>
     5a4:	8b 01       	movw	r16, r22
     5a6:	7e 01       	movw	r14, r28
     5a8:	b0 e1       	ldi	r27, 0x10	; 16
     5aa:	eb 0e       	add	r14, r27
     5ac:	f1 1c       	adc	r15, r1
     5ae:	8f e0       	ldi	r24, 0x0F	; 15
     5b0:	f7 01       	movw	r30, r14
     5b2:	11 92       	st	Z+, r1
     5b4:	8a 95       	dec	r24
     5b6:	e9 f7       	brne	.-6      	; 0x5b2 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xde>
     5b8:	8a e0       	ldi	r24, 0x0A	; 10
     5ba:	8b 8f       	std	Y+27, r24	; 0x1b
     5bc:	08 8b       	std	Y+16, r16	; 0x10
     5be:	19 8b       	std	Y+17, r17	; 0x11
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	8a 8f       	std	Y+26, r24	; 0x1a
     5c4:	6f ee       	ldi	r22, 0xEF	; 239
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	89 ec       	ldi	r24, 0xC9	; 201
     5ca:	94 e0       	ldi	r25, 0x04	; 4
     5cc:	0e 94 bd 0a 	call	0x157a	; 0x157a <_ZN5Print7printlnEPK19__FlashStringHelper>
     5d0:	4a e0       	ldi	r20, 0x0A	; 10
     5d2:	50 e0       	ldi	r21, 0x00	; 0
     5d4:	b8 01       	movw	r22, r16
     5d6:	89 ec       	ldi	r24, 0xC9	; 201
     5d8:	94 e0       	ldi	r25, 0x04	; 4
     5da:	0e 94 44 0b 	call	0x1688	; 0x1688 <_ZN5Print7printlnEji>
     5de:	4a e4       	ldi	r20, 0x4A	; 74
     5e0:	b7 01       	movw	r22, r14
     5e2:	c5 01       	movw	r24, r10
     5e4:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     5e8:	22 e0       	ldi	r18, 0x02	; 2
     5ea:	4a e4       	ldi	r20, 0x4A	; 74
     5ec:	b5 01       	movw	r22, r10
     5ee:	ce 01       	movw	r24, r28
     5f0:	01 96       	adiw	r24, 0x01	; 1
     5f2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
     5f6:	66 ed       	ldi	r22, 0xD6	; 214
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	af c0       	rjmp	.+350    	; 0x75a <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x286>
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	a9 01       	movw	r20, r18
     602:	6b a5       	ldd	r22, Y+43	; 0x2b
     604:	7c a5       	ldd	r23, Y+44	; 0x2c
     606:	8d a5       	ldd	r24, Y+45	; 0x2d
     608:	9e a5       	ldd	r25, Y+46	; 0x2e
     60a:	0e 94 0d 09 	call	0x121a	; 0x121a <__gesf2>
     60e:	18 16       	cp	r1, r24
     610:	0c f0       	brlt	.+2      	; 0x614 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x140>
     612:	4e c0       	rjmp	.+156    	; 0x6b0 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x1dc>
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	48 e4       	ldi	r20, 0x48	; 72
     61a:	54 e4       	ldi	r21, 0x44	; 68
     61c:	6b a5       	ldd	r22, Y+43	; 0x2b
     61e:	7c a5       	ldd	r23, Y+44	; 0x2c
     620:	8d a5       	ldd	r24, Y+45	; 0x2d
     622:	9e a5       	ldd	r25, Y+46	; 0x2e
     624:	0e 94 12 09 	call	0x1224	; 0x1224 <__mulsf3>
     628:	6b 01       	movw	r12, r22
     62a:	7c 01       	movw	r14, r24
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	a9 01       	movw	r20, r18
     632:	0e 94 0d 09 	call	0x121a	; 0x121a <__gesf2>
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	40 e0       	ldi	r20, 0x00	; 0
     63c:	5f e3       	ldi	r21, 0x3F	; 63
     63e:	87 fd       	sbrc	r24, 7
     640:	05 c0       	rjmp	.+10     	; 0x64c <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x178>
     642:	c7 01       	movw	r24, r14
     644:	b6 01       	movw	r22, r12
     646:	0e 94 6b 07 	call	0xed6	; 0xed6 <__addsf3>
     64a:	04 c0       	rjmp	.+8      	; 0x654 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x180>
     64c:	c7 01       	movw	r24, r14
     64e:	b6 01       	movw	r22, r12
     650:	0e 94 6a 07 	call	0xed4	; 0xed4 <__subsf3>
     654:	0e 94 49 08 	call	0x1092	; 0x1092 <__fixsfsi>
     658:	8b 01       	movw	r16, r22
     65a:	7e 01       	movw	r14, r28
     65c:	f0 e1       	ldi	r31, 0x10	; 16
     65e:	ef 0e       	add	r14, r31
     660:	f1 1c       	adc	r15, r1
     662:	8f e0       	ldi	r24, 0x0F	; 15
     664:	d7 01       	movw	r26, r14
     666:	1d 92       	st	X+, r1
     668:	8a 95       	dec	r24
     66a:	e9 f7       	brne	.-6      	; 0x666 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x192>
     66c:	8a e0       	ldi	r24, 0x0A	; 10
     66e:	8b 8f       	std	Y+27, r24	; 0x1b
     670:	08 8b       	std	Y+16, r16	; 0x10
     672:	19 8b       	std	Y+17, r17	; 0x11
     674:	82 e0       	ldi	r24, 0x02	; 2
     676:	8a 8f       	std	Y+26, r24	; 0x1a
     678:	66 ec       	ldi	r22, 0xC6	; 198
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	89 ec       	ldi	r24, 0xC9	; 201
     67e:	94 e0       	ldi	r25, 0x04	; 4
     680:	0e 94 bd 0a 	call	0x157a	; 0x157a <_ZN5Print7printlnEPK19__FlashStringHelper>
     684:	4a e0       	ldi	r20, 0x0A	; 10
     686:	50 e0       	ldi	r21, 0x00	; 0
     688:	b8 01       	movw	r22, r16
     68a:	89 ec       	ldi	r24, 0xC9	; 201
     68c:	94 e0       	ldi	r25, 0x04	; 4
     68e:	0e 94 44 0b 	call	0x1688	; 0x1688 <_ZN5Print7printlnEji>
     692:	47 e5       	ldi	r20, 0x57	; 87
     694:	b7 01       	movw	r22, r14
     696:	c5 01       	movw	r24, r10
     698:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     69c:	22 e0       	ldi	r18, 0x02	; 2
     69e:	47 e5       	ldi	r20, 0x57	; 87
     6a0:	b5 01       	movw	r22, r10
     6a2:	ce 01       	movw	r24, r28
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
     6aa:	6d ea       	ldi	r22, 0xAD	; 173
     6ac:	70 e0       	ldi	r23, 0x00	; 0
     6ae:	55 c0       	rjmp	.+170    	; 0x75a <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x286>
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	a9 01       	movw	r20, r18
     6b6:	c3 01       	movw	r24, r6
     6b8:	b2 01       	movw	r22, r4
     6ba:	0e 94 0d 09 	call	0x121a	; 0x121a <__gesf2>
     6be:	18 16       	cp	r1, r24
     6c0:	0c f0       	brlt	.+2      	; 0x6c4 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x1f0>
     6c2:	5a c0       	rjmp	.+180    	; 0x778 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x2a4>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	48 e4       	ldi	r20, 0x48	; 72
     6ca:	54 e4       	ldi	r21, 0x44	; 68
     6cc:	c3 01       	movw	r24, r6
     6ce:	b2 01       	movw	r22, r4
     6d0:	0e 94 12 09 	call	0x1224	; 0x1224 <__mulsf3>
     6d4:	6b 01       	movw	r12, r22
     6d6:	7c 01       	movw	r14, r24
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	a9 01       	movw	r20, r18
     6de:	0e 94 0d 09 	call	0x121a	; 0x121a <__gesf2>
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	5f e3       	ldi	r21, 0x3F	; 63
     6ea:	87 fd       	sbrc	r24, 7
     6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x224>
     6ee:	c7 01       	movw	r24, r14
     6f0:	b6 01       	movw	r22, r12
     6f2:	0e 94 6b 07 	call	0xed6	; 0xed6 <__addsf3>
     6f6:	04 c0       	rjmp	.+8      	; 0x700 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x22c>
     6f8:	c7 01       	movw	r24, r14
     6fa:	b6 01       	movw	r22, r12
     6fc:	0e 94 6a 07 	call	0xed4	; 0xed4 <__subsf3>
     700:	0e 94 49 08 	call	0x1092	; 0x1092 <__fixsfsi>
     704:	8b 01       	movw	r16, r22
     706:	7e 01       	movw	r14, r28
     708:	b0 e1       	ldi	r27, 0x10	; 16
     70a:	eb 0e       	add	r14, r27
     70c:	f1 1c       	adc	r15, r1
     70e:	8f e0       	ldi	r24, 0x0F	; 15
     710:	f7 01       	movw	r30, r14
     712:	11 92       	st	Z+, r1
     714:	8a 95       	dec	r24
     716:	e9 f7       	brne	.-6      	; 0x712 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x23e>
     718:	8a e0       	ldi	r24, 0x0A	; 10
     71a:	8b 8f       	std	Y+27, r24	; 0x1b
     71c:	08 8b       	std	Y+16, r16	; 0x10
     71e:	19 8b       	std	Y+17, r17	; 0x11
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	8a 8f       	std	Y+26, r24	; 0x1a
     724:	6d e9       	ldi	r22, 0x9D	; 157
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	89 ec       	ldi	r24, 0xC9	; 201
     72a:	94 e0       	ldi	r25, 0x04	; 4
     72c:	0e 94 bd 0a 	call	0x157a	; 0x157a <_ZN5Print7printlnEPK19__FlashStringHelper>
     730:	4a e0       	ldi	r20, 0x0A	; 10
     732:	50 e0       	ldi	r21, 0x00	; 0
     734:	b8 01       	movw	r22, r16
     736:	89 ec       	ldi	r24, 0xC9	; 201
     738:	94 e0       	ldi	r25, 0x04	; 4
     73a:	0e 94 44 0b 	call	0x1688	; 0x1688 <_ZN5Print7printlnEji>
     73e:	48 e5       	ldi	r20, 0x58	; 88
     740:	b7 01       	movw	r22, r14
     742:	c5 01       	movw	r24, r10
     744:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     748:	22 e0       	ldi	r18, 0x02	; 2
     74a:	48 e5       	ldi	r20, 0x58	; 88
     74c:	b5 01       	movw	r22, r10
     74e:	ce 01       	movw	r24, r28
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
     756:	64 e8       	ldi	r22, 0x84	; 132
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	89 ec       	ldi	r24, 0xC9	; 201
     75c:	94 e0       	ldi	r25, 0x04	; 4
     75e:	0e 94 bd 0a 	call	0x157a	; 0x157a <_ZN5Print7printlnEPK19__FlashStringHelper>
     762:	69 81       	ldd	r22, Y+1	; 0x01
     764:	7a 81       	ldd	r23, Y+2	; 0x02
     766:	4a e0       	ldi	r20, 0x0A	; 10
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	89 ec       	ldi	r24, 0xC9	; 201
     76c:	94 e0       	ldi	r25, 0x04	; 4
     76e:	0e 94 b7 0b 	call	0x176e	; 0x176e <_ZN5Print7printlnEii>
     772:	8a e0       	ldi	r24, 0x0A	; 10
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	00 c0       	rjmp	.+0      	; 0x778 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x2a4>
     778:	ae 96       	adiw	r28, 0x2e	; 46
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	cd bf       	out	0x3d, r28	; 61
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	ff 90       	pop	r15
     78e:	ef 90       	pop	r14
     790:	df 90       	pop	r13
     792:	cf 90       	pop	r12
     794:	bf 90       	pop	r11
     796:	af 90       	pop	r10
     798:	7f 90       	pop	r7
     79a:	6f 90       	pop	r6
     79c:	5f 90       	pop	r5
     79e:	4f 90       	pop	r4
     7a0:	08 95       	ret

000007a2 <_ZN8INA233_S10initializeEv>:
     7a2:	cf 92       	push	r12
     7a4:	df 92       	push	r13
     7a6:	ef 92       	push	r14
     7a8:	ff 92       	push	r15
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	ec 01       	movw	r28, r24
     7b4:	0e 94 27 01 	call	0x24e	; 0x24e <_ZN8INA233_S9resetChipEv>
     7b8:	6b 81       	ldd	r22, Y+3	; 0x03
     7ba:	7c 81       	ldd	r23, Y+4	; 0x04
     7bc:	ce 01       	movw	r24, r28
     7be:	0e 94 2a 02 	call	0x454	; 0x454 <_ZN8INA233_S15setCallibrationEj>
     7c2:	81 30       	cpi	r24, 0x01	; 1
     7c4:	91 05       	cpc	r25, r1
     7c6:	a1 f0       	breq	.+40     	; 0x7f0 <_ZN8INA233_S10initializeEv+0x4e>
     7c8:	ce 01       	movw	r24, r28
     7ca:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8INA233_S10resetAlarmEv>
     7ce:	cd 80       	ldd	r12, Y+5	; 0x05
     7d0:	de 80       	ldd	r13, Y+6	; 0x06
     7d2:	ef 80       	ldd	r14, Y+7	; 0x07
     7d4:	f8 84       	ldd	r15, Y+8	; 0x08
     7d6:	09 85       	ldd	r16, Y+9	; 0x09
     7d8:	1a 85       	ldd	r17, Y+10	; 0x0a
     7da:	2b 85       	ldd	r18, Y+11	; 0x0b
     7dc:	3c 85       	ldd	r19, Y+12	; 0x0c
     7de:	4d 85       	ldd	r20, Y+13	; 0x0d
     7e0:	5e 85       	ldd	r21, Y+14	; 0x0e
     7e2:	6f 85       	ldd	r22, Y+15	; 0x0f
     7e4:	78 89       	ldd	r23, Y+16	; 0x10
     7e6:	ce 01       	movw	r24, r28
     7e8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config>
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	df 90       	pop	r13
     7fe:	cf 90       	pop	r12
     800:	08 95       	ret

00000802 <_ZN8INA233_S10getCurrentEv>:
     802:	cf 92       	push	r12
     804:	df 92       	push	r13
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	2f 97       	sbiw	r28, 0x0f	; 15
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
     822:	7c 01       	movw	r14, r24
     824:	22 e0       	ldi	r18, 0x02	; 2
     826:	49 e8       	ldi	r20, 0x89	; 137
     828:	bc 01       	movw	r22, r24
     82a:	ce 01       	movw	r24, r28
     82c:	01 96       	adiw	r24, 0x01	; 1
     82e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
     832:	09 81       	ldd	r16, Y+1	; 0x01
     834:	1a 81       	ldd	r17, Y+2	; 0x02
     836:	62 ec       	ldi	r22, 0xC2	; 194
     838:	71 e0       	ldi	r23, 0x01	; 1
     83a:	89 ec       	ldi	r24, 0xC9	; 201
     83c:	94 e0       	ldi	r25, 0x04	; 4
     83e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN5Print5printEPKc>
     842:	4a e0       	ldi	r20, 0x0A	; 10
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	b8 01       	movw	r22, r16
     848:	89 ec       	ldi	r24, 0xC9	; 201
     84a:	94 e0       	ldi	r25, 0x04	; 4
     84c:	0e 94 b7 0b 	call	0x176e	; 0x176e <_ZN5Print7printlnEii>
     850:	f7 01       	movw	r30, r14
     852:	61 81       	ldd	r22, Z+1	; 0x01
     854:	72 81       	ldd	r23, Z+2	; 0x02
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__floatunsisf>
     85e:	9b 01       	movw	r18, r22
     860:	ac 01       	movw	r20, r24
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	80 e8       	ldi	r24, 0x80	; 128
     868:	9f e3       	ldi	r25, 0x3F	; 63
     86a:	0e 94 d7 07 	call	0xfae	; 0xfae <__divsf3>
     86e:	6b 01       	movw	r12, r22
     870:	7c 01       	movw	r14, r24
     872:	b8 01       	movw	r22, r16
     874:	11 0f       	add	r17, r17
     876:	88 0b       	sbc	r24, r24
     878:	99 0b       	sbc	r25, r25
     87a:	0e 94 81 08 	call	0x1102	; 0x1102 <__floatsisf>
     87e:	9b 01       	movw	r18, r22
     880:	ac 01       	movw	r20, r24
     882:	c7 01       	movw	r24, r14
     884:	b6 01       	movw	r22, r12
     886:	0e 94 12 09 	call	0x1224	; 0x1224 <__mulsf3>
     88a:	2f 96       	adiw	r28, 0x0f	; 15
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	de bf       	out	0x3e, r29	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	cd bf       	out	0x3d, r28	; 61
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	ff 90       	pop	r15
     8a0:	ef 90       	pop	r14
     8a2:	df 90       	pop	r13
     8a4:	cf 90       	pop	r12
     8a6:	08 95       	ret

000008a8 <_ZN8INA233_S17testCommunicationEv>:
    Serial.println("reset chip");
    transmitCommand(0x12);
}

int INA233_S::testCommunication()
{
     8a8:	af 92       	push	r10
     8aa:	bf 92       	push	r11
     8ac:	df 92       	push	r13
     8ae:	ef 92       	push	r14
     8b0:	ff 92       	push	r15
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
     8be:	66 97       	sbiw	r28, 0x16	; 22
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	f8 94       	cli
     8c4:	de bf       	out	0x3e, r29	; 62
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	cd bf       	out	0x3d, r28	; 61
     8ca:	8c 01       	movw	r16, r24
    Serial.println("test communications");
     8cc:	63 ee       	ldi	r22, 0xE3	; 227
     8ce:	71 e0       	ldi	r23, 0x01	; 1
     8d0:	89 ec       	ldi	r24, 0xC9	; 201
     8d2:	94 e0       	ldi	r25, 0x04	; 4
     8d4:	0e 94 cf 0a 	call	0x159e	; 0x159e <_ZN5Print7printlnEPKc>
    // TO DO ! Read MFR_MODEL, compare if correct.
    // Is there a way in wire.h to check for communications?
    INA233_Data_Package data = receiveData_(0x12, 7);
     8d8:	27 e0       	ldi	r18, 0x07	; 7
     8da:	42 e1       	ldi	r20, 0x12	; 18
     8dc:	b8 01       	movw	r22, r16
     8de:	ce 01       	movw	r24, r28
     8e0:	01 96       	adiw	r24, 0x01	; 1
     8e2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
    uint8_t compare[7]{
        0x06, 0x49, 0x4E, 0x41, 0x32, 0x33, 0x33};
     8e6:	87 e0       	ldi	r24, 0x07	; 7
     8e8:	e1 e2       	ldi	r30, 0x21	; 33
     8ea:	f1 e0       	ldi	r31, 0x01	; 1
     8ec:	de 01       	movw	r26, r28
     8ee:	50 96       	adiw	r26, 0x10	; 16
     8f0:	01 90       	ld	r0, Z+
     8f2:	0d 92       	st	X+, r0
     8f4:	8a 95       	dec	r24
     8f6:	e1 f7       	brne	.-8      	; 0x8f0 <_ZN8INA233_S17testCommunicationEv+0x48>
     8f8:	8e 01       	movw	r16, r28
     8fa:	0f 5f       	subi	r16, 0xFF	; 255
     8fc:	1f 4f       	sbci	r17, 0xFF	; 255
     8fe:	7e 01       	movw	r14, r28
     900:	80 e1       	ldi	r24, 0x10	; 16
     902:	e8 0e       	add	r14, r24
     904:	f1 1c       	adc	r15, r1
     906:	5e 01       	movw	r10, r28
     908:	e8 e0       	ldi	r30, 0x08	; 8
     90a:	ae 0e       	add	r10, r30
     90c:	b1 1c       	adc	r11, r1

    for (int ii = 0; ii <= 6; ii++)
    {
        Serial.print("Readback MFR_MODEL: ");
     90e:	67 ef       	ldi	r22, 0xF7	; 247
     910:	71 e0       	ldi	r23, 0x01	; 1
     912:	89 ec       	ldi	r24, 0xC9	; 201
     914:	94 e0       	ldi	r25, 0x04	; 4
     916:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN5Print5printEPKc>
        Serial.print(data.msg[ii]);
     91a:	f8 01       	movw	r30, r16
     91c:	d1 90       	ld	r13, Z+
     91e:	8f 01       	movw	r16, r30
     920:	4a e0       	ldi	r20, 0x0A	; 10
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	6d 2d       	mov	r22, r13
     926:	89 ec       	ldi	r24, 0xC9	; 201
     928:	94 e0       	ldi	r25, 0x04	; 4
     92a:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN5Print5printEhi>
        if (compare[ii] != data.msg[ii])
     92e:	f7 01       	movw	r30, r14
     930:	81 91       	ld	r24, Z+
     932:	7f 01       	movw	r14, r30
     934:	d8 16       	cp	r13, r24
     936:	49 f0       	breq	.+18     	; 0x94a <__stack+0x4b>
        {
            Serial.println("Communication error");
     938:	6c e0       	ldi	r22, 0x0C	; 12
     93a:	72 e0       	ldi	r23, 0x02	; 2
     93c:	89 ec       	ldi	r24, 0xC9	; 201
     93e:	94 e0       	ldi	r25, 0x04	; 4
     940:	0e 94 cf 0a 	call	0x159e	; 0x159e <_ZN5Print7printlnEPKc>
			return 1;
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	05 c0       	rjmp	.+10     	; 0x954 <__stack+0x55>
    // Is there a way in wire.h to check for communications?
    INA233_Data_Package data = receiveData_(0x12, 7);
    uint8_t compare[7]{
        0x06, 0x49, 0x4E, 0x41, 0x32, 0x33, 0x33};

    for (int ii = 0; ii <= 6; ii++)
     94a:	0a 15       	cp	r16, r10
     94c:	1b 05       	cpc	r17, r11
     94e:	f9 f6       	brne	.-66     	; 0x90e <__stack+0xf>
            Serial.println("Communication error");
			return 1;
        }
    }
	
	return 0;
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
}
     954:	66 96       	adiw	r28, 0x16	; 22
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	f8 94       	cli
     95a:	de bf       	out	0x3e, r29	; 62
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	cd bf       	out	0x3d, r28	; 61
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	1f 91       	pop	r17
     966:	0f 91       	pop	r16
     968:	ff 90       	pop	r15
     96a:	ef 90       	pop	r14
     96c:	df 90       	pop	r13
     96e:	bf 90       	pop	r11
     970:	af 90       	pop	r10
     972:	08 95       	ret

00000974 <_ZZ5setupENUlvE_4_FUNEv>:
	Serial.print (settings.ramUsage());
	Serial.println (" bytes");
	
	
	// ___________________________ CAN BEGIN ______________________________//
	const uint32_t errorCode = can.begin (settings, [] { can.isr(); });
     974:	85 e7       	ldi	r24, 0x75	; 117
     976:	94 e0       	ldi	r25, 0x04	; 4
     978:	0c 94 8e 13 	jmp	0x271c	; 0x271c <_ZN10ACAN2517FD3isrEv>

0000097c <_ZN12CANFDMessageC1Ev>:

//·············································································
//   Constructors
//·············································································

  public : CANFDMessage (void) :
     97c:	fc 01       	movw	r30, r24
  id (0),  // Frame identifier
  ext (false), // false -> base frame, true -> extended frame
  type (CANFD_WITH_BIT_RATE_SWITCH),
  idx (0),  // This field is used by the driver
  len (0), // Length of data (0 ... 64)
  data () {
     97e:	10 82       	st	Z, r1
     980:	11 82       	std	Z+1, r1	; 0x01
     982:	12 82       	std	Z+2, r1	; 0x02
     984:	13 82       	std	Z+3, r1	; 0x03
     986:	14 82       	std	Z+4, r1	; 0x04
     988:	83 e0       	ldi	r24, 0x03	; 3
     98a:	85 83       	std	Z+5, r24	; 0x05
     98c:	16 82       	std	Z+6, r1	; 0x06
     98e:	17 82       	std	Z+7, r1	; 0x07
     990:	df 01       	movw	r26, r30
     992:	18 96       	adiw	r26, 0x08	; 8
     994:	e8 5b       	subi	r30, 0xB8	; 184
     996:	ff 4f       	sbci	r31, 0xFF	; 255
     998:	1d 92       	st	X+, r1
     99a:	ae 17       	cp	r26, r30
     99c:	bf 07       	cpc	r27, r31
     99e:	e1 f7       	brne	.-8      	; 0x998 <_ZN12CANFDMessageC1Ev+0x1c>
  }
     9a0:	08 95       	ret

000009a2 <setup>:

void blink_light();
uint8_t STATE = HIGH;
unsigned long blink_time = 0, blink_interval = 500;

void setup() {	
     9a2:	cf 92       	push	r12
     9a4:	df 92       	push	r13
     9a6:	ef 92       	push	r14
     9a8:	ff 92       	push	r15
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
     9b6:	a8 97       	sbiw	r28, 0x28	; 40
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	f8 94       	cli
     9bc:	de bf       	out	0x3e, r29	; 62
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	cd bf       	out	0x3d, r28	; 61
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
     9c2:	9d e0       	ldi	r25, 0x0D	; 13
     9c4:	88 e1       	ldi	r24, 0x18	; 24
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	f8 94       	cli
     9ca:	a8 95       	wdr
     9cc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
	wdt_enable(WDTO_500MS);
	
	Wire.begin();
     9d6:	84 e7       	ldi	r24, 0x74	; 116
     9d8:	95 e0       	ldi	r25, 0x05	; 5
     9da:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <_ZN7TwoWire5beginEv>
	Wire.setClock(10000);
     9de:	40 e1       	ldi	r20, 0x10	; 16
     9e0:	57 e2       	ldi	r21, 0x27	; 39
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	84 e7       	ldi	r24, 0x74	; 116
     9e8:	95 e0       	ldi	r25, 0x05	; 5
     9ea:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <_ZN7TwoWire8setClockEm>
     9ee:	0d e0       	ldi	r16, 0x0D	; 13
     9f0:	11 e0       	ldi	r17, 0x01	; 1
     9f2:	9b e1       	ldi	r25, 0x1B	; 27
     9f4:	c9 2e       	mov	r12, r25
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	d9 2e       	mov	r13, r25
     9fa:	78 01       	movw	r14, r16
	//Serial.begin(9600);
	
	// Setup for each INA233 sensor
	for (uint8_t ii = 0; ii < 7; ii++){
		SensorList[ii]->initialize();
     9fc:	f7 01       	movw	r30, r14
     9fe:	81 91       	ld	r24, Z+
     a00:	91 91       	ld	r25, Z+
     a02:	7f 01       	movw	r14, r30
     a04:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <_ZN8INA233_S10initializeEv>
	Wire.begin();
	Wire.setClock(10000);
	//Serial.begin(9600);
	
	// Setup for each INA233 sensor
	for (uint8_t ii = 0; ii < 7; ii++){
     a08:	ce 14       	cp	r12, r14
     a0a:	df 04       	cpc	r13, r15
     a0c:	b9 f7       	brne	.-18     	; 0x9fc <setup+0x5a>
		SensorList[ii]->initialize();
	}

	for (uint8_t ii = 0; ii < 7; ii++){
		SensorList[ii]->setADC_Settings(default_address);
     a0e:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <default_address>
     a12:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <default_address+0x1>
     a16:	f8 01       	movw	r30, r16
     a18:	81 91       	ld	r24, Z+
     a1a:	91 91       	ld	r25, Z+
     a1c:	8f 01       	movw	r16, r30
     a1e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_ZN8INA233_S15setADC_SettingsEj>
	// Setup for each INA233 sensor
	for (uint8_t ii = 0; ii < 7; ii++){
		SensorList[ii]->initialize();
	}

	for (uint8_t ii = 0; ii < 7; ii++){
     a22:	c0 16       	cp	r12, r16
     a24:	d1 06       	cpc	r13, r17
     a26:	99 f7       	brne	.-26     	; 0xa0e <setup+0x6c>
		SensorList[ii]->setADC_Settings(default_address);
	}
	
		
	// ___________________________ START SPI ______________________________//
	SPI.begin () ;
     a28:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <_ZN8SPIClass5beginEv>
		// For version >= 2.1.0
	ACAN2517FDSettings settings (ACAN2517FDSettings::OSC_20MHz, 500UL * 1000UL, DataBitRateFactor::x8);
     a2c:	88 ee       	ldi	r24, 0xE8	; 232
     a2e:	c8 2e       	mov	r12, r24
     a30:	83 e0       	ldi	r24, 0x03	; 3
     a32:	d8 2e       	mov	r13, r24
     a34:	e1 2c       	mov	r14, r1
     a36:	f1 2c       	mov	r15, r1
     a38:	08 e0       	ldi	r16, 0x08	; 8
     a3a:	20 e2       	ldi	r18, 0x20	; 32
     a3c:	31 ea       	ldi	r19, 0xA1	; 161
     a3e:	47 e0       	ldi	r20, 0x07	; 7
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	64 e0       	ldi	r22, 0x04	; 4
     a44:	ce 01       	movw	r24, r28
     a46:	01 96       	adiw	r24, 0x01	; 1
     a48:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm>
		/* For version < 2.1.0
			ACAN2517FDSettings settings (ACAN2517FDSettings::OSC_20MHz, 125UL * 1000UL, ACAN2517FDSettings::DATA_BITRATE_x8);*/
	settings.mRequestedMode = ACAN2517FDSettings::NormalFD;
     a4c:	1a 8e       	std	Y+26, r1	; 0x1a
	
	// Default values are too high for an Arduino Uno that contains 2048 bytes of RAM: reduce them
	settings.mDriverTransmitFIFOSize = 1;
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	9c 8f       	std	Y+28, r25	; 0x1c
     a54:	8b 8f       	std	Y+27, r24	; 0x1b
	settings.mDriverReceiveFIFOSize = 1;
     a56:	9e a3       	std	Y+38, r25	; 0x26
     a58:	8d a3       	std	Y+37, r24	; 0x25
	
	
	// ___________________________ RAM USAGE ______________________________//
	Serial.print ("MCP2517FD RAM Usage: ");
     a5a:	60 e2       	ldi	r22, 0x20	; 32
     a5c:	72 e0       	ldi	r23, 0x02	; 2
     a5e:	89 ec       	ldi	r24, 0xC9	; 201
     a60:	94 e0       	ldi	r25, 0x04	; 4
     a62:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN5Print5printEPKc>
	Serial.print (settings.ramUsage());
     a66:	ce 01       	movw	r24, r28
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <_ZNK18ACAN2517FDSettings8ramUsageEv>
     a6e:	ab 01       	movw	r20, r22
     a70:	bc 01       	movw	r22, r24
     a72:	2a e0       	ldi	r18, 0x0A	; 10
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	89 ec       	ldi	r24, 0xC9	; 201
     a78:	94 e0       	ldi	r25, 0x04	; 4
     a7a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <_ZN5Print5printEmi>
	Serial.println (" bytes");
     a7e:	66 e3       	ldi	r22, 0x36	; 54
     a80:	72 e0       	ldi	r23, 0x02	; 2
     a82:	89 ec       	ldi	r24, 0xC9	; 201
     a84:	94 e0       	ldi	r25, 0x04	; 4
     a86:	0e 94 cf 0a 	call	0x159e	; 0x159e <_ZN5Print7printlnEPKc>
	
	
	// ___________________________ CAN BEGIN ______________________________//
	const uint32_t errorCode = can.begin (settings, [] { can.isr(); });
     a8a:	4a eb       	ldi	r20, 0xBA	; 186
     a8c:	54 e0       	ldi	r21, 0x04	; 4
     a8e:	be 01       	movw	r22, r28
     a90:	6f 5f       	subi	r22, 0xFF	; 255
     a92:	7f 4f       	sbci	r23, 0xFF	; 255
     a94:	85 e7       	ldi	r24, 0x75	; 117
     a96:	94 e0       	ldi	r25, 0x04	; 4
     a98:	0e 94 1a 18 	call	0x3034	; 0x3034 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvE>
     a9c:	6b 01       	movw	r12, r22
     a9e:	7c 01       	movw	r14, r24
	if (errorCode != 0) {
     aa0:	67 2b       	or	r22, r23
     aa2:	68 2b       	or	r22, r24
     aa4:	69 2b       	or	r22, r25
     aa6:	71 f0       	breq	.+28     	; 0xac4 <setup+0x122>
		Serial.print ("Configuration error 0x");
     aa8:	6d e3       	ldi	r22, 0x3D	; 61
     aaa:	72 e0       	ldi	r23, 0x02	; 2
     aac:	89 ec       	ldi	r24, 0xC9	; 201
     aae:	94 e0       	ldi	r25, 0x04	; 4
     ab0:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN5Print5printEPKc>
		Serial.println (errorCode, HEX);
     ab4:	20 e1       	ldi	r18, 0x10	; 16
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	b7 01       	movw	r22, r14
     aba:	a6 01       	movw	r20, r12
     abc:	89 ec       	ldi	r24, 0xC9	; 201
     abe:	94 e0       	ldi	r25, 0x04	; 4
     ac0:	0e 94 56 0b 	call	0x16ac	; 0x16ac <_ZN5Print7printlnEmi>
     ac4:	e5 e3       	ldi	r30, 0x35	; 53
     ac6:	f4 e0       	ldi	r31, 0x04	; 4

void setup() {	
	wdt_enable(WDTO_500MS);
	
	Wire.begin();
	Wire.setClock(10000);
     ac8:	80 e0       	ldi	r24, 0x00	; 0
		Serial.print ("Configuration error 0x");
		Serial.println (errorCode, HEX);
	}
	
	for (int ii = 0; ii < 64; ii++){
		frame_FD.data[ii] = ii;
     aca:	81 93       	st	Z+, r24
     acc:	8f 5f       	subi	r24, 0xFF	; 255
	if (errorCode != 0) {
		Serial.print ("Configuration error 0x");
		Serial.println (errorCode, HEX);
	}
	
	for (int ii = 0; ii < 64; ii++){
     ace:	80 34       	cpi	r24, 0x40	; 64
     ad0:	e1 f7       	brne	.-8      	; 0xaca <setup+0x128>
     ad2:	ed ee       	ldi	r30, 0xED	; 237
     ad4:	f3 e0       	ldi	r31, 0x03	; 3
     ad6:	80 e0       	ldi	r24, 0x00	; 0
		frame_FD.data[ii] = ii;
	}
	for (int ii = 0; ii < 8; ii++){
		frame.data[ii] = ii;
     ad8:	81 93       	st	Z+, r24
     ada:	8f 5f       	subi	r24, 0xFF	; 255
	}
	
	for (int ii = 0; ii < 64; ii++){
		frame_FD.data[ii] = ii;
	}
	for (int ii = 0; ii < 8; ii++){
     adc:	88 30       	cpi	r24, 0x08	; 8
     ade:	e1 f7       	brne	.-8      	; 0xad8 <setup+0x136>
		frame.data[ii] = ii;
	}
	frame.len = 8;
     ae0:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <frame+0x7>
	frame_FD.len = 64; // Valid lengths are: 0, 1, ..., 8, 12, 16, 20, 24, 32, 48, 64
     ae4:	80 e4       	ldi	r24, 0x40	; 64
     ae6:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <frame_FD+0x7>
	frame.type = CANFDMessage::CAN_DATA;
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <frame+0x5>
	frame_FD.type = CANFDMessage::CANFD_WITH_BIT_RATE_SWITCH;
     af0:	83 e0       	ldi	r24, 0x03	; 3
     af2:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <frame_FD+0x5>
	
	frame.id = 0x500;
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	95 e0       	ldi	r25, 0x05	; 5
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <frame>
     b02:	90 93 e6 03 	sts	0x03E6, r25	; 0x8003e6 <frame+0x1>
     b06:	a0 93 e7 03 	sts	0x03E7, r26	; 0x8003e7 <frame+0x2>
     b0a:	b0 93 e8 03 	sts	0x03E8, r27	; 0x8003e8 <frame+0x3>
	frame_FD.id = 0x501;
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	95 e0       	ldi	r25, 0x05	; 5
     b12:	a0 e0       	ldi	r26, 0x00	; 0
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <frame_FD>
     b1a:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <frame_FD+0x1>
     b1e:	a0 93 2f 04 	sts	0x042F, r26	; 0x80042f <frame_FD+0x2>
     b22:	b0 93 30 04 	sts	0x0430, r27	; 0x800430 <frame_FD+0x3>
}
     b26:	a8 96       	adiw	r28, 0x28	; 40
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	cd bf       	out	0x3d, r28	; 61
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	df 90       	pop	r13
     b40:	cf 90       	pop	r12
     b42:	08 95       	ret

00000b44 <_Z29check_INA233_miscommunicationv>:
	//p2.close_MOSFET();
	
	wdt_reset();	
}

void check_INA233_miscommunication(){
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
	
	if((millis() - timeStamps[0]) > interval_INA233_checking){
     b4c:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <millis>
     b50:	00 91 bd 03 	lds	r16, 0x03BD	; 0x8003bd <timeStamps>
     b54:	10 91 be 03 	lds	r17, 0x03BE	; 0x8003be <timeStamps+0x1>
     b58:	20 91 bf 03 	lds	r18, 0x03BF	; 0x8003bf <timeStamps+0x2>
     b5c:	30 91 c0 03 	lds	r19, 0x03C0	; 0x8003c0 <timeStamps+0x3>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	80 1b       	sub	r24, r16
     b66:	91 0b       	sbc	r25, r17
     b68:	a2 0b       	sbc	r26, r18
     b6a:	b3 0b       	sbc	r27, r19
     b6c:	81 31       	cpi	r24, 0x11	; 17
     b6e:	97 42       	sbci	r25, 0x27	; 39
     b70:	a1 05       	cpc	r26, r1
     b72:	b1 05       	cpc	r27, r1
     b74:	08 f1       	brcs	.+66     	; 0xbb8 <_Z29check_INA233_miscommunicationv+0x74>
     b76:	cd e0       	ldi	r28, 0x0D	; 13
     b78:	d1 e0       	ldi	r29, 0x01	; 1
     b7a:	0b e0       	ldi	r16, 0x0B	; 11
     b7c:	11 e0       	ldi	r17, 0x01	; 1
		
		for (uint8_t ii = 0; ii < 7; ii++){
			// If communication is not responding properly, open mosfet
			if(SensorList[ii]->testCommunication() == 1){
     b7e:	89 91       	ld	r24, Y+
     b80:	99 91       	ld	r25, Y+
     b82:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_ZN8INA233_S17testCommunicationEv>
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	39 f4       	brne	.+14     	; 0xb98 <_Z29check_INA233_miscommunicationv+0x54>
		digitalWrite(MOSpin_, HIGH);
	}
	
	// Break circuit
	void open_MOSFET(){
		digitalWrite(MOSpin_, LOW);
     b8a:	d8 01       	movw	r26, r16
     b8c:	ed 91       	ld	r30, X+
     b8e:	fc 91       	ld	r31, X
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <digitalWrite>
     b98:	0e 5f       	subi	r16, 0xFE	; 254
     b9a:	1f 4f       	sbci	r17, 0xFF	; 255

void check_INA233_miscommunication(){
	
	if((millis() - timeStamps[0]) > interval_INA233_checking){
		
		for (uint8_t ii = 0; ii < 7; ii++){
     b9c:	b1 e0       	ldi	r27, 0x01	; 1
     b9e:	cb 31       	cpi	r28, 0x1B	; 27
     ba0:	db 07       	cpc	r29, r27
     ba2:	69 f7       	brne	.-38     	; 0xb7e <_Z29check_INA233_miscommunicationv+0x3a>
			if(SensorList[ii]->testCommunication() == 1){
				MosfetList[ii]->open_MOSFET();
			}
		}		
		
		timeStamps[0] = millis();
     ba4:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <millis>
     ba8:	60 93 bd 03 	sts	0x03BD, r22	; 0x8003bd <timeStamps>
     bac:	70 93 be 03 	sts	0x03BE, r23	; 0x8003be <timeStamps+0x1>
     bb0:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <timeStamps+0x2>
     bb4:	90 93 c0 03 	sts	0x03C0, r25	; 0x8003c0 <timeStamps+0x3>
	}
}
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	08 95       	ret

00000bc2 <_Z11blink_lightv>:

void blink_light(){
     bc2:	0f 93       	push	r16
     bc4:	1f 93       	push	r17
	if (millis() - blink_time > blink_interval){
     bc6:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <millis>
     bca:	00 91 d8 02 	lds	r16, 0x02D8	; 0x8002d8 <__data_end>
     bce:	10 91 d9 02 	lds	r17, 0x02D9	; 0x8002d9 <__data_end+0x1>
     bd2:	20 91 da 02 	lds	r18, 0x02DA	; 0x8002da <__data_end+0x2>
     bd6:	30 91 db 02 	lds	r19, 0x02DB	; 0x8002db <__data_end+0x3>
     bda:	dc 01       	movw	r26, r24
     bdc:	cb 01       	movw	r24, r22
     bde:	80 1b       	sub	r24, r16
     be0:	91 0b       	sbc	r25, r17
     be2:	a2 0b       	sbc	r26, r18
     be4:	b3 0b       	sbc	r27, r19
     be6:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <blink_interval>
     bea:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <blink_interval+0x1>
     bee:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <blink_interval+0x2>
     bf2:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <blink_interval+0x3>
     bf6:	08 17       	cp	r16, r24
     bf8:	19 07       	cpc	r17, r25
     bfa:	2a 07       	cpc	r18, r26
     bfc:	3b 07       	cpc	r19, r27
     bfe:	a0 f4       	brcc	.+40     	; 0xc28 <_Z11blink_lightv+0x66>
		STATE = !STATE;
     c00:	61 e0       	ldi	r22, 0x01	; 1
     c02:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <STATE>
     c06:	81 11       	cpse	r24, r1
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <STATE>
		digitalWrite(10, STATE);
     c0e:	8a e0       	ldi	r24, 0x0A	; 10
     c10:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <digitalWrite>
		//p1.close_MOSFET();
		
		blink_time = millis();
     c14:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <millis>
     c18:	60 93 d8 02 	sts	0x02D8, r22	; 0x8002d8 <__data_end>
     c1c:	70 93 d9 02 	sts	0x02D9, r23	; 0x8002d9 <__data_end+0x1>
     c20:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <__data_end+0x2>
     c24:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <__data_end+0x3>
	}
}
     c28:	1f 91       	pop	r17
     c2a:	0f 91       	pop	r16
     c2c:	08 95       	ret

00000c2e <loop>:
		digitalWrite(MOSpin_, HIGH);
	}
	
	// Break circuit
	void open_MOSFET(){
		digitalWrite(MOSpin_, LOW);
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <p1>
     c34:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <digitalWrite>
	// Let power through MOSFET nr 1
	p1.open_MOSFET();
	
	
	// Make sure communication with INA233 still works, if not then open mosfet
	check_INA233_miscommunication();
     c38:	0e 94 a2 05 	call	0xb44	; 0xb44 <_Z29check_INA233_miscommunicationv>
	
	float current_1 = Sensor_1.getCurrent();
     c3c:	8d e9       	ldi	r24, 0x9D	; 157
     c3e:	93 e0       	ldi	r25, 0x03	; 3
     c40:	0e 94 01 04 	call	0x802	; 0x802 <_ZN8INA233_S10getCurrentEv>
     c44:	ab 01       	movw	r20, r22
     c46:	bc 01       	movw	r22, r24
	int test = 1;
	
	Serial.println(current_1);
     c48:	22 e0       	ldi	r18, 0x02	; 2
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	89 ec       	ldi	r24, 0xC9	; 201
     c4e:	94 e0       	ldi	r25, 0x04	; 4
     c50:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_ZN5Print7printlnEdi>
	
	if (can.available ()) {
     c54:	85 e7       	ldi	r24, 0x75	; 117
     c56:	94 e0       	ldi	r25, 0x04	; 4
     c58:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <_ZN10ACAN2517FD9availableEv>
     c5c:	88 23       	and	r24, r24
     c5e:	e1 f0       	breq	.+56     	; 0xc98 <loop+0x6a>
		can.receive (frame);
     c60:	65 ee       	ldi	r22, 0xE5	; 229
     c62:	73 e0       	ldi	r23, 0x03	; 3
     c64:	85 e7       	ldi	r24, 0x75	; 117
     c66:	94 e0       	ldi	r25, 0x04	; 4
     c68:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <_ZN10ACAN2517FD7receiveER12CANFDMessage>
		Serial.print ("Received: ");
     c6c:	64 e5       	ldi	r22, 0x54	; 84
     c6e:	72 e0       	ldi	r23, 0x02	; 2
     c70:	89 ec       	ldi	r24, 0xC9	; 201
     c72:	94 e0       	ldi	r25, 0x04	; 4
     c74:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN5Print5printEPKc>
		
		if (frame.data[0] == 0x01){
     c78:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <frame+0x8>
     c7c:	81 30       	cpi	r24, 0x01	; 1
     c7e:	21 f4       	brne	.+8      	; 0xc88 <loop+0x5a>
			digitalWrite(9, HIGH);
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	89 e0       	ldi	r24, 0x09	; 9
     c84:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <digitalWrite>
		}

		if (frame.data[0] == 0x02){
     c88:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <frame+0x8>
     c8c:	82 30       	cpi	r24, 0x02	; 2
     c8e:	21 f4       	brne	.+8      	; 0xc98 <loop+0x6a>
			digitalWrite(9, LOW); 
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	89 e0       	ldi	r24, 0x09	; 9
     c94:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <digitalWrite>
		}
		
	}
	blink_light();
     c98:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <_Z11blink_lightv>
	//p2.close_MOSFET();
	
	wdt_reset();	
     c9c:	a8 95       	wdr
     c9e:	08 95       	ret

00000ca0 <_GLOBAL__sub_I_can>:
};

struct INA233_Alarm_Config
{
  float overCurrent = 0, overVoltage = 0, underVoltage = 0;
  INA233_Alarm_Config(float oc, float ov, float uv) : overCurrent(oc), overVoltage(ov), underVoltage(uv) {}  
     ca0:	ed eb       	ldi	r30, 0xBD	; 189
     ca2:	f4 e0       	ldi	r31, 0x04	; 4
     ca4:	40 e0       	ldi	r20, 0x00	; 0
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	70 e4       	ldi	r23, 0x40	; 64
     cac:	40 83       	st	Z, r20
     cae:	51 83       	std	Z+1, r21	; 0x01
     cb0:	62 83       	std	Z+2, r22	; 0x02
     cb2:	73 83       	std	Z+3, r23	; 0x03
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e5       	ldi	r26, 0x50	; 80
     cba:	b1 e4       	ldi	r27, 0x41	; 65
     cbc:	84 83       	std	Z+4, r24	; 0x04
     cbe:	95 83       	std	Z+5, r25	; 0x05
     cc0:	a6 83       	std	Z+6, r26	; 0x06
     cc2:	b7 83       	std	Z+7, r27	; 0x07
     cc4:	10 86       	std	Z+8, r1	; 0x08
     cc6:	11 86       	std	Z+9, r1	; 0x09
     cc8:	12 86       	std	Z+10, r1	; 0x0a
     cca:	13 86       	std	Z+11, r1	; 0x0b
     ccc:	e1 eb       	ldi	r30, 0xB1	; 177
     cce:	f4 e0       	ldi	r31, 0x04	; 4
     cd0:	40 83       	st	Z, r20
     cd2:	51 83       	std	Z+1, r21	; 0x01
     cd4:	62 83       	std	Z+2, r22	; 0x02
     cd6:	73 83       	std	Z+3, r23	; 0x03
     cd8:	84 83       	std	Z+4, r24	; 0x04
     cda:	95 83       	std	Z+5, r25	; 0x05
     cdc:	a6 83       	std	Z+6, r26	; 0x06
     cde:	b7 83       	std	Z+7, r27	; 0x07
     ce0:	10 86       	std	Z+8, r1	; 0x08
     ce2:	11 86       	std	Z+9, r1	; 0x09
     ce4:	12 86       	std	Z+10, r1	; 0x0a
     ce6:	13 86       	std	Z+11, r1	; 0x0b

// ___________________________ CANBUS SETTINGS ______________________________//
static const byte MCP2517_CS  = 7 ; // CS input of MCP2517
static const byte MCP2517_INT =  2 ; // INT output of MCP2517

ACAN2517FD can (MCP2517_CS, SPI, MCP2517_INT);
     ce8:	22 e0       	ldi	r18, 0x02	; 2
     cea:	43 e7       	ldi	r20, 0x73	; 115
     cec:	55 e0       	ldi	r21, 0x05	; 5
     cee:	67 e0       	ldi	r22, 0x07	; 7
     cf0:	85 e7       	ldi	r24, 0x75	; 117
     cf2:	94 e0       	ldi	r25, 0x04	; 4
     cf4:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <_ZN10ACAN2517FDC1EhR8SPIClassh>
	CANFDMessage frame_FD, frame;
     cf8:	8d e2       	ldi	r24, 0x2D	; 45
     cfa:	94 e0       	ldi	r25, 0x04	; 4
     cfc:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN12CANFDMessageC1Ev>
     d00:	85 ee       	ldi	r24, 0xE5	; 229
     d02:	93 e0       	ldi	r25, 0x03	; 3
     d04:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN12CANFDMessageC1Ev>
uint16_t default_address = 0b0100011100100111;
unsigned long timeStamps[10] = {0};


// creating each INA233 sensor object
INA233_S Sensor_1(adrSensor1, m_valueSensor1, cal_valueSensor1, alarmConfigSensor1), 
     d08:	8d b7       	in	r24, 0x3d	; 61
     d0a:	9e b7       	in	r25, 0x3e	; 62
     d0c:	0c 97       	sbiw	r24, 0x0c	; 12
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	9e bf       	out	0x3e, r25	; 62
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	8d bf       	out	0x3d, r24	; 61
     d18:	ad b7       	in	r26, 0x3d	; 61
     d1a:	be b7       	in	r27, 0x3e	; 62
     d1c:	11 96       	adiw	r26, 0x01	; 1
     d1e:	8c e0       	ldi	r24, 0x0C	; 12
     d20:	ed eb       	ldi	r30, 0xBD	; 189
     d22:	f4 e0       	ldi	r31, 0x04	; 4
     d24:	01 90       	ld	r0, Z+
     d26:	0d 92       	st	X+, r0
     d28:	8a 95       	dec	r24
     d2a:	e1 f7       	brne	.-8      	; 0xd24 <_GLOBAL__sub_I_can+0x84>
     d2c:	23 e3       	ldi	r18, 0x33	; 51
     d2e:	38 e0       	ldi	r19, 0x08	; 8
     d30:	44 e3       	ldi	r20, 0x34	; 52
     d32:	53 e0       	ldi	r21, 0x03	; 3
     d34:	60 e4       	ldi	r22, 0x40	; 64
     d36:	8d e9       	ldi	r24, 0x9D	; 157
     d38:	93 e0       	ldi	r25, 0x03	; 3
     d3a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_2(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     d3e:	8d b7       	in	r24, 0x3d	; 61
     d40:	9e b7       	in	r25, 0x3e	; 62
     d42:	0c 97       	sbiw	r24, 0x0c	; 12
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	9e bf       	out	0x3e, r25	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	8d bf       	out	0x3d, r24	; 61
     d4e:	ad b7       	in	r26, 0x3d	; 61
     d50:	be b7       	in	r27, 0x3e	; 62
     d52:	11 96       	adiw	r26, 0x01	; 1
     d54:	8c e0       	ldi	r24, 0x0C	; 12
     d56:	e1 eb       	ldi	r30, 0xB1	; 177
     d58:	f4 e0       	ldi	r31, 0x04	; 4
     d5a:	01 90       	ld	r0, Z+
     d5c:	0d 92       	st	X+, r0
     d5e:	8a 95       	dec	r24
     d60:	e1 f7       	brne	.-8      	; 0xd5a <_GLOBAL__sub_I_can+0xba>
     d62:	23 e3       	ldi	r18, 0x33	; 51
     d64:	38 e0       	ldi	r19, 0x08	; 8
     d66:	44 e3       	ldi	r20, 0x34	; 52
     d68:	53 e0       	ldi	r21, 0x03	; 3
     d6a:	61 e4       	ldi	r22, 0x41	; 65
     d6c:	8d e7       	ldi	r24, 0x7D	; 125
     d6e:	93 e0       	ldi	r25, 0x03	; 3
     d70:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_3(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     d74:	8d b7       	in	r24, 0x3d	; 61
     d76:	9e b7       	in	r25, 0x3e	; 62
     d78:	0c 97       	sbiw	r24, 0x0c	; 12
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	9e bf       	out	0x3e, r25	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	8d bf       	out	0x3d, r24	; 61
     d84:	ad b7       	in	r26, 0x3d	; 61
     d86:	be b7       	in	r27, 0x3e	; 62
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	8c e0       	ldi	r24, 0x0C	; 12
     d8c:	e1 eb       	ldi	r30, 0xB1	; 177
     d8e:	f4 e0       	ldi	r31, 0x04	; 4
     d90:	01 90       	ld	r0, Z+
     d92:	0d 92       	st	X+, r0
     d94:	8a 95       	dec	r24
     d96:	e1 f7       	brne	.-8      	; 0xd90 <_GLOBAL__sub_I_can+0xf0>
     d98:	23 e3       	ldi	r18, 0x33	; 51
     d9a:	38 e0       	ldi	r19, 0x08	; 8
     d9c:	44 e3       	ldi	r20, 0x34	; 52
     d9e:	53 e0       	ldi	r21, 0x03	; 3
     da0:	61 e4       	ldi	r22, 0x41	; 65
     da2:	8d e5       	ldi	r24, 0x5D	; 93
     da4:	93 e0       	ldi	r25, 0x03	; 3
     da6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_4(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     daa:	8d b7       	in	r24, 0x3d	; 61
     dac:	9e b7       	in	r25, 0x3e	; 62
     dae:	84 96       	adiw	r24, 0x24	; 36
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	9e bf       	out	0x3e, r25	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	8d bf       	out	0x3d, r24	; 61
     dba:	0c 97       	sbiw	r24, 0x0c	; 12
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	9e bf       	out	0x3e, r25	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	8d bf       	out	0x3d, r24	; 61
     dc6:	ad b7       	in	r26, 0x3d	; 61
     dc8:	be b7       	in	r27, 0x3e	; 62
     dca:	11 96       	adiw	r26, 0x01	; 1
     dcc:	8c e0       	ldi	r24, 0x0C	; 12
     dce:	e1 eb       	ldi	r30, 0xB1	; 177
     dd0:	f4 e0       	ldi	r31, 0x04	; 4
     dd2:	01 90       	ld	r0, Z+
     dd4:	0d 92       	st	X+, r0
     dd6:	8a 95       	dec	r24
     dd8:	e1 f7       	brne	.-8      	; 0xdd2 <_GLOBAL__sub_I_can+0x132>
     dda:	23 e3       	ldi	r18, 0x33	; 51
     ddc:	38 e0       	ldi	r19, 0x08	; 8
     dde:	44 e3       	ldi	r20, 0x34	; 52
     de0:	53 e0       	ldi	r21, 0x03	; 3
     de2:	61 e4       	ldi	r22, 0x41	; 65
     de4:	8d e3       	ldi	r24, 0x3D	; 61
     de6:	93 e0       	ldi	r25, 0x03	; 3
     de8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_5(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     dec:	8d b7       	in	r24, 0x3d	; 61
     dee:	9e b7       	in	r25, 0x3e	; 62
     df0:	0c 97       	sbiw	r24, 0x0c	; 12
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	9e bf       	out	0x3e, r25	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	8d bf       	out	0x3d, r24	; 61
     dfc:	ad b7       	in	r26, 0x3d	; 61
     dfe:	be b7       	in	r27, 0x3e	; 62
     e00:	11 96       	adiw	r26, 0x01	; 1
     e02:	8c e0       	ldi	r24, 0x0C	; 12
     e04:	e1 eb       	ldi	r30, 0xB1	; 177
     e06:	f4 e0       	ldi	r31, 0x04	; 4
     e08:	01 90       	ld	r0, Z+
     e0a:	0d 92       	st	X+, r0
     e0c:	8a 95       	dec	r24
     e0e:	e1 f7       	brne	.-8      	; 0xe08 <_GLOBAL__sub_I_can+0x168>
     e10:	23 e3       	ldi	r18, 0x33	; 51
     e12:	38 e0       	ldi	r19, 0x08	; 8
     e14:	44 e3       	ldi	r20, 0x34	; 52
     e16:	53 e0       	ldi	r21, 0x03	; 3
     e18:	61 e4       	ldi	r22, 0x41	; 65
     e1a:	8d e1       	ldi	r24, 0x1D	; 29
     e1c:	93 e0       	ldi	r25, 0x03	; 3
     e1e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_6(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     e22:	8d b7       	in	r24, 0x3d	; 61
     e24:	9e b7       	in	r25, 0x3e	; 62
     e26:	0c 97       	sbiw	r24, 0x0c	; 12
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	9e bf       	out	0x3e, r25	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	8d bf       	out	0x3d, r24	; 61
     e32:	ad b7       	in	r26, 0x3d	; 61
     e34:	be b7       	in	r27, 0x3e	; 62
     e36:	11 96       	adiw	r26, 0x01	; 1
     e38:	8c e0       	ldi	r24, 0x0C	; 12
     e3a:	e1 eb       	ldi	r30, 0xB1	; 177
     e3c:	f4 e0       	ldi	r31, 0x04	; 4
     e3e:	01 90       	ld	r0, Z+
     e40:	0d 92       	st	X+, r0
     e42:	8a 95       	dec	r24
     e44:	e1 f7       	brne	.-8      	; 0xe3e <_GLOBAL__sub_I_can+0x19e>
     e46:	23 e3       	ldi	r18, 0x33	; 51
     e48:	38 e0       	ldi	r19, 0x08	; 8
     e4a:	44 e3       	ldi	r20, 0x34	; 52
     e4c:	53 e0       	ldi	r21, 0x03	; 3
     e4e:	61 e4       	ldi	r22, 0x41	; 65
     e50:	8d ef       	ldi	r24, 0xFD	; 253
     e52:	92 e0       	ldi	r25, 0x02	; 2
     e54:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_7(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2);
     e58:	8d b7       	in	r24, 0x3d	; 61
     e5a:	9e b7       	in	r25, 0x3e	; 62
     e5c:	84 96       	adiw	r24, 0x24	; 36
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	9e bf       	out	0x3e, r25	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	8d bf       	out	0x3d, r24	; 61
     e68:	0c 97       	sbiw	r24, 0x0c	; 12
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	9e bf       	out	0x3e, r25	; 62
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	8d bf       	out	0x3d, r24	; 61
     e74:	ad b7       	in	r26, 0x3d	; 61
     e76:	be b7       	in	r27, 0x3e	; 62
     e78:	11 96       	adiw	r26, 0x01	; 1
     e7a:	8c e0       	ldi	r24, 0x0C	; 12
     e7c:	e1 eb       	ldi	r30, 0xB1	; 177
     e7e:	f4 e0       	ldi	r31, 0x04	; 4
     e80:	01 90       	ld	r0, Z+
     e82:	0d 92       	st	X+, r0
     e84:	8a 95       	dec	r24
     e86:	e1 f7       	brne	.-8      	; 0xe80 <_GLOBAL__sub_I_can+0x1e0>
     e88:	23 e3       	ldi	r18, 0x33	; 51
     e8a:	38 e0       	ldi	r19, 0x08	; 8
     e8c:	44 e3       	ldi	r20, 0x34	; 52
     e8e:	53 e0       	ldi	r21, 0x03	; 3
     e90:	61 e4       	ldi	r22, 0x41	; 65
     e92:	8d ed       	ldi	r24, 0xDD	; 221
     e94:	92 e0       	ldi	r25, 0x02	; 2
     e96:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>

// ___________________________ INA233 AND MOSFET/RLE SETUP ______________________________//
class  mosfet{
public:
	mosfet() = delete;
	mosfet(uint8_t MOSpin) : MOSpin_(MOSpin){ }
     e9a:	83 e0       	ldi	r24, 0x03	; 3
     e9c:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <p1>
		digitalWrite(10, STATE);
		//p1.close_MOSFET();
		
		blink_time = millis();
	}
}
     ea0:	8d b7       	in	r24, 0x3d	; 61
     ea2:	9e b7       	in	r25, 0x3e	; 62
     ea4:	0c 96       	adiw	r24, 0x0c	; 12
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	9e bf       	out	0x3e, r25	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	8d bf       	out	0x3d, r24	; 61
     eb0:	08 95       	ret

00000eb2 <_GLOBAL__sub_D_can>:
//······················································································································
// Destructor
//······················································································································

  public: ~ ACANFDBuffer (void) {
    delete [] mBuffer ;
     eb2:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <can+0x26>
     eb6:	90 91 9c 04 	lds	r25, 0x049C	; 0x80049c <can+0x27>
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	11 f0       	breq	.+4      	; 0xec2 <_GLOBAL__sub_D_can+0x10>
     ebe:	0e 94 4b 0a 	call	0x1496	; 0x1496 <_ZdaPv>
     ec2:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <can+0x10>
     ec6:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <can+0x11>
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	11 f0       	breq	.+4      	; 0xed2 <_GLOBAL__sub_D_can+0x20>
     ece:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <_ZdaPv>
     ed2:	08 95       	ret

00000ed4 <__subsf3>:
     ed4:	50 58       	subi	r21, 0x80	; 128

00000ed6 <__addsf3>:
     ed6:	bb 27       	eor	r27, r27
     ed8:	aa 27       	eor	r26, r26
     eda:	0e 94 82 07 	call	0xf04	; 0xf04 <__addsf3x>
     ede:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_round>
     ee2:	0e 94 c5 08 	call	0x118a	; 0x118a <__fp_pscA>
     ee6:	38 f0       	brcs	.+14     	; 0xef6 <__addsf3+0x20>
     ee8:	0e 94 cc 08 	call	0x1198	; 0x1198 <__fp_pscB>
     eec:	20 f0       	brcs	.+8      	; 0xef6 <__addsf3+0x20>
     eee:	39 f4       	brne	.+14     	; 0xefe <__addsf3+0x28>
     ef0:	9f 3f       	cpi	r25, 0xFF	; 255
     ef2:	19 f4       	brne	.+6      	; 0xefa <__addsf3+0x24>
     ef4:	26 f4       	brtc	.+8      	; 0xefe <__addsf3+0x28>
     ef6:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__fp_nan>
     efa:	0e f4       	brtc	.+2      	; 0xefe <__addsf3+0x28>
     efc:	e0 95       	com	r30
     efe:	e7 fb       	bst	r30, 7
     f00:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <__fp_inf>

00000f04 <__addsf3x>:
     f04:	e9 2f       	mov	r30, r25
     f06:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__fp_split3>
     f0a:	58 f3       	brcs	.-42     	; 0xee2 <__addsf3+0xc>
     f0c:	ba 17       	cp	r27, r26
     f0e:	62 07       	cpc	r22, r18
     f10:	73 07       	cpc	r23, r19
     f12:	84 07       	cpc	r24, r20
     f14:	95 07       	cpc	r25, r21
     f16:	20 f0       	brcs	.+8      	; 0xf20 <__addsf3x+0x1c>
     f18:	79 f4       	brne	.+30     	; 0xf38 <__addsf3x+0x34>
     f1a:	a6 f5       	brtc	.+104    	; 0xf84 <__addsf3x+0x80>
     f1c:	0c 94 06 09 	jmp	0x120c	; 0x120c <__fp_zero>
     f20:	0e f4       	brtc	.+2      	; 0xf24 <__addsf3x+0x20>
     f22:	e0 95       	com	r30
     f24:	0b 2e       	mov	r0, r27
     f26:	ba 2f       	mov	r27, r26
     f28:	a0 2d       	mov	r26, r0
     f2a:	0b 01       	movw	r0, r22
     f2c:	b9 01       	movw	r22, r18
     f2e:	90 01       	movw	r18, r0
     f30:	0c 01       	movw	r0, r24
     f32:	ca 01       	movw	r24, r20
     f34:	a0 01       	movw	r20, r0
     f36:	11 24       	eor	r1, r1
     f38:	ff 27       	eor	r31, r31
     f3a:	59 1b       	sub	r21, r25
     f3c:	99 f0       	breq	.+38     	; 0xf64 <__addsf3x+0x60>
     f3e:	59 3f       	cpi	r21, 0xF9	; 249
     f40:	50 f4       	brcc	.+20     	; 0xf56 <__addsf3x+0x52>
     f42:	50 3e       	cpi	r21, 0xE0	; 224
     f44:	68 f1       	brcs	.+90     	; 0xfa0 <__addsf3x+0x9c>
     f46:	1a 16       	cp	r1, r26
     f48:	f0 40       	sbci	r31, 0x00	; 0
     f4a:	a2 2f       	mov	r26, r18
     f4c:	23 2f       	mov	r18, r19
     f4e:	34 2f       	mov	r19, r20
     f50:	44 27       	eor	r20, r20
     f52:	58 5f       	subi	r21, 0xF8	; 248
     f54:	f3 cf       	rjmp	.-26     	; 0xf3c <__addsf3x+0x38>
     f56:	46 95       	lsr	r20
     f58:	37 95       	ror	r19
     f5a:	27 95       	ror	r18
     f5c:	a7 95       	ror	r26
     f5e:	f0 40       	sbci	r31, 0x00	; 0
     f60:	53 95       	inc	r21
     f62:	c9 f7       	brne	.-14     	; 0xf56 <__addsf3x+0x52>
     f64:	7e f4       	brtc	.+30     	; 0xf84 <__addsf3x+0x80>
     f66:	1f 16       	cp	r1, r31
     f68:	ba 0b       	sbc	r27, r26
     f6a:	62 0b       	sbc	r22, r18
     f6c:	73 0b       	sbc	r23, r19
     f6e:	84 0b       	sbc	r24, r20
     f70:	ba f0       	brmi	.+46     	; 0xfa0 <__addsf3x+0x9c>
     f72:	91 50       	subi	r25, 0x01	; 1
     f74:	a1 f0       	breq	.+40     	; 0xf9e <__addsf3x+0x9a>
     f76:	ff 0f       	add	r31, r31
     f78:	bb 1f       	adc	r27, r27
     f7a:	66 1f       	adc	r22, r22
     f7c:	77 1f       	adc	r23, r23
     f7e:	88 1f       	adc	r24, r24
     f80:	c2 f7       	brpl	.-16     	; 0xf72 <__addsf3x+0x6e>
     f82:	0e c0       	rjmp	.+28     	; 0xfa0 <__addsf3x+0x9c>
     f84:	ba 0f       	add	r27, r26
     f86:	62 1f       	adc	r22, r18
     f88:	73 1f       	adc	r23, r19
     f8a:	84 1f       	adc	r24, r20
     f8c:	48 f4       	brcc	.+18     	; 0xfa0 <__addsf3x+0x9c>
     f8e:	87 95       	ror	r24
     f90:	77 95       	ror	r23
     f92:	67 95       	ror	r22
     f94:	b7 95       	ror	r27
     f96:	f7 95       	ror	r31
     f98:	9e 3f       	cpi	r25, 0xFE	; 254
     f9a:	08 f0       	brcs	.+2      	; 0xf9e <__addsf3x+0x9a>
     f9c:	b0 cf       	rjmp	.-160    	; 0xefe <__addsf3+0x28>
     f9e:	93 95       	inc	r25
     fa0:	88 0f       	add	r24, r24
     fa2:	08 f0       	brcs	.+2      	; 0xfa6 <__addsf3x+0xa2>
     fa4:	99 27       	eor	r25, r25
     fa6:	ee 0f       	add	r30, r30
     fa8:	97 95       	ror	r25
     faa:	87 95       	ror	r24
     fac:	08 95       	ret

00000fae <__divsf3>:
     fae:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__divsf3x>
     fb2:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_round>
     fb6:	0e 94 cc 08 	call	0x1198	; 0x1198 <__fp_pscB>
     fba:	58 f0       	brcs	.+22     	; 0xfd2 <__divsf3+0x24>
     fbc:	0e 94 c5 08 	call	0x118a	; 0x118a <__fp_pscA>
     fc0:	40 f0       	brcs	.+16     	; 0xfd2 <__divsf3+0x24>
     fc2:	29 f4       	brne	.+10     	; 0xfce <__divsf3+0x20>
     fc4:	5f 3f       	cpi	r21, 0xFF	; 255
     fc6:	29 f0       	breq	.+10     	; 0xfd2 <__divsf3+0x24>
     fc8:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <__fp_inf>
     fcc:	51 11       	cpse	r21, r1
     fce:	0c 94 07 09 	jmp	0x120e	; 0x120e <__fp_szero>
     fd2:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__fp_nan>

00000fd6 <__divsf3x>:
     fd6:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__fp_split3>
     fda:	68 f3       	brcs	.-38     	; 0xfb6 <__divsf3+0x8>

00000fdc <__divsf3_pse>:
     fdc:	99 23       	and	r25, r25
     fde:	b1 f3       	breq	.-20     	; 0xfcc <__divsf3+0x1e>
     fe0:	55 23       	and	r21, r21
     fe2:	91 f3       	breq	.-28     	; 0xfc8 <__divsf3+0x1a>
     fe4:	95 1b       	sub	r25, r21
     fe6:	55 0b       	sbc	r21, r21
     fe8:	bb 27       	eor	r27, r27
     fea:	aa 27       	eor	r26, r26
     fec:	62 17       	cp	r22, r18
     fee:	73 07       	cpc	r23, r19
     ff0:	84 07       	cpc	r24, r20
     ff2:	38 f0       	brcs	.+14     	; 0x1002 <__divsf3_pse+0x26>
     ff4:	9f 5f       	subi	r25, 0xFF	; 255
     ff6:	5f 4f       	sbci	r21, 0xFF	; 255
     ff8:	22 0f       	add	r18, r18
     ffa:	33 1f       	adc	r19, r19
     ffc:	44 1f       	adc	r20, r20
     ffe:	aa 1f       	adc	r26, r26
    1000:	a9 f3       	breq	.-22     	; 0xfec <__divsf3_pse+0x10>
    1002:	35 d0       	rcall	.+106    	; 0x106e <__divsf3_pse+0x92>
    1004:	0e 2e       	mov	r0, r30
    1006:	3a f0       	brmi	.+14     	; 0x1016 <__divsf3_pse+0x3a>
    1008:	e0 e8       	ldi	r30, 0x80	; 128
    100a:	32 d0       	rcall	.+100    	; 0x1070 <__divsf3_pse+0x94>
    100c:	91 50       	subi	r25, 0x01	; 1
    100e:	50 40       	sbci	r21, 0x00	; 0
    1010:	e6 95       	lsr	r30
    1012:	00 1c       	adc	r0, r0
    1014:	ca f7       	brpl	.-14     	; 0x1008 <__divsf3_pse+0x2c>
    1016:	2b d0       	rcall	.+86     	; 0x106e <__divsf3_pse+0x92>
    1018:	fe 2f       	mov	r31, r30
    101a:	29 d0       	rcall	.+82     	; 0x106e <__divsf3_pse+0x92>
    101c:	66 0f       	add	r22, r22
    101e:	77 1f       	adc	r23, r23
    1020:	88 1f       	adc	r24, r24
    1022:	bb 1f       	adc	r27, r27
    1024:	26 17       	cp	r18, r22
    1026:	37 07       	cpc	r19, r23
    1028:	48 07       	cpc	r20, r24
    102a:	ab 07       	cpc	r26, r27
    102c:	b0 e8       	ldi	r27, 0x80	; 128
    102e:	09 f0       	breq	.+2      	; 0x1032 <__divsf3_pse+0x56>
    1030:	bb 0b       	sbc	r27, r27
    1032:	80 2d       	mov	r24, r0
    1034:	bf 01       	movw	r22, r30
    1036:	ff 27       	eor	r31, r31
    1038:	93 58       	subi	r25, 0x83	; 131
    103a:	5f 4f       	sbci	r21, 0xFF	; 255
    103c:	3a f0       	brmi	.+14     	; 0x104c <__divsf3_pse+0x70>
    103e:	9e 3f       	cpi	r25, 0xFE	; 254
    1040:	51 05       	cpc	r21, r1
    1042:	78 f0       	brcs	.+30     	; 0x1062 <__divsf3_pse+0x86>
    1044:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <__fp_inf>
    1048:	0c 94 07 09 	jmp	0x120e	; 0x120e <__fp_szero>
    104c:	5f 3f       	cpi	r21, 0xFF	; 255
    104e:	e4 f3       	brlt	.-8      	; 0x1048 <__divsf3_pse+0x6c>
    1050:	98 3e       	cpi	r25, 0xE8	; 232
    1052:	d4 f3       	brlt	.-12     	; 0x1048 <__divsf3_pse+0x6c>
    1054:	86 95       	lsr	r24
    1056:	77 95       	ror	r23
    1058:	67 95       	ror	r22
    105a:	b7 95       	ror	r27
    105c:	f7 95       	ror	r31
    105e:	9f 5f       	subi	r25, 0xFF	; 255
    1060:	c9 f7       	brne	.-14     	; 0x1054 <__divsf3_pse+0x78>
    1062:	88 0f       	add	r24, r24
    1064:	91 1d       	adc	r25, r1
    1066:	96 95       	lsr	r25
    1068:	87 95       	ror	r24
    106a:	97 f9       	bld	r25, 7
    106c:	08 95       	ret
    106e:	e1 e0       	ldi	r30, 0x01	; 1
    1070:	66 0f       	add	r22, r22
    1072:	77 1f       	adc	r23, r23
    1074:	88 1f       	adc	r24, r24
    1076:	bb 1f       	adc	r27, r27
    1078:	62 17       	cp	r22, r18
    107a:	73 07       	cpc	r23, r19
    107c:	84 07       	cpc	r24, r20
    107e:	ba 07       	cpc	r27, r26
    1080:	20 f0       	brcs	.+8      	; 0x108a <__divsf3_pse+0xae>
    1082:	62 1b       	sub	r22, r18
    1084:	73 0b       	sbc	r23, r19
    1086:	84 0b       	sbc	r24, r20
    1088:	ba 0b       	sbc	r27, r26
    108a:	ee 1f       	adc	r30, r30
    108c:	88 f7       	brcc	.-30     	; 0x1070 <__divsf3_pse+0x94>
    108e:	e0 95       	com	r30
    1090:	08 95       	ret

00001092 <__fixsfsi>:
    1092:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__fixunssfsi>
    1096:	68 94       	set
    1098:	b1 11       	cpse	r27, r1
    109a:	0c 94 07 09 	jmp	0x120e	; 0x120e <__fp_szero>
    109e:	08 95       	ret

000010a0 <__fixunssfsi>:
    10a0:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__fp_splitA>
    10a4:	88 f0       	brcs	.+34     	; 0x10c8 <__fixunssfsi+0x28>
    10a6:	9f 57       	subi	r25, 0x7F	; 127
    10a8:	98 f0       	brcs	.+38     	; 0x10d0 <__fixunssfsi+0x30>
    10aa:	b9 2f       	mov	r27, r25
    10ac:	99 27       	eor	r25, r25
    10ae:	b7 51       	subi	r27, 0x17	; 23
    10b0:	b0 f0       	brcs	.+44     	; 0x10de <__fixunssfsi+0x3e>
    10b2:	e1 f0       	breq	.+56     	; 0x10ec <__fixunssfsi+0x4c>
    10b4:	66 0f       	add	r22, r22
    10b6:	77 1f       	adc	r23, r23
    10b8:	88 1f       	adc	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	1a f0       	brmi	.+6      	; 0x10c4 <__fixunssfsi+0x24>
    10be:	ba 95       	dec	r27
    10c0:	c9 f7       	brne	.-14     	; 0x10b4 <__fixunssfsi+0x14>
    10c2:	14 c0       	rjmp	.+40     	; 0x10ec <__fixunssfsi+0x4c>
    10c4:	b1 30       	cpi	r27, 0x01	; 1
    10c6:	91 f0       	breq	.+36     	; 0x10ec <__fixunssfsi+0x4c>
    10c8:	0e 94 06 09 	call	0x120c	; 0x120c <__fp_zero>
    10cc:	b1 e0       	ldi	r27, 0x01	; 1
    10ce:	08 95       	ret
    10d0:	0c 94 06 09 	jmp	0x120c	; 0x120c <__fp_zero>
    10d4:	67 2f       	mov	r22, r23
    10d6:	78 2f       	mov	r23, r24
    10d8:	88 27       	eor	r24, r24
    10da:	b8 5f       	subi	r27, 0xF8	; 248
    10dc:	39 f0       	breq	.+14     	; 0x10ec <__fixunssfsi+0x4c>
    10de:	b9 3f       	cpi	r27, 0xF9	; 249
    10e0:	cc f3       	brlt	.-14     	; 0x10d4 <__fixunssfsi+0x34>
    10e2:	86 95       	lsr	r24
    10e4:	77 95       	ror	r23
    10e6:	67 95       	ror	r22
    10e8:	b3 95       	inc	r27
    10ea:	d9 f7       	brne	.-10     	; 0x10e2 <__fixunssfsi+0x42>
    10ec:	3e f4       	brtc	.+14     	; 0x10fc <__fixunssfsi+0x5c>
    10ee:	90 95       	com	r25
    10f0:	80 95       	com	r24
    10f2:	70 95       	com	r23
    10f4:	61 95       	neg	r22
    10f6:	7f 4f       	sbci	r23, 0xFF	; 255
    10f8:	8f 4f       	sbci	r24, 0xFF	; 255
    10fa:	9f 4f       	sbci	r25, 0xFF	; 255
    10fc:	08 95       	ret

000010fe <__floatunsisf>:
    10fe:	e8 94       	clt
    1100:	09 c0       	rjmp	.+18     	; 0x1114 <__floatsisf+0x12>

00001102 <__floatsisf>:
    1102:	97 fb       	bst	r25, 7
    1104:	3e f4       	brtc	.+14     	; 0x1114 <__floatsisf+0x12>
    1106:	90 95       	com	r25
    1108:	80 95       	com	r24
    110a:	70 95       	com	r23
    110c:	61 95       	neg	r22
    110e:	7f 4f       	sbci	r23, 0xFF	; 255
    1110:	8f 4f       	sbci	r24, 0xFF	; 255
    1112:	9f 4f       	sbci	r25, 0xFF	; 255
    1114:	99 23       	and	r25, r25
    1116:	a9 f0       	breq	.+42     	; 0x1142 <__floatsisf+0x40>
    1118:	f9 2f       	mov	r31, r25
    111a:	96 e9       	ldi	r25, 0x96	; 150
    111c:	bb 27       	eor	r27, r27
    111e:	93 95       	inc	r25
    1120:	f6 95       	lsr	r31
    1122:	87 95       	ror	r24
    1124:	77 95       	ror	r23
    1126:	67 95       	ror	r22
    1128:	b7 95       	ror	r27
    112a:	f1 11       	cpse	r31, r1
    112c:	f8 cf       	rjmp	.-16     	; 0x111e <__floatsisf+0x1c>
    112e:	fa f4       	brpl	.+62     	; 0x116e <__floatsisf+0x6c>
    1130:	bb 0f       	add	r27, r27
    1132:	11 f4       	brne	.+4      	; 0x1138 <__floatsisf+0x36>
    1134:	60 ff       	sbrs	r22, 0
    1136:	1b c0       	rjmp	.+54     	; 0x116e <__floatsisf+0x6c>
    1138:	6f 5f       	subi	r22, 0xFF	; 255
    113a:	7f 4f       	sbci	r23, 0xFF	; 255
    113c:	8f 4f       	sbci	r24, 0xFF	; 255
    113e:	9f 4f       	sbci	r25, 0xFF	; 255
    1140:	16 c0       	rjmp	.+44     	; 0x116e <__floatsisf+0x6c>
    1142:	88 23       	and	r24, r24
    1144:	11 f0       	breq	.+4      	; 0x114a <__floatsisf+0x48>
    1146:	96 e9       	ldi	r25, 0x96	; 150
    1148:	11 c0       	rjmp	.+34     	; 0x116c <__floatsisf+0x6a>
    114a:	77 23       	and	r23, r23
    114c:	21 f0       	breq	.+8      	; 0x1156 <__floatsisf+0x54>
    114e:	9e e8       	ldi	r25, 0x8E	; 142
    1150:	87 2f       	mov	r24, r23
    1152:	76 2f       	mov	r23, r22
    1154:	05 c0       	rjmp	.+10     	; 0x1160 <__floatsisf+0x5e>
    1156:	66 23       	and	r22, r22
    1158:	71 f0       	breq	.+28     	; 0x1176 <__floatsisf+0x74>
    115a:	96 e8       	ldi	r25, 0x86	; 134
    115c:	86 2f       	mov	r24, r22
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	2a f0       	brmi	.+10     	; 0x116e <__floatsisf+0x6c>
    1164:	9a 95       	dec	r25
    1166:	66 0f       	add	r22, r22
    1168:	77 1f       	adc	r23, r23
    116a:	88 1f       	adc	r24, r24
    116c:	da f7       	brpl	.-10     	; 0x1164 <__floatsisf+0x62>
    116e:	88 0f       	add	r24, r24
    1170:	96 95       	lsr	r25
    1172:	87 95       	ror	r24
    1174:	97 f9       	bld	r25, 7
    1176:	08 95       	ret

00001178 <__fp_inf>:
    1178:	97 f9       	bld	r25, 7
    117a:	9f 67       	ori	r25, 0x7F	; 127
    117c:	80 e8       	ldi	r24, 0x80	; 128
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	08 95       	ret

00001184 <__fp_nan>:
    1184:	9f ef       	ldi	r25, 0xFF	; 255
    1186:	80 ec       	ldi	r24, 0xC0	; 192
    1188:	08 95       	ret

0000118a <__fp_pscA>:
    118a:	00 24       	eor	r0, r0
    118c:	0a 94       	dec	r0
    118e:	16 16       	cp	r1, r22
    1190:	17 06       	cpc	r1, r23
    1192:	18 06       	cpc	r1, r24
    1194:	09 06       	cpc	r0, r25
    1196:	08 95       	ret

00001198 <__fp_pscB>:
    1198:	00 24       	eor	r0, r0
    119a:	0a 94       	dec	r0
    119c:	12 16       	cp	r1, r18
    119e:	13 06       	cpc	r1, r19
    11a0:	14 06       	cpc	r1, r20
    11a2:	05 06       	cpc	r0, r21
    11a4:	08 95       	ret

000011a6 <__fp_round>:
    11a6:	09 2e       	mov	r0, r25
    11a8:	03 94       	inc	r0
    11aa:	00 0c       	add	r0, r0
    11ac:	11 f4       	brne	.+4      	; 0x11b2 <__fp_round+0xc>
    11ae:	88 23       	and	r24, r24
    11b0:	52 f0       	brmi	.+20     	; 0x11c6 <__fp_round+0x20>
    11b2:	bb 0f       	add	r27, r27
    11b4:	40 f4       	brcc	.+16     	; 0x11c6 <__fp_round+0x20>
    11b6:	bf 2b       	or	r27, r31
    11b8:	11 f4       	brne	.+4      	; 0x11be <__fp_round+0x18>
    11ba:	60 ff       	sbrs	r22, 0
    11bc:	04 c0       	rjmp	.+8      	; 0x11c6 <__fp_round+0x20>
    11be:	6f 5f       	subi	r22, 0xFF	; 255
    11c0:	7f 4f       	sbci	r23, 0xFF	; 255
    11c2:	8f 4f       	sbci	r24, 0xFF	; 255
    11c4:	9f 4f       	sbci	r25, 0xFF	; 255
    11c6:	08 95       	ret

000011c8 <__fp_split3>:
    11c8:	57 fd       	sbrc	r21, 7
    11ca:	90 58       	subi	r25, 0x80	; 128
    11cc:	44 0f       	add	r20, r20
    11ce:	55 1f       	adc	r21, r21
    11d0:	59 f0       	breq	.+22     	; 0x11e8 <__fp_splitA+0x10>
    11d2:	5f 3f       	cpi	r21, 0xFF	; 255
    11d4:	71 f0       	breq	.+28     	; 0x11f2 <__fp_splitA+0x1a>
    11d6:	47 95       	ror	r20

000011d8 <__fp_splitA>:
    11d8:	88 0f       	add	r24, r24
    11da:	97 fb       	bst	r25, 7
    11dc:	99 1f       	adc	r25, r25
    11de:	61 f0       	breq	.+24     	; 0x11f8 <__fp_splitA+0x20>
    11e0:	9f 3f       	cpi	r25, 0xFF	; 255
    11e2:	79 f0       	breq	.+30     	; 0x1202 <__fp_splitA+0x2a>
    11e4:	87 95       	ror	r24
    11e6:	08 95       	ret
    11e8:	12 16       	cp	r1, r18
    11ea:	13 06       	cpc	r1, r19
    11ec:	14 06       	cpc	r1, r20
    11ee:	55 1f       	adc	r21, r21
    11f0:	f2 cf       	rjmp	.-28     	; 0x11d6 <__fp_split3+0xe>
    11f2:	46 95       	lsr	r20
    11f4:	f1 df       	rcall	.-30     	; 0x11d8 <__fp_splitA>
    11f6:	08 c0       	rjmp	.+16     	; 0x1208 <__fp_splitA+0x30>
    11f8:	16 16       	cp	r1, r22
    11fa:	17 06       	cpc	r1, r23
    11fc:	18 06       	cpc	r1, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	f1 cf       	rjmp	.-30     	; 0x11e4 <__fp_splitA+0xc>
    1202:	86 95       	lsr	r24
    1204:	71 05       	cpc	r23, r1
    1206:	61 05       	cpc	r22, r1
    1208:	08 94       	sec
    120a:	08 95       	ret

0000120c <__fp_zero>:
    120c:	e8 94       	clt

0000120e <__fp_szero>:
    120e:	bb 27       	eor	r27, r27
    1210:	66 27       	eor	r22, r22
    1212:	77 27       	eor	r23, r23
    1214:	cb 01       	movw	r24, r22
    1216:	97 f9       	bld	r25, 7
    1218:	08 95       	ret

0000121a <__gesf2>:
    121a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__fp_cmp>
    121e:	08 f4       	brcc	.+2      	; 0x1222 <__gesf2+0x8>
    1220:	8f ef       	ldi	r24, 0xFF	; 255
    1222:	08 95       	ret

00001224 <__mulsf3>:
    1224:	0e 94 25 09 	call	0x124a	; 0x124a <__mulsf3x>
    1228:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_round>
    122c:	0e 94 c5 08 	call	0x118a	; 0x118a <__fp_pscA>
    1230:	38 f0       	brcs	.+14     	; 0x1240 <__mulsf3+0x1c>
    1232:	0e 94 cc 08 	call	0x1198	; 0x1198 <__fp_pscB>
    1236:	20 f0       	brcs	.+8      	; 0x1240 <__mulsf3+0x1c>
    1238:	95 23       	and	r25, r21
    123a:	11 f0       	breq	.+4      	; 0x1240 <__mulsf3+0x1c>
    123c:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <__fp_inf>
    1240:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__fp_nan>
    1244:	11 24       	eor	r1, r1
    1246:	0c 94 07 09 	jmp	0x120e	; 0x120e <__fp_szero>

0000124a <__mulsf3x>:
    124a:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__fp_split3>
    124e:	70 f3       	brcs	.-36     	; 0x122c <__mulsf3+0x8>

00001250 <__mulsf3_pse>:
    1250:	95 9f       	mul	r25, r21
    1252:	c1 f3       	breq	.-16     	; 0x1244 <__mulsf3+0x20>
    1254:	95 0f       	add	r25, r21
    1256:	50 e0       	ldi	r21, 0x00	; 0
    1258:	55 1f       	adc	r21, r21
    125a:	62 9f       	mul	r22, r18
    125c:	f0 01       	movw	r30, r0
    125e:	72 9f       	mul	r23, r18
    1260:	bb 27       	eor	r27, r27
    1262:	f0 0d       	add	r31, r0
    1264:	b1 1d       	adc	r27, r1
    1266:	63 9f       	mul	r22, r19
    1268:	aa 27       	eor	r26, r26
    126a:	f0 0d       	add	r31, r0
    126c:	b1 1d       	adc	r27, r1
    126e:	aa 1f       	adc	r26, r26
    1270:	64 9f       	mul	r22, r20
    1272:	66 27       	eor	r22, r22
    1274:	b0 0d       	add	r27, r0
    1276:	a1 1d       	adc	r26, r1
    1278:	66 1f       	adc	r22, r22
    127a:	82 9f       	mul	r24, r18
    127c:	22 27       	eor	r18, r18
    127e:	b0 0d       	add	r27, r0
    1280:	a1 1d       	adc	r26, r1
    1282:	62 1f       	adc	r22, r18
    1284:	73 9f       	mul	r23, r19
    1286:	b0 0d       	add	r27, r0
    1288:	a1 1d       	adc	r26, r1
    128a:	62 1f       	adc	r22, r18
    128c:	83 9f       	mul	r24, r19
    128e:	a0 0d       	add	r26, r0
    1290:	61 1d       	adc	r22, r1
    1292:	22 1f       	adc	r18, r18
    1294:	74 9f       	mul	r23, r20
    1296:	33 27       	eor	r19, r19
    1298:	a0 0d       	add	r26, r0
    129a:	61 1d       	adc	r22, r1
    129c:	23 1f       	adc	r18, r19
    129e:	84 9f       	mul	r24, r20
    12a0:	60 0d       	add	r22, r0
    12a2:	21 1d       	adc	r18, r1
    12a4:	82 2f       	mov	r24, r18
    12a6:	76 2f       	mov	r23, r22
    12a8:	6a 2f       	mov	r22, r26
    12aa:	11 24       	eor	r1, r1
    12ac:	9f 57       	subi	r25, 0x7F	; 127
    12ae:	50 40       	sbci	r21, 0x00	; 0
    12b0:	9a f0       	brmi	.+38     	; 0x12d8 <__mulsf3_pse+0x88>
    12b2:	f1 f0       	breq	.+60     	; 0x12f0 <__mulsf3_pse+0xa0>
    12b4:	88 23       	and	r24, r24
    12b6:	4a f0       	brmi	.+18     	; 0x12ca <__mulsf3_pse+0x7a>
    12b8:	ee 0f       	add	r30, r30
    12ba:	ff 1f       	adc	r31, r31
    12bc:	bb 1f       	adc	r27, r27
    12be:	66 1f       	adc	r22, r22
    12c0:	77 1f       	adc	r23, r23
    12c2:	88 1f       	adc	r24, r24
    12c4:	91 50       	subi	r25, 0x01	; 1
    12c6:	50 40       	sbci	r21, 0x00	; 0
    12c8:	a9 f7       	brne	.-22     	; 0x12b4 <__mulsf3_pse+0x64>
    12ca:	9e 3f       	cpi	r25, 0xFE	; 254
    12cc:	51 05       	cpc	r21, r1
    12ce:	80 f0       	brcs	.+32     	; 0x12f0 <__mulsf3_pse+0xa0>
    12d0:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <__fp_inf>
    12d4:	0c 94 07 09 	jmp	0x120e	; 0x120e <__fp_szero>
    12d8:	5f 3f       	cpi	r21, 0xFF	; 255
    12da:	e4 f3       	brlt	.-8      	; 0x12d4 <__mulsf3_pse+0x84>
    12dc:	98 3e       	cpi	r25, 0xE8	; 232
    12de:	d4 f3       	brlt	.-12     	; 0x12d4 <__mulsf3_pse+0x84>
    12e0:	86 95       	lsr	r24
    12e2:	77 95       	ror	r23
    12e4:	67 95       	ror	r22
    12e6:	b7 95       	ror	r27
    12e8:	f7 95       	ror	r31
    12ea:	e7 95       	ror	r30
    12ec:	9f 5f       	subi	r25, 0xFF	; 255
    12ee:	c1 f7       	brne	.-16     	; 0x12e0 <__mulsf3_pse+0x90>
    12f0:	fe 2b       	or	r31, r30
    12f2:	88 0f       	add	r24, r24
    12f4:	91 1d       	adc	r25, r1
    12f6:	96 95       	lsr	r25
    12f8:	87 95       	ror	r24
    12fa:	97 f9       	bld	r25, 7
    12fc:	08 95       	ret

000012fe <__fp_cmp>:
    12fe:	99 0f       	add	r25, r25
    1300:	00 08       	sbc	r0, r0
    1302:	55 0f       	add	r21, r21
    1304:	aa 0b       	sbc	r26, r26
    1306:	e0 e8       	ldi	r30, 0x80	; 128
    1308:	fe ef       	ldi	r31, 0xFE	; 254
    130a:	16 16       	cp	r1, r22
    130c:	17 06       	cpc	r1, r23
    130e:	e8 07       	cpc	r30, r24
    1310:	f9 07       	cpc	r31, r25
    1312:	c0 f0       	brcs	.+48     	; 0x1344 <__fp_cmp+0x46>
    1314:	12 16       	cp	r1, r18
    1316:	13 06       	cpc	r1, r19
    1318:	e4 07       	cpc	r30, r20
    131a:	f5 07       	cpc	r31, r21
    131c:	98 f0       	brcs	.+38     	; 0x1344 <__fp_cmp+0x46>
    131e:	62 1b       	sub	r22, r18
    1320:	73 0b       	sbc	r23, r19
    1322:	84 0b       	sbc	r24, r20
    1324:	95 0b       	sbc	r25, r21
    1326:	39 f4       	brne	.+14     	; 0x1336 <__fp_cmp+0x38>
    1328:	0a 26       	eor	r0, r26
    132a:	61 f0       	breq	.+24     	; 0x1344 <__fp_cmp+0x46>
    132c:	23 2b       	or	r18, r19
    132e:	24 2b       	or	r18, r20
    1330:	25 2b       	or	r18, r21
    1332:	21 f4       	brne	.+8      	; 0x133c <__fp_cmp+0x3e>
    1334:	08 95       	ret
    1336:	0a 26       	eor	r0, r26
    1338:	09 f4       	brne	.+2      	; 0x133c <__fp_cmp+0x3e>
    133a:	a1 40       	sbci	r26, 0x01	; 1
    133c:	a6 95       	lsr	r26
    133e:	8f ef       	ldi	r24, 0xFF	; 255
    1340:	81 1d       	adc	r24, r1
    1342:	81 1d       	adc	r24, r1
    1344:	08 95       	ret

00001346 <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	08 95       	ret

0000134c <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    134c:	1f 92       	push	r1
    134e:	0f 92       	push	r0
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	0f 92       	push	r0
    1354:	11 24       	eor	r1, r1
    1356:	2f 93       	push	r18
    1358:	8f 93       	push	r24
    135a:	9f 93       	push	r25
    135c:	ef 93       	push	r30
    135e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1360:	e0 91 d9 04 	lds	r30, 0x04D9	; 0x8004d9 <Serial+0x10>
    1364:	f0 91 da 04 	lds	r31, 0x04DA	; 0x8004da <Serial+0x11>
    1368:	80 81       	ld	r24, Z
    136a:	e0 91 df 04 	lds	r30, 0x04DF	; 0x8004df <Serial+0x16>
    136e:	f0 91 e0 04 	lds	r31, 0x04E0	; 0x8004e0 <Serial+0x17>
    1372:	82 fd       	sbrc	r24, 2
    1374:	12 c0       	rjmp	.+36     	; 0x139a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1376:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1378:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <Serial+0x19>
    137c:	8f 5f       	subi	r24, 0xFF	; 255
    137e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1380:	20 91 e3 04 	lds	r18, 0x04E3	; 0x8004e3 <Serial+0x1a>
    1384:	82 17       	cp	r24, r18
    1386:	51 f0       	breq	.+20     	; 0x139c <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1388:	e0 91 e2 04 	lds	r30, 0x04E2	; 0x8004e2 <Serial+0x19>
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	e7 53       	subi	r30, 0x37	; 55
    1390:	fb 4f       	sbci	r31, 0xFB	; 251
    1392:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1394:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <Serial+0x19>
    1398:	01 c0       	rjmp	.+2      	; 0x139c <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    139a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    139c:	ff 91       	pop	r31
    139e:	ef 91       	pop	r30
    13a0:	9f 91       	pop	r25
    13a2:	8f 91       	pop	r24
    13a4:	2f 91       	pop	r18
    13a6:	0f 90       	pop	r0
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	0f 90       	pop	r0
    13ac:	1f 90       	pop	r1
    13ae:	18 95       	reti

000013b0 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    13b0:	1f 92       	push	r1
    13b2:	0f 92       	push	r0
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	0f 92       	push	r0
    13b8:	11 24       	eor	r1, r1
    13ba:	2f 93       	push	r18
    13bc:	3f 93       	push	r19
    13be:	4f 93       	push	r20
    13c0:	5f 93       	push	r21
    13c2:	6f 93       	push	r22
    13c4:	7f 93       	push	r23
    13c6:	8f 93       	push	r24
    13c8:	9f 93       	push	r25
    13ca:	af 93       	push	r26
    13cc:	bf 93       	push	r27
    13ce:	ef 93       	push	r30
    13d0:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    13d2:	89 ec       	ldi	r24, 0xC9	; 201
    13d4:	94 e0       	ldi	r25, 0x04	; 4
    13d6:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    13da:	ff 91       	pop	r31
    13dc:	ef 91       	pop	r30
    13de:	bf 91       	pop	r27
    13e0:	af 91       	pop	r26
    13e2:	9f 91       	pop	r25
    13e4:	8f 91       	pop	r24
    13e6:	7f 91       	pop	r23
    13e8:	6f 91       	pop	r22
    13ea:	5f 91       	pop	r21
    13ec:	4f 91       	pop	r20
    13ee:	3f 91       	pop	r19
    13f0:	2f 91       	pop	r18
    13f2:	0f 90       	pop	r0
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	0f 90       	pop	r0
    13f8:	1f 90       	pop	r1
    13fa:	18 95       	reti

000013fc <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    13fc:	89 ec       	ldi	r24, 0xC9	; 201
    13fe:	94 e0       	ldi	r25, 0x04	; 4
    1400:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <_ZN14HardwareSerial9availableEv>
    1404:	21 e0       	ldi	r18, 0x01	; 1
    1406:	89 2b       	or	r24, r25
    1408:	09 f4       	brne	.+2      	; 0x140c <_Z17Serial0_availablev+0x10>
    140a:	20 e0       	ldi	r18, 0x00	; 0
}
    140c:	82 2f       	mov	r24, r18
    140e:	08 95       	ret

00001410 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1410:	e9 ec       	ldi	r30, 0xC9	; 201
    1412:	f4 e0       	ldi	r31, 0x04	; 4
    1414:	13 82       	std	Z+3, r1	; 0x03
    1416:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1418:	88 ee       	ldi	r24, 0xE8	; 232
    141a:	93 e0       	ldi	r25, 0x03	; 3
    141c:	a0 e0       	ldi	r26, 0x00	; 0
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	84 83       	std	Z+4, r24	; 0x04
    1422:	95 83       	std	Z+5, r25	; 0x05
    1424:	a6 83       	std	Z+6, r26	; 0x06
    1426:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1428:	8a ec       	ldi	r24, 0xCA	; 202
    142a:	92 e0       	ldi	r25, 0x02	; 2
    142c:	91 83       	std	Z+1, r25	; 0x01
    142e:	80 83       	st	Z, r24
    1430:	85 ec       	ldi	r24, 0xC5	; 197
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	95 87       	std	Z+13, r25	; 0x0d
    1436:	84 87       	std	Z+12, r24	; 0x0c
    1438:	84 ec       	ldi	r24, 0xC4	; 196
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	97 87       	std	Z+15, r25	; 0x0f
    143e:	86 87       	std	Z+14, r24	; 0x0e
    1440:	80 ec       	ldi	r24, 0xC0	; 192
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	91 8b       	std	Z+17, r25	; 0x11
    1446:	80 8b       	std	Z+16, r24	; 0x10
    1448:	81 ec       	ldi	r24, 0xC1	; 193
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	93 8b       	std	Z+19, r25	; 0x13
    144e:	82 8b       	std	Z+18, r24	; 0x12
    1450:	82 ec       	ldi	r24, 0xC2	; 194
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	95 8b       	std	Z+21, r25	; 0x15
    1456:	84 8b       	std	Z+20, r24	; 0x14
    1458:	86 ec       	ldi	r24, 0xC6	; 198
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	97 8b       	std	Z+23, r25	; 0x17
    145e:	86 8b       	std	Z+22, r24	; 0x16
    1460:	11 8e       	std	Z+25, r1	; 0x19
    1462:	12 8e       	std	Z+26, r1	; 0x1a
    1464:	13 8e       	std	Z+27, r1	; 0x1b
    1466:	14 8e       	std	Z+28, r1	; 0x1c
    1468:	08 95       	ret

0000146a <initVariant>:
    146a:	08 95       	ret

0000146c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    146c:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <init>

	initVariant();
    1470:	0e 94 35 0a 	call	0x146a	; 0x146a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1474:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1478:	c9 e2       	ldi	r28, 0x29	; 41
    147a:	df e1       	ldi	r29, 0x1F	; 31
#endif
	
	setup();
    
	for (;;) {
		loop();
    147c:	0e 94 17 06 	call	0xc2e	; 0xc2e <loop>
		if (serialEventRun) serialEventRun();
    1480:	20 97       	sbiw	r28, 0x00	; 0
    1482:	e1 f3       	breq	.-8      	; 0x147c <main+0x10>
    1484:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <_Z14serialEventRunv>
    1488:	f9 cf       	rjmp	.-14     	; 0x147c <main+0x10>

0000148a <_Znwj>:
    148a:	0c 94 f2 24 	jmp	0x49e4	; 0x49e4 <malloc>

0000148e <_Znaj>:
}

void * operator new(size_t size, void * ptr) noexcept {
  (void)size;
  return ptr;
}
    148e:	0c 94 f2 24 	jmp	0x49e4	; 0x49e4 <malloc>

00001492 <_ZdlPv>:
    1492:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <free>

00001496 <_ZdaPv>:
void operator delete(void * ptr) {
  free(ptr);
}

void operator delete[](void * ptr) {
  free(ptr);
    1496:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <free>

0000149a <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    149a:	cf 92       	push	r12
    149c:	df 92       	push	r13
    149e:	ef 92       	push	r14
    14a0:	ff 92       	push	r15
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	6c 01       	movw	r12, r24
    14ac:	7a 01       	movw	r14, r20
    14ae:	8b 01       	movw	r16, r22
    14b0:	c0 e0       	ldi	r28, 0x00	; 0
    14b2:	d0 e0       	ldi	r29, 0x00	; 0
    14b4:	ce 15       	cp	r28, r14
    14b6:	df 05       	cpc	r29, r15
    14b8:	81 f0       	breq	.+32     	; 0x14da <_ZN5Print5writeEPKhj+0x40>
    14ba:	d8 01       	movw	r26, r16
    14bc:	6d 91       	ld	r22, X+
    14be:	8d 01       	movw	r16, r26
    14c0:	d6 01       	movw	r26, r12
    14c2:	ed 91       	ld	r30, X+
    14c4:	fc 91       	ld	r31, X
    14c6:	01 90       	ld	r0, Z+
    14c8:	f0 81       	ld	r31, Z
    14ca:	e0 2d       	mov	r30, r0
    14cc:	c6 01       	movw	r24, r12
    14ce:	09 95       	icall
    14d0:	89 2b       	or	r24, r25
    14d2:	11 f0       	breq	.+4      	; 0x14d8 <_ZN5Print5writeEPKhj+0x3e>
    14d4:	21 96       	adiw	r28, 0x01	; 1
    14d6:	ee cf       	rjmp	.-36     	; 0x14b4 <_ZN5Print5writeEPKhj+0x1a>
    14d8:	7e 01       	movw	r14, r28
    14da:	c7 01       	movw	r24, r14
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	1f 91       	pop	r17
    14e2:	0f 91       	pop	r16
    14e4:	ff 90       	pop	r15
    14e6:	ef 90       	pop	r14
    14e8:	df 90       	pop	r13
    14ea:	cf 90       	pop	r12
    14ec:	08 95       	ret

000014ee <_ZN5Print5writeEPKc>:
    14ee:	61 15       	cp	r22, r1
    14f0:	71 05       	cpc	r23, r1
    14f2:	79 f0       	breq	.+30     	; 0x1512 <_ZN5Print5writeEPKc+0x24>
    14f4:	fb 01       	movw	r30, r22
    14f6:	01 90       	ld	r0, Z+
    14f8:	00 20       	and	r0, r0
    14fa:	e9 f7       	brne	.-6      	; 0x14f6 <_ZN5Print5writeEPKc+0x8>
    14fc:	31 97       	sbiw	r30, 0x01	; 1
    14fe:	af 01       	movw	r20, r30
    1500:	46 1b       	sub	r20, r22
    1502:	57 0b       	sbc	r21, r23
    1504:	dc 01       	movw	r26, r24
    1506:	ed 91       	ld	r30, X+
    1508:	fc 91       	ld	r31, X
    150a:	02 80       	ldd	r0, Z+2	; 0x02
    150c:	f3 81       	ldd	r31, Z+3	; 0x03
    150e:	e0 2d       	mov	r30, r0
    1510:	09 94       	ijmp
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	08 95       	ret

00001518 <_ZN5Print5printEPK19__FlashStringHelper>:
    1518:	ef 92       	push	r14
    151a:	ff 92       	push	r15
    151c:	0f 93       	push	r16
    151e:	1f 93       	push	r17
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
    1524:	8c 01       	movw	r16, r24
    1526:	7b 01       	movw	r14, r22
    1528:	c0 e0       	ldi	r28, 0x00	; 0
    152a:	d0 e0       	ldi	r29, 0x00	; 0
    152c:	f7 01       	movw	r30, r14
    152e:	ec 0f       	add	r30, r28
    1530:	fd 1f       	adc	r31, r29
    1532:	64 91       	lpm	r22, Z
    1534:	66 23       	and	r22, r22
    1536:	61 f0       	breq	.+24     	; 0x1550 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1538:	d8 01       	movw	r26, r16
    153a:	ed 91       	ld	r30, X+
    153c:	fc 91       	ld	r31, X
    153e:	01 90       	ld	r0, Z+
    1540:	f0 81       	ld	r31, Z
    1542:	e0 2d       	mov	r30, r0
    1544:	c8 01       	movw	r24, r16
    1546:	09 95       	icall
    1548:	89 2b       	or	r24, r25
    154a:	11 f0       	breq	.+4      	; 0x1550 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    154c:	21 96       	adiw	r28, 0x01	; 1
    154e:	ee cf       	rjmp	.-36     	; 0x152c <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    1550:	ce 01       	movw	r24, r28
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	1f 91       	pop	r17
    1558:	0f 91       	pop	r16
    155a:	ff 90       	pop	r15
    155c:	ef 90       	pop	r14
    155e:	08 95       	ret

00001560 <_ZN5Print5printEPKc>:
    1560:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <_ZN5Print5writeEPKc>

00001564 <_ZN5Print5printEc>:
    1564:	dc 01       	movw	r26, r24
    1566:	ed 91       	ld	r30, X+
    1568:	fc 91       	ld	r31, X
    156a:	01 90       	ld	r0, Z+
    156c:	f0 81       	ld	r31, Z
    156e:	e0 2d       	mov	r30, r0
    1570:	09 94       	ijmp

00001572 <_ZN5Print7printlnEv>:
    1572:	6f e5       	ldi	r22, 0x5F	; 95
    1574:	72 e0       	ldi	r23, 0x02	; 2
    1576:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <_ZN5Print5writeEPKc>

0000157a <_ZN5Print7printlnEPK19__FlashStringHelper>:
    157a:	0f 93       	push	r16
    157c:	1f 93       	push	r17
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	ec 01       	movw	r28, r24
    1584:	0e 94 8c 0a 	call	0x1518	; 0x1518 <_ZN5Print5printEPK19__FlashStringHelper>
    1588:	8c 01       	movw	r16, r24
    158a:	ce 01       	movw	r24, r28
    158c:	0e 94 b9 0a 	call	0x1572	; 0x1572 <_ZN5Print7printlnEv>
    1590:	80 0f       	add	r24, r16
    1592:	91 1f       	adc	r25, r17
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	08 95       	ret

0000159e <_ZN5Print7printlnEPKc>:
    159e:	0f 93       	push	r16
    15a0:	1f 93       	push	r17
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	ec 01       	movw	r28, r24
    15a8:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN5Print5writeEPKc>
    15ac:	8c 01       	movw	r16, r24
    15ae:	ce 01       	movw	r24, r28
    15b0:	0e 94 b9 0a 	call	0x1572	; 0x1572 <_ZN5Print7printlnEv>
    15b4:	80 0f       	add	r24, r16
    15b6:	91 1f       	adc	r25, r17
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	1f 91       	pop	r17
    15be:	0f 91       	pop	r16
    15c0:	08 95       	ret

000015c2 <_ZN5Print11printNumberEmh>:
    15c2:	8f 92       	push	r8
    15c4:	9f 92       	push	r9
    15c6:	af 92       	push	r10
    15c8:	bf 92       	push	r11
    15ca:	ef 92       	push	r14
    15cc:	ff 92       	push	r15
    15ce:	0f 93       	push	r16
    15d0:	1f 93       	push	r17
    15d2:	cf 93       	push	r28
    15d4:	df 93       	push	r29
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	a1 97       	sbiw	r28, 0x21	; 33
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	de bf       	out	0x3e, r29	; 62
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	cd bf       	out	0x3d, r28	; 61
    15e6:	7c 01       	movw	r14, r24
    15e8:	fa 01       	movw	r30, r20
    15ea:	cb 01       	movw	r24, r22
    15ec:	19 a2       	std	Y+33, r1	; 0x21
    15ee:	22 30       	cpi	r18, 0x02	; 2
    15f0:	08 f4       	brcc	.+2      	; 0x15f4 <_ZN5Print11printNumberEmh+0x32>
    15f2:	2a e0       	ldi	r18, 0x0A	; 10
    15f4:	8e 01       	movw	r16, r28
    15f6:	0f 5d       	subi	r16, 0xDF	; 223
    15f8:	1f 4f       	sbci	r17, 0xFF	; 255
    15fa:	82 2e       	mov	r8, r18
    15fc:	91 2c       	mov	r9, r1
    15fe:	a1 2c       	mov	r10, r1
    1600:	b1 2c       	mov	r11, r1
    1602:	bf 01       	movw	r22, r30
    1604:	a5 01       	movw	r20, r10
    1606:	94 01       	movw	r18, r8
    1608:	0e 94 1c 24 	call	0x4838	; 0x4838 <__udivmodsi4>
    160c:	f9 01       	movw	r30, r18
    160e:	ca 01       	movw	r24, r20
    1610:	01 50       	subi	r16, 0x01	; 1
    1612:	11 09       	sbc	r17, r1
    1614:	6a 30       	cpi	r22, 0x0A	; 10
    1616:	10 f4       	brcc	.+4      	; 0x161c <_ZN5Print11printNumberEmh+0x5a>
    1618:	60 5d       	subi	r22, 0xD0	; 208
    161a:	01 c0       	rjmp	.+2      	; 0x161e <_ZN5Print11printNumberEmh+0x5c>
    161c:	69 5c       	subi	r22, 0xC9	; 201
    161e:	d8 01       	movw	r26, r16
    1620:	6c 93       	st	X, r22
    1622:	23 2b       	or	r18, r19
    1624:	24 2b       	or	r18, r20
    1626:	25 2b       	or	r18, r21
    1628:	61 f7       	brne	.-40     	; 0x1602 <_ZN5Print11printNumberEmh+0x40>
    162a:	b8 01       	movw	r22, r16
    162c:	c7 01       	movw	r24, r14
    162e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN5Print5writeEPKc>
    1632:	a1 96       	adiw	r28, 0x21	; 33
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	1f 91       	pop	r17
    1644:	0f 91       	pop	r16
    1646:	ff 90       	pop	r15
    1648:	ef 90       	pop	r14
    164a:	bf 90       	pop	r11
    164c:	af 90       	pop	r10
    164e:	9f 90       	pop	r9
    1650:	8f 90       	pop	r8
    1652:	08 95       	ret

00001654 <_ZN5Print5printEmi>:
    1654:	21 15       	cp	r18, r1
    1656:	31 05       	cpc	r19, r1
    1658:	41 f4       	brne	.+16     	; 0x166a <_ZN5Print5printEmi+0x16>
    165a:	dc 01       	movw	r26, r24
    165c:	ed 91       	ld	r30, X+
    165e:	fc 91       	ld	r31, X
    1660:	01 90       	ld	r0, Z+
    1662:	f0 81       	ld	r31, Z
    1664:	e0 2d       	mov	r30, r0
    1666:	64 2f       	mov	r22, r20
    1668:	09 94       	ijmp
    166a:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <_ZN5Print11printNumberEmh>

0000166e <_ZN5Print5printEhi>:
    166e:	9a 01       	movw	r18, r20
    1670:	46 2f       	mov	r20, r22
    1672:	50 e0       	ldi	r21, 0x00	; 0
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <_ZN5Print5printEmi>

0000167c <_ZN5Print5printEji>:
    167c:	9a 01       	movw	r18, r20
    167e:	ab 01       	movw	r20, r22
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <_ZN5Print5printEmi>

00001688 <_ZN5Print7printlnEji>:
    1688:	0f 93       	push	r16
    168a:	1f 93       	push	r17
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	ec 01       	movw	r28, r24
    1692:	0e 94 3e 0b 	call	0x167c	; 0x167c <_ZN5Print5printEji>
    1696:	8c 01       	movw	r16, r24
    1698:	ce 01       	movw	r24, r28
    169a:	0e 94 b9 0a 	call	0x1572	; 0x1572 <_ZN5Print7printlnEv>
    169e:	80 0f       	add	r24, r16
    16a0:	91 1f       	adc	r25, r17
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	1f 91       	pop	r17
    16a8:	0f 91       	pop	r16
    16aa:	08 95       	ret

000016ac <_ZN5Print7printlnEmi>:
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	ec 01       	movw	r28, r24
    16b6:	0e 94 2a 0b 	call	0x1654	; 0x1654 <_ZN5Print5printEmi>
    16ba:	8c 01       	movw	r16, r24
    16bc:	ce 01       	movw	r24, r28
    16be:	0e 94 b9 0a 	call	0x1572	; 0x1572 <_ZN5Print7printlnEv>
    16c2:	80 0f       	add	r24, r16
    16c4:	91 1f       	adc	r25, r17
    16c6:	df 91       	pop	r29
    16c8:	cf 91       	pop	r28
    16ca:	1f 91       	pop	r17
    16cc:	0f 91       	pop	r16
    16ce:	08 95       	ret

000016d0 <_ZN5Print5printEli>:
    16d0:	cf 92       	push	r12
    16d2:	df 92       	push	r13
    16d4:	ef 92       	push	r14
    16d6:	ff 92       	push	r15
    16d8:	0f 93       	push	r16
    16da:	1f 93       	push	r17
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	21 15       	cp	r18, r1
    16e2:	31 05       	cpc	r19, r1
    16e4:	81 f4       	brne	.+32     	; 0x1706 <_ZN5Print5printEli+0x36>
    16e6:	dc 01       	movw	r26, r24
    16e8:	ed 91       	ld	r30, X+
    16ea:	fc 91       	ld	r31, X
    16ec:	01 90       	ld	r0, Z+
    16ee:	f0 81       	ld	r31, Z
    16f0:	e0 2d       	mov	r30, r0
    16f2:	64 2f       	mov	r22, r20
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	1f 91       	pop	r17
    16fa:	0f 91       	pop	r16
    16fc:	ff 90       	pop	r15
    16fe:	ef 90       	pop	r14
    1700:	df 90       	pop	r13
    1702:	cf 90       	pop	r12
    1704:	09 94       	ijmp
    1706:	2a 30       	cpi	r18, 0x0A	; 10
    1708:	31 05       	cpc	r19, r1
    170a:	01 f5       	brne	.+64     	; 0x174c <_ZN5Print5printEli+0x7c>
    170c:	77 ff       	sbrs	r23, 7
    170e:	1d c0       	rjmp	.+58     	; 0x174a <_ZN5Print5printEli+0x7a>
    1710:	6a 01       	movw	r12, r20
    1712:	7b 01       	movw	r14, r22
    1714:	ec 01       	movw	r28, r24
    1716:	6d e2       	ldi	r22, 0x2D	; 45
    1718:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN5Print5printEc>
    171c:	8c 01       	movw	r16, r24
    171e:	44 27       	eor	r20, r20
    1720:	55 27       	eor	r21, r21
    1722:	ba 01       	movw	r22, r20
    1724:	4c 19       	sub	r20, r12
    1726:	5d 09       	sbc	r21, r13
    1728:	6e 09       	sbc	r22, r14
    172a:	7f 09       	sbc	r23, r15
    172c:	2a e0       	ldi	r18, 0x0A	; 10
    172e:	ce 01       	movw	r24, r28
    1730:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <_ZN5Print11printNumberEmh>
    1734:	80 0f       	add	r24, r16
    1736:	91 1f       	adc	r25, r17
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	1f 91       	pop	r17
    173e:	0f 91       	pop	r16
    1740:	ff 90       	pop	r15
    1742:	ef 90       	pop	r14
    1744:	df 90       	pop	r13
    1746:	cf 90       	pop	r12
    1748:	08 95       	ret
    174a:	2a e0       	ldi	r18, 0x0A	; 10
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	1f 91       	pop	r17
    1752:	0f 91       	pop	r16
    1754:	ff 90       	pop	r15
    1756:	ef 90       	pop	r14
    1758:	df 90       	pop	r13
    175a:	cf 90       	pop	r12
    175c:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <_ZN5Print11printNumberEmh>

00001760 <_ZN5Print5printEii>:
    1760:	9a 01       	movw	r18, r20
    1762:	ab 01       	movw	r20, r22
    1764:	77 0f       	add	r23, r23
    1766:	66 0b       	sbc	r22, r22
    1768:	77 0b       	sbc	r23, r23
    176a:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <_ZN5Print5printEli>

0000176e <_ZN5Print7printlnEii>:
    176e:	0f 93       	push	r16
    1770:	1f 93       	push	r17
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	ec 01       	movw	r28, r24
    1778:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN5Print5printEii>
    177c:	8c 01       	movw	r16, r24
    177e:	ce 01       	movw	r24, r28
    1780:	0e 94 b9 0a 	call	0x1572	; 0x1572 <_ZN5Print7printlnEv>
    1784:	80 0f       	add	r24, r16
    1786:	91 1f       	adc	r25, r17
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	1f 91       	pop	r17
    178e:	0f 91       	pop	r16
    1790:	08 95       	ret

00001792 <_ZN5Print10printFloatEdh>:
    1792:	7f 92       	push	r7
    1794:	8f 92       	push	r8
    1796:	9f 92       	push	r9
    1798:	af 92       	push	r10
    179a:	bf 92       	push	r11
    179c:	cf 92       	push	r12
    179e:	df 92       	push	r13
    17a0:	ef 92       	push	r14
    17a2:	ff 92       	push	r15
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	8c 01       	movw	r16, r24
    17ae:	6a 01       	movw	r12, r20
    17b0:	7b 01       	movw	r14, r22
    17b2:	72 2e       	mov	r7, r18
    17b4:	9a 01       	movw	r18, r20
    17b6:	ab 01       	movw	r20, r22
    17b8:	c7 01       	movw	r24, r14
    17ba:	b6 01       	movw	r22, r12
    17bc:	0e 94 07 24 	call	0x480e	; 0x480e <__unordsf2>
    17c0:	88 23       	and	r24, r24
    17c2:	19 f0       	breq	.+6      	; 0x17ca <_ZN5Print10printFloatEdh+0x38>
    17c4:	62 e6       	ldi	r22, 0x62	; 98
    17c6:	72 e0       	ldi	r23, 0x02	; 2
    17c8:	27 c0       	rjmp	.+78     	; 0x1818 <_ZN5Print10printFloatEdh+0x86>
    17ca:	46 01       	movw	r8, r12
    17cc:	57 01       	movw	r10, r14
    17ce:	e8 94       	clt
    17d0:	b7 f8       	bld	r11, 7
    17d2:	2f ef       	ldi	r18, 0xFF	; 255
    17d4:	3f ef       	ldi	r19, 0xFF	; 255
    17d6:	4f e7       	ldi	r20, 0x7F	; 127
    17d8:	5f e7       	ldi	r21, 0x7F	; 127
    17da:	c5 01       	movw	r24, r10
    17dc:	b4 01       	movw	r22, r8
    17de:	0e 94 07 24 	call	0x480e	; 0x480e <__unordsf2>
    17e2:	81 11       	cpse	r24, r1
    17e4:	0d c0       	rjmp	.+26     	; 0x1800 <_ZN5Print10printFloatEdh+0x6e>
    17e6:	2f ef       	ldi	r18, 0xFF	; 255
    17e8:	3f ef       	ldi	r19, 0xFF	; 255
    17ea:	4f e7       	ldi	r20, 0x7F	; 127
    17ec:	5f e7       	ldi	r21, 0x7F	; 127
    17ee:	c5 01       	movw	r24, r10
    17f0:	b4 01       	movw	r22, r8
    17f2:	0e 94 02 24 	call	0x4804	; 0x4804 <__cmpsf2>
    17f6:	18 16       	cp	r1, r24
    17f8:	1c f4       	brge	.+6      	; 0x1800 <_ZN5Print10printFloatEdh+0x6e>
    17fa:	66 e6       	ldi	r22, 0x66	; 102
    17fc:	72 e0       	ldi	r23, 0x02	; 2
    17fe:	0c c0       	rjmp	.+24     	; 0x1818 <_ZN5Print10printFloatEdh+0x86>
    1800:	2f ef       	ldi	r18, 0xFF	; 255
    1802:	3f ef       	ldi	r19, 0xFF	; 255
    1804:	4f e7       	ldi	r20, 0x7F	; 127
    1806:	5f e4       	ldi	r21, 0x4F	; 79
    1808:	c7 01       	movw	r24, r14
    180a:	b6 01       	movw	r22, r12
    180c:	0e 94 0d 09 	call	0x121a	; 0x121a <__gesf2>
    1810:	18 16       	cp	r1, r24
    1812:	94 f4       	brge	.+36     	; 0x1838 <_ZN5Print10printFloatEdh+0xa6>
    1814:	6a e6       	ldi	r22, 0x6A	; 106
    1816:	72 e0       	ldi	r23, 0x02	; 2
    1818:	c8 01       	movw	r24, r16
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	1f 91       	pop	r17
    1820:	0f 91       	pop	r16
    1822:	ff 90       	pop	r15
    1824:	ef 90       	pop	r14
    1826:	df 90       	pop	r13
    1828:	cf 90       	pop	r12
    182a:	bf 90       	pop	r11
    182c:	af 90       	pop	r10
    182e:	9f 90       	pop	r9
    1830:	8f 90       	pop	r8
    1832:	7f 90       	pop	r7
    1834:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <_ZN5Print5writeEPKc>
    1838:	2f ef       	ldi	r18, 0xFF	; 255
    183a:	3f ef       	ldi	r19, 0xFF	; 255
    183c:	4f e7       	ldi	r20, 0x7F	; 127
    183e:	5f ec       	ldi	r21, 0xCF	; 207
    1840:	c7 01       	movw	r24, r14
    1842:	b6 01       	movw	r22, r12
    1844:	0e 94 02 24 	call	0x4804	; 0x4804 <__cmpsf2>
    1848:	87 fd       	sbrc	r24, 7
    184a:	e4 cf       	rjmp	.-56     	; 0x1814 <_ZN5Print10printFloatEdh+0x82>
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	a9 01       	movw	r20, r18
    1852:	c7 01       	movw	r24, r14
    1854:	b6 01       	movw	r22, r12
    1856:	0e 94 02 24 	call	0x4804	; 0x4804 <__cmpsf2>
    185a:	87 ff       	sbrs	r24, 7
    185c:	0a c0       	rjmp	.+20     	; 0x1872 <_ZN5Print10printFloatEdh+0xe0>
    185e:	6d e2       	ldi	r22, 0x2D	; 45
    1860:	c8 01       	movw	r24, r16
    1862:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN5Print5printEc>
    1866:	ec 01       	movw	r28, r24
    1868:	f7 fa       	bst	r15, 7
    186a:	f0 94       	com	r15
    186c:	f7 f8       	bld	r15, 7
    186e:	f0 94       	com	r15
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <_ZN5Print10printFloatEdh+0xe4>
    1872:	c0 e0       	ldi	r28, 0x00	; 0
    1874:	d0 e0       	ldi	r29, 0x00	; 0
    1876:	b1 2c       	mov	r11, r1
    1878:	60 e0       	ldi	r22, 0x00	; 0
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	9f e3       	ldi	r25, 0x3F	; 63
    1880:	7b 14       	cp	r7, r11
    1882:	41 f0       	breq	.+16     	; 0x1894 <_ZN5Print10printFloatEdh+0x102>
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e2       	ldi	r20, 0x20	; 32
    188a:	51 e4       	ldi	r21, 0x41	; 65
    188c:	0e 94 d7 07 	call	0xfae	; 0xfae <__divsf3>
    1890:	b3 94       	inc	r11
    1892:	f6 cf       	rjmp	.-20     	; 0x1880 <_ZN5Print10printFloatEdh+0xee>
    1894:	a7 01       	movw	r20, r14
    1896:	96 01       	movw	r18, r12
    1898:	0e 94 6b 07 	call	0xed6	; 0xed6 <__addsf3>
    189c:	6b 01       	movw	r12, r22
    189e:	7c 01       	movw	r14, r24
    18a0:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__fixunssfsi>
    18a4:	4b 01       	movw	r8, r22
    18a6:	5c 01       	movw	r10, r24
    18a8:	2a e0       	ldi	r18, 0x0A	; 10
    18aa:	ab 01       	movw	r20, r22
    18ac:	bc 01       	movw	r22, r24
    18ae:	c8 01       	movw	r24, r16
    18b0:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <_ZN5Print11printNumberEmh>
    18b4:	c8 0f       	add	r28, r24
    18b6:	d9 1f       	adc	r29, r25
    18b8:	77 20       	and	r7, r7
    18ba:	b9 f1       	breq	.+110    	; 0x192a <_ZN5Print10printFloatEdh+0x198>
    18bc:	c5 01       	movw	r24, r10
    18be:	b4 01       	movw	r22, r8
    18c0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__floatunsisf>
    18c4:	9b 01       	movw	r18, r22
    18c6:	ac 01       	movw	r20, r24
    18c8:	c7 01       	movw	r24, r14
    18ca:	b6 01       	movw	r22, r12
    18cc:	0e 94 6a 07 	call	0xed4	; 0xed4 <__subsf3>
    18d0:	6b 01       	movw	r12, r22
    18d2:	7c 01       	movw	r14, r24
    18d4:	6e e2       	ldi	r22, 0x2E	; 46
    18d6:	c8 01       	movw	r24, r16
    18d8:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN5Print5printEc>
    18dc:	c8 0f       	add	r28, r24
    18de:	d9 1f       	adc	r29, r25
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	40 e2       	ldi	r20, 0x20	; 32
    18e6:	51 e4       	ldi	r21, 0x41	; 65
    18e8:	c7 01       	movw	r24, r14
    18ea:	b6 01       	movw	r22, r12
    18ec:	0e 94 12 09 	call	0x1224	; 0x1224 <__mulsf3>
    18f0:	4b 01       	movw	r8, r22
    18f2:	5c 01       	movw	r10, r24
    18f4:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__fixunssfsi>
    18f8:	6b 01       	movw	r12, r22
    18fa:	7c 01       	movw	r14, r24
    18fc:	4a e0       	ldi	r20, 0x0A	; 10
    18fe:	50 e0       	ldi	r21, 0x00	; 0
    1900:	c8 01       	movw	r24, r16
    1902:	0e 94 3e 0b 	call	0x167c	; 0x167c <_ZN5Print5printEji>
    1906:	c8 0f       	add	r28, r24
    1908:	d9 1f       	adc	r29, r25
    190a:	b6 01       	movw	r22, r12
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__floatunsisf>
    1914:	9b 01       	movw	r18, r22
    1916:	ac 01       	movw	r20, r24
    1918:	c5 01       	movw	r24, r10
    191a:	b4 01       	movw	r22, r8
    191c:	0e 94 6a 07 	call	0xed4	; 0xed4 <__subsf3>
    1920:	6b 01       	movw	r12, r22
    1922:	7c 01       	movw	r14, r24
    1924:	7a 94       	dec	r7
    1926:	71 10       	cpse	r7, r1
    1928:	db cf       	rjmp	.-74     	; 0x18e0 <_ZN5Print10printFloatEdh+0x14e>
    192a:	ce 01       	movw	r24, r28
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	1f 91       	pop	r17
    1932:	0f 91       	pop	r16
    1934:	ff 90       	pop	r15
    1936:	ef 90       	pop	r14
    1938:	df 90       	pop	r13
    193a:	cf 90       	pop	r12
    193c:	bf 90       	pop	r11
    193e:	af 90       	pop	r10
    1940:	9f 90       	pop	r9
    1942:	8f 90       	pop	r8
    1944:	7f 90       	pop	r7
    1946:	08 95       	ret

00001948 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
    1950:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1952:	0e 94 c9 0b 	call	0x1792	; 0x1792 <_ZN5Print10printFloatEdh>
    1956:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1958:	ce 01       	movw	r24, r28
    195a:	0e 94 b9 0a 	call	0x1572	; 0x1572 <_ZN5Print7printlnEv>
  return n;
}
    195e:	80 0f       	add	r24, r16
    1960:	91 1f       	adc	r25, r17
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	0f 91       	pop	r16
    196a:	08 95       	ret

0000196c <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    196c:	1f 92       	push	r1
    196e:	0f 92       	push	r0
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	0f 92       	push	r0
    1974:	11 24       	eor	r1, r1
    1976:	2f 93       	push	r18
    1978:	3f 93       	push	r19
    197a:	8f 93       	push	r24
    197c:	9f 93       	push	r25
    197e:	af 93       	push	r26
    1980:	bf 93       	push	r27
    1982:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <timer0_millis>
    1986:	90 91 68 05 	lds	r25, 0x0568	; 0x800568 <timer0_millis+0x1>
    198a:	a0 91 69 05 	lds	r26, 0x0569	; 0x800569 <timer0_millis+0x2>
    198e:	b0 91 6a 05 	lds	r27, 0x056A	; 0x80056a <timer0_millis+0x3>
    1992:	30 91 66 05 	lds	r19, 0x0566	; 0x800566 <timer0_fract>
    1996:	23 e0       	ldi	r18, 0x03	; 3
    1998:	23 0f       	add	r18, r19
    199a:	2d 37       	cpi	r18, 0x7D	; 125
    199c:	20 f4       	brcc	.+8      	; 0x19a6 <__vector_16+0x3a>
    199e:	01 96       	adiw	r24, 0x01	; 1
    19a0:	a1 1d       	adc	r26, r1
    19a2:	b1 1d       	adc	r27, r1
    19a4:	05 c0       	rjmp	.+10     	; 0x19b0 <__vector_16+0x44>
    19a6:	26 e8       	ldi	r18, 0x86	; 134
    19a8:	23 0f       	add	r18, r19
    19aa:	02 96       	adiw	r24, 0x02	; 2
    19ac:	a1 1d       	adc	r26, r1
    19ae:	b1 1d       	adc	r27, r1
    19b0:	20 93 66 05 	sts	0x0566, r18	; 0x800566 <timer0_fract>
    19b4:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <timer0_millis>
    19b8:	90 93 68 05 	sts	0x0568, r25	; 0x800568 <timer0_millis+0x1>
    19bc:	a0 93 69 05 	sts	0x0569, r26	; 0x800569 <timer0_millis+0x2>
    19c0:	b0 93 6a 05 	sts	0x056A, r27	; 0x80056a <timer0_millis+0x3>
    19c4:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <timer0_overflow_count>
    19c8:	90 91 6c 05 	lds	r25, 0x056C	; 0x80056c <timer0_overflow_count+0x1>
    19cc:	a0 91 6d 05 	lds	r26, 0x056D	; 0x80056d <timer0_overflow_count+0x2>
    19d0:	b0 91 6e 05 	lds	r27, 0x056E	; 0x80056e <timer0_overflow_count+0x3>
    19d4:	01 96       	adiw	r24, 0x01	; 1
    19d6:	a1 1d       	adc	r26, r1
    19d8:	b1 1d       	adc	r27, r1
    19da:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <timer0_overflow_count>
    19de:	90 93 6c 05 	sts	0x056C, r25	; 0x80056c <timer0_overflow_count+0x1>
    19e2:	a0 93 6d 05 	sts	0x056D, r26	; 0x80056d <timer0_overflow_count+0x2>
    19e6:	b0 93 6e 05 	sts	0x056E, r27	; 0x80056e <timer0_overflow_count+0x3>
    19ea:	bf 91       	pop	r27
    19ec:	af 91       	pop	r26
    19ee:	9f 91       	pop	r25
    19f0:	8f 91       	pop	r24
    19f2:	3f 91       	pop	r19
    19f4:	2f 91       	pop	r18
    19f6:	0f 90       	pop	r0
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	0f 90       	pop	r0
    19fc:	1f 90       	pop	r1
    19fe:	18 95       	reti

00001a00 <millis>:
    1a00:	2f b7       	in	r18, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	60 91 67 05 	lds	r22, 0x0567	; 0x800567 <timer0_millis>
    1a08:	70 91 68 05 	lds	r23, 0x0568	; 0x800568 <timer0_millis+0x1>
    1a0c:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <timer0_millis+0x2>
    1a10:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <timer0_millis+0x3>
    1a14:	2f bf       	out	0x3f, r18	; 63
    1a16:	08 95       	ret

00001a18 <micros>:
    1a18:	3f b7       	in	r19, 0x3f	; 63
    1a1a:	f8 94       	cli
    1a1c:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <timer0_overflow_count>
    1a20:	90 91 6c 05 	lds	r25, 0x056C	; 0x80056c <timer0_overflow_count+0x1>
    1a24:	a0 91 6d 05 	lds	r26, 0x056D	; 0x80056d <timer0_overflow_count+0x2>
    1a28:	b0 91 6e 05 	lds	r27, 0x056E	; 0x80056e <timer0_overflow_count+0x3>
    1a2c:	26 b5       	in	r18, 0x26	; 38
    1a2e:	a8 9b       	sbis	0x15, 0	; 21
    1a30:	05 c0       	rjmp	.+10     	; 0x1a3c <micros+0x24>
    1a32:	2f 3f       	cpi	r18, 0xFF	; 255
    1a34:	19 f0       	breq	.+6      	; 0x1a3c <micros+0x24>
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	a1 1d       	adc	r26, r1
    1a3a:	b1 1d       	adc	r27, r1
    1a3c:	3f bf       	out	0x3f, r19	; 63
    1a3e:	ba 2f       	mov	r27, r26
    1a40:	a9 2f       	mov	r26, r25
    1a42:	98 2f       	mov	r25, r24
    1a44:	88 27       	eor	r24, r24
    1a46:	82 0f       	add	r24, r18
    1a48:	91 1d       	adc	r25, r1
    1a4a:	a1 1d       	adc	r26, r1
    1a4c:	b1 1d       	adc	r27, r1
    1a4e:	bc 01       	movw	r22, r24
    1a50:	cd 01       	movw	r24, r26
    1a52:	42 e0       	ldi	r20, 0x02	; 2
    1a54:	66 0f       	add	r22, r22
    1a56:	77 1f       	adc	r23, r23
    1a58:	88 1f       	adc	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	4a 95       	dec	r20
    1a5e:	d1 f7       	brne	.-12     	; 0x1a54 <micros+0x3c>
    1a60:	08 95       	ret

00001a62 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1a62:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1a64:	84 b5       	in	r24, 0x24	; 36
    1a66:	82 60       	ori	r24, 0x02	; 2
    1a68:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1a6a:	84 b5       	in	r24, 0x24	; 36
    1a6c:	81 60       	ori	r24, 0x01	; 1
    1a6e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1a70:	85 b5       	in	r24, 0x25	; 37
    1a72:	82 60       	ori	r24, 0x02	; 2
    1a74:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1a76:	85 b5       	in	r24, 0x25	; 37
    1a78:	81 60       	ori	r24, 0x01	; 1
    1a7a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1a7c:	ee e6       	ldi	r30, 0x6E	; 110
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	81 60       	ori	r24, 0x01	; 1
    1a84:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1a86:	e1 e8       	ldi	r30, 0x81	; 129
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1a8c:	80 81       	ld	r24, Z
    1a8e:	82 60       	ori	r24, 0x02	; 2
    1a90:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1a92:	80 81       	ld	r24, Z
    1a94:	81 60       	ori	r24, 0x01	; 1
    1a96:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1a98:	e0 e8       	ldi	r30, 0x80	; 128
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	81 60       	ori	r24, 0x01	; 1
    1aa0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1aa2:	e1 eb       	ldi	r30, 0xB1	; 177
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	84 60       	ori	r24, 0x04	; 4
    1aaa:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1aac:	e0 eb       	ldi	r30, 0xB0	; 176
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	81 60       	ori	r24, 0x01	; 1
    1ab4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1ab6:	ea e7       	ldi	r30, 0x7A	; 122
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	84 60       	ori	r24, 0x04	; 4
    1abe:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1ac0:	80 81       	ld	r24, Z
    1ac2:	82 60       	ori	r24, 0x02	; 2
    1ac4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1ac6:	80 81       	ld	r24, Z
    1ac8:	81 60       	ori	r24, 0x01	; 1
    1aca:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1acc:	80 81       	ld	r24, Z
    1ace:	80 68       	ori	r24, 0x80	; 128
    1ad0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1ad2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    1ad6:	08 95       	ret

00001ad8 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1ad8:	83 30       	cpi	r24, 0x03	; 3
    1ada:	81 f0       	breq	.+32     	; 0x1afc <turnOffPWM+0x24>
    1adc:	28 f4       	brcc	.+10     	; 0x1ae8 <turnOffPWM+0x10>
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	99 f0       	breq	.+38     	; 0x1b08 <turnOffPWM+0x30>
    1ae2:	82 30       	cpi	r24, 0x02	; 2
    1ae4:	a1 f0       	breq	.+40     	; 0x1b0e <turnOffPWM+0x36>
    1ae6:	08 95       	ret
    1ae8:	87 30       	cpi	r24, 0x07	; 7
    1aea:	a9 f0       	breq	.+42     	; 0x1b16 <turnOffPWM+0x3e>
    1aec:	88 30       	cpi	r24, 0x08	; 8
    1aee:	b9 f0       	breq	.+46     	; 0x1b1e <turnOffPWM+0x46>
    1af0:	84 30       	cpi	r24, 0x04	; 4
    1af2:	d1 f4       	brne	.+52     	; 0x1b28 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1af4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1af8:	8f 7d       	andi	r24, 0xDF	; 223
    1afa:	03 c0       	rjmp	.+6      	; 0x1b02 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1afc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1b00:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1b02:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1b06:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1b08:	84 b5       	in	r24, 0x24	; 36
    1b0a:	8f 77       	andi	r24, 0x7F	; 127
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1b0e:	84 b5       	in	r24, 0x24	; 36
    1b10:	8f 7d       	andi	r24, 0xDF	; 223
    1b12:	84 bd       	out	0x24, r24	; 36
    1b14:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1b16:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1b1a:	8f 77       	andi	r24, 0x7F	; 127
    1b1c:	03 c0       	rjmp	.+6      	; 0x1b24 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1b1e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1b22:	8f 7d       	andi	r24, 0xDF	; 223
    1b24:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1b28:	08 95       	ret

00001b2a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	fc 01       	movw	r30, r24
    1b32:	ed 5e       	subi	r30, 0xED	; 237
    1b34:	fe 4f       	sbci	r31, 0xFE	; 254
    1b36:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1b38:	fc 01       	movw	r30, r24
    1b3a:	e9 5d       	subi	r30, 0xD9	; 217
    1b3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b3e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1b40:	88 23       	and	r24, r24
    1b42:	61 f1       	breq	.+88     	; 0x1b9c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	eb 5b       	subi	r30, 0xBB	; 187
    1b4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b50:	c5 91       	lpm	r28, Z+
    1b52:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1b54:	fc 01       	movw	r30, r24
    1b56:	e5 5c       	subi	r30, 0xC5	; 197
    1b58:	fe 4f       	sbci	r31, 0xFE	; 254
    1b5a:	a5 91       	lpm	r26, Z+
    1b5c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1b5e:	61 11       	cpse	r22, r1
    1b60:	09 c0       	rjmp	.+18     	; 0x1b74 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1b62:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1b64:	f8 94       	cli
		*reg &= ~bit;
    1b66:	88 81       	ld	r24, Y
    1b68:	20 95       	com	r18
    1b6a:	82 23       	and	r24, r18
    1b6c:	88 83       	st	Y, r24
		*out &= ~bit;
    1b6e:	ec 91       	ld	r30, X
    1b70:	2e 23       	and	r18, r30
    1b72:	0b c0       	rjmp	.+22     	; 0x1b8a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1b74:	62 30       	cpi	r22, 0x02	; 2
    1b76:	61 f4       	brne	.+24     	; 0x1b90 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1b78:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1b7a:	f8 94       	cli
		*reg &= ~bit;
    1b7c:	88 81       	ld	r24, Y
    1b7e:	32 2f       	mov	r19, r18
    1b80:	30 95       	com	r19
    1b82:	83 23       	and	r24, r19
    1b84:	88 83       	st	Y, r24
		*out |= bit;
    1b86:	ec 91       	ld	r30, X
    1b88:	2e 2b       	or	r18, r30
    1b8a:	2c 93       	st	X, r18
		SREG = oldSREG;
    1b8c:	9f bf       	out	0x3f, r25	; 63
    1b8e:	06 c0       	rjmp	.+12     	; 0x1b9c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1b90:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1b92:	f8 94       	cli
		*reg |= bit;
    1b94:	e8 81       	ld	r30, Y
    1b96:	2e 2b       	or	r18, r30
    1b98:	28 83       	st	Y, r18
		SREG = oldSREG;
    1b9a:	8f bf       	out	0x3f, r24	; 63
	}
}
    1b9c:	df 91       	pop	r29
    1b9e:	cf 91       	pop	r28
    1ba0:	08 95       	ret

00001ba2 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1ba2:	1f 93       	push	r17
    1ba4:	cf 93       	push	r28
    1ba6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	f9 01       	movw	r30, r18
    1bae:	e1 50       	subi	r30, 0x01	; 1
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1bb4:	f9 01       	movw	r30, r18
    1bb6:	ed 5e       	subi	r30, 0xED	; 237
    1bb8:	fe 4f       	sbci	r31, 0xFE	; 254
    1bba:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1bbc:	f9 01       	movw	r30, r18
    1bbe:	e9 5d       	subi	r30, 0xD9	; 217
    1bc0:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc2:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1bc4:	cc 23       	and	r28, r28
    1bc6:	c1 f0       	breq	.+48     	; 0x1bf8 <digitalWrite+0x56>
    1bc8:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1bca:	81 11       	cpse	r24, r1
    1bcc:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <turnOffPWM>

	out = portOutputRegister(port);
    1bd0:	ec 2f       	mov	r30, r28
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	ee 0f       	add	r30, r30
    1bd6:	ff 1f       	adc	r31, r31
    1bd8:	e5 5c       	subi	r30, 0xC5	; 197
    1bda:	fe 4f       	sbci	r31, 0xFE	; 254
    1bdc:	a5 91       	lpm	r26, Z+
    1bde:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1be0:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1be2:	f8 94       	cli

	if (val == LOW) {
    1be4:	11 11       	cpse	r17, r1
    1be6:	04 c0       	rjmp	.+8      	; 0x1bf0 <digitalWrite+0x4e>
		*out &= ~bit;
    1be8:	8c 91       	ld	r24, X
    1bea:	d0 95       	com	r29
    1bec:	d8 23       	and	r29, r24
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1bf0:	ec 91       	ld	r30, X
    1bf2:	de 2b       	or	r29, r30
    1bf4:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1bf6:	9f bf       	out	0x3f, r25	; 63
}
    1bf8:	df 91       	pop	r29
    1bfa:	cf 91       	pop	r28
    1bfc:	1f 91       	pop	r17
    1bfe:	08 95       	ret

00001c00 <_ZL23enterU32InBufferAtIndexmPhh>:
        wait = false ;
      }
    }
  }
  return recoveryDone ;
}
    1c00:	fa 01       	movw	r30, r20
    1c02:	e2 0f       	add	r30, r18
    1c04:	f1 1d       	adc	r31, r1
    1c06:	60 83       	st	Z, r22
    1c08:	71 83       	std	Z+1, r23	; 0x01
    1c0a:	82 83       	std	Z+2, r24	; 0x02
    1c0c:	93 83       	std	Z+3, r25	; 0x03
    1c0e:	08 95       	ret

00001c10 <_ZL20u32FromBufferAtIndexPhh>:
    1c10:	fc 01       	movw	r30, r24
    1c12:	e6 0f       	add	r30, r22
    1c14:	f1 1d       	adc	r31, r1
    1c16:	20 81       	ld	r18, Z
    1c18:	31 81       	ldd	r19, Z+1	; 0x01
    1c1a:	62 81       	ldd	r22, Z+2	; 0x02
    1c1c:	86 2f       	mov	r24, r22
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	a0 e0       	ldi	r26, 0x00	; 0
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	dc 01       	movw	r26, r24
    1c26:	99 27       	eor	r25, r25
    1c28:	88 27       	eor	r24, r24
    1c2a:	93 2b       	or	r25, r19
    1c2c:	82 2b       	or	r24, r18
    1c2e:	23 81       	ldd	r18, Z+3	; 0x03
    1c30:	bc 01       	movw	r22, r24
    1c32:	cd 01       	movw	r24, r26
    1c34:	92 2b       	or	r25, r18
    1c36:	08 95       	ret

00001c38 <_ZL19lengthCodeForLengthh>:
    1c38:	88 31       	cpi	r24, 0x18	; 24
    1c3a:	e9 f0       	breq	.+58     	; 0x1c76 <_ZL19lengthCodeForLengthh+0x3e>
    1c3c:	58 f4       	brcc	.+22     	; 0x1c54 <_ZL19lengthCodeForLengthh+0x1c>
    1c3e:	80 31       	cpi	r24, 0x10	; 16
    1c40:	71 f1       	breq	.+92     	; 0x1c9e <_ZL19lengthCodeForLengthh+0x66>
    1c42:	84 31       	cpi	r24, 0x14	; 20
    1c44:	99 f0       	breq	.+38     	; 0x1c6c <_ZL19lengthCodeForLengthh+0x34>
    1c46:	8c 30       	cpi	r24, 0x0C	; 12
    1c48:	59 f4       	brne	.+22     	; 0x1c60 <_ZL19lengthCodeForLengthh+0x28>
    1c4a:	69 e0       	ldi	r22, 0x09	; 9
    1c4c:	70 e0       	ldi	r23, 0x00	; 0
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	08 95       	ret
    1c54:	80 33       	cpi	r24, 0x30	; 48
    1c56:	c9 f0       	breq	.+50     	; 0x1c8a <_ZL19lengthCodeForLengthh+0x52>
    1c58:	80 34       	cpi	r24, 0x40	; 64
    1c5a:	e1 f0       	breq	.+56     	; 0x1c94 <_ZL19lengthCodeForLengthh+0x5c>
    1c5c:	80 32       	cpi	r24, 0x20	; 32
    1c5e:	81 f0       	breq	.+32     	; 0x1c80 <_ZL19lengthCodeForLengthh+0x48>
    1c60:	68 2f       	mov	r22, r24
    1c62:	6f 70       	andi	r22, 0x0F	; 15
    1c64:	70 e0       	ldi	r23, 0x00	; 0
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	08 95       	ret
    1c6c:	6b e0       	ldi	r22, 0x0B	; 11
    1c6e:	70 e0       	ldi	r23, 0x00	; 0
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	08 95       	ret
    1c76:	6c e0       	ldi	r22, 0x0C	; 12
    1c78:	70 e0       	ldi	r23, 0x00	; 0
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	08 95       	ret
    1c80:	6d e0       	ldi	r22, 0x0D	; 13
    1c82:	70 e0       	ldi	r23, 0x00	; 0
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	08 95       	ret
    1c8a:	6e e0       	ldi	r22, 0x0E	; 14
    1c8c:	70 e0       	ldi	r23, 0x00	; 0
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	08 95       	ret
    1c94:	6f e0       	ldi	r22, 0x0F	; 15
    1c96:	70 e0       	ldi	r23, 0x00	; 0
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	08 95       	ret
    1c9e:	6a e0       	ldi	r22, 0x0A	; 10
    1ca0:	70 e0       	ldi	r23, 0x00	; 0
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	08 95       	ret

00001ca8 <_ZN12ACANFDBuffer6appendERK12CANFDMessage.part.2>:
    1ca8:	cf 93       	push	r28
    1caa:	df 93       	push	r29
    1cac:	ec 01       	movw	r28, r24
    1cae:	4a 85       	ldd	r20, Y+10	; 0x0a
    1cb0:	5b 85       	ldd	r21, Y+11	; 0x0b
    1cb2:	88 e4       	ldi	r24, 0x48	; 72
    1cb4:	84 9f       	mul	r24, r20
    1cb6:	90 01       	movw	r18, r0
    1cb8:	85 9f       	mul	r24, r21
    1cba:	30 0d       	add	r19, r0
    1cbc:	11 24       	eor	r1, r1
    1cbe:	a8 81       	ld	r26, Y
    1cc0:	b9 81       	ldd	r27, Y+1	; 0x01
    1cc2:	a2 0f       	add	r26, r18
    1cc4:	b3 1f       	adc	r27, r19
    1cc6:	fb 01       	movw	r30, r22
    1cc8:	01 90       	ld	r0, Z+
    1cca:	0d 92       	st	X+, r0
    1ccc:	8a 95       	dec	r24
    1cce:	e1 f7       	brne	.-8      	; 0x1cc8 <_ZN12ACANFDBuffer6appendERK12CANFDMessage.part.2+0x20>
    1cd0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cd2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cd4:	ac 85       	ldd	r26, Y+12	; 0x0c
    1cd6:	bd 85       	ldd	r27, Y+13	; 0x0d
    1cd8:	01 96       	adiw	r24, 0x01	; 1
    1cda:	a1 1d       	adc	r26, r1
    1cdc:	b1 1d       	adc	r27, r1
    1cde:	8a 87       	std	Y+10, r24	; 0x0a
    1ce0:	9b 87       	std	Y+11, r25	; 0x0b
    1ce2:	ac 87       	std	Y+12, r26	; 0x0c
    1ce4:	bd 87       	std	Y+13, r27	; 0x0d
    1ce6:	4a 81       	ldd	r20, Y+2	; 0x02
    1ce8:	5b 81       	ldd	r21, Y+3	; 0x03
    1cea:	6c 81       	ldd	r22, Y+4	; 0x04
    1cec:	7d 81       	ldd	r23, Y+5	; 0x05
    1cee:	84 17       	cp	r24, r20
    1cf0:	95 07       	cpc	r25, r21
    1cf2:	a6 07       	cpc	r26, r22
    1cf4:	b7 07       	cpc	r27, r23
    1cf6:	21 f4       	brne	.+8      	; 0x1d00 <_ZN12ACANFDBuffer6appendERK12CANFDMessage.part.2+0x58>
    1cf8:	1a 86       	std	Y+10, r1	; 0x0a
    1cfa:	1b 86       	std	Y+11, r1	; 0x0b
    1cfc:	1c 86       	std	Y+12, r1	; 0x0c
    1cfe:	1d 86       	std	Y+13, r1	; 0x0d
    1d00:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d02:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d04:	a8 89       	ldd	r26, Y+16	; 0x10
    1d06:	b9 89       	ldd	r27, Y+17	; 0x11
    1d08:	01 96       	adiw	r24, 0x01	; 1
    1d0a:	a1 1d       	adc	r26, r1
    1d0c:	b1 1d       	adc	r27, r1
    1d0e:	8e 87       	std	Y+14, r24	; 0x0e
    1d10:	9f 87       	std	Y+15, r25	; 0x0f
    1d12:	a8 8b       	std	Y+16, r26	; 0x10
    1d14:	b9 8b       	std	Y+17, r27	; 0x11
    1d16:	4a 89       	ldd	r20, Y+18	; 0x12
    1d18:	5b 89       	ldd	r21, Y+19	; 0x13
    1d1a:	6c 89       	ldd	r22, Y+20	; 0x14
    1d1c:	7d 89       	ldd	r23, Y+21	; 0x15
    1d1e:	48 17       	cp	r20, r24
    1d20:	59 07       	cpc	r21, r25
    1d22:	6a 07       	cpc	r22, r26
    1d24:	7b 07       	cpc	r23, r27
    1d26:	20 f4       	brcc	.+8      	; 0x1d30 <_ZN12ACANFDBuffer6appendERK12CANFDMessage.part.2+0x88>
    1d28:	8a 8b       	std	Y+18, r24	; 0x12
    1d2a:	9b 8b       	std	Y+19, r25	; 0x13
    1d2c:	ac 8b       	std	Y+20, r26	; 0x14
    1d2e:	bd 8b       	std	Y+21, r27	; 0x15
    1d30:	df 91       	pop	r29
    1d32:	cf 91       	pop	r28
    1d34:	08 95       	ret

00001d36 <_ZN12ACANFDBuffer6removeER12CANFDMessage.part.3>:
    1d36:	cf 93       	push	r28
    1d38:	df 93       	push	r29
    1d3a:	ec 01       	movw	r28, r24
    1d3c:	4e 81       	ldd	r20, Y+6	; 0x06
    1d3e:	5f 81       	ldd	r21, Y+7	; 0x07
    1d40:	88 e4       	ldi	r24, 0x48	; 72
    1d42:	84 9f       	mul	r24, r20
    1d44:	90 01       	movw	r18, r0
    1d46:	85 9f       	mul	r24, r21
    1d48:	30 0d       	add	r19, r0
    1d4a:	11 24       	eor	r1, r1
    1d4c:	e8 81       	ld	r30, Y
    1d4e:	f9 81       	ldd	r31, Y+1	; 0x01
    1d50:	e2 0f       	add	r30, r18
    1d52:	f3 1f       	adc	r31, r19
    1d54:	db 01       	movw	r26, r22
    1d56:	01 90       	ld	r0, Z+
    1d58:	0d 92       	st	X+, r0
    1d5a:	8a 95       	dec	r24
    1d5c:	e1 f7       	brne	.-8      	; 0x1d56 <_ZN12ACANFDBuffer6removeER12CANFDMessage.part.3+0x20>
    1d5e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d60:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d62:	a8 89       	ldd	r26, Y+16	; 0x10
    1d64:	b9 89       	ldd	r27, Y+17	; 0x11
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	a1 09       	sbc	r26, r1
    1d6a:	b1 09       	sbc	r27, r1
    1d6c:	8e 87       	std	Y+14, r24	; 0x0e
    1d6e:	9f 87       	std	Y+15, r25	; 0x0f
    1d70:	a8 8b       	std	Y+16, r26	; 0x10
    1d72:	b9 8b       	std	Y+17, r27	; 0x11
    1d74:	8e 81       	ldd	r24, Y+6	; 0x06
    1d76:	9f 81       	ldd	r25, Y+7	; 0x07
    1d78:	a8 85       	ldd	r26, Y+8	; 0x08
    1d7a:	b9 85       	ldd	r27, Y+9	; 0x09
    1d7c:	01 96       	adiw	r24, 0x01	; 1
    1d7e:	a1 1d       	adc	r26, r1
    1d80:	b1 1d       	adc	r27, r1
    1d82:	8e 83       	std	Y+6, r24	; 0x06
    1d84:	9f 83       	std	Y+7, r25	; 0x07
    1d86:	a8 87       	std	Y+8, r26	; 0x08
    1d88:	b9 87       	std	Y+9, r27	; 0x09
    1d8a:	4a 81       	ldd	r20, Y+2	; 0x02
    1d8c:	5b 81       	ldd	r21, Y+3	; 0x03
    1d8e:	6c 81       	ldd	r22, Y+4	; 0x04
    1d90:	7d 81       	ldd	r23, Y+5	; 0x05
    1d92:	84 17       	cp	r24, r20
    1d94:	95 07       	cpc	r25, r21
    1d96:	a6 07       	cpc	r26, r22
    1d98:	b7 07       	cpc	r27, r23
    1d9a:	21 f4       	brne	.+8      	; 0x1da4 <_ZN12ACANFDBuffer6removeER12CANFDMessage.part.3+0x6e>
    1d9c:	1e 82       	std	Y+6, r1	; 0x06
    1d9e:	1f 82       	std	Y+7, r1	; 0x07
    1da0:	18 86       	std	Y+8, r1	; 0x08
    1da2:	19 86       	std	Y+9, r1	; 0x09
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	08 95       	ret

00001daa <_ZN8SPIClass8transferEPvj.part.6>:
    1daa:	fc 01       	movw	r30, r24
    1dac:	20 81       	ld	r18, Z
    1dae:	2e bd       	out	0x2e, r18	; 46
    1db0:	9b 01       	movw	r18, r22
    1db2:	21 50       	subi	r18, 0x01	; 1
    1db4:	31 09       	sbc	r19, r1
    1db6:	41 f0       	breq	.+16     	; 0x1dc8 <_ZN8SPIClass8transferEPvj.part.6+0x1e>
    1db8:	51 81       	ldd	r21, Z+1	; 0x01
    1dba:	0d b4       	in	r0, 0x2d	; 45
    1dbc:	07 fe       	sbrs	r0, 7
    1dbe:	fd cf       	rjmp	.-6      	; 0x1dba <_ZN8SPIClass8transferEPvj.part.6+0x10>
    1dc0:	4e b5       	in	r20, 0x2e	; 46
    1dc2:	5e bd       	out	0x2e, r21	; 46
    1dc4:	41 93       	st	Z+, r20
    1dc6:	f5 cf       	rjmp	.-22     	; 0x1db2 <_ZN8SPIClass8transferEPvj.part.6+0x8>
    1dc8:	61 50       	subi	r22, 0x01	; 1
    1dca:	71 09       	sbc	r23, r1
    1dcc:	fc 01       	movw	r30, r24
    1dce:	e6 0f       	add	r30, r22
    1dd0:	f7 1f       	adc	r31, r23
    1dd2:	0d b4       	in	r0, 0x2d	; 45
    1dd4:	07 fe       	sbrs	r0, 7
    1dd6:	fd cf       	rjmp	.-6      	; 0x1dd2 <_ZN8SPIClass8transferEPvj.part.6+0x28>
    1dd8:	8e b5       	in	r24, 0x2e	; 46
    1dda:	80 83       	st	Z, r24
    1ddc:	08 95       	ret

00001dde <_ZN12ACANFDBuffer12initWithSizeEm>:
    1dde:	8f 92       	push	r8
    1de0:	9f 92       	push	r9
    1de2:	af 92       	push	r10
    1de4:	bf 92       	push	r11
    1de6:	cf 92       	push	r12
    1de8:	df 92       	push	r13
    1dea:	ef 92       	push	r14
    1dec:	ff 92       	push	r15
    1dee:	0f 93       	push	r16
    1df0:	1f 93       	push	r17
    1df2:	cf 93       	push	r28
    1df4:	df 93       	push	r29
    1df6:	ec 01       	movw	r28, r24
    1df8:	6a 01       	movw	r12, r20
    1dfa:	7b 01       	movw	r14, r22
    1dfc:	45 3c       	cpi	r20, 0xC5	; 197
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	58 07       	cpc	r21, r24
    1e02:	38 f4       	brcc	.+14     	; 0x1e12 <_ZN12ACANFDBuffer12initWithSizeEm+0x34>
    1e04:	28 e4       	ldi	r18, 0x48	; 72
    1e06:	24 9f       	mul	r18, r20
    1e08:	c0 01       	movw	r24, r0
    1e0a:	25 9f       	mul	r18, r21
    1e0c:	90 0d       	add	r25, r0
    1e0e:	11 24       	eor	r1, r1
    1e10:	02 c0       	rjmp	.+4      	; 0x1e16 <_ZN12ACANFDBuffer12initWithSizeEm+0x38>
    1e12:	8f ef       	ldi	r24, 0xFF	; 255
    1e14:	9f ef       	ldi	r25, 0xFF	; 255
    1e16:	0e 94 47 0a 	call	0x148e	; 0x148e <_Znaj>
    1e1a:	4c 01       	movw	r8, r24
    1e1c:	56 01       	movw	r10, r12
    1e1e:	8c 01       	movw	r16, r24
    1e20:	a1 14       	cp	r10, r1
    1e22:	b1 04       	cpc	r11, r1
    1e24:	49 f0       	breq	.+18     	; 0x1e38 <_ZN12ACANFDBuffer12initWithSizeEm+0x5a>
    1e26:	c8 01       	movw	r24, r16
    1e28:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN12CANFDMessageC1Ev>
    1e2c:	08 5b       	subi	r16, 0xB8	; 184
    1e2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	a8 1a       	sub	r10, r24
    1e34:	b1 08       	sbc	r11, r1
    1e36:	f4 cf       	rjmp	.-24     	; 0x1e20 <_ZN12ACANFDBuffer12initWithSizeEm+0x42>
    1e38:	88 82       	st	Y, r8
    1e3a:	99 82       	std	Y+1, r9	; 0x01
    1e3c:	ca 82       	std	Y+2, r12	; 0x02
    1e3e:	db 82       	std	Y+3, r13	; 0x03
    1e40:	ec 82       	std	Y+4, r14	; 0x04
    1e42:	fd 82       	std	Y+5, r15	; 0x05
    1e44:	1e 82       	std	Y+6, r1	; 0x06
    1e46:	1f 82       	std	Y+7, r1	; 0x07
    1e48:	18 86       	std	Y+8, r1	; 0x08
    1e4a:	19 86       	std	Y+9, r1	; 0x09
    1e4c:	1a 86       	std	Y+10, r1	; 0x0a
    1e4e:	1b 86       	std	Y+11, r1	; 0x0b
    1e50:	1c 86       	std	Y+12, r1	; 0x0c
    1e52:	1d 86       	std	Y+13, r1	; 0x0d
    1e54:	1e 86       	std	Y+14, r1	; 0x0e
    1e56:	1f 86       	std	Y+15, r1	; 0x0f
    1e58:	18 8a       	std	Y+16, r1	; 0x10
    1e5a:	19 8a       	std	Y+17, r1	; 0x11
    1e5c:	1a 8a       	std	Y+18, r1	; 0x12
    1e5e:	1b 8a       	std	Y+19, r1	; 0x13
    1e60:	1c 8a       	std	Y+20, r1	; 0x14
    1e62:	1d 8a       	std	Y+21, r1	; 0x15
    1e64:	df 91       	pop	r29
    1e66:	cf 91       	pop	r28
    1e68:	1f 91       	pop	r17
    1e6a:	0f 91       	pop	r16
    1e6c:	ff 90       	pop	r15
    1e6e:	ef 90       	pop	r14
    1e70:	df 90       	pop	r13
    1e72:	cf 90       	pop	r12
    1e74:	bf 90       	pop	r11
    1e76:	af 90       	pop	r10
    1e78:	9f 90       	pop	r9
    1e7a:	8f 90       	pop	r8
    1e7c:	08 95       	ret

00001e7e <_ZN8SPIClass16beginTransactionE11SPISettings>:
    1e7e:	20 91 71 05 	lds	r18, 0x0571	; 0x800571 <_ZN8SPIClass13interruptModeE>
    1e82:	22 23       	and	r18, r18
    1e84:	99 f0       	breq	.+38     	; 0x1eac <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    1e86:	4f b7       	in	r20, 0x3f	; 63
    1e88:	f8 94       	cli
    1e8a:	20 91 71 05 	lds	r18, 0x0571	; 0x800571 <_ZN8SPIClass13interruptModeE>
    1e8e:	21 30       	cpi	r18, 0x01	; 1
    1e90:	59 f4       	brne	.+22     	; 0x1ea8 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    1e92:	2d b3       	in	r18, 0x1d	; 29
    1e94:	20 93 6f 05 	sts	0x056F, r18	; 0x80056f <_ZN8SPIClass13interruptSaveE>
    1e98:	3d b3       	in	r19, 0x1d	; 29
    1e9a:	20 91 70 05 	lds	r18, 0x0570	; 0x800570 <_ZN8SPIClass13interruptMaskE>
    1e9e:	20 95       	com	r18
    1ea0:	23 23       	and	r18, r19
    1ea2:	2d bb       	out	0x1d, r18	; 29
    1ea4:	4f bf       	out	0x3f, r20	; 63
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    1ea8:	40 93 6f 05 	sts	0x056F, r20	; 0x80056f <_ZN8SPIClass13interruptSaveE>
    1eac:	8c bd       	out	0x2c, r24	; 44
    1eae:	9d bd       	out	0x2d, r25	; 45
    1eb0:	08 95       	ret

00001eb2 <_ZN8SPIClass10transfer16Ej>:
    1eb2:	0c b4       	in	r0, 0x2c	; 44
    1eb4:	05 fc       	sbrc	r0, 5
    1eb6:	0d c0       	rjmp	.+26     	; 0x1ed2 <_ZN8SPIClass10transfer16Ej+0x20>
    1eb8:	9e bd       	out	0x2e, r25	; 46
    1eba:	00 00       	nop
    1ebc:	0d b4       	in	r0, 0x2d	; 45
    1ebe:	07 fe       	sbrs	r0, 7
    1ec0:	fd cf       	rjmp	.-6      	; 0x1ebc <_ZN8SPIClass10transfer16Ej+0xa>
    1ec2:	9e b5       	in	r25, 0x2e	; 46
    1ec4:	8e bd       	out	0x2e, r24	; 46
    1ec6:	00 00       	nop
    1ec8:	0d b4       	in	r0, 0x2d	; 45
    1eca:	07 fe       	sbrs	r0, 7
    1ecc:	fd cf       	rjmp	.-6      	; 0x1ec8 <_ZN8SPIClass10transfer16Ej+0x16>
    1ece:	8e b5       	in	r24, 0x2e	; 46
    1ed0:	08 95       	ret
    1ed2:	8e bd       	out	0x2e, r24	; 46
    1ed4:	00 00       	nop
    1ed6:	0d b4       	in	r0, 0x2d	; 45
    1ed8:	07 fe       	sbrs	r0, 7
    1eda:	fd cf       	rjmp	.-6      	; 0x1ed6 <_ZN8SPIClass10transfer16Ej+0x24>
    1edc:	8e b5       	in	r24, 0x2e	; 46
    1ede:	9e bd       	out	0x2e, r25	; 46
    1ee0:	00 00       	nop
    1ee2:	0d b4       	in	r0, 0x2d	; 45
    1ee4:	07 fe       	sbrs	r0, 7
    1ee6:	fd cf       	rjmp	.-6      	; 0x1ee2 <_ZN8SPIClass10transfer16Ej+0x30>
    1ee8:	9e b5       	in	r25, 0x2e	; 46
    1eea:	08 95       	ret

00001eec <_ZN8SPIClass14endTransactionEv>:
    1eec:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <_ZN8SPIClass13interruptModeE>
    1ef0:	88 23       	and	r24, r24
    1ef2:	61 f0       	breq	.+24     	; 0x1f0c <_ZN8SPIClass14endTransactionEv+0x20>
    1ef4:	9f b7       	in	r25, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	20 91 71 05 	lds	r18, 0x0571	; 0x800571 <_ZN8SPIClass13interruptModeE>
    1efc:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <_ZN8SPIClass13interruptSaveE>
    1f00:	21 30       	cpi	r18, 0x01	; 1
    1f02:	19 f4       	brne	.+6      	; 0x1f0a <_ZN8SPIClass14endTransactionEv+0x1e>
    1f04:	8d bb       	out	0x1d, r24	; 29
    1f06:	9f bf       	out	0x3f, r25	; 63
    1f08:	08 95       	ret
    1f0a:	8f bf       	out	0x3f, r24	; 63
    1f0c:	08 95       	ret

00001f0e <_ZN10ACAN2517FDC1EhR8SPIClassh>:
    1f0e:	fc 01       	movw	r30, r24
    1f10:	11 82       	std	Z+1, r1	; 0x01
    1f12:	10 82       	st	Z, r1
    1f14:	80 e5       	ldi	r24, 0x50	; 80
    1f16:	82 83       	std	Z+2, r24	; 0x02
    1f18:	13 82       	std	Z+3, r1	; 0x03
    1f1a:	55 83       	std	Z+5, r21	; 0x05
    1f1c:	44 83       	std	Z+4, r20	; 0x04
    1f1e:	66 83       	std	Z+6, r22	; 0x06
    1f20:	27 83       	std	Z+7, r18	; 0x07
    1f22:	10 86       	std	Z+8, r1	; 0x08
    1f24:	11 86       	std	Z+9, r1	; 0x09
    1f26:	12 86       	std	Z+10, r1	; 0x0a
    1f28:	13 86       	std	Z+11, r1	; 0x0b
    1f2a:	14 86       	std	Z+12, r1	; 0x0c
    1f2c:	15 86       	std	Z+13, r1	; 0x0d
    1f2e:	16 86       	std	Z+14, r1	; 0x0e
    1f30:	17 86       	std	Z+15, r1	; 0x0f
    1f32:	11 8a       	std	Z+17, r1	; 0x11
    1f34:	10 8a       	std	Z+16, r1	; 0x10
    1f36:	12 8a       	std	Z+18, r1	; 0x12
    1f38:	13 8a       	std	Z+19, r1	; 0x13
    1f3a:	14 8a       	std	Z+20, r1	; 0x14
    1f3c:	15 8a       	std	Z+21, r1	; 0x15
    1f3e:	16 8a       	std	Z+22, r1	; 0x16
    1f40:	17 8a       	std	Z+23, r1	; 0x17
    1f42:	10 8e       	std	Z+24, r1	; 0x18
    1f44:	11 8e       	std	Z+25, r1	; 0x19
    1f46:	12 8e       	std	Z+26, r1	; 0x1a
    1f48:	13 8e       	std	Z+27, r1	; 0x1b
    1f4a:	14 8e       	std	Z+28, r1	; 0x1c
    1f4c:	15 8e       	std	Z+29, r1	; 0x1d
    1f4e:	16 8e       	std	Z+30, r1	; 0x1e
    1f50:	17 8e       	std	Z+31, r1	; 0x1f
    1f52:	10 a2       	std	Z+32, r1	; 0x20
    1f54:	11 a2       	std	Z+33, r1	; 0x21
    1f56:	12 a2       	std	Z+34, r1	; 0x22
    1f58:	13 a2       	std	Z+35, r1	; 0x23
    1f5a:	14 a2       	std	Z+36, r1	; 0x24
    1f5c:	15 a2       	std	Z+37, r1	; 0x25
    1f5e:	17 a2       	std	Z+39, r1	; 0x27
    1f60:	16 a2       	std	Z+38, r1	; 0x26
    1f62:	10 a6       	std	Z+40, r1	; 0x28
    1f64:	11 a6       	std	Z+41, r1	; 0x29
    1f66:	12 a6       	std	Z+42, r1	; 0x2a
    1f68:	13 a6       	std	Z+43, r1	; 0x2b
    1f6a:	14 a6       	std	Z+44, r1	; 0x2c
    1f6c:	15 a6       	std	Z+45, r1	; 0x2d
    1f6e:	16 a6       	std	Z+46, r1	; 0x2e
    1f70:	17 a6       	std	Z+47, r1	; 0x2f
    1f72:	10 aa       	std	Z+48, r1	; 0x30
    1f74:	11 aa       	std	Z+49, r1	; 0x31
    1f76:	12 aa       	std	Z+50, r1	; 0x32
    1f78:	13 aa       	std	Z+51, r1	; 0x33
    1f7a:	14 aa       	std	Z+52, r1	; 0x34
    1f7c:	15 aa       	std	Z+53, r1	; 0x35
    1f7e:	16 aa       	std	Z+54, r1	; 0x36
    1f80:	17 aa       	std	Z+55, r1	; 0x37
    1f82:	10 ae       	std	Z+56, r1	; 0x38
    1f84:	11 ae       	std	Z+57, r1	; 0x39
    1f86:	12 ae       	std	Z+58, r1	; 0x3a
    1f88:	13 ae       	std	Z+59, r1	; 0x3b
    1f8a:	08 95       	ret

00001f8c <_ZN10ACAN2517FD9availableEv>:
    1f8c:	0f 93       	push	r16
    1f8e:	1f 93       	push	r17
    1f90:	cf 93       	push	r28
    1f92:	8c 01       	movw	r16, r24
    1f94:	fc 01       	movw	r30, r24
    1f96:	82 81       	ldd	r24, Z+2	; 0x02
    1f98:	93 81       	ldd	r25, Z+3	; 0x03
    1f9a:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <_ZN8SPIClass16beginTransactionE11SPISettings>
    1f9e:	f8 94       	cli
    1fa0:	c1 e0       	ldi	r28, 0x01	; 1
    1fa2:	f8 01       	movw	r30, r16
    1fa4:	86 8d       	ldd	r24, Z+30	; 0x1e
    1fa6:	97 8d       	ldd	r25, Z+31	; 0x1f
    1fa8:	a0 a1       	ldd	r26, Z+32	; 0x20
    1faa:	b1 a1       	ldd	r27, Z+33	; 0x21
    1fac:	89 2b       	or	r24, r25
    1fae:	8a 2b       	or	r24, r26
    1fb0:	8b 2b       	or	r24, r27
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <_ZN10ACAN2517FD9availableEv+0x2a>
    1fb4:	c0 e0       	ldi	r28, 0x00	; 0
    1fb6:	78 94       	sei
    1fb8:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_ZN8SPIClass14endTransactionEv>
    1fbc:	8c 2f       	mov	r24, r28
    1fbe:	cf 91       	pop	r28
    1fc0:	1f 91       	pop	r17
    1fc2:	0f 91       	pop	r16
    1fc4:	08 95       	ret

00001fc6 <_ZN10ACAN2517FD7receiveER12CANFDMessage>:
    1fc6:	ef 92       	push	r14
    1fc8:	ff 92       	push	r15
    1fca:	1f 93       	push	r17
    1fcc:	cf 93       	push	r28
    1fce:	df 93       	push	r29
    1fd0:	ec 01       	movw	r28, r24
    1fd2:	7b 01       	movw	r14, r22
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd8:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <_ZN8SPIClass16beginTransactionE11SPISettings>
    1fdc:	f8 94       	cli
    1fde:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fe0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fe2:	a8 a1       	ldd	r26, Y+32	; 0x20
    1fe4:	b9 a1       	ldd	r27, Y+33	; 0x21
    1fe6:	11 e0       	ldi	r17, 0x01	; 1
    1fe8:	00 97       	sbiw	r24, 0x00	; 0
    1fea:	a1 05       	cpc	r26, r1
    1fec:	b1 05       	cpc	r27, r1
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <_ZN10ACAN2517FD7receiveER12CANFDMessage+0x2c>
    1ff0:	10 e0       	ldi	r17, 0x00	; 0
    1ff2:	89 2b       	or	r24, r25
    1ff4:	8a 2b       	or	r24, r26
    1ff6:	8b 2b       	or	r24, r27
    1ff8:	29 f0       	breq	.+10     	; 0x2004 <_ZN10ACAN2517FD7receiveER12CANFDMessage+0x3e>
    1ffa:	b7 01       	movw	r22, r14
    1ffc:	ce 01       	movw	r24, r28
    1ffe:	40 96       	adiw	r24, 0x10	; 16
    2000:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <_ZN12ACANFDBuffer6removeER12CANFDMessage.part.3>
    2004:	78 94       	sei
    2006:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_ZN8SPIClass14endTransactionEv>
    200a:	81 2f       	mov	r24, r17
    200c:	df 91       	pop	r29
    200e:	cf 91       	pop	r28
    2010:	1f 91       	pop	r17
    2012:	ff 90       	pop	r15
    2014:	ef 90       	pop	r14
    2016:	08 95       	ret

00002018 <_ZN10ACAN2517FD8assertCSEv>:
    2018:	60 e0       	ldi	r22, 0x00	; 0
    201a:	fc 01       	movw	r30, r24
    201c:	86 81       	ldd	r24, Z+6	; 0x06
    201e:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <digitalWrite>

00002022 <_ZN10ACAN2517FD10deassertCSEv>:
    2022:	61 e0       	ldi	r22, 0x01	; 1
    2024:	fc 01       	movw	r30, r24
    2026:	86 81       	ldd	r24, Z+6	; 0x06
    2028:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <digitalWrite>

0000202c <_ZN10ACAN2517FD37writeRegister32Assume_SPI_transactionEjm>:
    202c:	ef 92       	push	r14
    202e:	ff 92       	push	r15
    2030:	0f 93       	push	r16
    2032:	1f 93       	push	r17
    2034:	cf 93       	push	r28
    2036:	df 93       	push	r29
    2038:	00 d0       	rcall	.+0      	; 0x203a <_ZN10ACAN2517FD37writeRegister32Assume_SPI_transactionEjm+0xe>
    203a:	00 d0       	rcall	.+0      	; 0x203c <_ZN10ACAN2517FD37writeRegister32Assume_SPI_transactionEjm+0x10>
    203c:	00 d0       	rcall	.+0      	; 0x203e <_ZN10ACAN2517FD37writeRegister32Assume_SPI_transactionEjm+0x12>
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
    2042:	7c 01       	movw	r14, r24
    2044:	fb 01       	movw	r30, r22
    2046:	ca 01       	movw	r24, r20
    2048:	b9 01       	movw	r22, r18
    204a:	8e 01       	movw	r16, r28
    204c:	0f 5f       	subi	r16, 0xFF	; 255
    204e:	1f 4f       	sbci	r17, 0xFF	; 255
    2050:	26 e0       	ldi	r18, 0x06	; 6
    2052:	d8 01       	movw	r26, r16
    2054:	1d 92       	st	X+, r1
    2056:	2a 95       	dec	r18
    2058:	e9 f7       	brne	.-6      	; 0x2054 <_ZN10ACAN2517FD37writeRegister32Assume_SPI_transactionEjm+0x28>
    205a:	9f 01       	movw	r18, r30
    205c:	3f 70       	andi	r19, 0x0F	; 15
    205e:	30 62       	ori	r19, 0x20	; 32
    2060:	39 83       	std	Y+1, r19	; 0x01
    2062:	2a 83       	std	Y+2, r18	; 0x02
    2064:	22 e0       	ldi	r18, 0x02	; 2
    2066:	a8 01       	movw	r20, r16
    2068:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <_ZL23enterU32InBufferAtIndexmPhh>
    206c:	c7 01       	movw	r24, r14
    206e:	0e 94 0c 10 	call	0x2018	; 0x2018 <_ZN10ACAN2517FD8assertCSEv>
    2072:	66 e0       	ldi	r22, 0x06	; 6
    2074:	70 e0       	ldi	r23, 0x00	; 0
    2076:	c8 01       	movw	r24, r16
    2078:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <_ZN8SPIClass8transferEPvj.part.6>
    207c:	c7 01       	movw	r24, r14
    207e:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN10ACAN2517FD10deassertCSEv>
    2082:	26 96       	adiw	r28, 0x06	; 6
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	1f 91       	pop	r17
    2094:	0f 91       	pop	r16
    2096:	ff 90       	pop	r15
    2098:	ef 90       	pop	r14
    209a:	08 95       	ret

0000209c <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>:
    209c:	0f 93       	push	r16
    209e:	1f 93       	push	r17
    20a0:	cf 93       	push	r28
    20a2:	df 93       	push	r29
    20a4:	00 d0       	rcall	.+0      	; 0x20a6 <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh+0xa>
    20a6:	1f 92       	push	r1
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	8c 01       	movw	r16, r24
    20ae:	7f 70       	andi	r23, 0x0F	; 15
    20b0:	70 62       	ori	r23, 0x20	; 32
    20b2:	79 83       	std	Y+1, r23	; 0x01
    20b4:	6a 83       	std	Y+2, r22	; 0x02
    20b6:	4b 83       	std	Y+3, r20	; 0x03
    20b8:	0e 94 0c 10 	call	0x2018	; 0x2018 <_ZN10ACAN2517FD8assertCSEv>
    20bc:	63 e0       	ldi	r22, 0x03	; 3
    20be:	70 e0       	ldi	r23, 0x00	; 0
    20c0:	ce 01       	movw	r24, r28
    20c2:	01 96       	adiw	r24, 0x01	; 1
    20c4:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <_ZN8SPIClass8transferEPvj.part.6>
    20c8:	c8 01       	movw	r24, r16
    20ca:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN10ACAN2517FD10deassertCSEv>
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	df 91       	pop	r29
    20d6:	cf 91       	pop	r28
    20d8:	1f 91       	pop	r17
    20da:	0f 91       	pop	r16
    20dc:	08 95       	ret

000020de <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj>:
    20de:	ef 92       	push	r14
    20e0:	ff 92       	push	r15
    20e2:	0f 93       	push	r16
    20e4:	1f 93       	push	r17
    20e6:	cf 93       	push	r28
    20e8:	df 93       	push	r29
    20ea:	00 d0       	rcall	.+0      	; 0x20ec <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj+0xe>
    20ec:	00 d0       	rcall	.+0      	; 0x20ee <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj+0x10>
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj+0x12>
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
    20f4:	7c 01       	movw	r14, r24
    20f6:	8e 01       	movw	r16, r28
    20f8:	0f 5f       	subi	r16, 0xFF	; 255
    20fa:	1f 4f       	sbci	r17, 0xFF	; 255
    20fc:	86 e0       	ldi	r24, 0x06	; 6
    20fe:	f8 01       	movw	r30, r16
    2100:	11 92       	st	Z+, r1
    2102:	8a 95       	dec	r24
    2104:	e9 f7       	brne	.-6      	; 0x2100 <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj+0x22>
    2106:	7f 70       	andi	r23, 0x0F	; 15
    2108:	70 63       	ori	r23, 0x30	; 48
    210a:	79 83       	std	Y+1, r23	; 0x01
    210c:	6a 83       	std	Y+2, r22	; 0x02
    210e:	c7 01       	movw	r24, r14
    2110:	0e 94 0c 10 	call	0x2018	; 0x2018 <_ZN10ACAN2517FD8assertCSEv>
    2114:	66 e0       	ldi	r22, 0x06	; 6
    2116:	70 e0       	ldi	r23, 0x00	; 0
    2118:	c8 01       	movw	r24, r16
    211a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <_ZN8SPIClass8transferEPvj.part.6>
    211e:	c7 01       	movw	r24, r14
    2120:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN10ACAN2517FD10deassertCSEv>
    2124:	62 e0       	ldi	r22, 0x02	; 2
    2126:	c8 01       	movw	r24, r16
    2128:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <_ZL20u32FromBufferAtIndexPhh>
    212c:	26 96       	adiw	r28, 0x06	; 6
    212e:	0f b6       	in	r0, 0x3f	; 63
    2130:	f8 94       	cli
    2132:	de bf       	out	0x3e, r29	; 62
    2134:	0f be       	out	0x3f, r0	; 63
    2136:	cd bf       	out	0x3d, r28	; 61
    2138:	df 91       	pop	r29
    213a:	cf 91       	pop	r28
    213c:	1f 91       	pop	r17
    213e:	0f 91       	pop	r16
    2140:	ff 90       	pop	r15
    2142:	ef 90       	pop	r14
    2144:	08 95       	ret

00002146 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage>:
    2146:	2f 92       	push	r2
    2148:	3f 92       	push	r3
    214a:	4f 92       	push	r4
    214c:	5f 92       	push	r5
    214e:	6f 92       	push	r6
    2150:	7f 92       	push	r7
    2152:	8f 92       	push	r8
    2154:	9f 92       	push	r9
    2156:	af 92       	push	r10
    2158:	bf 92       	push	r11
    215a:	cf 92       	push	r12
    215c:	df 92       	push	r13
    215e:	ef 92       	push	r14
    2160:	ff 92       	push	r15
    2162:	0f 93       	push	r16
    2164:	1f 93       	push	r17
    2166:	cf 93       	push	r28
    2168:	df 93       	push	r29
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
    216e:	c0 55       	subi	r28, 0x50	; 80
    2170:	d1 09       	sbc	r29, r1
    2172:	0f b6       	in	r0, 0x3f	; 63
    2174:	f8 94       	cli
    2176:	de bf       	out	0x3e, r29	; 62
    2178:	0f be       	out	0x3f, r0	; 63
    217a:	cd bf       	out	0x3d, r28	; 61
    217c:	5c 01       	movw	r10, r24
    217e:	8b 01       	movw	r16, r22
    2180:	60 e7       	ldi	r22, 0x70	; 112
    2182:	70 e0       	ldi	r23, 0x00	; 0
    2184:	0e 94 6f 10 	call	0x20de	; 0x20de <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj>
    2188:	9b 01       	movw	r18, r22
    218a:	3c 5f       	subi	r19, 0xFC	; 252
    218c:	2d 96       	adiw	r28, 0x0d	; 13
    218e:	3f af       	std	Y+63, r19	; 0x3f
    2190:	2e af       	std	Y+62, r18	; 0x3e
    2192:	2d 97       	sbiw	r28, 0x0d	; 13
    2194:	d8 01       	movw	r26, r16
    2196:	4d 90       	ld	r4, X+
    2198:	5d 90       	ld	r5, X+
    219a:	6d 90       	ld	r6, X+
    219c:	7c 90       	ld	r7, X
    219e:	13 97       	sbiw	r26, 0x03	; 3
    21a0:	14 96       	adiw	r26, 0x04	; 4
    21a2:	9c 90       	ld	r9, X
    21a4:	99 20       	and	r9, r9
    21a6:	d1 f0       	breq	.+52     	; 0x21dc <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0x96>
    21a8:	d3 01       	movw	r26, r6
    21aa:	c2 01       	movw	r24, r4
    21ac:	32 e1       	ldi	r19, 0x12	; 18
    21ae:	b6 95       	lsr	r27
    21b0:	a7 95       	ror	r26
    21b2:	97 95       	ror	r25
    21b4:	87 95       	ror	r24
    21b6:	3a 95       	dec	r19
    21b8:	d1 f7       	brne	.-12     	; 0x21ae <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0x68>
    21ba:	97 70       	andi	r25, 0x07	; 7
    21bc:	aa 27       	eor	r26, r26
    21be:	bb 27       	eor	r27, r27
    21c0:	e3 e0       	ldi	r30, 0x03	; 3
    21c2:	6e 22       	and	r6, r30
    21c4:	77 24       	eor	r7, r7
    21c6:	4b e0       	ldi	r20, 0x0B	; 11
    21c8:	44 0c       	add	r4, r4
    21ca:	55 1c       	adc	r5, r5
    21cc:	66 1c       	adc	r6, r6
    21ce:	77 1c       	adc	r7, r7
    21d0:	4a 95       	dec	r20
    21d2:	d1 f7       	brne	.-12     	; 0x21c8 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0x82>
    21d4:	48 2a       	or	r4, r24
    21d6:	59 2a       	or	r5, r25
    21d8:	6a 2a       	or	r6, r26
    21da:	7b 2a       	or	r7, r27
    21dc:	d8 01       	movw	r26, r16
    21de:	17 96       	adiw	r26, 0x07	; 7
    21e0:	2c 90       	ld	r2, X
    21e2:	82 2d       	mov	r24, r2
    21e4:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZL19lengthCodeForLengthh>
    21e8:	6b 01       	movw	r12, r22
    21ea:	7c 01       	movw	r14, r24
    21ec:	99 20       	and	r9, r9
    21ee:	11 f0       	breq	.+4      	; 0x21f4 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xae>
    21f0:	68 94       	set
    21f2:	c4 f8       	bld	r12, 4
    21f4:	f8 01       	movw	r30, r16
    21f6:	85 81       	ldd	r24, Z+5	; 0x05
    21f8:	82 30       	cpi	r24, 0x02	; 2
    21fa:	61 f0       	breq	.+24     	; 0x2214 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xce>
    21fc:	83 30       	cpi	r24, 0x03	; 3
    21fe:	29 f0       	breq	.+10     	; 0x220a <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xc4>
    2200:	81 11       	cpse	r24, r1
    2202:	0d c0       	rjmp	.+26     	; 0x221e <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xd8>
    2204:	68 94       	set
    2206:	c5 f8       	bld	r12, 5
    2208:	0a c0       	rjmp	.+20     	; 0x221e <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xd8>
    220a:	d5 01       	movw	r26, r10
    220c:	1a 96       	adiw	r26, 0x0a	; 10
    220e:	8c 91       	ld	r24, X
    2210:	81 11       	cpse	r24, r1
    2212:	03 c0       	rjmp	.+6      	; 0x221a <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xd4>
    2214:	68 94       	set
    2216:	c7 f8       	bld	r12, 7
    2218:	02 c0       	rjmp	.+4      	; 0x221e <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xd8>
    221a:	b0 ec       	ldi	r27, 0xC0	; 192
    221c:	cb 2a       	or	r12, r27
    221e:	31 2c       	mov	r3, r1
    2220:	e3 e0       	ldi	r30, 0x03	; 3
    2222:	2e 0e       	add	r2, r30
    2224:	31 1c       	adc	r3, r1
    2226:	35 94       	asr	r3
    2228:	27 94       	ror	r2
    222a:	35 94       	asr	r3
    222c:	27 94       	ror	r2
    222e:	c1 01       	movw	r24, r2
    2230:	03 2c       	mov	r0, r3
    2232:	00 0c       	add	r0, r0
    2234:	aa 0b       	sbc	r26, r26
    2236:	bb 0b       	sbc	r27, r27
    2238:	61 96       	adiw	r28, 0x11	; 17
    223a:	8c af       	std	Y+60, r24	; 0x3c
    223c:	9d af       	std	Y+61, r25	; 0x3d
    223e:	ae af       	std	Y+62, r26	; 0x3e
    2240:	bf af       	std	Y+63, r27	; 0x3f
    2242:	61 97       	sbiw	r28, 0x11	; 17
    2244:	de 01       	movw	r26, r28
    2246:	11 96       	adiw	r26, 0x01	; 1
    2248:	4d 01       	movw	r8, r26
    224a:	8a e4       	ldi	r24, 0x4A	; 74
    224c:	fd 01       	movw	r30, r26
    224e:	11 92       	st	Z+, r1
    2250:	8a 95       	dec	r24
    2252:	e9 f7       	brne	.-6      	; 0x224e <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0x108>
    2254:	2d 96       	adiw	r28, 0x0d	; 13
    2256:	6e ad       	ldd	r22, Y+62	; 0x3e
    2258:	7f ad       	ldd	r23, Y+63	; 0x3f
    225a:	2d 97       	sbiw	r28, 0x0d	; 13
    225c:	7f 70       	andi	r23, 0x0F	; 15
    225e:	70 62       	ori	r23, 0x20	; 32
    2260:	79 83       	std	Y+1, r23	; 0x01
    2262:	6a 83       	std	Y+2, r22	; 0x02
    2264:	22 e0       	ldi	r18, 0x02	; 2
    2266:	ad 01       	movw	r20, r26
    2268:	c3 01       	movw	r24, r6
    226a:	b2 01       	movw	r22, r4
    226c:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <_ZL23enterU32InBufferAtIndexmPhh>
    2270:	26 e0       	ldi	r18, 0x06	; 6
    2272:	a4 01       	movw	r20, r8
    2274:	c7 01       	movw	r24, r14
    2276:	b6 01       	movw	r22, r12
    2278:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <_ZL23enterU32InBufferAtIndexmPhh>
    227c:	08 5f       	subi	r16, 0xF8	; 248
    227e:	1f 4f       	sbci	r17, 0xFF	; 255
    2280:	2a e0       	ldi	r18, 0x0A	; 10
    2282:	f2 2e       	mov	r15, r18
    2284:	41 2c       	mov	r4, r1
    2286:	51 2c       	mov	r5, r1
    2288:	32 01       	movw	r6, r4
    228a:	61 96       	adiw	r28, 0x11	; 17
    228c:	8c ad       	ldd	r24, Y+60	; 0x3c
    228e:	9d ad       	ldd	r25, Y+61	; 0x3d
    2290:	ae ad       	ldd	r26, Y+62	; 0x3e
    2292:	bf ad       	ldd	r27, Y+63	; 0x3f
    2294:	61 97       	sbiw	r28, 0x11	; 17
    2296:	48 16       	cp	r4, r24
    2298:	59 06       	cpc	r5, r25
    229a:	6a 06       	cpc	r6, r26
    229c:	7b 06       	cpc	r7, r27
    229e:	90 f4       	brcc	.+36     	; 0x22c4 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0x17e>
    22a0:	d8 01       	movw	r26, r16
    22a2:	6d 91       	ld	r22, X+
    22a4:	7d 91       	ld	r23, X+
    22a6:	8d 91       	ld	r24, X+
    22a8:	9d 91       	ld	r25, X+
    22aa:	8d 01       	movw	r16, r26
    22ac:	2f 2d       	mov	r18, r15
    22ae:	a4 01       	movw	r20, r8
    22b0:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <_ZL23enterU32InBufferAtIndexmPhh>
    22b4:	bf ef       	ldi	r27, 0xFF	; 255
    22b6:	4b 1a       	sub	r4, r27
    22b8:	5b 0a       	sbc	r5, r27
    22ba:	6b 0a       	sbc	r6, r27
    22bc:	7b 0a       	sbc	r7, r27
    22be:	e4 e0       	ldi	r30, 0x04	; 4
    22c0:	fe 0e       	add	r15, r30
    22c2:	e3 cf       	rjmp	.-58     	; 0x228a <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0x144>
    22c4:	c5 01       	movw	r24, r10
    22c6:	0e 94 0c 10 	call	0x2018	; 0x2018 <_ZN10ACAN2517FD8assertCSEv>
    22ca:	b1 01       	movw	r22, r2
    22cc:	66 0f       	add	r22, r22
    22ce:	77 1f       	adc	r23, r23
    22d0:	66 0f       	add	r22, r22
    22d2:	77 1f       	adc	r23, r23
    22d4:	66 5f       	subi	r22, 0xF6	; 246
    22d6:	7f 4f       	sbci	r23, 0xFF	; 255
    22d8:	c4 01       	movw	r24, r8
    22da:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <_ZN8SPIClass8transferEPvj.part.6>
    22de:	c5 01       	movw	r24, r10
    22e0:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN10ACAN2517FD10deassertCSEv>
    22e4:	43 e0       	ldi	r20, 0x03	; 3
    22e6:	69 e6       	ldi	r22, 0x69	; 105
    22e8:	70 e0       	ldi	r23, 0x00	; 0
    22ea:	c5 01       	movw	r24, r10
    22ec:	0e 94 4e 10 	call	0x209c	; 0x209c <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    22f0:	c0 5b       	subi	r28, 0xB0	; 176
    22f2:	df 4f       	sbci	r29, 0xFF	; 255
    22f4:	0f b6       	in	r0, 0x3f	; 63
    22f6:	f8 94       	cli
    22f8:	de bf       	out	0x3e, r29	; 62
    22fa:	0f be       	out	0x3f, r0	; 63
    22fc:	cd bf       	out	0x3d, r28	; 61
    22fe:	df 91       	pop	r29
    2300:	cf 91       	pop	r28
    2302:	1f 91       	pop	r17
    2304:	0f 91       	pop	r16
    2306:	ff 90       	pop	r15
    2308:	ef 90       	pop	r14
    230a:	df 90       	pop	r13
    230c:	cf 90       	pop	r12
    230e:	bf 90       	pop	r11
    2310:	af 90       	pop	r10
    2312:	9f 90       	pop	r9
    2314:	8f 90       	pop	r8
    2316:	7f 90       	pop	r7
    2318:	6f 90       	pop	r6
    231a:	5f 90       	pop	r5
    231c:	4f 90       	pop	r4
    231e:	3f 90       	pop	r3
    2320:	2f 90       	pop	r2
    2322:	08 95       	ret

00002324 <_ZN10ACAN2517FD17transmitInterruptEv>:
    2324:	0f 93       	push	r16
    2326:	1f 93       	push	r17
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	c8 54       	subi	r28, 0x48	; 72
    2332:	d1 09       	sbc	r29, r1
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	f8 94       	cli
    2338:	de bf       	out	0x3e, r29	; 62
    233a:	0f be       	out	0x3f, r0	; 63
    233c:	cd bf       	out	0x3d, r28	; 61
    233e:	8c 01       	movw	r16, r24
    2340:	ce 01       	movw	r24, r28
    2342:	01 96       	adiw	r24, 0x01	; 1
    2344:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN12CANFDMessageC1Ev>
    2348:	f8 01       	movw	r30, r16
    234a:	84 a9       	ldd	r24, Z+52	; 0x34
    234c:	95 a9       	ldd	r25, Z+53	; 0x35
    234e:	a6 a9       	ldd	r26, Z+54	; 0x36
    2350:	b7 a9       	ldd	r27, Z+55	; 0x37
    2352:	89 2b       	or	r24, r25
    2354:	8a 2b       	or	r24, r26
    2356:	8b 2b       	or	r24, r27
    2358:	71 f0       	breq	.+28     	; 0x2376 <_ZN10ACAN2517FD17transmitInterruptEv+0x52>
    235a:	be 01       	movw	r22, r28
    235c:	6f 5f       	subi	r22, 0xFF	; 255
    235e:	7f 4f       	sbci	r23, 0xFF	; 255
    2360:	c8 01       	movw	r24, r16
    2362:	86 96       	adiw	r24, 0x26	; 38
    2364:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <_ZN12ACANFDBuffer6removeER12CANFDMessage.part.3>
    2368:	be 01       	movw	r22, r28
    236a:	6f 5f       	subi	r22, 0xFF	; 255
    236c:	7f 4f       	sbci	r23, 0xFF	; 255
    236e:	c8 01       	movw	r24, r16
    2370:	0e 94 a3 10 	call	0x2146	; 0x2146 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage>
    2374:	08 c0       	rjmp	.+16     	; 0x2386 <_ZN10ACAN2517FD17transmitInterruptEv+0x62>
    2376:	40 e9       	ldi	r20, 0x90	; 144
    2378:	68 e6       	ldi	r22, 0x68	; 104
    237a:	70 e0       	ldi	r23, 0x00	; 0
    237c:	c8 01       	movw	r24, r16
    237e:	0e 94 4e 10 	call	0x209c	; 0x209c <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    2382:	f8 01       	movw	r30, r16
    2384:	11 86       	std	Z+9, r1	; 0x09
    2386:	c8 5b       	subi	r28, 0xB8	; 184
    2388:	df 4f       	sbci	r29, 0xFF	; 255
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	de bf       	out	0x3e, r29	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	cd bf       	out	0x3d, r28	; 61
    2394:	df 91       	pop	r29
    2396:	cf 91       	pop	r28
    2398:	1f 91       	pop	r17
    239a:	0f 91       	pop	r16
    239c:	08 95       	ret

0000239e <_ZN10ACAN2517FD16receiveInterruptEv>:
    239e:	2f 92       	push	r2
    23a0:	3f 92       	push	r3
    23a2:	4f 92       	push	r4
    23a4:	5f 92       	push	r5
    23a6:	6f 92       	push	r6
    23a8:	7f 92       	push	r7
    23aa:	8f 92       	push	r8
    23ac:	9f 92       	push	r9
    23ae:	af 92       	push	r10
    23b0:	bf 92       	push	r11
    23b2:	cf 92       	push	r12
    23b4:	df 92       	push	r13
    23b6:	ef 92       	push	r14
    23b8:	ff 92       	push	r15
    23ba:	0f 93       	push	r16
    23bc:	1f 93       	push	r17
    23be:	cf 93       	push	r28
    23c0:	df 93       	push	r29
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
    23c6:	c5 59       	subi	r28, 0x95	; 149
    23c8:	d1 09       	sbc	r29, r1
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	f8 94       	cli
    23ce:	de bf       	out	0x3e, r29	; 62
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	cd bf       	out	0x3d, r28	; 61
    23d4:	3c 01       	movw	r6, r24
    23d6:	64 e6       	ldi	r22, 0x64	; 100
    23d8:	70 e0       	ldi	r23, 0x00	; 0
    23da:	0e 94 6f 10 	call	0x20de	; 0x20de <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj>
    23de:	6b 01       	movw	r12, r22
    23e0:	7c 01       	movw	r14, r24
    23e2:	ce 01       	movw	r24, r28
    23e4:	85 5b       	subi	r24, 0xB5	; 181
    23e6:	9f 4f       	sbci	r25, 0xFF	; 255
    23e8:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN12CANFDMessageC1Ev>
    23ec:	8e 01       	movw	r16, r28
    23ee:	0f 5f       	subi	r16, 0xFF	; 255
    23f0:	1f 4f       	sbci	r17, 0xFF	; 255
    23f2:	8a e4       	ldi	r24, 0x4A	; 74
    23f4:	f8 01       	movw	r30, r16
    23f6:	11 92       	st	Z+, r1
    23f8:	8a 95       	dec	r24
    23fa:	e9 f7       	brne	.-6      	; 0x23f6 <_ZN10ACAN2517FD16receiveInterruptEv+0x58>
    23fc:	fc ef       	ldi	r31, 0xFC	; 252
    23fe:	df 1a       	sub	r13, r31
    2400:	8f e0       	ldi	r24, 0x0F	; 15
    2402:	d8 22       	and	r13, r24
    2404:	90 e3       	ldi	r25, 0x30	; 48
    2406:	d9 2a       	or	r13, r25
    2408:	d9 82       	std	Y+1, r13	; 0x01
    240a:	ca 82       	std	Y+2, r12	; 0x02
    240c:	c3 01       	movw	r24, r6
    240e:	0e 94 0c 10 	call	0x2018	; 0x2018 <_ZN10ACAN2517FD8assertCSEv>
    2412:	6a e4       	ldi	r22, 0x4A	; 74
    2414:	70 e0       	ldi	r23, 0x00	; 0
    2416:	c8 01       	movw	r24, r16
    2418:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <_ZN8SPIClass8transferEPvj.part.6>
    241c:	62 e0       	ldi	r22, 0x02	; 2
    241e:	c8 01       	movw	r24, r16
    2420:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <_ZL20u32FromBufferAtIndexPhh>
    2424:	2f 96       	adiw	r28, 0x0f	; 15
    2426:	6c af       	std	Y+60, r22	; 0x3c
    2428:	7d af       	std	Y+61, r23	; 0x3d
    242a:	8e af       	std	Y+62, r24	; 0x3e
    242c:	9f af       	std	Y+63, r25	; 0x3f
    242e:	2f 97       	sbiw	r28, 0x0f	; 15
    2430:	66 e0       	ldi	r22, 0x06	; 6
    2432:	c8 01       	movw	r24, r16
    2434:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <_ZL20u32FromBufferAtIndexPhh>
    2438:	4b 01       	movw	r8, r22
    243a:	5c 01       	movw	r10, r24
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	8f 70       	andi	r24, 0x0F	; 15
    2442:	99 27       	eor	r25, r25
    2444:	aa 27       	eor	r26, r26
    2446:	bb 27       	eor	r27, r27
    2448:	fc 01       	movw	r30, r24
    244a:	e4 58       	subi	r30, 0x84	; 132
    244c:	fd 4f       	sbci	r31, 0xFD	; 253
    244e:	c0 80       	ld	r12, Z
    2450:	63 96       	adiw	r28, 0x13	; 19
    2452:	cf ae       	std	Y+63, r12	; 0x3f
    2454:	63 97       	sbiw	r28, 0x13	; 19
    2456:	d1 2c       	mov	r13, r1
    2458:	e3 e0       	ldi	r30, 0x03	; 3
    245a:	ce 0e       	add	r12, r30
    245c:	d1 1c       	adc	r13, r1
    245e:	d5 94       	asr	r13
    2460:	c7 94       	ror	r12
    2462:	d5 94       	asr	r13
    2464:	c7 94       	ror	r12
    2466:	0d 2c       	mov	r0, r13
    2468:	00 0c       	add	r0, r0
    246a:	ee 08       	sbc	r14, r14
    246c:	ff 08       	sbc	r15, r15
    246e:	8b e4       	ldi	r24, 0x4B	; 75
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	8c 0f       	add	r24, r28
    2474:	9d 1f       	adc	r25, r29
    2476:	08 96       	adiw	r24, 0x08	; 8
    2478:	cc 56       	subi	r28, 0x6C	; 108
    247a:	df 4f       	sbci	r29, 0xFF	; 255
    247c:	99 83       	std	Y+1, r25	; 0x01
    247e:	88 83       	st	Y, r24
    2480:	c4 59       	subi	r28, 0x94	; 148
    2482:	d0 40       	sbci	r29, 0x00	; 0
    2484:	9a e0       	ldi	r25, 0x0A	; 10
    2486:	cd 56       	subi	r28, 0x6D	; 109
    2488:	df 4f       	sbci	r29, 0xFF	; 255
    248a:	98 83       	st	Y, r25
    248c:	c3 59       	subi	r28, 0x93	; 147
    248e:	d0 40       	sbci	r29, 0x00	; 0
    2490:	21 2c       	mov	r2, r1
    2492:	31 2c       	mov	r3, r1
    2494:	21 01       	movw	r4, r2
    2496:	2c 14       	cp	r2, r12
    2498:	3d 04       	cpc	r3, r13
    249a:	4e 04       	cpc	r4, r14
    249c:	5f 04       	cpc	r5, r15
    249e:	48 f5       	brcc	.+82     	; 0x24f2 <_ZN10ACAN2517FD16receiveInterruptEv+0x154>
    24a0:	cd 56       	subi	r28, 0x6D	; 109
    24a2:	df 4f       	sbci	r29, 0xFF	; 255
    24a4:	68 81       	ld	r22, Y
    24a6:	c3 59       	subi	r28, 0x93	; 147
    24a8:	d0 40       	sbci	r29, 0x00	; 0
    24aa:	c8 01       	movw	r24, r16
    24ac:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <_ZL20u32FromBufferAtIndexPhh>
    24b0:	cc 56       	subi	r28, 0x6C	; 108
    24b2:	df 4f       	sbci	r29, 0xFF	; 255
    24b4:	e8 81       	ld	r30, Y
    24b6:	f9 81       	ldd	r31, Y+1	; 0x01
    24b8:	c4 59       	subi	r28, 0x94	; 148
    24ba:	d0 40       	sbci	r29, 0x00	; 0
    24bc:	61 93       	st	Z+, r22
    24be:	71 93       	st	Z+, r23
    24c0:	81 93       	st	Z+, r24
    24c2:	91 93       	st	Z+, r25
    24c4:	cc 56       	subi	r28, 0x6C	; 108
    24c6:	df 4f       	sbci	r29, 0xFF	; 255
    24c8:	f9 83       	std	Y+1, r31	; 0x01
    24ca:	e8 83       	st	Y, r30
    24cc:	c4 59       	subi	r28, 0x94	; 148
    24ce:	d0 40       	sbci	r29, 0x00	; 0
    24d0:	ff ef       	ldi	r31, 0xFF	; 255
    24d2:	2f 1a       	sub	r2, r31
    24d4:	3f 0a       	sbc	r3, r31
    24d6:	4f 0a       	sbc	r4, r31
    24d8:	5f 0a       	sbc	r5, r31
    24da:	cd 56       	subi	r28, 0x6D	; 109
    24dc:	df 4f       	sbci	r29, 0xFF	; 255
    24de:	88 81       	ld	r24, Y
    24e0:	c3 59       	subi	r28, 0x93	; 147
    24e2:	d0 40       	sbci	r29, 0x00	; 0
    24e4:	8c 5f       	subi	r24, 0xFC	; 252
    24e6:	cd 56       	subi	r28, 0x6D	; 109
    24e8:	df 4f       	sbci	r29, 0xFF	; 255
    24ea:	88 83       	st	Y, r24
    24ec:	c3 59       	subi	r28, 0x93	; 147
    24ee:	d0 40       	sbci	r29, 0x00	; 0
    24f0:	d2 cf       	rjmp	.-92     	; 0x2496 <_ZN10ACAN2517FD16receiveInterruptEv+0xf8>
    24f2:	c3 01       	movw	r24, r6
    24f4:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN10ACAN2517FD10deassertCSEv>
    24f8:	41 e0       	ldi	r20, 0x01	; 1
    24fa:	6d e5       	ldi	r22, 0x5D	; 93
    24fc:	70 e0       	ldi	r23, 0x00	; 0
    24fe:	c3 01       	movw	r24, r6
    2500:	0e 94 4e 10 	call	0x209c	; 0x209c <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    2504:	d5 01       	movw	r26, r10
    2506:	c4 01       	movw	r24, r8
    2508:	4b e0       	ldi	r20, 0x0B	; 11
    250a:	b6 95       	lsr	r27
    250c:	a7 95       	ror	r26
    250e:	97 95       	ror	r25
    2510:	87 95       	ror	r24
    2512:	4a 95       	dec	r20
    2514:	d1 f7       	brne	.-12     	; 0x250a <_ZN10ACAN2517FD16receiveInterruptEv+0x16c>
    2516:	8f 71       	andi	r24, 0x1F	; 31
    2518:	62 96       	adiw	r28, 0x12	; 18
    251a:	8f af       	std	Y+63, r24	; 0x3f
    251c:	62 97       	sbiw	r28, 0x12	; 18
    251e:	85 fe       	sbrs	r8, 5
    2520:	04 c0       	rjmp	.+8      	; 0x252a <_ZN10ACAN2517FD16receiveInterruptEv+0x18c>
    2522:	61 96       	adiw	r28, 0x11	; 17
    2524:	1f ae       	std	Y+63, r1	; 0x3f
    2526:	61 97       	sbiw	r28, 0x11	; 17
    2528:	0c c0       	rjmp	.+24     	; 0x2542 <_ZN10ACAN2517FD16receiveInterruptEv+0x1a4>
    252a:	87 fc       	sbrc	r8, 7
    252c:	02 c0       	rjmp	.+4      	; 0x2532 <_ZN10ACAN2517FD16receiveInterruptEv+0x194>
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	05 c0       	rjmp	.+10     	; 0x253c <_ZN10ACAN2517FD16receiveInterruptEv+0x19e>
    2532:	86 fc       	sbrc	r8, 6
    2534:	02 c0       	rjmp	.+4      	; 0x253a <_ZN10ACAN2517FD16receiveInterruptEv+0x19c>
    2536:	82 e0       	ldi	r24, 0x02	; 2
    2538:	01 c0       	rjmp	.+2      	; 0x253c <_ZN10ACAN2517FD16receiveInterruptEv+0x19e>
    253a:	83 e0       	ldi	r24, 0x03	; 3
    253c:	61 96       	adiw	r28, 0x11	; 17
    253e:	8f af       	std	Y+63, r24	; 0x3f
    2540:	61 97       	sbiw	r28, 0x11	; 17
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	b5 01       	movw	r22, r10
    2546:	a4 01       	movw	r20, r8
    2548:	40 71       	andi	r20, 0x10	; 16
    254a:	55 27       	eor	r21, r21
    254c:	66 27       	eor	r22, r22
    254e:	77 27       	eor	r23, r23
    2550:	84 fe       	sbrs	r8, 4
    2552:	80 e0       	ldi	r24, 0x00	; 0
    2554:	60 96       	adiw	r28, 0x10	; 16
    2556:	8f af       	std	Y+63, r24	; 0x3f
    2558:	60 97       	sbiw	r28, 0x10	; 16
    255a:	45 2b       	or	r20, r21
    255c:	46 2b       	or	r20, r22
    255e:	47 2b       	or	r20, r23
    2560:	29 f1       	breq	.+74     	; 0x25ac <_ZN10ACAN2517FD16receiveInterruptEv+0x20e>
    2562:	2f 96       	adiw	r28, 0x0f	; 15
    2564:	8c ad       	ldd	r24, Y+60	; 0x3c
    2566:	9d ad       	ldd	r25, Y+61	; 0x3d
    2568:	ae ad       	ldd	r26, Y+62	; 0x3e
    256a:	bf ad       	ldd	r27, Y+63	; 0x3f
    256c:	2f 97       	sbiw	r28, 0x0f	; 15
    256e:	ac 01       	movw	r20, r24
    2570:	bd 01       	movw	r22, r26
    2572:	2b e0       	ldi	r18, 0x0B	; 11
    2574:	76 95       	lsr	r23
    2576:	67 95       	ror	r22
    2578:	57 95       	ror	r21
    257a:	47 95       	ror	r20
    257c:	2a 95       	dec	r18
    257e:	d1 f7       	brne	.-12     	; 0x2574 <_ZN10ACAN2517FD16receiveInterruptEv+0x1d6>
    2580:	63 70       	andi	r22, 0x03	; 3
    2582:	77 27       	eor	r23, r23
    2584:	97 70       	andi	r25, 0x07	; 7
    2586:	aa 27       	eor	r26, r26
    2588:	bb 27       	eor	r27, r27
    258a:	32 e1       	ldi	r19, 0x12	; 18
    258c:	88 0f       	add	r24, r24
    258e:	99 1f       	adc	r25, r25
    2590:	aa 1f       	adc	r26, r26
    2592:	bb 1f       	adc	r27, r27
    2594:	3a 95       	dec	r19
    2596:	d1 f7       	brne	.-12     	; 0x258c <_ZN10ACAN2517FD16receiveInterruptEv+0x1ee>
    2598:	84 2b       	or	r24, r20
    259a:	95 2b       	or	r25, r21
    259c:	a6 2b       	or	r26, r22
    259e:	b7 2b       	or	r27, r23
    25a0:	2f 96       	adiw	r28, 0x0f	; 15
    25a2:	8c af       	std	Y+60, r24	; 0x3c
    25a4:	9d af       	std	Y+61, r25	; 0x3d
    25a6:	ae af       	std	Y+62, r26	; 0x3e
    25a8:	bf af       	std	Y+63, r27	; 0x3f
    25aa:	2f 97       	sbiw	r28, 0x0f	; 15
    25ac:	f3 01       	movw	r30, r6
    25ae:	82 89       	ldd	r24, Z+18	; 0x12
    25b0:	93 89       	ldd	r25, Z+19	; 0x13
    25b2:	a4 89       	ldd	r26, Z+20	; 0x14
    25b4:	b5 89       	ldd	r27, Z+21	; 0x15
    25b6:	46 8d       	ldd	r20, Z+30	; 0x1e
    25b8:	57 8d       	ldd	r21, Z+31	; 0x1f
    25ba:	60 a1       	ldd	r22, Z+32	; 0x20
    25bc:	71 a1       	ldd	r23, Z+33	; 0x21
    25be:	48 17       	cp	r20, r24
    25c0:	59 07       	cpc	r21, r25
    25c2:	6a 07       	cpc	r22, r26
    25c4:	7b 07       	cpc	r23, r27
    25c6:	40 f4       	brcc	.+16     	; 0x25d8 <_ZN10ACAN2517FD16receiveInterruptEv+0x23a>
    25c8:	be 01       	movw	r22, r28
    25ca:	65 5b       	subi	r22, 0xB5	; 181
    25cc:	7f 4f       	sbci	r23, 0xFF	; 255
    25ce:	c3 01       	movw	r24, r6
    25d0:	40 96       	adiw	r24, 0x10	; 16
    25d2:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <_ZN12ACANFDBuffer6appendERK12CANFDMessage.part.2>
    25d6:	08 c0       	rjmp	.+16     	; 0x25e8 <_ZN10ACAN2517FD16receiveInterruptEv+0x24a>
    25d8:	01 96       	adiw	r24, 0x01	; 1
    25da:	a1 1d       	adc	r26, r1
    25dc:	b1 1d       	adc	r27, r1
    25de:	f3 01       	movw	r30, r6
    25e0:	82 a3       	std	Z+34, r24	; 0x22
    25e2:	93 a3       	std	Z+35, r25	; 0x23
    25e4:	a4 a3       	std	Z+36, r26	; 0x24
    25e6:	b5 a3       	std	Z+37, r27	; 0x25
    25e8:	cb 56       	subi	r28, 0x6B	; 107
    25ea:	df 4f       	sbci	r29, 0xFF	; 255
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	f8 94       	cli
    25f0:	de bf       	out	0x3e, r29	; 62
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	cd bf       	out	0x3d, r28	; 61
    25f6:	df 91       	pop	r29
    25f8:	cf 91       	pop	r28
    25fa:	1f 91       	pop	r17
    25fc:	0f 91       	pop	r16
    25fe:	ff 90       	pop	r15
    2600:	ef 90       	pop	r14
    2602:	df 90       	pop	r13
    2604:	cf 90       	pop	r12
    2606:	bf 90       	pop	r11
    2608:	af 90       	pop	r10
    260a:	9f 90       	pop	r9
    260c:	8f 90       	pop	r8
    260e:	7f 90       	pop	r7
    2610:	6f 90       	pop	r6
    2612:	5f 90       	pop	r5
    2614:	4f 90       	pop	r4
    2616:	3f 90       	pop	r3
    2618:	2f 90       	pop	r2
    261a:	08 95       	ret

0000261c <_ZN10ACAN2517FD36readRegister16Assume_SPI_transactionEj>:
    261c:	0f 93       	push	r16
    261e:	1f 93       	push	r17
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	00 d0       	rcall	.+0      	; 0x2626 <_ZN10ACAN2517FD36readRegister16Assume_SPI_transactionEj+0xa>
    2626:	00 d0       	rcall	.+0      	; 0x2628 <_ZN10ACAN2517FD36readRegister16Assume_SPI_transactionEj+0xc>
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	8c 01       	movw	r16, r24
    262e:	19 82       	std	Y+1, r1	; 0x01
    2630:	1a 82       	std	Y+2, r1	; 0x02
    2632:	1b 82       	std	Y+3, r1	; 0x03
    2634:	1c 82       	std	Y+4, r1	; 0x04
    2636:	7f 70       	andi	r23, 0x0F	; 15
    2638:	70 63       	ori	r23, 0x30	; 48
    263a:	79 83       	std	Y+1, r23	; 0x01
    263c:	6a 83       	std	Y+2, r22	; 0x02
    263e:	0e 94 0c 10 	call	0x2018	; 0x2018 <_ZN10ACAN2517FD8assertCSEv>
    2642:	64 e0       	ldi	r22, 0x04	; 4
    2644:	70 e0       	ldi	r23, 0x00	; 0
    2646:	ce 01       	movw	r24, r28
    2648:	01 96       	adiw	r24, 0x01	; 1
    264a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <_ZN8SPIClass8transferEPvj.part.6>
    264e:	c8 01       	movw	r24, r16
    2650:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN10ACAN2517FD10deassertCSEv>
    2654:	8b 81       	ldd	r24, Y+3	; 0x03
    2656:	9c 81       	ldd	r25, Y+4	; 0x04
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	df 91       	pop	r29
    2662:	cf 91       	pop	r28
    2664:	1f 91       	pop	r17
    2666:	0f 91       	pop	r16
    2668:	08 95       	ret

0000266a <_ZN10ACAN2517FD8isr_coreEv>:
    266a:	ef 92       	push	r14
    266c:	ff 92       	push	r15
    266e:	1f 93       	push	r17
    2670:	cf 93       	push	r28
    2672:	df 93       	push	r29
    2674:	ec 01       	movw	r28, r24
    2676:	8a 81       	ldd	r24, Y+2	; 0x02
    2678:	9b 81       	ldd	r25, Y+3	; 0x03
    267a:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <_ZN8SPIClass16beginTransactionE11SPISettings>
    267e:	6c e1       	ldi	r22, 0x1C	; 28
    2680:	70 e0       	ldi	r23, 0x00	; 0
    2682:	ce 01       	movw	r24, r28
    2684:	0e 94 0e 13 	call	0x261c	; 0x261c <_ZN10ACAN2517FD36readRegister16Assume_SPI_transactionEj>
    2688:	7c 01       	movw	r14, r24
    268a:	81 ff       	sbrs	r24, 1
    268c:	05 c0       	rjmp	.+10     	; 0x2698 <_ZN10ACAN2517FD8isr_coreEv+0x2e>
    268e:	ce 01       	movw	r24, r28
    2690:	0e 94 cf 11 	call	0x239e	; 0x239e <_ZN10ACAN2517FD16receiveInterruptEv>
    2694:	11 e0       	ldi	r17, 0x01	; 1
    2696:	01 c0       	rjmp	.+2      	; 0x269a <_ZN10ACAN2517FD8isr_coreEv+0x30>
    2698:	10 e0       	ldi	r17, 0x00	; 0
    269a:	f2 fe       	sbrs	r15, 2
    269c:	07 c0       	rjmp	.+14     	; 0x26ac <_ZN10ACAN2517FD8isr_coreEv+0x42>
    269e:	4f ee       	ldi	r20, 0xEF	; 239
    26a0:	6c e6       	ldi	r22, 0x6C	; 108
    26a2:	70 e0       	ldi	r23, 0x00	; 0
    26a4:	ce 01       	movw	r24, r28
    26a6:	0e 94 4e 10 	call	0x209c	; 0x209c <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    26aa:	02 c0       	rjmp	.+4      	; 0x26b0 <_ZN10ACAN2517FD8isr_coreEv+0x46>
    26ac:	e0 fe       	sbrs	r14, 0
    26ae:	04 c0       	rjmp	.+8      	; 0x26b8 <_ZN10ACAN2517FD8isr_coreEv+0x4e>
    26b0:	ce 01       	movw	r24, r28
    26b2:	0e 94 92 11 	call	0x2324	; 0x2324 <_ZN10ACAN2517FD17transmitInterruptEv>
    26b6:	11 e0       	ldi	r17, 0x01	; 1
    26b8:	e2 fe       	sbrs	r14, 2
    26ba:	07 c0       	rjmp	.+14     	; 0x26ca <_ZN10ACAN2517FD8isr_coreEv+0x60>
    26bc:	4b ef       	ldi	r20, 0xFB	; 251
    26be:	6c e1       	ldi	r22, 0x1C	; 28
    26c0:	70 e0       	ldi	r23, 0x00	; 0
    26c2:	ce 01       	movw	r24, r28
    26c4:	0e 94 4e 10 	call	0x209c	; 0x209c <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    26c8:	11 e0       	ldi	r17, 0x01	; 1
    26ca:	e3 fe       	sbrs	r14, 3
    26cc:	07 c0       	rjmp	.+14     	; 0x26dc <_ZN10ACAN2517FD8isr_coreEv+0x72>
    26ce:	47 ef       	ldi	r20, 0xF7	; 247
    26d0:	6c e1       	ldi	r22, 0x1C	; 28
    26d2:	70 e0       	ldi	r23, 0x00	; 0
    26d4:	ce 01       	movw	r24, r28
    26d6:	0e 94 4e 10 	call	0x209c	; 0x209c <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    26da:	11 e0       	ldi	r17, 0x01	; 1
    26dc:	f4 fe       	sbrs	r15, 4
    26de:	07 c0       	rjmp	.+14     	; 0x26ee <_ZN10ACAN2517FD8isr_coreEv+0x84>
    26e0:	4f ee       	ldi	r20, 0xEF	; 239
    26e2:	6d e1       	ldi	r22, 0x1D	; 29
    26e4:	70 e0       	ldi	r23, 0x00	; 0
    26e6:	ce 01       	movw	r24, r28
    26e8:	0e 94 4e 10 	call	0x209c	; 0x209c <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    26ec:	11 e0       	ldi	r17, 0x01	; 1
    26ee:	f3 fe       	sbrs	r15, 3
    26f0:	0c c0       	rjmp	.+24     	; 0x270a <_ZN10ACAN2517FD8isr_coreEv+0xa0>
    26f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26f4:	8f 3f       	cpi	r24, 0xFF	; 255
    26f6:	11 f0       	breq	.+4      	; 0x26fc <_ZN10ACAN2517FD8isr_coreEv+0x92>
    26f8:	8f 5f       	subi	r24, 0xFF	; 255
    26fa:	8f 87       	std	Y+15, r24	; 0x0f
    26fc:	47 ef       	ldi	r20, 0xF7	; 247
    26fe:	60 e6       	ldi	r22, 0x60	; 96
    2700:	70 e0       	ldi	r23, 0x00	; 0
    2702:	ce 01       	movw	r24, r28
    2704:	0e 94 4e 10 	call	0x209c	; 0x209c <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    2708:	11 e0       	ldi	r17, 0x01	; 1
    270a:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_ZN8SPIClass14endTransactionEv>
    270e:	81 2f       	mov	r24, r17
    2710:	df 91       	pop	r29
    2712:	cf 91       	pop	r28
    2714:	1f 91       	pop	r17
    2716:	ff 90       	pop	r15
    2718:	ef 90       	pop	r14
    271a:	08 95       	ret

0000271c <_ZN10ACAN2517FD3isrEv>:
    271c:	cf 93       	push	r28
    271e:	df 93       	push	r29
    2720:	ec 01       	movw	r28, r24
    2722:	ce 01       	movw	r24, r28
    2724:	0e 94 35 13 	call	0x266a	; 0x266a <_ZN10ACAN2517FD8isr_coreEv>
    2728:	81 11       	cpse	r24, r1
    272a:	fb cf       	rjmp	.-10     	; 0x2722 <_ZN10ACAN2517FD3isrEv+0x6>
    272c:	df 91       	pop	r29
    272e:	cf 91       	pop	r28
    2730:	08 95       	ret

00002732 <_ZN10ACAN2517FD35readRegister8Assume_SPI_transactionEj>:
    2732:	0f 93       	push	r16
    2734:	1f 93       	push	r17
    2736:	cf 93       	push	r28
    2738:	df 93       	push	r29
    273a:	00 d0       	rcall	.+0      	; 0x273c <_ZN10ACAN2517FD35readRegister8Assume_SPI_transactionEj+0xa>
    273c:	1f 92       	push	r1
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	8c 01       	movw	r16, r24
    2744:	19 82       	std	Y+1, r1	; 0x01
    2746:	1a 82       	std	Y+2, r1	; 0x02
    2748:	1b 82       	std	Y+3, r1	; 0x03
    274a:	7f 70       	andi	r23, 0x0F	; 15
    274c:	70 63       	ori	r23, 0x30	; 48
    274e:	79 83       	std	Y+1, r23	; 0x01
    2750:	6a 83       	std	Y+2, r22	; 0x02
    2752:	0e 94 0c 10 	call	0x2018	; 0x2018 <_ZN10ACAN2517FD8assertCSEv>
    2756:	63 e0       	ldi	r22, 0x03	; 3
    2758:	70 e0       	ldi	r23, 0x00	; 0
    275a:	ce 01       	movw	r24, r28
    275c:	01 96       	adiw	r24, 0x01	; 1
    275e:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <_ZN8SPIClass8transferEPvj.part.6>
    2762:	c8 01       	movw	r24, r16
    2764:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN10ACAN2517FD10deassertCSEv>
    2768:	8b 81       	ldd	r24, Y+3	; 0x03
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	0f 90       	pop	r0
    2770:	df 91       	pop	r29
    2772:	cf 91       	pop	r28
    2774:	1f 91       	pop	r17
    2776:	0f 91       	pop	r16
    2778:	08 95       	ret

0000277a <_ZN10ACAN2517FD14writeRegister8Ejh>:
    277a:	ff 92       	push	r15
    277c:	0f 93       	push	r16
    277e:	1f 93       	push	r17
    2780:	cf 93       	push	r28
    2782:	df 93       	push	r29
    2784:	ec 01       	movw	r28, r24
    2786:	8b 01       	movw	r16, r22
    2788:	f4 2e       	mov	r15, r20
    278a:	8a 81       	ldd	r24, Y+2	; 0x02
    278c:	9b 81       	ldd	r25, Y+3	; 0x03
    278e:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <_ZN8SPIClass16beginTransactionE11SPISettings>
    2792:	f8 94       	cli
    2794:	4f 2d       	mov	r20, r15
    2796:	b8 01       	movw	r22, r16
    2798:	ce 01       	movw	r24, r28
    279a:	0e 94 4e 10 	call	0x209c	; 0x209c <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    279e:	78 94       	sei
    27a0:	df 91       	pop	r29
    27a2:	cf 91       	pop	r28
    27a4:	1f 91       	pop	r17
    27a6:	0f 91       	pop	r16
    27a8:	ff 90       	pop	r15
    27aa:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <_ZN8SPIClass14endTransactionEv>

000027ae <_ZN10ACAN2517FD13readRegister8Ej>:
    27ae:	0f 93       	push	r16
    27b0:	1f 93       	push	r17
    27b2:	cf 93       	push	r28
    27b4:	df 93       	push	r29
    27b6:	ec 01       	movw	r28, r24
    27b8:	8b 01       	movw	r16, r22
    27ba:	8a 81       	ldd	r24, Y+2	; 0x02
    27bc:	9b 81       	ldd	r25, Y+3	; 0x03
    27be:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <_ZN8SPIClass16beginTransactionE11SPISettings>
    27c2:	f8 94       	cli
    27c4:	b8 01       	movw	r22, r16
    27c6:	ce 01       	movw	r24, r28
    27c8:	0e 94 99 13 	call	0x2732	; 0x2732 <_ZN10ACAN2517FD35readRegister8Assume_SPI_transactionEj>
    27cc:	c8 2f       	mov	r28, r24
    27ce:	78 94       	sei
    27d0:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_ZN8SPIClass14endTransactionEv>
    27d4:	8c 2f       	mov	r24, r28
    27d6:	df 91       	pop	r29
    27d8:	cf 91       	pop	r28
    27da:	1f 91       	pop	r17
    27dc:	0f 91       	pop	r16
    27de:	08 95       	ret

000027e0 <_ZN10ACAN2517FD15writeRegister32Ejm>:
    27e0:	cf 92       	push	r12
    27e2:	df 92       	push	r13
    27e4:	ef 92       	push	r14
    27e6:	ff 92       	push	r15
    27e8:	0f 93       	push	r16
    27ea:	1f 93       	push	r17
    27ec:	cf 93       	push	r28
    27ee:	df 93       	push	r29
    27f0:	ec 01       	movw	r28, r24
    27f2:	8b 01       	movw	r16, r22
    27f4:	69 01       	movw	r12, r18
    27f6:	7a 01       	movw	r14, r20
    27f8:	8a 81       	ldd	r24, Y+2	; 0x02
    27fa:	9b 81       	ldd	r25, Y+3	; 0x03
    27fc:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <_ZN8SPIClass16beginTransactionE11SPISettings>
    2800:	f8 94       	cli
    2802:	a7 01       	movw	r20, r14
    2804:	96 01       	movw	r18, r12
    2806:	b8 01       	movw	r22, r16
    2808:	ce 01       	movw	r24, r28
    280a:	0e 94 16 10 	call	0x202c	; 0x202c <_ZN10ACAN2517FD37writeRegister32Assume_SPI_transactionEjm>
    280e:	78 94       	sei
    2810:	df 91       	pop	r29
    2812:	cf 91       	pop	r28
    2814:	1f 91       	pop	r17
    2816:	0f 91       	pop	r16
    2818:	ff 90       	pop	r15
    281a:	ef 90       	pop	r14
    281c:	df 90       	pop	r13
    281e:	cf 90       	pop	r12
    2820:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <_ZN8SPIClass14endTransactionEv>

00002824 <_ZN10ACAN2517FD14readRegister32Ej>:
    2824:	cf 92       	push	r12
    2826:	df 92       	push	r13
    2828:	ef 92       	push	r14
    282a:	ff 92       	push	r15
    282c:	cf 93       	push	r28
    282e:	df 93       	push	r29
    2830:	ec 01       	movw	r28, r24
    2832:	7b 01       	movw	r14, r22
    2834:	8a 81       	ldd	r24, Y+2	; 0x02
    2836:	9b 81       	ldd	r25, Y+3	; 0x03
    2838:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <_ZN8SPIClass16beginTransactionE11SPISettings>
    283c:	f8 94       	cli
    283e:	b7 01       	movw	r22, r14
    2840:	ce 01       	movw	r24, r28
    2842:	0e 94 6f 10 	call	0x20de	; 0x20de <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj>
    2846:	6b 01       	movw	r12, r22
    2848:	7c 01       	movw	r14, r24
    284a:	78 94       	sei
    284c:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_ZN8SPIClass14endTransactionEv>
    2850:	c7 01       	movw	r24, r14
    2852:	b6 01       	movw	r22, r12
    2854:	df 91       	pop	r29
    2856:	cf 91       	pop	r28
    2858:	ff 90       	pop	r15
    285a:	ef 90       	pop	r14
    285c:	df 90       	pop	r13
    285e:	cf 90       	pop	r12
    2860:	08 95       	ret

00002862 <_ZN10ACAN2517FD11reset2517FDEv>:

//----------------------------------------------------------------------------------------------------------------------

void ACAN2517FD::reset2517FD (void) {
    2862:	cf 93       	push	r28
    2864:	df 93       	push	r29
    2866:	ec 01       	movw	r28, r24
  mSPI.beginTransaction (mSPISettings) ; // Check RESET is performed with 1 MHz clock
    2868:	8a 81       	ldd	r24, Y+2	; 0x02
    286a:	9b 81       	ldd	r25, Y+3	; 0x03
    286c:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <_ZN8SPIClass16beginTransactionE11SPISettings>
    #ifdef ARDUINO_ARCH_ESP32
      taskDISABLE_INTERRUPTS () ;
    #else
      noInterrupts () ;
    2870:	f8 94       	cli
    #endif
      assertCS () ;
    2872:	ce 01       	movw	r24, r28
    2874:	0e 94 0c 10 	call	0x2018	; 0x2018 <_ZN10ACAN2517FD8assertCSEv>
        mSPI.transfer16 (0x00) ; // Reset instruction: 0x0000
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_ZN8SPIClass10transfer16Ej>
      deassertCS () ;
    2880:	ce 01       	movw	r24, r28
    2882:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN10ACAN2517FD10deassertCSEv>
    #ifdef ARDUINO_ARCH_ESP32
      taskENABLE_INTERRUPTS () ;
    #else
      interrupts () ;
    2886:	78 94       	sei
    #endif
  mSPI.endTransaction () ;
}
    2888:	df 91       	pop	r29
    288a:	cf 91       	pop	r28
    #ifdef ARDUINO_ARCH_ESP32
      taskENABLE_INTERRUPTS () ;
    #else
      interrupts () ;
    #endif
  mSPI.endTransaction () ;
    288c:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <_ZN8SPIClass14endTransactionEv>

00002890 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters>:

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FD::begin (const ACAN2517FDSettings & inSettings,
                            void (* inInterruptServiceRoutine) (void),
                            const ACAN2517FDFilters & inFilters) {
    2890:	2f 92       	push	r2
    2892:	3f 92       	push	r3
    2894:	4f 92       	push	r4
    2896:	5f 92       	push	r5
    2898:	6f 92       	push	r6
    289a:	7f 92       	push	r7
    289c:	8f 92       	push	r8
    289e:	9f 92       	push	r9
    28a0:	af 92       	push	r10
    28a2:	bf 92       	push	r11
    28a4:	cf 92       	push	r12
    28a6:	df 92       	push	r13
    28a8:	ef 92       	push	r14
    28aa:	ff 92       	push	r15
    28ac:	0f 93       	push	r16
    28ae:	1f 93       	push	r17
    28b0:	cf 93       	push	r28
    28b2:	df 93       	push	r29
    28b4:	00 d0       	rcall	.+0      	; 0x28b6 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x26>
    28b6:	1f 92       	push	r1
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
    28bc:	9b 83       	std	Y+3, r25	; 0x03
    28be:	8a 83       	std	Y+2, r24	; 0x02
    28c0:	8b 01       	movw	r16, r22
    28c2:	1a 01       	movw	r2, r20
    28c4:	69 01       	movw	r12, r18
  uint32_t errorCode = 0 ; // Means no error
//----------------------------------- If ok, check if settings are correct
  if (!inSettings.mArbitrationBitRateClosedToDesiredRate) {
    28c6:	fb 01       	movw	r30, r22
    28c8:	83 89       	ldd	r24, Z+19	; 0x13
    28ca:	81 11       	cpse	r24, r1
    28cc:	06 c0       	rjmp	.+12     	; 0x28da <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x4a>
    errorCode |= kTooFarFromDesiredBitRate ;
    28ce:	44 e0       	ldi	r20, 0x04	; 4
    28d0:	84 2e       	mov	r8, r20
    28d2:	91 2c       	mov	r9, r1
    28d4:	a1 2c       	mov	r10, r1
    28d6:	b1 2c       	mov	r11, r1
    28d8:	03 c0       	rjmp	.+6      	; 0x28e0 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x50>
//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FD::begin (const ACAN2517FDSettings & inSettings,
                            void (* inInterruptServiceRoutine) (void),
                            const ACAN2517FDFilters & inFilters) {
  uint32_t errorCode = 0 ; // Means no error
    28da:	81 2c       	mov	r8, r1
    28dc:	91 2c       	mov	r9, r1
    28de:	54 01       	movw	r10, r8
//----------------------------------- If ok, check if settings are correct
  if (!inSettings.mArbitrationBitRateClosedToDesiredRate) {
    errorCode |= kTooFarFromDesiredBitRate ;
  }
  if (inSettings.CANBitSettingConsistency () != 0) {
    28e0:	c8 01       	movw	r24, r16
    28e2:	0e 94 67 1c 	call	0x38ce	; 0x38ce <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv>
    28e6:	67 2b       	or	r22, r23
    28e8:	68 2b       	or	r22, r24
    28ea:	69 2b       	or	r22, r25
    28ec:	11 f0       	breq	.+4      	; 0x28f2 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x62>
    errorCode |= kInconsistentBitRateSettings ;
    28ee:	68 94       	set
    28f0:	83 f8       	bld	r8, 3
  }
//----------------------------------- Check mINT has interrupt capability
  const int8_t itPin = digitalPinToInterrupt (mINT) ;
    28f2:	ea 81       	ldd	r30, Y+2	; 0x02
    28f4:	fb 81       	ldd	r31, Y+3	; 0x03
    28f6:	87 81       	ldd	r24, Z+7	; 0x07
    28f8:	82 30       	cpi	r24, 0x02	; 2
    28fa:	29 f0       	breq	.+10     	; 0x2906 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x76>
    28fc:	83 30       	cpi	r24, 0x03	; 3
    28fe:	29 f4       	brne	.+10     	; 0x290a <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x7a>
    2900:	f1 e0       	ldi	r31, 0x01	; 1
    2902:	f9 83       	std	Y+1, r31	; 0x01
    2904:	74 c3       	rjmp	.+1768   	; 0x2fee <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x75e>
    2906:	19 82       	std	Y+1, r1	; 0x01
    2908:	72 c3       	rjmp	.+1764   	; 0x2fee <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x75e>
  if ((mINT != 255) && (itPin == NOT_AN_INTERRUPT)) {
    290a:	8f 3f       	cpi	r24, 0xFF	; 255
    290c:	09 f0       	breq	.+2      	; 0x2910 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x80>
    290e:	68 c3       	rjmp	.+1744   	; 0x2fe0 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x750>
//----------------------------------- Check interrupt service routine is not null
  if ((mINT != 255) && (inInterruptServiceRoutine == NULL)) {
    errorCode |= kISRIsNull ;
  }
//----------------------------------- Check consistency between ISR and INT pin
  if ((mINT == 255) && (inInterruptServiceRoutine != NULL)) {
    2910:	21 14       	cp	r2, r1
    2912:	31 04       	cpc	r3, r1
    2914:	09 f4       	brne	.+2      	; 0x2918 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x88>
    2916:	61 c3       	rjmp	.+1730   	; 0x2fda <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x74a>
    errorCode |= kISRNotNullAndNoIntPin ;
    2918:	68 94       	set
    291a:	a3 f8       	bld	r10, 3
    291c:	2f ef       	ldi	r18, 0xFF	; 255
    291e:	29 83       	std	Y+1, r18	; 0x01
  }
//----------------------------------- Check TXQ size is <= 32
  if (inSettings.mControllerTXQSize > 32) {
    2920:	f8 01       	movw	r30, r16
    2922:	80 a1       	ldd	r24, Z+32	; 0x20
    2924:	81 32       	cpi	r24, 0x21	; 33
    2926:	10 f0       	brcs	.+4      	; 0x292c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x9c>
    errorCode |= kControllerTXQSizeGreaterThan32 ;
    2928:	68 94       	set
    292a:	97 f8       	bld	r9, 7
  }
//----------------------------------- Check TXQ priority is <= 31
  if (inSettings.mControllerTXQBufferPriority > 31) {
    292c:	f8 01       	movw	r30, r16
    292e:	82 a1       	ldd	r24, Z+34	; 0x22
    2930:	80 32       	cpi	r24, 0x20	; 32
    2932:	10 f0       	brcs	.+4      	; 0x2938 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xa8>
    errorCode |= kControllerTXQPriorityGreaterThan31 ;
    2934:	68 94       	set
    2936:	95 f8       	bld	r9, 5
  }
//----------------------------------- Check controller receive FIFO size is 1 ... 32
  if (inSettings.mControllerReceiveFIFOSize == 0) {
    2938:	f8 01       	movw	r30, r16
    293a:	87 a1       	ldd	r24, Z+39	; 0x27
    293c:	81 11       	cpse	r24, r1
    293e:	03 c0       	rjmp	.+6      	; 0x2946 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xb6>
    errorCode |= kControllerReceiveFIFOSizeIsZero ;
    2940:	68 94       	set
    2942:	90 f8       	bld	r9, 0
    2944:	04 c0       	rjmp	.+8      	; 0x294e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xbe>
  }else if (inSettings.mControllerReceiveFIFOSize > 32) {
    2946:	81 32       	cpi	r24, 0x21	; 33
    2948:	10 f0       	brcs	.+4      	; 0x294e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xbe>
    errorCode |= kControllerReceiveFIFOSizeGreaterThan32 ;
    294a:	68 94       	set
    294c:	91 f8       	bld	r9, 1
  }
//----------------------------------- Check controller transmit FIFO size is 1 ... 32
  if (inSettings.mControllerTransmitFIFOSize == 0) {
    294e:	f8 01       	movw	r30, r16
    2950:	84 8d       	ldd	r24, Z+28	; 0x1c
    2952:	81 11       	cpse	r24, r1
    2954:	03 c0       	rjmp	.+6      	; 0x295c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xcc>
    errorCode |= kControllerTransmitFIFOSizeIsZero ;
    2956:	68 94       	set
    2958:	92 f8       	bld	r9, 2
    295a:	04 c0       	rjmp	.+8      	; 0x2964 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xd4>
  }else if (inSettings.mControllerTransmitFIFOSize > 32) {
    295c:	81 32       	cpi	r24, 0x21	; 33
    295e:	10 f0       	brcs	.+4      	; 0x2964 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xd4>
    errorCode |= kControllerTransmitFIFOSizeGreaterThan32 ;
    2960:	68 94       	set
    2962:	93 f8       	bld	r9, 3
  }
//----------------------------------- Check Transmit FIFO priority is <= 31
  if (inSettings.mControllerTransmitFIFOPriority > 31) {
    2964:	f8 01       	movw	r30, r16
    2966:	86 8d       	ldd	r24, Z+30	; 0x1e
    2968:	80 32       	cpi	r24, 0x20	; 32
    296a:	10 f0       	brcs	.+4      	; 0x2970 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xe0>
    errorCode |= kControllerTransmitFIFOPriorityGreaterThan31 ;
    296c:	68 94       	set
    296e:	96 f8       	bld	r9, 6
  }
//----------------------------------- Check MCP2517FD controller RAM usage is <= 2048 bytes
  if (inSettings.ramUsage () > 2048) {
    2970:	c8 01       	movw	r24, r16
    2972:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <_ZNK18ACAN2517FDSettings8ramUsageEv>
    2976:	61 30       	cpi	r22, 0x01	; 1
    2978:	78 40       	sbci	r23, 0x08	; 8
    297a:	81 05       	cpc	r24, r1
    297c:	91 05       	cpc	r25, r1
    297e:	10 f0       	brcs	.+4      	; 0x2984 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xf4>
    errorCode |= kControllerRamUsageGreaterThan2048 ;
    2980:	68 94       	set
    2982:	94 f8       	bld	r9, 4
  }
//----------------------------------- Check Filter definition
  if (inFilters.filterCount () > 32) {
    2984:	f6 01       	movw	r30, r12
    2986:	80 81       	ld	r24, Z
    2988:	81 32       	cpi	r24, 0x21	; 33
    298a:	10 f0       	brcs	.+4      	; 0x2990 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x100>
    errorCode |= kMoreThan32Filters ;
    298c:	68 94       	set
    298e:	87 f8       	bld	r8, 7
  }
  if (inFilters.filterStatus () != ACAN2517FDFilters::kFiltersOk) {
    2990:	f6 01       	movw	r30, r12
    2992:	85 81       	ldd	r24, Z+5	; 0x05
    2994:	88 23       	and	r24, r24
    2996:	11 f0       	breq	.+4      	; 0x299c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x10c>
    errorCode |= kFilterDefinitionError ;
    2998:	68 94       	set
    299a:	86 f8       	bld	r8, 6
  }
//----------------------------------- Check TDCO value
  if ((inSettings.mTDCO > 63) || (inSettings.mTDCO < -64)) {
    299c:	f8 01       	movw	r30, r16
    299e:	84 89       	ldd	r24, Z+20	; 0x14
    29a0:	80 5c       	subi	r24, 0xC0	; 192
    29a2:	87 ff       	sbrs	r24, 7
    29a4:	03 c0       	rjmp	.+6      	; 0x29ac <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x11c>
    errorCode |= kInvalidTDCO ;
    29a6:	68 94       	set
    29a8:	a4 f8       	bld	r10, 4
    29aa:	bc c0       	rjmp	.+376    	; 0x2b24 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x294>
  }
//----------------------------------- INT, CS pins, reset MCP2517FD
  if (errorCode == 0) {
    29ac:	81 14       	cp	r8, r1
    29ae:	91 04       	cpc	r9, r1
    29b0:	a1 04       	cpc	r10, r1
    29b2:	b1 04       	cpc	r11, r1
    29b4:	09 f0       	breq	.+2      	; 0x29b8 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x128>
    29b6:	b6 c0       	rjmp	.+364    	; 0x2b24 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x294>
    if (mINT != 255) { // 255 means interrupt is not used (thanks to Tyler Lewis)
    29b8:	ea 81       	ldd	r30, Y+2	; 0x02
    29ba:	fb 81       	ldd	r31, Y+3	; 0x03
    29bc:	87 81       	ldd	r24, Z+7	; 0x07
    29be:	8f 3f       	cpi	r24, 0xFF	; 255
    29c0:	19 f0       	breq	.+6      	; 0x29c8 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x138>
      pinMode (mINT, INPUT_PULLUP) ;
    29c2:	62 e0       	ldi	r22, 0x02	; 2
    29c4:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <pinMode>
    }
    deassertCS () ;
    29c8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ca:	9b 81       	ldd	r25, Y+3	; 0x03
    29cc:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN10ACAN2517FD10deassertCSEv>
    pinMode (mCS, OUTPUT) ;
    29d0:	61 e0       	ldi	r22, 0x01	; 1
    29d2:	ea 81       	ldd	r30, Y+2	; 0x02
    29d4:	fb 81       	ldd	r31, Y+3	; 0x03
    29d6:	86 81       	ldd	r24, Z+6	; 0x06
    29d8:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <pinMode>
  //----------------------------------- Set SPI clock to 1 MHz
    mSPISettings = SPISettings (1000UL * 1000, MSBFIRST, SPI_MODE0) ;
    29dc:	81 e5       	ldi	r24, 0x51	; 81
    29de:	ea 81       	ldd	r30, Y+2	; 0x02
    29e0:	fb 81       	ldd	r31, Y+3	; 0x03
    29e2:	82 83       	std	Z+2, r24	; 0x02
    29e4:	13 82       	std	Z+3, r1	; 0x03
  //----------------------------------- Request configuration mode
    bool wait = true ;
    const uint32_t deadline = millis () + 2 ; // Wait (2 ms max) until the configuration mode is reached
    29e6:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <millis>
    29ea:	2b 01       	movw	r4, r22
    29ec:	3c 01       	movw	r6, r24
    29ee:	f2 e0       	ldi	r31, 0x02	; 2
    29f0:	4f 0e       	add	r4, r31
    29f2:	51 1c       	adc	r5, r1
    29f4:	61 1c       	adc	r6, r1
    29f6:	71 1c       	adc	r7, r1
    while (wait) {
      writeRegister8 (CON_REGISTER + 3, 0x04 | (1 << 3)) ; // Request configuration mode, abort all transmissions
    29f8:	4c e0       	ldi	r20, 0x0C	; 12
    29fa:	63 e0       	ldi	r22, 0x03	; 3
    29fc:	70 e0       	ldi	r23, 0x00	; 0
    29fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2a00:	9b 81       	ldd	r25, Y+3	; 0x03
    2a02:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN10ACAN2517FD14writeRegister8Ejh>
      const uint8_t actualMode = (readRegister8 (CON_REGISTER + 2) >> 5) & 0x07 ;
    2a06:	62 e0       	ldi	r22, 0x02	; 2
    2a08:	70 e0       	ldi	r23, 0x00	; 0
    2a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a0e:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_ZN10ACAN2517FD13readRegister8Ej>
      wait = actualMode != 0x04 ;
      if (wait && (millis () >= deadline)) {
    2a12:	82 95       	swap	r24
    2a14:	86 95       	lsr	r24
    2a16:	87 70       	andi	r24, 0x07	; 7
    2a18:	84 30       	cpi	r24, 0x04	; 4
    2a1a:	59 f0       	breq	.+22     	; 0x2a32 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x1a2>
    2a1c:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <millis>
    2a20:	64 15       	cp	r22, r4
    2a22:	75 05       	cpc	r23, r5
    2a24:	86 05       	cpc	r24, r6
    2a26:	97 05       	cpc	r25, r7
    2a28:	38 f3       	brcs	.-50     	; 0x29f8 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x168>
        errorCode |= kRequestedConfigurationModeTimeOut ;
    2a2a:	81 2c       	mov	r8, r1
    2a2c:	91 2c       	mov	r9, r1
    2a2e:	54 01       	movw	r10, r8
    2a30:	83 94       	inc	r8
        wait = false ;
      }
    }
  //----------------------------------- Reset MCP2517FD (always use a 1 MHz clock)
    reset2517FD () ;
    2a32:	8a 81       	ldd	r24, Y+2	; 0x02
    2a34:	9b 81       	ldd	r25, Y+3	; 0x03
    2a36:	0e 94 31 14 	call	0x2862	; 0x2862 <_ZN10ACAN2517FD11reset2517FDEv>
    2a3a:	90 e2       	ldi	r25, 0x20	; 32
    2a3c:	e9 2e       	mov	r14, r25
    2a3e:	f1 2c       	mov	r15, r1
    2a40:	41 2c       	mov	r4, r1
    2a42:	51 2c       	mov	r5, r1
    2a44:	32 01       	movw	r6, r4
    2a46:	43 94       	inc	r4
  }
//----------------------------------- Check SPI connection is on (with a 1 MHz clock)
// We write and the read back MCP2517FD RAM at address 0x400
  for (uint32_t i=1 ; (i != 0) && (errorCode == 0) ; i <<= 1) {
    2a48:	81 14       	cp	r8, r1
    2a4a:	91 04       	cpc	r9, r1
    2a4c:	a1 04       	cpc	r10, r1
    2a4e:	b1 04       	cpc	r11, r1
    2a50:	09 f0       	breq	.+2      	; 0x2a54 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x1c4>
    2a52:	68 c0       	rjmp	.+208    	; 0x2b24 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x294>
    const uint16_t RAM_WORD_ADDRESS = 0x400 ;
    writeRegister32 (RAM_WORD_ADDRESS, i) ;
    2a54:	a3 01       	movw	r20, r6
    2a56:	92 01       	movw	r18, r4
    2a58:	60 e0       	ldi	r22, 0x00	; 0
    2a5a:	74 e0       	ldi	r23, 0x04	; 4
    2a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a60:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN10ACAN2517FD15writeRegister32Ejm>
    const uint32_t readBackValue = readRegister32 (RAM_WORD_ADDRESS) ;
    2a64:	60 e0       	ldi	r22, 0x00	; 0
    2a66:	74 e0       	ldi	r23, 0x04	; 4
    2a68:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a6c:	0e 94 12 14 	call	0x2824	; 0x2824 <_ZN10ACAN2517FD14readRegister32Ej>
    if (readBackValue != i) {
    2a70:	64 15       	cp	r22, r4
    2a72:	75 05       	cpc	r23, r5
    2a74:	86 05       	cpc	r24, r6
    2a76:	97 05       	cpc	r25, r7
    2a78:	29 f0       	breq	.+10     	; 0x2a84 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x1f4>
      errorCode = kReadBackErrorWith1MHzSPIClock ;
    2a7a:	82 e0       	ldi	r24, 0x02	; 2
    2a7c:	88 2e       	mov	r8, r24
    2a7e:	91 2c       	mov	r9, r1
    2a80:	a1 2c       	mov	r10, r1
    2a82:	b1 2c       	mov	r11, r1
  //----------------------------------- Reset MCP2517FD (always use a 1 MHz clock)
    reset2517FD () ;
  }
//----------------------------------- Check SPI connection is on (with a 1 MHz clock)
// We write and the read back MCP2517FD RAM at address 0x400
  for (uint32_t i=1 ; (i != 0) && (errorCode == 0) ; i <<= 1) {
    2a84:	44 0c       	add	r4, r4
    2a86:	55 1c       	adc	r5, r5
    2a88:	66 1c       	adc	r6, r6
    2a8a:	77 1c       	adc	r7, r7
    2a8c:	21 e0       	ldi	r18, 0x01	; 1
    2a8e:	e2 1a       	sub	r14, r18
    2a90:	f1 08       	sbc	r15, r1
    2a92:	d1 f6       	brne	.-76     	; 0x2a48 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x1b8>
  }
//----------------------------------- Now, set internal clock with OSC register
//     Bit 0: (rw) 1 --> 10xPLL
//     Bit 4: (rw) 0 --> SCLK is divided by 1, 1 --> SCLK is divided by 2
//     Bits 5-6: Clock Output Divisor
  if (errorCode == 0) {
    2a94:	81 14       	cp	r8, r1
    2a96:	91 04       	cpc	r9, r1
    2a98:	a1 04       	cpc	r10, r1
    2a9a:	b1 04       	cpc	r11, r1
    2a9c:	09 f0       	breq	.+2      	; 0x2aa0 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x210>
    2a9e:	42 c0       	rjmp	.+132    	; 0x2b24 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x294>
    2aa0:	f8 01       	movw	r30, r16
    2aa2:	80 81       	ld	r24, Z
    2aa4:	81 50       	subi	r24, 0x01	; 1
    2aa6:	87 30       	cpi	r24, 0x07	; 7
    2aa8:	50 f4       	brcc	.+20     	; 0x2abe <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x22e>
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	fc 01       	movw	r30, r24
    2aae:	eb 58       	subi	r30, 0x8B	; 139
    2ab0:	fd 4f       	sbci	r31, 0xFD	; 253
    2ab2:	f0 80       	ld	r15, Z
    2ab4:	fc 01       	movw	r30, r24
    2ab6:	e2 59       	subi	r30, 0x92	; 146
    2ab8:	fd 4f       	sbci	r31, 0xFD	; 253
    2aba:	40 81       	ld	r20, Z
    2abc:	02 c0       	rjmp	.+4      	; 0x2ac2 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x232>
    2abe:	40 e0       	ldi	r20, 0x00	; 0
    2ac0:	f1 2c       	mov	r15, r1
      break ;
    case ACAN2517FDSettings::OSC_4MHz10xPLL :
      pll = 1 ; // Enable 10x PLL
      break ;
    }
    osc |= pll ;
    2ac2:	4f 29       	or	r20, r15
    if (inSettings.mCLKOPin != ACAN2517FDSettings::SOF) {
    2ac4:	f8 01       	movw	r30, r16
    2ac6:	80 8d       	ldd	r24, Z+24	; 0x18
    2ac8:	84 30       	cpi	r24, 0x04	; 4
    2aca:	29 f0       	breq	.+10     	; 0x2ad6 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x246>
      osc |= ((uint8_t) inSettings.mCLKOPin) << 5 ;
    2acc:	f0 e2       	ldi	r31, 0x20	; 32
    2ace:	8f 9f       	mul	r24, r31
    2ad0:	c0 01       	movw	r24, r0
    2ad2:	11 24       	eor	r1, r1
    2ad4:	48 2b       	or	r20, r24
    }
    writeRegister8 (OSC_REGISTER, osc) ; // DS20005688B, page 16
    2ad6:	60 e0       	ldi	r22, 0x00	; 0
    2ad8:	7e e0       	ldi	r23, 0x0E	; 14
    2ada:	8a 81       	ldd	r24, Y+2	; 0x02
    2adc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ade:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN10ACAN2517FD14writeRegister8Ejh>
  //--- Wait for PLL is ready (wait max 2 ms)
    if (pll != 0) {
    2ae2:	ff 20       	and	r15, r15
    2ae4:	f9 f0       	breq	.+62     	; 0x2b24 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x294>
      bool wait = true ;
      const uint32_t deadline = millis () + 2 ;
    2ae6:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <millis>
    2aea:	2b 01       	movw	r4, r22
    2aec:	3c 01       	movw	r6, r24
    2aee:	22 e0       	ldi	r18, 0x02	; 2
    2af0:	42 0e       	add	r4, r18
    2af2:	51 1c       	adc	r5, r1
    2af4:	61 1c       	adc	r6, r1
    2af6:	71 1c       	adc	r7, r1
      while (wait) {
        wait = (readRegister8 (OSC_REGISTER + 1) & 0x1) == 0 ;  // DS20005688B, page 16
    2af8:	61 e0       	ldi	r22, 0x01	; 1
    2afa:	7e e0       	ldi	r23, 0x0E	; 14
    2afc:	8a 81       	ldd	r24, Y+2	; 0x02
    2afe:	9b 81       	ldd	r25, Y+3	; 0x03
    2b00:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_ZN10ACAN2517FD13readRegister8Ej>
        if (wait && (millis () >= deadline)) {
    2b04:	98 2f       	mov	r25, r24
    2b06:	91 70       	andi	r25, 0x01	; 1
    2b08:	80 fd       	sbrc	r24, 0
    2b0a:	78 c2       	rjmp	.+1264   	; 0x2ffc <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x76c>
    2b0c:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <millis>
    2b10:	64 15       	cp	r22, r4
    2b12:	75 05       	cpc	r23, r5
    2b14:	86 05       	cpc	r24, r6
    2b16:	97 05       	cpc	r25, r7
    2b18:	78 f3       	brcs	.-34     	; 0x2af8 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x268>
          errorCode = kX10PLLNotReadyWithin1MS ;
    2b1a:	81 2c       	mov	r8, r1
    2b1c:	91 2c       	mov	r9, r1
    2b1e:	a2 e0       	ldi	r26, 0x02	; 2
    2b20:	aa 2e       	mov	r10, r26
    2b22:	b1 2c       	mov	r11, r1
        }
      }
    }
  }
//----------------------------------- Set full speed clock
  mSPISettings = SPISettings (inSettings.sysClock () / 2, MSBFIRST, SPI_MODE0) ;
    2b24:	f8 01       	movw	r30, r16
    2b26:	41 80       	ldd	r4, Z+1	; 0x01
    2b28:	52 80       	ldd	r5, Z+2	; 0x02
    2b2a:	63 80       	ldd	r6, Z+3	; 0x03
    2b2c:	74 80       	ldd	r7, Z+4	; 0x04
    2b2e:	76 94       	lsr	r7
    2b30:	67 94       	ror	r6
    2b32:	57 94       	ror	r5
    2b34:	47 94       	ror	r4
    2b36:	40 e0       	ldi	r20, 0x00	; 0
    2b38:	52 e1       	ldi	r21, 0x12	; 18
    2b3a:	6a e7       	ldi	r22, 0x7A	; 122
    2b3c:	70 e0       	ldi	r23, 0x00	; 0
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
    2b40:	44 16       	cp	r4, r20
    2b42:	55 06       	cpc	r5, r21
    2b44:	66 06       	cpc	r6, r22
    2b46:	77 06       	cpc	r7, r23
    2b48:	40 f4       	brcc	.+16     	; 0x2b5a <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x2ca>
        clockSetting /= 2;
    2b4a:	76 95       	lsr	r23
    2b4c:	67 95       	ror	r22
    2b4e:	57 95       	ror	r21
    2b50:	47 95       	ror	r20
        clockDiv++;
    2b52:	9f 5f       	subi	r25, 0xFF	; 255
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
    2b54:	96 30       	cpi	r25, 0x06	; 6
    2b56:	a1 f7       	brne	.-24     	; 0x2b40 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x2b0>
      }
    }

    // Compensate for the duplicate fosc/64
    if (clockDiv == 6)
    clockDiv = 7;
    2b58:	97 e0       	ldi	r25, 0x07	; 7

    // Invert the SPI2X bit
    clockDiv ^= 0x1;
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	89 27       	eor	r24, r25
    2b5e:	98 2f       	mov	r25, r24
    2b60:	90 6a       	ori	r25, 0xA0	; 160
    2b62:	96 95       	lsr	r25
    2b64:	ea 81       	ldd	r30, Y+2	; 0x02
    2b66:	fb 81       	ldd	r31, Y+3	; 0x03
    2b68:	92 83       	std	Z+2, r25	; 0x02
    2b6a:	81 70       	andi	r24, 0x01	; 1
    2b6c:	83 83       	std	Z+3, r24	; 0x03
    2b6e:	60 e2       	ldi	r22, 0x20	; 32
    2b70:	e6 2e       	mov	r14, r22
    2b72:	f1 2c       	mov	r15, r1
//----------------------------------- Checking SPI connection is on (with a full speed clock)
//    We write and read back 2517 RAM at address 0x400
  for (uint32_t i=1 ; (i != 0) && (errorCode == 0) ; i <<= 1) {
    2b74:	41 2c       	mov	r4, r1
    2b76:	51 2c       	mov	r5, r1
    2b78:	32 01       	movw	r6, r4
    2b7a:	43 94       	inc	r4
    2b7c:	81 14       	cp	r8, r1
    2b7e:	91 04       	cpc	r9, r1
    2b80:	a1 04       	cpc	r10, r1
    2b82:	b1 04       	cpc	r11, r1
    2b84:	09 f0       	breq	.+2      	; 0x2b88 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x2f8>
    2b86:	3e c2       	rjmp	.+1148   	; 0x3004 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x774>
    writeRegister32 (0x400, i) ;
    2b88:	a3 01       	movw	r20, r6
    2b8a:	92 01       	movw	r18, r4
    2b8c:	60 e0       	ldi	r22, 0x00	; 0
    2b8e:	74 e0       	ldi	r23, 0x04	; 4
    2b90:	8a 81       	ldd	r24, Y+2	; 0x02
    2b92:	9b 81       	ldd	r25, Y+3	; 0x03
    2b94:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN10ACAN2517FD15writeRegister32Ejm>
    const uint32_t readBackValue = readRegister32 (0x400) ;
    2b98:	60 e0       	ldi	r22, 0x00	; 0
    2b9a:	74 e0       	ldi	r23, 0x04	; 4
    2b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9e:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba0:	0e 94 12 14 	call	0x2824	; 0x2824 <_ZN10ACAN2517FD14readRegister32Ej>
    if (readBackValue != i) {
    2ba4:	64 15       	cp	r22, r4
    2ba6:	75 05       	cpc	r23, r5
    2ba8:	86 05       	cpc	r24, r6
    2baa:	97 05       	cpc	r25, r7
    2bac:	29 f0       	breq	.+10     	; 0x2bb8 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x328>
      errorCode = kReadBackErrorWithFullSpeedSPIClock ;
    2bae:	81 2c       	mov	r8, r1
    2bb0:	91 2c       	mov	r9, r1
    2bb2:	54 e0       	ldi	r21, 0x04	; 4
    2bb4:	a5 2e       	mov	r10, r21
    2bb6:	b1 2c       	mov	r11, r1
  }
//----------------------------------- Set full speed clock
  mSPISettings = SPISettings (inSettings.sysClock () / 2, MSBFIRST, SPI_MODE0) ;
//----------------------------------- Checking SPI connection is on (with a full speed clock)
//    We write and read back 2517 RAM at address 0x400
  for (uint32_t i=1 ; (i != 0) && (errorCode == 0) ; i <<= 1) {
    2bb8:	44 0c       	add	r4, r4
    2bba:	55 1c       	adc	r5, r5
    2bbc:	66 1c       	adc	r6, r6
    2bbe:	77 1c       	adc	r7, r7
    2bc0:	f1 e0       	ldi	r31, 0x01	; 1
    2bc2:	ef 1a       	sub	r14, r31
    2bc4:	f1 08       	sbc	r15, r1
    2bc6:	d1 f6       	brne	.-76     	; 0x2b7c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x2ec>
    if (readBackValue != i) {
      errorCode = kReadBackErrorWithFullSpeedSPIClock ;
    }
  }
//----------------------------------- Install interrupt, configure external interrupt
  if (errorCode == 0) {
    2bc8:	81 14       	cp	r8, r1
    2bca:	91 04       	cpc	r9, r1
    2bcc:	a1 04       	cpc	r10, r1
    2bce:	b1 04       	cpc	r11, r1
    2bd0:	09 f0       	breq	.+2      	; 0x2bd4 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x344>
    2bd2:	18 c2       	rjmp	.+1072   	; 0x3004 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x774>
  //----------------------------------- Configure transmit and receive buffers
    mDriverTransmitBuffer.initWithSize (inSettings.mDriverTransmitFIFOSize) ;
    2bd4:	f8 01       	movw	r30, r16
    2bd6:	42 8d       	ldd	r20, Z+26	; 0x1a
    2bd8:	53 8d       	ldd	r21, Z+27	; 0x1b
    2bda:	60 e0       	ldi	r22, 0x00	; 0
    2bdc:	70 e0       	ldi	r23, 0x00	; 0
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	9b 81       	ldd	r25, Y+3	; 0x03
    2be2:	86 96       	adiw	r24, 0x26	; 38
    2be4:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <_ZN12ACANFDBuffer12initWithSizeEm>
    mDriverReceiveBuffer.initWithSize (inSettings.mDriverReceiveFIFOSize) ;
    2be8:	f8 01       	movw	r30, r16
    2bea:	44 a1       	ldd	r20, Z+36	; 0x24
    2bec:	55 a1       	ldd	r21, Z+37	; 0x25
    2bee:	60 e0       	ldi	r22, 0x00	; 0
    2bf0:	70 e0       	ldi	r23, 0x00	; 0
    2bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf6:	40 96       	adiw	r24, 0x10	; 16
    2bf8:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <_ZN12ACANFDBuffer12initWithSizeEm>
  //----------------------------------- Reset RAM
    for (uint16_t address = 0x400 ; address < 0xC00 ; address += 4) {
    2bfc:	e1 2c       	mov	r14, r1
    2bfe:	34 e0       	ldi	r19, 0x04	; 4
    2c00:	f3 2e       	mov	r15, r19
      writeRegister32 (address, 0) ;
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	a9 01       	movw	r20, r18
    2c08:	b7 01       	movw	r22, r14
    2c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c0e:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN10ACAN2517FD15writeRegister32Ejm>
  if (errorCode == 0) {
  //----------------------------------- Configure transmit and receive buffers
    mDriverTransmitBuffer.initWithSize (inSettings.mDriverTransmitFIFOSize) ;
    mDriverReceiveBuffer.initWithSize (inSettings.mDriverReceiveFIFOSize) ;
  //----------------------------------- Reset RAM
    for (uint16_t address = 0x400 ; address < 0xC00 ; address += 4) {
    2c12:	f4 e0       	ldi	r31, 0x04	; 4
    2c14:	ef 0e       	add	r14, r31
    2c16:	f1 1c       	adc	r15, r1
    2c18:	e1 14       	cp	r14, r1
    2c1a:	2c e0       	ldi	r18, 0x0C	; 12
    2c1c:	f2 06       	cpc	r15, r18
    2c1e:	89 f7       	brne	.-30     	; 0x2c02 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x372>
      writeRegister32 (address, 0) ;
    }
  //----------------------------------- Configure CLKO pin
    uint8_t data8 = 0x03 ; // Respect PM1-PM0 default values
    if (inSettings.mCLKOPin == ACAN2517FDSettings::SOF) {
    2c20:	f8 01       	movw	r30, r16
    2c22:	80 8d       	ldd	r24, Z+24	; 0x18
    2c24:	84 30       	cpi	r24, 0x04	; 4
    2c26:	11 f4       	brne	.+4      	; 0x2c2c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x39c>
      data8 |= 1 << 5 ; // SOF
    2c28:	43 e2       	ldi	r20, 0x23	; 35
    2c2a:	01 c0       	rjmp	.+2      	; 0x2c2e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x39e>
  //----------------------------------- Reset RAM
    for (uint16_t address = 0x400 ; address < 0xC00 ; address += 4) {
      writeRegister32 (address, 0) ;
    }
  //----------------------------------- Configure CLKO pin
    uint8_t data8 = 0x03 ; // Respect PM1-PM0 default values
    2c2c:	43 e0       	ldi	r20, 0x03	; 3
    if (inSettings.mCLKOPin == ACAN2517FDSettings::SOF) {
      data8 |= 1 << 5 ; // SOF
    }
    if (inSettings.mTXCANIsOpenDrain) {
    2c2e:	f8 01       	movw	r30, r16
    2c30:	85 89       	ldd	r24, Z+21	; 0x15
    2c32:	81 11       	cpse	r24, r1
      data8 |= 1 << 4 ; // TXCANOD
    2c34:	40 61       	ori	r20, 0x10	; 16
    }
    if (inSettings.mINTIsOpenDrain) {
    2c36:	f8 01       	movw	r30, r16
    2c38:	86 89       	ldd	r24, Z+22	; 0x16
    2c3a:	81 11       	cpse	r24, r1
      data8 |= 1 << 6 ; // INTOD
    2c3c:	40 64       	ori	r20, 0x40	; 64
    }
    writeRegister8 (IOCON_REGISTER + 3, data8) ; // DS20005688B, page 24
    2c3e:	67 e0       	ldi	r22, 0x07	; 7
    2c40:	7e e0       	ldi	r23, 0x0E	; 14
    2c42:	8a 81       	ldd	r24, Y+2	; 0x02
    2c44:	9b 81       	ldd	r25, Y+3	; 0x03
    2c46:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN10ACAN2517FD14writeRegister8Ejh>
  //----------------------------------- Configure ISO CRC Enable bit
    data8 = 1 << 6 ; // PXEDIS <-- 1
    if (inSettings.mISOCRCEnabled) {
    2c4a:	f8 01       	movw	r30, r16
    2c4c:	87 89       	ldd	r24, Z+23	; 0x17
    2c4e:	88 23       	and	r24, r24
    2c50:	11 f0       	breq	.+4      	; 0x2c56 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x3c6>
      data8 |= 1 << 5 ; //  Enable ISO CRC in CAN FD Frames bit
    2c52:	40 e6       	ldi	r20, 0x60	; 96
    2c54:	01 c0       	rjmp	.+2      	; 0x2c58 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x3c8>
    if (inSettings.mINTIsOpenDrain) {
      data8 |= 1 << 6 ; // INTOD
    }
    writeRegister8 (IOCON_REGISTER + 3, data8) ; // DS20005688B, page 24
  //----------------------------------- Configure ISO CRC Enable bit
    data8 = 1 << 6 ; // PXEDIS <-- 1
    2c56:	40 e4       	ldi	r20, 0x40	; 64
    if (inSettings.mISOCRCEnabled) {
      data8 |= 1 << 5 ; //  Enable ISO CRC in CAN FD Frames bit
    }
    writeRegister8 (CON_REGISTER, data8) ; // DS20005688B, page 24
    2c58:	60 e0       	ldi	r22, 0x00	; 0
    2c5a:	70 e0       	ldi	r23, 0x00	; 0
    2c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c60:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN10ACAN2517FD14writeRegister8Ejh>
  //----------------------------------- Configure DTC (DS20005688B, page 29)
    uint32_t data32 = 1UL << 25 ; // Enable Edge Filtering during Bus Integration state bit (added in 1.1.4)
    data32 |= 1UL << 17 ; // Auto TDC
    const uint32_t TCDO = uint32_t (inSettings.mTDCO) & 0x7F ;
    data32 |= TCDO << 8 ;
    writeRegister32 (TDC_REGISTER, data32) ;
    2c64:	f8 01       	movw	r30, r16
    2c66:	24 89       	ldd	r18, Z+20	; 0x14
    2c68:	2f 77       	andi	r18, 0x7F	; 127
    2c6a:	82 2f       	mov	r24, r18
    2c6c:	22 0f       	add	r18, r18
    2c6e:	99 0b       	sbc	r25, r25
    2c70:	aa 0b       	sbc	r26, r26
    2c72:	bb 0b       	sbc	r27, r27
    2c74:	ba 2f       	mov	r27, r26
    2c76:	a9 2f       	mov	r26, r25
    2c78:	98 2f       	mov	r25, r24
    2c7a:	88 27       	eor	r24, r24
    2c7c:	9c 01       	movw	r18, r24
    2c7e:	ad 01       	movw	r20, r26
    2c80:	42 60       	ori	r20, 0x02	; 2
    2c82:	52 60       	ori	r21, 0x02	; 2
    2c84:	6c e0       	ldi	r22, 0x0C	; 12
    2c86:	70 e0       	ldi	r23, 0x00	; 0
    2c88:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c8c:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN10ACAN2517FD15writeRegister32Ejm>
  //----------------------------------- Configure TXQ
    data8 = inSettings.mControllerTXQBufferRetransmissionAttempts ;
    2c90:	f8 01       	movw	r30, r16
    2c92:	43 a1       	ldd	r20, Z+35	; 0x23
    data8 <<= 5 ;
    2c94:	42 95       	swap	r20
    2c96:	44 0f       	add	r20, r20
    2c98:	40 7e       	andi	r20, 0xE0	; 224
    data8 |= inSettings.mControllerTXQBufferPriority ;
    writeRegister8 (TXQCON_REGISTER + 2, data8) ; // DS20005688B, page 48
    2c9a:	82 a1       	ldd	r24, Z+34	; 0x22
    2c9c:	48 2b       	or	r20, r24
    2c9e:	62 e5       	ldi	r22, 0x52	; 82
    2ca0:	70 e0       	ldi	r23, 0x00	; 0
    2ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca6:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN10ACAN2517FD14writeRegister8Ejh>
  // Bit 5-7: Payload Size bits
  // Bit 4-0: TXQ size
    mUsesTXQ = inSettings.mControllerTXQSize > 0 ;
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	f8 01       	movw	r30, r16
    2cae:	90 a1       	ldd	r25, Z+32	; 0x20
    2cb0:	91 11       	cpse	r25, r1
    2cb2:	01 c0       	rjmp	.+2      	; 0x2cb6 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x426>
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	ea 81       	ldd	r30, Y+2	; 0x02
    2cb8:	fb 81       	ldd	r31, Y+3	; 0x03
    2cba:	80 87       	std	Z+8, r24	; 0x08
    data8 = inSettings.mControllerTXQSize - 1 ;
    data8 |= inSettings.mControllerTXQBufferPayload << 5 ; // Payload
    2cbc:	f8 01       	movw	r30, r16
    2cbe:	81 a1       	ldd	r24, Z+33	; 0x21
    2cc0:	f0 e2       	ldi	r31, 0x20	; 32
    2cc2:	8f 9f       	mul	r24, r31
    2cc4:	c0 01       	movw	r24, r0
    2cc6:	11 24       	eor	r1, r1
    2cc8:	f8 01       	movw	r30, r16
    2cca:	40 a1       	ldd	r20, Z+32	; 0x20
    2ccc:	41 50       	subi	r20, 0x01	; 1
    2cce:	48 2b       	or	r20, r24
    writeRegister8 (TXQCON_REGISTER + 3, data8) ; // DS20005688B, page 48
    2cd0:	63 e5       	ldi	r22, 0x53	; 83
    2cd2:	70 e0       	ldi	r23, 0x00	; 0
    2cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd8:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN10ACAN2517FD14writeRegister8Ejh>
    mTXQBufferPayload = ACAN2517FDSettings::objectSizeForPayload (inSettings.mControllerTXQBufferPayload) ;
    2cdc:	f8 01       	movw	r30, r16
    2cde:	81 a1       	ldd	r24, Z+33	; 0x21
    2ce0:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <_ZN18ACAN2517FDSettings20objectSizeForPayloadENS_11PayloadSizeE>
    2ce4:	ea 81       	ldd	r30, Y+2	; 0x02
    2ce6:	fb 81       	ldd	r31, Y+3	; 0x03
    2ce8:	64 87       	std	Z+12, r22	; 0x0c
  //----------------------------------- Configure TXQ and TEF
  // Bit 4: Enable Transmit Queue bit ---> 1: Enable TXQ and reserves space in RAM
  // Bit 3: Store in Transmit Event FIFO bit ---> 0: Don’t save transmitted messages in TEF
  // Bit 0: RTXAT ---> 1: Enable CiFIFOCONm.TXAT to control retransmission attempts
    data8 = 0x01 ; // Enable RTXAT to limit retransmissions (Flole)
    data8 |= mUsesTXQ ? (1 << 4) : 0x00 ; // Bug fix in 1.1.4 (thanks to danielhenz)
    2cea:	80 85       	ldd	r24, Z+8	; 0x08
    2cec:	81 11       	cpse	r24, r1
    2cee:	02 c0       	rjmp	.+4      	; 0x2cf4 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x464>
    2cf0:	40 e0       	ldi	r20, 0x00	; 0
    2cf2:	01 c0       	rjmp	.+2      	; 0x2cf6 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x466>
    2cf4:	40 e1       	ldi	r20, 0x10	; 16
    writeRegister8 (CON_REGISTER + 2, data8) ; // DS20005688B, page 24
    2cf6:	41 60       	ori	r20, 0x01	; 1
    2cf8:	62 e0       	ldi	r22, 0x02	; 2
    2cfa:	70 e0       	ldi	r23, 0x00	; 0
    2cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfe:	9b 81       	ldd	r25, Y+3	; 0x03
    2d00:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN10ACAN2517FD14writeRegister8Ejh>
  //----------------------------------- Configure RX FIFO (FIFOCON, DS20005688B, page 52)
    data8 = inSettings.mControllerReceiveFIFOSize - 1 ; // Set receive FIFO size
    data8 |= inSettings.mControllerReceiveFIFOPayload << 5 ; // Payload
    2d04:	f8 01       	movw	r30, r16
    2d06:	86 a1       	ldd	r24, Z+38	; 0x26
    2d08:	f0 e2       	ldi	r31, 0x20	; 32
    2d0a:	8f 9f       	mul	r24, r31
    2d0c:	c0 01       	movw	r24, r0
    2d0e:	11 24       	eor	r1, r1
    2d10:	f8 01       	movw	r30, r16
    2d12:	47 a1       	ldd	r20, Z+39	; 0x27
    2d14:	41 50       	subi	r20, 0x01	; 1
    2d16:	48 2b       	or	r20, r24
    writeRegister8 (FIFOCON_REGISTER (RECEIVE_FIFO_INDEX) + 3, data8) ;
    2d18:	6f e5       	ldi	r22, 0x5F	; 95
    2d1a:	70 e0       	ldi	r23, 0x00	; 0
    2d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d20:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN10ACAN2517FD14writeRegister8Ejh>
    data8  = 1 << 0 ; // Interrupt Enabled for FIFO not Empty (TFNRFNIE)
    data8 |= 1 << 3 ; // Interrupt Enabled for FIFO Overflow (RXOVIE)
    writeRegister8 (FIFOCON_REGISTER (RECEIVE_FIFO_INDEX), data8) ;
    2d24:	49 e0       	ldi	r20, 0x09	; 9
    2d26:	6c e5       	ldi	r22, 0x5C	; 92
    2d28:	70 e0       	ldi	r23, 0x00	; 0
    2d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2e:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN10ACAN2517FD14writeRegister8Ejh>
    mReceiveFIFOPayload = ACAN2517FDSettings::objectSizeForPayload (inSettings.mControllerReceiveFIFOPayload) ;
    2d32:	f8 01       	movw	r30, r16
    2d34:	86 a1       	ldd	r24, Z+38	; 0x26
    2d36:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <_ZN18ACAN2517FDSettings20objectSizeForPayloadENS_11PayloadSizeE>
    2d3a:	ea 81       	ldd	r30, Y+2	; 0x02
    2d3c:	fb 81       	ldd	r31, Y+3	; 0x03
    2d3e:	65 87       	std	Z+13, r22	; 0x0d
  //----------------------------------- Configure TX FIFO (FIFOCON, DS20005688B, page 52)
    data8 = inSettings.mControllerTransmitFIFORetransmissionAttempts ;
    2d40:	f8 01       	movw	r30, r16
    2d42:	47 8d       	ldd	r20, Z+31	; 0x1f
    data8 <<= 5 ;
    2d44:	42 95       	swap	r20
    2d46:	44 0f       	add	r20, r20
    2d48:	40 7e       	andi	r20, 0xE0	; 224
    data8 |= inSettings.mControllerTransmitFIFOPriority ;
    writeRegister8 (FIFOCON_REGISTER (TRANSMIT_FIFO_INDEX) + 2, data8) ;
    2d4a:	86 8d       	ldd	r24, Z+30	; 0x1e
    2d4c:	48 2b       	or	r20, r24
    2d4e:	6a e6       	ldi	r22, 0x6A	; 106
    2d50:	70 e0       	ldi	r23, 0x00	; 0
    2d52:	8a 81       	ldd	r24, Y+2	; 0x02
    2d54:	9b 81       	ldd	r25, Y+3	; 0x03
    2d56:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN10ACAN2517FD14writeRegister8Ejh>
    data8 = inSettings.mControllerTransmitFIFOSize - 1 ; // Set transmit FIFO size
    data8 |= inSettings.mControllerTransmitFIFOPayload << 5 ; // Payload
    2d5a:	f8 01       	movw	r30, r16
    2d5c:	85 8d       	ldd	r24, Z+29	; 0x1d
    2d5e:	f0 e2       	ldi	r31, 0x20	; 32
    2d60:	8f 9f       	mul	r24, r31
    2d62:	c0 01       	movw	r24, r0
    2d64:	11 24       	eor	r1, r1
    2d66:	f8 01       	movw	r30, r16
    2d68:	44 8d       	ldd	r20, Z+28	; 0x1c
    2d6a:	41 50       	subi	r20, 0x01	; 1
    2d6c:	48 2b       	or	r20, r24
    writeRegister8 (FIFOCON_REGISTER (TRANSMIT_FIFO_INDEX) + 3, data8) ;
    2d6e:	6b e6       	ldi	r22, 0x6B	; 107
    2d70:	70 e0       	ldi	r23, 0x00	; 0
    2d72:	8a 81       	ldd	r24, Y+2	; 0x02
    2d74:	9b 81       	ldd	r25, Y+3	; 0x03
    2d76:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN10ACAN2517FD14writeRegister8Ejh>
    data8 = 1 << 7 ; // FIFO is a Tx FIFO
    data8 |= 1 << 4 ; // TXATIE ---> 1: Enable Transmit Attempts Exhausted Interrupt
    writeRegister8 (FIFOCON_REGISTER (TRANSMIT_FIFO_INDEX), data8) ;
    2d7a:	40 e9       	ldi	r20, 0x90	; 144
    2d7c:	68 e6       	ldi	r22, 0x68	; 104
    2d7e:	70 e0       	ldi	r23, 0x00	; 0
    2d80:	8a 81       	ldd	r24, Y+2	; 0x02
    2d82:	9b 81       	ldd	r25, Y+3	; 0x03
    2d84:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN10ACAN2517FD14writeRegister8Ejh>
    mTransmitFIFOPayload = ACAN2517FDSettings::objectSizeForPayload (inSettings.mControllerTransmitFIFOPayload) ;
    2d88:	f8 01       	movw	r30, r16
    2d8a:	85 8d       	ldd	r24, Z+29	; 0x1d
    2d8c:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <_ZN18ACAN2517FDSettings20objectSizeForPayloadENS_11PayloadSizeE>
    2d90:	ea 81       	ldd	r30, Y+2	; 0x02
    2d92:	fb 81       	ldd	r31, Y+3	; 0x03
    2d94:	63 87       	std	Z+11, r22	; 0x0b
  //----------------------------------- Configure receive filters
    uint8_t filterIndex = 0 ;
    ACAN2517FDFilters::Filter * filter = inFilters.mFirstFilter ;
    2d96:	f6 01       	movw	r30, r12
    2d98:	e1 80       	ldd	r14, Z+1	; 0x01
    2d9a:	f2 80       	ldd	r15, Z+2	; 0x02
    2d9c:	80 81       	ld	r24, Z
    mCallBackFunctionArray = new ACANFDCallBackRoutine [inFilters.filterCount ()] ;
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	88 0f       	add	r24, r24
    2da2:	99 1f       	adc	r25, r25
    2da4:	0e 94 47 0a 	call	0x148e	; 0x148e <_Znaj>
    2da8:	ea 81       	ldd	r30, Y+2	; 0x02
    2daa:	fb 81       	ldd	r31, Y+3	; 0x03
    2dac:	91 83       	std	Z+1, r25	; 0x01
    2dae:	80 83       	st	Z, r24
    data8 = 1 << 7 ; // FIFO is a Tx FIFO
    data8 |= 1 << 4 ; // TXATIE ---> 1: Enable Transmit Attempts Exhausted Interrupt
    writeRegister8 (FIFOCON_REGISTER (TRANSMIT_FIFO_INDEX), data8) ;
    mTransmitFIFOPayload = ACAN2517FDSettings::objectSizeForPayload (inSettings.mControllerTransmitFIFOPayload) ;
  //----------------------------------- Configure receive filters
    uint8_t filterIndex = 0 ;
    2db0:	51 2c       	mov	r5, r1
    ACAN2517FDFilters::Filter * filter = inFilters.mFirstFilter ;
    mCallBackFunctionArray = new ACANFDCallBackRoutine [inFilters.filterCount ()] ;
    while (NULL != filter) {
    2db2:	e1 14       	cp	r14, r1
    2db4:	f1 04       	cpc	r15, r1
    2db6:	e1 f1       	breq	.+120    	; 0x2e30 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x5a0>
      mCallBackFunctionArray [filterIndex] = filter->mCallBackRoutine ;
    2db8:	f7 01       	movw	r30, r14
    2dba:	42 85       	ldd	r20, Z+10	; 0x0a
    2dbc:	53 85       	ldd	r21, Z+11	; 0x0b
    2dbe:	c5 2c       	mov	r12, r5
    2dc0:	d1 2c       	mov	r13, r1
    2dc2:	c6 01       	movw	r24, r12
    2dc4:	88 0f       	add	r24, r24
    2dc6:	99 1f       	adc	r25, r25
    2dc8:	ea 81       	ldd	r30, Y+2	; 0x02
    2dca:	fb 81       	ldd	r31, Y+3	; 0x03
    2dcc:	20 81       	ld	r18, Z
    2dce:	31 81       	ldd	r19, Z+1	; 0x01
    2dd0:	f9 01       	movw	r30, r18
    2dd2:	e8 0f       	add	r30, r24
    2dd4:	f9 1f       	adc	r31, r25
    2dd6:	51 83       	std	Z+1, r21	; 0x01
    2dd8:	40 83       	st	Z, r20
}

//······················································································································

static uint16_t MASK_REGISTER (const uint16_t inFilterIndex) { // 0 ... 31 (DS20005688B, page 61)
  return 0x1F4 + 8 * inFilterIndex ;
    2dda:	36 01       	movw	r6, r12
    2ddc:	f3 e0       	ldi	r31, 0x03	; 3
    2dde:	66 0c       	add	r6, r6
    2de0:	77 1c       	adc	r7, r7
    2de2:	fa 95       	dec	r31
    2de4:	e1 f7       	brne	.-8      	; 0x2dde <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x54e>
    uint8_t filterIndex = 0 ;
    ACAN2517FDFilters::Filter * filter = inFilters.mFirstFilter ;
    mCallBackFunctionArray = new ACANFDCallBackRoutine [inFilters.filterCount ()] ;
    while (NULL != filter) {
      mCallBackFunctionArray [filterIndex] = filter->mCallBackRoutine ;
      writeRegister32 (MASK_REGISTER (filterIndex), filter->mFilterMask) ; // DS20005688B, page 61
    2de6:	f7 01       	movw	r30, r14
    2de8:	22 81       	ldd	r18, Z+2	; 0x02
    2dea:	33 81       	ldd	r19, Z+3	; 0x03
    2dec:	44 81       	ldd	r20, Z+4	; 0x04
    2dee:	55 81       	ldd	r21, Z+5	; 0x05
    2df0:	b3 01       	movw	r22, r6
    2df2:	6c 50       	subi	r22, 0x0C	; 12
    2df4:	7e 4f       	sbci	r23, 0xFE	; 254
    2df6:	8a 81       	ldd	r24, Y+2	; 0x02
    2df8:	9b 81       	ldd	r25, Y+3	; 0x03
    2dfa:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN10ACAN2517FD15writeRegister32Ejm>
      writeRegister32 (FLTOBJ_REGISTER (filterIndex), filter->mAcceptanceFilter) ; // DS20005688B, page 60
    2dfe:	f7 01       	movw	r30, r14
    2e00:	26 81       	ldd	r18, Z+6	; 0x06
    2e02:	37 81       	ldd	r19, Z+7	; 0x07
    2e04:	40 85       	ldd	r20, Z+8	; 0x08
    2e06:	51 85       	ldd	r21, Z+9	; 0x09
    2e08:	b3 01       	movw	r22, r6
    2e0a:	60 51       	subi	r22, 0x10	; 16
    2e0c:	7e 4f       	sbci	r23, 0xFE	; 254
    2e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e10:	9b 81       	ldd	r25, Y+3	; 0x03
    2e12:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN10ACAN2517FD15writeRegister32Ejm>
      data8 = 1 << 7 ; // Filter is enabled
      data8 |= 1 ; // Message matching filter is stored in FIFO1
      writeRegister8 (FLTCON_REGISTER (filterIndex), data8) ; // DS20005688B, page 58
    2e16:	b6 01       	movw	r22, r12
    2e18:	60 53       	subi	r22, 0x30	; 48
    2e1a:	7e 4f       	sbci	r23, 0xFE	; 254
    2e1c:	41 e8       	ldi	r20, 0x81	; 129
    2e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e20:	9b 81       	ldd	r25, Y+3	; 0x03
    2e22:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN10ACAN2517FD14writeRegister8Ejh>
      filter = filter->mNextFilter ;
    2e26:	f7 01       	movw	r30, r14
    2e28:	e0 80       	ld	r14, Z
    2e2a:	f1 80       	ldd	r15, Z+1	; 0x01
      filterIndex += 1 ;
    2e2c:	53 94       	inc	r5
    mTransmitFIFOPayload = ACAN2517FDSettings::objectSizeForPayload (inSettings.mControllerTransmitFIFOPayload) ;
  //----------------------------------- Configure receive filters
    uint8_t filterIndex = 0 ;
    ACAN2517FDFilters::Filter * filter = inFilters.mFirstFilter ;
    mCallBackFunctionArray = new ACANFDCallBackRoutine [inFilters.filterCount ()] ;
    while (NULL != filter) {
    2e2e:	c1 cf       	rjmp	.-126    	; 0x2db2 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x522>
      filterIndex += 1 ;
    }
  //----------------------------------- Activate interrupts (INT, DS20005688B page 34)
    data8  = (1 << 1) ; // Receive FIFO Interrupt Enable
    data8 |= (1 << 0) ; // Transmit FIFO Interrupt Enable
    writeRegister8 (INT_REGISTER + 2, data8) ;
    2e30:	43 e0       	ldi	r20, 0x03	; 3
    2e32:	6e e1       	ldi	r22, 0x1E	; 30
    2e34:	70 e0       	ldi	r23, 0x00	; 0
    2e36:	8a 81       	ldd	r24, Y+2	; 0x02
    2e38:	9b 81       	ldd	r25, Y+3	; 0x03
    2e3a:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN10ACAN2517FD14writeRegister8Ejh>
    data8  = (1 << 2) ; // TXATIE ---> 1: Transmit Attempt Interrupt Enable bit
    writeRegister8 (INT_REGISTER + 3, data8) ;
    2e3e:	44 e0       	ldi	r20, 0x04	; 4
    2e40:	6f e1       	ldi	r22, 0x1F	; 31
    2e42:	70 e0       	ldi	r23, 0x00	; 0
    2e44:	8a 81       	ldd	r24, Y+2	; 0x02
    2e46:	9b 81       	ldd	r25, Y+3	; 0x03
    2e48:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN10ACAN2517FD14writeRegister8Ejh>
  //  bits 23-16: TSEG1 - 1
  //  bit 15: unused
  //  bits 14-8: TSEG2 - 1
  //  bit 7: unused
  //  bits 6-0: SJW - 1
    uint32_t data = inSettings.mBitRatePrescaler - 1 ;
    2e4c:	f8 01       	movw	r30, r16
    2e4e:	25 85       	ldd	r18, Z+13	; 0x0d
    2e50:	36 85       	ldd	r19, Z+14	; 0x0e
    2e52:	21 50       	subi	r18, 0x01	; 1
    2e54:	31 09       	sbc	r19, r1
    2e56:	c9 01       	movw	r24, r18
    2e58:	a0 e0       	ldi	r26, 0x00	; 0
    2e5a:	b0 e0       	ldi	r27, 0x00	; 0
    data <<= 8 ;
    2e5c:	cc 24       	eor	r12, r12
    2e5e:	d8 2e       	mov	r13, r24
    2e60:	e9 2e       	mov	r14, r25
    2e62:	fa 2e       	mov	r15, r26
    data |= inSettings.mArbitrationPhaseSegment1 - 1 ;
    2e64:	27 85       	ldd	r18, Z+15	; 0x0f
    2e66:	30 89       	ldd	r19, Z+16	; 0x10
    2e68:	21 50       	subi	r18, 0x01	; 1
    2e6a:	31 09       	sbc	r19, r1
    2e6c:	c9 01       	movw	r24, r18
    2e6e:	a0 e0       	ldi	r26, 0x00	; 0
    2e70:	b0 e0       	ldi	r27, 0x00	; 0
    2e72:	8c 29       	or	r24, r12
    2e74:	9d 29       	or	r25, r13
    2e76:	ae 29       	or	r26, r14
    2e78:	bf 29       	or	r27, r15
    data <<= 8 ;
    2e7a:	44 27       	eor	r20, r20
    2e7c:	58 2f       	mov	r21, r24
    2e7e:	69 2f       	mov	r22, r25
    2e80:	7a 2f       	mov	r23, r26
    data |= inSettings.mArbitrationPhaseSegment2 - 1 ;
    2e82:	81 89       	ldd	r24, Z+17	; 0x11
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	01 97       	sbiw	r24, 0x01	; 1
    2e88:	09 2e       	mov	r0, r25
    2e8a:	00 0c       	add	r0, r0
    2e8c:	aa 0b       	sbc	r26, r26
    2e8e:	bb 0b       	sbc	r27, r27
    2e90:	84 2b       	or	r24, r20
    2e92:	95 2b       	or	r25, r21
    2e94:	a6 2b       	or	r26, r22
    2e96:	b7 2b       	or	r27, r23
    data <<= 8 ;
    2e98:	ba 2f       	mov	r27, r26
    2e9a:	a9 2f       	mov	r26, r25
    2e9c:	98 2f       	mov	r25, r24
    2e9e:	88 27       	eor	r24, r24
    data |= inSettings.mArbitrationSJW - 1 ;
    writeRegister32 (NBTCFG_REGISTER, data);
    2ea0:	22 89       	ldd	r18, Z+18	; 0x12
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	21 50       	subi	r18, 0x01	; 1
    2ea6:	31 09       	sbc	r19, r1
    2ea8:	a9 01       	movw	r20, r18
    2eaa:	33 0f       	add	r19, r19
    2eac:	66 0b       	sbc	r22, r22
    2eae:	77 0b       	sbc	r23, r23
    2eb0:	9a 01       	movw	r18, r20
    2eb2:	ab 01       	movw	r20, r22
    2eb4:	28 2b       	or	r18, r24
    2eb6:	39 2b       	or	r19, r25
    2eb8:	4a 2b       	or	r20, r26
    2eba:	5b 2b       	or	r21, r27
    2ebc:	64 e0       	ldi	r22, 0x04	; 4
    2ebe:	70 e0       	ldi	r23, 0x00	; 0
    2ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ec4:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN10ACAN2517FD15writeRegister32Ejm>
  //  bits 20-16: TSEG1 - 1
  //  bits 15-12: unused
  //  bits 11-8: TSEG2 - 1
  //  bits 7-4: unused
  //  bits 3-0: SJW - 1
    mHasDataBitRate = inSettings.mDataBitRateFactor != ::DataBitRateFactor::x1 ;
    2ec8:	f8 01       	movw	r30, r16
    2eca:	81 85       	ldd	r24, Z+9	; 0x09
    2ecc:	91 e0       	ldi	r25, 0x01	; 1
    2ece:	81 30       	cpi	r24, 0x01	; 1
    2ed0:	09 f4       	brne	.+2      	; 0x2ed4 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x644>
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	ea 81       	ldd	r30, Y+2	; 0x02
    2ed6:	fb 81       	ldd	r31, Y+3	; 0x03
    2ed8:	92 87       	std	Z+10, r25	; 0x0a
    if (mHasDataBitRate) {
    2eda:	81 30       	cpi	r24, 0x01	; 1
    2edc:	09 f4       	brne	.+2      	; 0x2ee0 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x650>
    2ede:	3f c0       	rjmp	.+126    	; 0x2f5e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x6ce>
      data = inSettings.mBitRatePrescaler - 1 ;
    2ee0:	f8 01       	movw	r30, r16
    2ee2:	25 85       	ldd	r18, Z+13	; 0x0d
    2ee4:	36 85       	ldd	r19, Z+14	; 0x0e
    2ee6:	21 50       	subi	r18, 0x01	; 1
    2ee8:	31 09       	sbc	r19, r1
    2eea:	c9 01       	movw	r24, r18
    2eec:	a0 e0       	ldi	r26, 0x00	; 0
    2eee:	b0 e0       	ldi	r27, 0x00	; 0
      data <<= 8 ;
    2ef0:	cc 24       	eor	r12, r12
    2ef2:	d8 2e       	mov	r13, r24
    2ef4:	e9 2e       	mov	r14, r25
    2ef6:	fa 2e       	mov	r15, r26
      data |= inSettings.mDataPhaseSegment1 - 1 ;
    2ef8:	22 85       	ldd	r18, Z+10	; 0x0a
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	21 50       	subi	r18, 0x01	; 1
    2efe:	31 09       	sbc	r19, r1
    2f00:	c9 01       	movw	r24, r18
    2f02:	33 0f       	add	r19, r19
    2f04:	aa 0b       	sbc	r26, r26
    2f06:	bb 0b       	sbc	r27, r27
    2f08:	8c 29       	or	r24, r12
    2f0a:	9d 29       	or	r25, r13
    2f0c:	ae 29       	or	r26, r14
    2f0e:	bf 29       	or	r27, r15
      data <<= 8 ;
    2f10:	44 27       	eor	r20, r20
    2f12:	58 2f       	mov	r21, r24
    2f14:	69 2f       	mov	r22, r25
    2f16:	7a 2f       	mov	r23, r26
      data |= inSettings.mDataPhaseSegment2 - 1 ;
    2f18:	83 85       	ldd	r24, Z+11	; 0x0b
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	01 97       	sbiw	r24, 0x01	; 1
    2f1e:	09 2e       	mov	r0, r25
    2f20:	00 0c       	add	r0, r0
    2f22:	aa 0b       	sbc	r26, r26
    2f24:	bb 0b       	sbc	r27, r27
    2f26:	84 2b       	or	r24, r20
    2f28:	95 2b       	or	r25, r21
    2f2a:	a6 2b       	or	r26, r22
    2f2c:	b7 2b       	or	r27, r23
      data <<= 8 ;
    2f2e:	ba 2f       	mov	r27, r26
    2f30:	a9 2f       	mov	r26, r25
    2f32:	98 2f       	mov	r25, r24
    2f34:	88 27       	eor	r24, r24
      data |= inSettings.mDataSJW - 1 ;
      writeRegister32 (DBTCFG_REGISTER, data) ;
    2f36:	24 85       	ldd	r18, Z+12	; 0x0c
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	21 50       	subi	r18, 0x01	; 1
    2f3c:	31 09       	sbc	r19, r1
    2f3e:	a9 01       	movw	r20, r18
    2f40:	33 0f       	add	r19, r19
    2f42:	66 0b       	sbc	r22, r22
    2f44:	77 0b       	sbc	r23, r23
    2f46:	9a 01       	movw	r18, r20
    2f48:	ab 01       	movw	r20, r22
    2f4a:	28 2b       	or	r18, r24
    2f4c:	39 2b       	or	r19, r25
    2f4e:	4a 2b       	or	r20, r26
    2f50:	5b 2b       	or	r21, r27
    2f52:	68 e0       	ldi	r22, 0x08	; 8
    2f54:	70 e0       	ldi	r23, 0x00	; 0
    2f56:	8a 81       	ldd	r24, Y+2	; 0x02
    2f58:	9b 81       	ldd	r25, Y+3	; 0x03
    2f5a:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN10ACAN2517FD15writeRegister32Ejm>
    }
  //----------------------------------- Request mode (CON_REGISTER + 3, DS20005688B, page 24)
  //  bits 7-4: Transmit Bandwith Sharing Bits ---> 0
  //  bit 3: Abort All Pending Transmissions bit --> 0
    mTXBWS_RequestedMode = inSettings.mRequestedMode | (TXBWS << 4) ;
    2f5e:	f8 01       	movw	r30, r16
    2f60:	41 8d       	ldd	r20, Z+25	; 0x19
    2f62:	ea 81       	ldd	r30, Y+2	; 0x02
    2f64:	fb 81       	ldd	r31, Y+3	; 0x03
    2f66:	46 87       	std	Z+14, r20	; 0x0e
    writeRegister8 (CON_REGISTER + 3, mTXBWS_RequestedMode);
    2f68:	63 e0       	ldi	r22, 0x03	; 3
    2f6a:	70 e0       	ldi	r23, 0x00	; 0
    2f6c:	cf 01       	movw	r24, r30
    2f6e:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN10ACAN2517FD14writeRegister8Ejh>
  //----------------------------------- Wait (10 ms max) until requested mode is reached
    bool wait = true ;
    const uint32_t deadline = millis () + 10 ;
    2f72:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <millis>
    2f76:	6b 01       	movw	r12, r22
    2f78:	7c 01       	movw	r14, r24
    2f7a:	fa e0       	ldi	r31, 0x0A	; 10
    2f7c:	cf 0e       	add	r12, r31
    2f7e:	d1 1c       	adc	r13, r1
    2f80:	e1 1c       	adc	r14, r1
    2f82:	f1 1c       	adc	r15, r1
    while (wait) {
     const uint8_t actualMode = (readRegister8 (CON_REGISTER + 2) >> 5) & 0x07 ;
    2f84:	62 e0       	ldi	r22, 0x02	; 2
    2f86:	70 e0       	ldi	r23, 0x00	; 0
    2f88:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f8c:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_ZN10ACAN2517FD13readRegister8Ej>
      wait = actualMode != inSettings.mRequestedMode ;
      if (wait && (millis () >= deadline)) {
    2f90:	82 95       	swap	r24
    2f92:	86 95       	lsr	r24
    2f94:	87 70       	andi	r24, 0x07	; 7
    2f96:	f8 01       	movw	r30, r16
    2f98:	91 8d       	ldd	r25, Z+25	; 0x19
    2f9a:	89 17       	cp	r24, r25
    2f9c:	59 f0       	breq	.+22     	; 0x2fb4 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x724>
    2f9e:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <millis>
    2fa2:	6c 15       	cp	r22, r12
    2fa4:	7d 05       	cpc	r23, r13
    2fa6:	8e 05       	cpc	r24, r14
    2fa8:	9f 05       	cpc	r25, r15
    2faa:	60 f3       	brcs	.-40     	; 0x2f84 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x6f4>
        errorCode |= kRequestedModeTimeOut ;
    2fac:	81 2c       	mov	r8, r1
    2fae:	91 2c       	mov	r9, r1
    2fb0:	54 01       	movw	r10, r8
    2fb2:	a3 94       	inc	r10
      }
    }
    #ifdef ARDUINO_ARCH_ESP32
      xTaskCreate (myESP32Task, "ACAN2517Handler", 1024, this, 256, NULL) ;
    #endif
    if (mINT != 255) { // 255 means interrupt is not used
    2fb4:	ea 81       	ldd	r30, Y+2	; 0x02
    2fb6:	fb 81       	ldd	r31, Y+3	; 0x03
    2fb8:	87 81       	ldd	r24, Z+7	; 0x07
    2fba:	8f 3f       	cpi	r24, 0xFF	; 255
    2fbc:	49 f0       	breq	.+18     	; 0x2fd0 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x740>
      #ifdef ARDUINO_ARCH_ESP32
        attachInterrupt (itPin, inInterruptServiceRoutine, FALLING) ;
      #else
        attachInterrupt (itPin, inInterruptServiceRoutine, LOW) ; // Thank to Flole998
    2fbe:	40 e0       	ldi	r20, 0x00	; 0
    2fc0:	50 e0       	ldi	r21, 0x00	; 0
    2fc2:	b1 01       	movw	r22, r2
    2fc4:	89 81       	ldd	r24, Y+1	; 0x01
    2fc6:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <attachInterrupt>
        mSPI.usingInterrupt (itPin) ; // usingInterrupt is not implemented in Arduino ESP32
    2fca:	89 81       	ldd	r24, Y+1	; 0x01
    2fcc:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <_ZN8SPIClass14usingInterruptEh>

    /*
     * If you begin() multiple times without constructor,
     * mHardwareTxFIFOFull = true will block the transmitter.
     */
    mHardwareTxFIFOFull = false;
    2fd0:	ea 81       	ldd	r30, Y+2	; 0x02
    2fd2:	fb 81       	ldd	r31, Y+3	; 0x03
    2fd4:	11 86       	std	Z+9, r1	; 0x09
    mHardwareReceiveBufferOverflowCount = 0;
    2fd6:	17 86       	std	Z+15, r1	; 0x0f
  }
//---
  return errorCode ;
    2fd8:	15 c0       	rjmp	.+42     	; 0x3004 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x774>
    2fda:	ff ef       	ldi	r31, 0xFF	; 255
    2fdc:	f9 83       	std	Y+1, r31	; 0x01
    2fde:	a0 cc       	rjmp	.-1728   	; 0x2920 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x90>
  }
  if (inSettings.CANBitSettingConsistency () != 0) {
    errorCode |= kInconsistentBitRateSettings ;
  }
//----------------------------------- Check mINT has interrupt capability
  const int8_t itPin = digitalPinToInterrupt (mINT) ;
    2fe0:	2f ef       	ldi	r18, 0xFF	; 255
    2fe2:	29 83       	std	Y+1, r18	; 0x01
  if ((mINT != 255) && (itPin == NOT_AN_INTERRUPT)) {
    errorCode = kINTPinIsNotAnInterrupt ;
    2fe4:	80 e1       	ldi	r24, 0x10	; 16
    2fe6:	88 2e       	mov	r8, r24
    2fe8:	91 2c       	mov	r9, r1
    2fea:	a1 2c       	mov	r10, r1
    2fec:	b1 2c       	mov	r11, r1
  }
//----------------------------------- Check interrupt service routine is not null
  if ((mINT != 255) && (inInterruptServiceRoutine == NULL)) {
    2fee:	21 14       	cp	r2, r1
    2ff0:	31 04       	cpc	r3, r1
    2ff2:	09 f0       	breq	.+2      	; 0x2ff6 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x766>
    2ff4:	95 cc       	rjmp	.-1750   	; 0x2920 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x90>
    errorCode |= kISRIsNull ;
    2ff6:	68 94       	set
    2ff8:	85 f8       	bld	r8, 5
    2ffa:	92 cc       	rjmp	.-1756   	; 0x2920 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x90>
    writeRegister8 (OSC_REGISTER, osc) ; // DS20005688B, page 16
  //--- Wait for PLL is ready (wait max 2 ms)
    if (pll != 0) {
      bool wait = true ;
      const uint32_t deadline = millis () + 2 ;
      while (wait) {
    2ffc:	91 30       	cpi	r25, 0x01	; 1
    2ffe:	09 f0       	breq	.+2      	; 0x3002 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x772>
    3000:	7b cd       	rjmp	.-1290   	; 0x2af8 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x268>
    3002:	90 cd       	rjmp	.-1248   	; 0x2b24 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x294>
    mHardwareTxFIFOFull = false;
    mHardwareReceiveBufferOverflowCount = 0;
  }
//---
  return errorCode ;
}
    3004:	c5 01       	movw	r24, r10
    3006:	b4 01       	movw	r22, r8
    3008:	0f 90       	pop	r0
    300a:	0f 90       	pop	r0
    300c:	0f 90       	pop	r0
    300e:	df 91       	pop	r29
    3010:	cf 91       	pop	r28
    3012:	1f 91       	pop	r17
    3014:	0f 91       	pop	r16
    3016:	ff 90       	pop	r15
    3018:	ef 90       	pop	r14
    301a:	df 90       	pop	r13
    301c:	cf 90       	pop	r12
    301e:	bf 90       	pop	r11
    3020:	af 90       	pop	r10
    3022:	9f 90       	pop	r9
    3024:	8f 90       	pop	r8
    3026:	7f 90       	pop	r7
    3028:	6f 90       	pop	r6
    302a:	5f 90       	pop	r5
    302c:	4f 90       	pop	r4
    302e:	3f 90       	pop	r3
    3030:	2f 90       	pop	r2
    3032:	08 95       	ret

00003034 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvE>:
}

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FD::begin (const ACAN2517FDSettings & inSettings,
                            void (* inInterruptServiceRoutine) (void)) {
    3034:	cf 92       	push	r12
    3036:	df 92       	push	r13
    3038:	ef 92       	push	r14
    303a:	ff 92       	push	r15
    303c:	0f 93       	push	r16
    303e:	1f 93       	push	r17
    3040:	cf 93       	push	r28
    3042:	df 93       	push	r29
    3044:	cd b7       	in	r28, 0x3d	; 61
    3046:	de b7       	in	r29, 0x3e	; 62
    3048:	27 97       	sbiw	r28, 0x07	; 7
    304a:	0f b6       	in	r0, 0x3f	; 63
    304c:	f8 94       	cli
    304e:	de bf       	out	0x3e, r29	; 62
    3050:	0f be       	out	0x3f, r0	; 63
    3052:	cd bf       	out	0x3d, r28	; 61
    3054:	8c 01       	movw	r16, r24
    3056:	7b 01       	movw	r14, r22
    3058:	6a 01       	movw	r12, r20

//······················································································································
//   CONSTRUCTOR
//······················································································································

  public: ACAN2517FDFilters (void) {}
    305a:	19 82       	std	Y+1, r1	; 0x01
    305c:	1b 82       	std	Y+3, r1	; 0x03
    305e:	1a 82       	std	Y+2, r1	; 0x02
    3060:	1d 82       	std	Y+5, r1	; 0x05
    3062:	1c 82       	std	Y+4, r1	; 0x04
    3064:	1e 82       	std	Y+6, r1	; 0x06
    3066:	1f 82       	std	Y+7, r1	; 0x07
//······················································································································
//   RECEIVE FILTERS
//······················································································································

  public: void appendPassAllFilter (const ACANFDCallBackRoutine inCallBackRoutine) {  // Accept any frame
    Filter * f = new Filter (0, 0, inCallBackRoutine) ;
    3068:	8c e0       	ldi	r24, 0x0C	; 12
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	0e 94 45 0a 	call	0x148a	; 0x148a <_Znwj>
    3070:	fc 01       	movw	r30, r24
                    const uint32_t inAcceptanceFilter,
                    const ACANFDCallBackRoutine inCallBackRoutine) :
    mNextFilter (NULL),
    mFilterMask (inFilterMask),
    mAcceptanceFilter (inAcceptanceFilter),
    mCallBackRoutine (inCallBackRoutine) {
    3072:	11 82       	std	Z+1, r1	; 0x01
    3074:	10 82       	st	Z, r1
    3076:	12 82       	std	Z+2, r1	; 0x02
    3078:	13 82       	std	Z+3, r1	; 0x03
    307a:	14 82       	std	Z+4, r1	; 0x04
    307c:	15 82       	std	Z+5, r1	; 0x05
    307e:	16 82       	std	Z+6, r1	; 0x06
    3080:	17 82       	std	Z+7, r1	; 0x07
    3082:	10 86       	std	Z+8, r1	; 0x08
    3084:	11 86       	std	Z+9, r1	; 0x09
    3086:	13 86       	std	Z+11, r1	; 0x0b
    3088:	12 86       	std	Z+10, r1	; 0x0a
//   RECEIVE FILTERS
//······················································································································

  public: void appendPassAllFilter (const ACANFDCallBackRoutine inCallBackRoutine) {  // Accept any frame
    Filter * f = new Filter (0, 0, inCallBackRoutine) ;
    if (mFirstFilter == NULL) {
    308a:	8a 81       	ldd	r24, Y+2	; 0x02
    308c:	9b 81       	ldd	r25, Y+3	; 0x03
    308e:	89 2b       	or	r24, r25
    3090:	19 f4       	brne	.+6      	; 0x3098 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvE+0x64>
      mFirstFilter = f ;
    3092:	fb 83       	std	Y+3, r31	; 0x03
    3094:	ea 83       	std	Y+2, r30	; 0x02
    3096:	04 c0       	rjmp	.+8      	; 0x30a0 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvE+0x6c>
    }else{
      mLastFilter->mNextFilter  = f ;
    3098:	ac 81       	ldd	r26, Y+4	; 0x04
    309a:	bd 81       	ldd	r27, Y+5	; 0x05
    309c:	ed 93       	st	X+, r30
    309e:	fc 93       	st	X, r31
    }
    mLastFilter = f ;
    30a0:	fd 83       	std	Y+5, r31	; 0x05
    30a2:	ec 83       	std	Y+4, r30	; 0x04
    mFilterCount += 1 ;
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	8f 5f       	subi	r24, 0xFF	; 255
    30a8:	89 83       	std	Y+1, r24	; 0x01
//--- Add pass-all filter
  ACAN2517FDFilters filters ;
  filters.appendPassAllFilter (NULL) ;
//---
  return begin (inSettings, inInterruptServiceRoutine, filters) ;
    30aa:	9e 01       	movw	r18, r28
    30ac:	2f 5f       	subi	r18, 0xFF	; 255
    30ae:	3f 4f       	sbci	r19, 0xFF	; 255
    30b0:	a6 01       	movw	r20, r12
    30b2:	b7 01       	movw	r22, r14
    30b4:	c8 01       	movw	r24, r16
    30b6:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters>
    30ba:	6b 01       	movw	r12, r22
    30bc:	7c 01       	movw	r14, r24
//······················································································································
//   DESTRUCTOR
//······················································································································

  public: ~ ACAN2517FDFilters (void) {
    while (mFirstFilter != NULL) {
    30be:	8a 81       	ldd	r24, Y+2	; 0x02
    30c0:	9b 81       	ldd	r25, Y+3	; 0x03
    30c2:	00 97       	sbiw	r24, 0x00	; 0
    30c4:	41 f0       	breq	.+16     	; 0x30d6 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvE+0xa2>
      Filter * next = mFirstFilter->mNextFilter ;
    30c6:	fc 01       	movw	r30, r24
    30c8:	00 81       	ld	r16, Z
    30ca:	11 81       	ldd	r17, Z+1	; 0x01
      delete mFirstFilter ;
    30cc:	0e 94 49 0a 	call	0x1492	; 0x1492 <_ZdlPv>
      mFirstFilter = next ;
    30d0:	1b 83       	std	Y+3, r17	; 0x03
    30d2:	0a 83       	std	Y+2, r16	; 0x02
    30d4:	f4 cf       	rjmp	.-24     	; 0x30be <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvE+0x8a>
}
    30d6:	c7 01       	movw	r24, r14
    30d8:	b6 01       	movw	r22, r12
    30da:	27 96       	adiw	r28, 0x07	; 7
    30dc:	0f b6       	in	r0, 0x3f	; 63
    30de:	f8 94       	cli
    30e0:	de bf       	out	0x3e, r29	; 62
    30e2:	0f be       	out	0x3f, r0	; 63
    30e4:	cd bf       	out	0x3d, r28	; 61
    30e6:	df 91       	pop	r29
    30e8:	cf 91       	pop	r28
    30ea:	1f 91       	pop	r17
    30ec:	0f 91       	pop	r16
    30ee:	ff 90       	pop	r15
    30f0:	ef 90       	pop	r14
    30f2:	df 90       	pop	r13
    30f4:	cf 90       	pop	r12
    30f6:	08 95       	ret

000030f8 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm>:
uint32_t ACAN2517FDSettings::dataSamplePointFromBitStart (void) const {
  const uint32_t nominalTQCount = 1 /* Sync Seg */ + mDataPhaseSegment1 + mDataPhaseSegment2 ;
  const uint32_t samplePoint = 1 /* Sync Seg */ + mDataPhaseSegment1 ;
  const uint32_t partPerCent = 100 ;
  return (samplePoint * partPerCent) / nominalTQCount ;
}
    30f8:	2f 92       	push	r2
    30fa:	3f 92       	push	r3
    30fc:	4f 92       	push	r4
    30fe:	5f 92       	push	r5
    3100:	6f 92       	push	r6
    3102:	7f 92       	push	r7
    3104:	8f 92       	push	r8
    3106:	9f 92       	push	r9
    3108:	af 92       	push	r10
    310a:	bf 92       	push	r11
    310c:	cf 92       	push	r12
    310e:	df 92       	push	r13
    3110:	ef 92       	push	r14
    3112:	ff 92       	push	r15
    3114:	0f 93       	push	r16
    3116:	1f 93       	push	r17
    3118:	cf 93       	push	r28
    311a:	df 93       	push	r29
    311c:	cd b7       	in	r28, 0x3d	; 61
    311e:	de b7       	in	r29, 0x3e	; 62
    3120:	e2 97       	sbiw	r28, 0x32	; 50
    3122:	0f b6       	in	r0, 0x3f	; 63
    3124:	f8 94       	cli
    3126:	de bf       	out	0x3e, r29	; 62
    3128:	0f be       	out	0x3f, r0	; 63
    312a:	cd bf       	out	0x3d, r28	; 61
    312c:	9a a7       	std	Y+42, r25	; 0x2a
    312e:	89 a7       	std	Y+41, r24	; 0x29
    3130:	2d 87       	std	Y+13, r18	; 0x0d
    3132:	3e 87       	std	Y+14, r19	; 0x0e
    3134:	4f 87       	std	Y+15, r20	; 0x0f
    3136:	58 8b       	std	Y+16, r21	; 0x10
    3138:	c9 a2       	std	Y+33, r12	; 0x21
    313a:	da a2       	std	Y+34, r13	; 0x22
    313c:	eb a2       	std	Y+35, r14	; 0x23
    313e:	fc a2       	std	Y+36, r15	; 0x24
    3140:	dc 01       	movw	r26, r24
    3142:	6c 93       	st	X, r22
    3144:	68 30       	cpi	r22, 0x08	; 8
    3146:	78 f4       	brcc	.+30     	; 0x3166 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x6e>
    3148:	b4 e0       	ldi	r27, 0x04	; 4
    314a:	6b 9f       	mul	r22, r27
    314c:	f0 01       	movw	r30, r0
    314e:	11 24       	eor	r1, r1
    3150:	e4 57       	subi	r30, 0x74	; 116
    3152:	fd 4f       	sbci	r31, 0xFD	; 253
    3154:	20 81       	ld	r18, Z
    3156:	31 81       	ldd	r19, Z+1	; 0x01
    3158:	42 81       	ldd	r20, Z+2	; 0x02
    315a:	53 81       	ldd	r21, Z+3	; 0x03
    315c:	29 83       	std	Y+1, r18	; 0x01
    315e:	3a 83       	std	Y+2, r19	; 0x02
    3160:	4b 83       	std	Y+3, r20	; 0x03
    3162:	5c 83       	std	Y+4, r21	; 0x04
    3164:	08 c0       	rjmp	.+16     	; 0x3176 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x7e>
    3166:	40 e0       	ldi	r20, 0x00	; 0
    3168:	5a e5       	ldi	r21, 0x5A	; 90
    316a:	62 e6       	ldi	r22, 0x62	; 98
    316c:	72 e0       	ldi	r23, 0x02	; 2
    316e:	49 83       	std	Y+1, r20	; 0x01
    3170:	5a 83       	std	Y+2, r21	; 0x02
    3172:	6b 83       	std	Y+3, r22	; 0x03
    3174:	7c 83       	std	Y+4, r23	; 0x04
    3176:	69 81       	ldd	r22, Y+1	; 0x01
    3178:	7a 81       	ldd	r23, Y+2	; 0x02
    317a:	8b 81       	ldd	r24, Y+3	; 0x03
    317c:	9c 81       	ldd	r25, Y+4	; 0x04
    317e:	a9 a5       	ldd	r26, Y+41	; 0x29
    3180:	ba a5       	ldd	r27, Y+42	; 0x2a
    3182:	11 96       	adiw	r26, 0x01	; 1
    3184:	6d 93       	st	X+, r22
    3186:	7d 93       	st	X+, r23
    3188:	8d 93       	st	X+, r24
    318a:	9c 93       	st	X, r25
    318c:	14 97       	sbiw	r26, 0x04	; 4
    318e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3190:	3e 85       	ldd	r19, Y+14	; 0x0e
    3192:	4f 85       	ldd	r20, Y+15	; 0x0f
    3194:	58 89       	ldd	r21, Y+16	; 0x10
    3196:	15 96       	adiw	r26, 0x05	; 5
    3198:	2d 93       	st	X+, r18
    319a:	3d 93       	st	X+, r19
    319c:	4d 93       	st	X+, r20
    319e:	5c 93       	st	X, r21
    31a0:	18 97       	sbiw	r26, 0x08	; 8
    31a2:	19 96       	adiw	r26, 0x09	; 9
    31a4:	0c 93       	st	X, r16
    31a6:	19 97       	sbiw	r26, 0x09	; 9
    31a8:	1a 96       	adiw	r26, 0x0a	; 10
    31aa:	1c 92       	st	X, r1
    31ac:	1a 97       	sbiw	r26, 0x0a	; 10
    31ae:	1b 96       	adiw	r26, 0x0b	; 11
    31b0:	1c 92       	st	X, r1
    31b2:	1b 97       	sbiw	r26, 0x0b	; 11
    31b4:	1c 96       	adiw	r26, 0x0c	; 12
    31b6:	1c 92       	st	X, r1
    31b8:	1c 97       	sbiw	r26, 0x0c	; 12
    31ba:	1e 96       	adiw	r26, 0x0e	; 14
    31bc:	1c 92       	st	X, r1
    31be:	1e 92       	st	-X, r1
    31c0:	1d 97       	sbiw	r26, 0x0d	; 13
    31c2:	50 96       	adiw	r26, 0x10	; 16
    31c4:	1c 92       	st	X, r1
    31c6:	1e 92       	st	-X, r1
    31c8:	1f 97       	sbiw	r26, 0x0f	; 15
    31ca:	51 96       	adiw	r26, 0x11	; 17
    31cc:	1c 92       	st	X, r1
    31ce:	51 97       	sbiw	r26, 0x11	; 17
    31d0:	52 96       	adiw	r26, 0x12	; 18
    31d2:	1c 92       	st	X, r1
    31d4:	52 97       	sbiw	r26, 0x12	; 18
    31d6:	53 96       	adiw	r26, 0x13	; 19
    31d8:	1c 92       	st	X, r1
    31da:	53 97       	sbiw	r26, 0x13	; 19
    31dc:	54 96       	adiw	r26, 0x14	; 20
    31de:	1c 92       	st	X, r1
    31e0:	54 97       	sbiw	r26, 0x14	; 20
    31e2:	55 96       	adiw	r26, 0x15	; 21
    31e4:	1c 92       	st	X, r1
    31e6:	55 97       	sbiw	r26, 0x15	; 21
    31e8:	56 96       	adiw	r26, 0x16	; 22
    31ea:	1c 92       	st	X, r1
    31ec:	56 97       	sbiw	r26, 0x16	; 22
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	57 96       	adiw	r26, 0x17	; 23
    31f2:	8c 93       	st	X, r24
    31f4:	57 97       	sbiw	r26, 0x17	; 23
    31f6:	93 e0       	ldi	r25, 0x03	; 3
    31f8:	58 96       	adiw	r26, 0x18	; 24
    31fa:	9c 93       	st	X, r25
    31fc:	58 97       	sbiw	r26, 0x18	; 24
    31fe:	59 96       	adiw	r26, 0x19	; 25
    3200:	1c 92       	st	X, r1
    3202:	59 97       	sbiw	r26, 0x19	; 25
    3204:	20 e1       	ldi	r18, 0x10	; 16
    3206:	30 e0       	ldi	r19, 0x00	; 0
    3208:	5b 96       	adiw	r26, 0x1b	; 27
    320a:	3c 93       	st	X, r19
    320c:	2e 93       	st	-X, r18
    320e:	5a 97       	sbiw	r26, 0x1a	; 26
    3210:	5c 96       	adiw	r26, 0x1c	; 28
    3212:	8c 93       	st	X, r24
    3214:	5c 97       	sbiw	r26, 0x1c	; 28
    3216:	87 e0       	ldi	r24, 0x07	; 7
    3218:	5d 96       	adiw	r26, 0x1d	; 29
    321a:	8c 93       	st	X, r24
    321c:	5d 97       	sbiw	r26, 0x1d	; 29
    321e:	5e 96       	adiw	r26, 0x1e	; 30
    3220:	1c 92       	st	X, r1
    3222:	5e 97       	sbiw	r26, 0x1e	; 30
    3224:	92 e0       	ldi	r25, 0x02	; 2
    3226:	5f 96       	adiw	r26, 0x1f	; 31
    3228:	9c 93       	st	X, r25
    322a:	5f 97       	sbiw	r26, 0x1f	; 31
    322c:	90 96       	adiw	r26, 0x20	; 32
    322e:	1c 92       	st	X, r1
    3230:	90 97       	sbiw	r26, 0x20	; 32
    3232:	91 96       	adiw	r26, 0x21	; 33
    3234:	8c 93       	st	X, r24
    3236:	91 97       	sbiw	r26, 0x21	; 33
    3238:	2f e1       	ldi	r18, 0x1F	; 31
    323a:	92 96       	adiw	r26, 0x22	; 34
    323c:	2c 93       	st	X, r18
    323e:	92 97       	sbiw	r26, 0x22	; 34
    3240:	93 96       	adiw	r26, 0x23	; 35
    3242:	9c 93       	st	X, r25
    3244:	93 97       	sbiw	r26, 0x23	; 35
    3246:	20 e2       	ldi	r18, 0x20	; 32
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	95 96       	adiw	r26, 0x25	; 37
    324c:	3c 93       	st	X, r19
    324e:	2e 93       	st	-X, r18
    3250:	94 97       	sbiw	r26, 0x24	; 36
    3252:	96 96       	adiw	r26, 0x26	; 38
    3254:	8c 93       	st	X, r24
    3256:	96 97       	sbiw	r26, 0x26	; 38
    3258:	8b e1       	ldi	r24, 0x1B	; 27
    325a:	97 96       	adiw	r26, 0x27	; 39
    325c:	8c 93       	st	X, r24
    325e:	01 30       	cpi	r16, 0x01	; 1
    3260:	09 f0       	breq	.+2      	; 0x3264 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x16c>
    3262:	1a c1       	rjmp	.+564    	; 0x3498 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x3a0>
    3264:	69 81       	ldd	r22, Y+1	; 0x01
    3266:	7a 81       	ldd	r23, Y+2	; 0x02
    3268:	8b 81       	ldd	r24, Y+3	; 0x03
    326a:	9c 81       	ldd	r25, Y+4	; 0x04
    326c:	2d 85       	ldd	r18, Y+13	; 0x0d
    326e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3270:	4f 85       	ldd	r20, Y+15	; 0x0f
    3272:	58 89       	ldd	r21, Y+16	; 0x10
    3274:	0e 94 1c 24 	call	0x4838	; 0x4838 <__udivmodsi4>
    3278:	2d 8b       	std	Y+21, r18	; 0x15
    327a:	3e 8b       	std	Y+22, r19	; 0x16
    327c:	4f 8b       	std	Y+23, r20	; 0x17
    327e:	58 8f       	std	Y+24, r21	; 0x18
    3280:	83 2e       	mov	r8, r19
    3282:	94 2e       	mov	r9, r20
    3284:	a5 2e       	mov	r10, r21
    3286:	bb 24       	eor	r11, r11
    3288:	2d 85       	ldd	r18, Y+13	; 0x0d
    328a:	3e 85       	ldd	r19, Y+14	; 0x0e
    328c:	4f 85       	ldd	r20, Y+15	; 0x0f
    328e:	58 89       	ldd	r21, Y+16	; 0x10
    3290:	00 27       	eor	r16, r16
    3292:	12 2f       	mov	r17, r18
    3294:	23 2f       	mov	r18, r19
    3296:	34 2f       	mov	r19, r20
    3298:	09 8b       	std	Y+17, r16	; 0x11
    329a:	1a 8b       	std	Y+18, r17	; 0x12
    329c:	2b 8b       	std	Y+19, r18	; 0x13
    329e:	3c 8b       	std	Y+20, r19	; 0x14
    32a0:	b4 e0       	ldi	r27, 0x04	; 4
    32a2:	4b 2e       	mov	r4, r27
    32a4:	51 2c       	mov	r5, r1
    32a6:	61 2c       	mov	r6, r1
    32a8:	71 2c       	mov	r7, r1
    32aa:	01 e0       	ldi	r16, 0x01	; 1
    32ac:	10 e0       	ldi	r17, 0x00	; 0
    32ae:	21 2c       	mov	r2, r1
    32b0:	31 2c       	mov	r3, r1
    32b2:	4f ef       	ldi	r20, 0xFF	; 255
    32b4:	5f ef       	ldi	r21, 0xFF	; 255
    32b6:	ba 01       	movw	r22, r20
    32b8:	49 87       	std	Y+9, r20	; 0x09
    32ba:	5a 87       	std	Y+10, r21	; 0x0a
    32bc:	6b 87       	std	Y+11, r22	; 0x0b
    32be:	7c 87       	std	Y+12, r23	; 0x0c
    32c0:	c1 2c       	mov	r12, r1
    32c2:	d1 2c       	mov	r13, r1
    32c4:	76 01       	movw	r14, r12
    32c6:	d3 94       	inc	r13
    32c8:	32 e8       	ldi	r19, 0x82	; 130
    32ca:	83 16       	cp	r8, r19
    32cc:	31 e0       	ldi	r19, 0x01	; 1
    32ce:	93 06       	cpc	r9, r19
    32d0:	a1 04       	cpc	r10, r1
    32d2:	b1 04       	cpc	r11, r1
    32d4:	08 f0       	brcs	.+2      	; 0x32d8 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x1e0>
    32d6:	93 c0       	rjmp	.+294    	; 0x33fe <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x306>
    32d8:	c1 14       	cp	r12, r1
    32da:	d1 04       	cpc	r13, r1
    32dc:	e1 04       	cpc	r14, r1
    32de:	f1 04       	cpc	r15, r1
    32e0:	09 f4       	brne	.+2      	; 0x32e4 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x1ec>
    32e2:	8d c0       	rjmp	.+282    	; 0x33fe <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x306>
    32e4:	d5 01       	movw	r26, r10
    32e6:	c4 01       	movw	r24, r8
    32e8:	04 97       	sbiw	r24, 0x04	; 4
    32ea:	a1 09       	sbc	r26, r1
    32ec:	b1 09       	sbc	r27, r1
    32ee:	8e 37       	cpi	r24, 0x7E	; 126
    32f0:	91 40       	sbci	r25, 0x01	; 1
    32f2:	a1 05       	cpc	r26, r1
    32f4:	b1 05       	cpc	r27, r1
    32f6:	48 f5       	brcc	.+82     	; 0x334a <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x252>
    32f8:	a7 01       	movw	r20, r14
    32fa:	96 01       	movw	r18, r12
    32fc:	c5 01       	movw	r24, r10
    32fe:	b4 01       	movw	r22, r8
    3300:	0e 94 0c 24 	call	0x4818	; 0x4818 <__mulsi3>
    3304:	9b 01       	movw	r18, r22
    3306:	ac 01       	movw	r20, r24
    3308:	6d 85       	ldd	r22, Y+13	; 0x0d
    330a:	7e 85       	ldd	r23, Y+14	; 0x0e
    330c:	8f 85       	ldd	r24, Y+15	; 0x0f
    330e:	98 89       	ldd	r25, Y+16	; 0x10
    3310:	0e 94 0c 24 	call	0x4818	; 0x4818 <__mulsi3>
    3314:	29 81       	ldd	r18, Y+1	; 0x01
    3316:	3a 81       	ldd	r19, Y+2	; 0x02
    3318:	4b 81       	ldd	r20, Y+3	; 0x03
    331a:	5c 81       	ldd	r21, Y+4	; 0x04
    331c:	26 1b       	sub	r18, r22
    331e:	37 0b       	sbc	r19, r23
    3320:	48 0b       	sbc	r20, r24
    3322:	59 0b       	sbc	r21, r25
    3324:	da 01       	movw	r26, r20
    3326:	c9 01       	movw	r24, r18
    3328:	49 85       	ldd	r20, Y+9	; 0x09
    332a:	5a 85       	ldd	r21, Y+10	; 0x0a
    332c:	6b 85       	ldd	r22, Y+11	; 0x0b
    332e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3330:	48 17       	cp	r20, r24
    3332:	59 07       	cpc	r21, r25
    3334:	6a 07       	cpc	r22, r26
    3336:	7b 07       	cpc	r23, r27
    3338:	40 f0       	brcs	.+16     	; 0x334a <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x252>
    333a:	24 01       	movw	r4, r8
    333c:	35 01       	movw	r6, r10
    333e:	86 01       	movw	r16, r12
    3340:	17 01       	movw	r2, r14
    3342:	89 87       	std	Y+9, r24	; 0x09
    3344:	9a 87       	std	Y+10, r25	; 0x0a
    3346:	ab 87       	std	Y+11, r26	; 0x0b
    3348:	bc 87       	std	Y+12, r27	; 0x0c
    334a:	d5 01       	movw	r26, r10
    334c:	c4 01       	movw	r24, r8
    334e:	03 97       	sbiw	r24, 0x03	; 3
    3350:	a1 09       	sbc	r26, r1
    3352:	b1 09       	sbc	r27, r1
    3354:	8e 37       	cpi	r24, 0x7E	; 126
    3356:	91 40       	sbci	r25, 0x01	; 1
    3358:	a1 05       	cpc	r26, r1
    335a:	b1 05       	cpc	r27, r1
    335c:	40 f5       	brcc	.+80     	; 0x33ae <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x2b6>
    335e:	6f ef       	ldi	r22, 0xFF	; 255
    3360:	86 1a       	sub	r8, r22
    3362:	96 0a       	sbc	r9, r22
    3364:	a6 0a       	sbc	r10, r22
    3366:	b6 0a       	sbc	r11, r22
    3368:	a5 01       	movw	r20, r10
    336a:	94 01       	movw	r18, r8
    336c:	69 89       	ldd	r22, Y+17	; 0x11
    336e:	7a 89       	ldd	r23, Y+18	; 0x12
    3370:	8b 89       	ldd	r24, Y+19	; 0x13
    3372:	9c 89       	ldd	r25, Y+20	; 0x14
    3374:	0e 94 0c 24 	call	0x4818	; 0x4818 <__mulsi3>
    3378:	dc 01       	movw	r26, r24
    337a:	cb 01       	movw	r24, r22
    337c:	29 81       	ldd	r18, Y+1	; 0x01
    337e:	3a 81       	ldd	r19, Y+2	; 0x02
    3380:	4b 81       	ldd	r20, Y+3	; 0x03
    3382:	5c 81       	ldd	r21, Y+4	; 0x04
    3384:	82 1b       	sub	r24, r18
    3386:	93 0b       	sbc	r25, r19
    3388:	a4 0b       	sbc	r26, r20
    338a:	b5 0b       	sbc	r27, r21
    338c:	49 85       	ldd	r20, Y+9	; 0x09
    338e:	5a 85       	ldd	r21, Y+10	; 0x0a
    3390:	6b 85       	ldd	r22, Y+11	; 0x0b
    3392:	7c 85       	ldd	r23, Y+12	; 0x0c
    3394:	48 17       	cp	r20, r24
    3396:	59 07       	cpc	r21, r25
    3398:	6a 07       	cpc	r22, r26
    339a:	7b 07       	cpc	r23, r27
    339c:	40 f0       	brcs	.+16     	; 0x33ae <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x2b6>
    339e:	24 01       	movw	r4, r8
    33a0:	35 01       	movw	r6, r10
    33a2:	86 01       	movw	r16, r12
    33a4:	17 01       	movw	r2, r14
    33a6:	89 87       	std	Y+9, r24	; 0x09
    33a8:	9a 87       	std	Y+10, r25	; 0x0a
    33aa:	ab 87       	std	Y+11, r26	; 0x0b
    33ac:	bc 87       	std	Y+12, r27	; 0x0c
    33ae:	51 e0       	ldi	r21, 0x01	; 1
    33b0:	c5 1a       	sub	r12, r21
    33b2:	d1 08       	sbc	r13, r1
    33b4:	e1 08       	sbc	r14, r1
    33b6:	f1 08       	sbc	r15, r1
    33b8:	b9 f4       	brne	.+46     	; 0x33e8 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x2f0>
    33ba:	e2 e8       	ldi	r30, 0x82	; 130
    33bc:	8e 2e       	mov	r8, r30
    33be:	99 24       	eor	r9, r9
    33c0:	93 94       	inc	r9
    33c2:	a1 2c       	mov	r10, r1
    33c4:	b1 2c       	mov	r11, r1
    33c6:	69 89       	ldd	r22, Y+17	; 0x11
    33c8:	7a 89       	ldd	r23, Y+18	; 0x12
    33ca:	8b 89       	ldd	r24, Y+19	; 0x13
    33cc:	9c 89       	ldd	r25, Y+20	; 0x14
    33ce:	2d 85       	ldd	r18, Y+13	; 0x0d
    33d0:	3e 85       	ldd	r19, Y+14	; 0x0e
    33d2:	4f 85       	ldd	r20, Y+15	; 0x0f
    33d4:	58 89       	ldd	r21, Y+16	; 0x10
    33d6:	62 1b       	sub	r22, r18
    33d8:	73 0b       	sbc	r23, r19
    33da:	84 0b       	sbc	r24, r20
    33dc:	95 0b       	sbc	r25, r21
    33de:	69 8b       	std	Y+17, r22	; 0x11
    33e0:	7a 8b       	std	Y+18, r23	; 0x12
    33e2:	8b 8b       	std	Y+19, r24	; 0x13
    33e4:	9c 8b       	std	Y+20, r25	; 0x14
    33e6:	70 cf       	rjmp	.-288    	; 0x32c8 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x1d0>
    33e8:	6d 89       	ldd	r22, Y+21	; 0x15
    33ea:	7e 89       	ldd	r23, Y+22	; 0x16
    33ec:	8f 89       	ldd	r24, Y+23	; 0x17
    33ee:	98 8d       	ldd	r25, Y+24	; 0x18
    33f0:	a7 01       	movw	r20, r14
    33f2:	96 01       	movw	r18, r12
    33f4:	0e 94 1c 24 	call	0x4838	; 0x4838 <__udivmodsi4>
    33f8:	49 01       	movw	r8, r18
    33fa:	5a 01       	movw	r10, r20
    33fc:	e4 cf       	rjmp	.-56     	; 0x33c6 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x2ce>
    33fe:	c3 01       	movw	r24, r6
    3400:	b2 01       	movw	r22, r4
    3402:	25 e0       	ldi	r18, 0x05	; 5
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	40 e0       	ldi	r20, 0x00	; 0
    3408:	50 e0       	ldi	r21, 0x00	; 0
    340a:	0e 94 1c 24 	call	0x4838	; 0x4838 <__udivmodsi4>
    340e:	21 15       	cp	r18, r1
    3410:	31 05       	cpc	r19, r1
    3412:	41 05       	cpc	r20, r1
    3414:	51 05       	cpc	r21, r1
    3416:	21 f4       	brne	.+8      	; 0x3420 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x328>
    3418:	21 e0       	ldi	r18, 0x01	; 1
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	40 e0       	ldi	r20, 0x00	; 0
    341e:	50 e0       	ldi	r21, 0x00	; 0
    3420:	73 01       	movw	r14, r6
    3422:	62 01       	movw	r12, r4
    3424:	61 e0       	ldi	r22, 0x01	; 1
    3426:	c6 1a       	sub	r12, r22
    3428:	d1 08       	sbc	r13, r1
    342a:	e1 08       	sbc	r14, r1
    342c:	f1 08       	sbc	r15, r1
    342e:	c2 1a       	sub	r12, r18
    3430:	d3 0a       	sbc	r13, r19
    3432:	e4 0a       	sbc	r14, r20
    3434:	f5 0a       	sbc	r15, r21
    3436:	71 e0       	ldi	r23, 0x01	; 1
    3438:	c7 16       	cp	r12, r23
    343a:	d7 06       	cpc	r13, r23
    343c:	e1 04       	cpc	r14, r1
    343e:	f1 04       	cpc	r15, r1
    3440:	78 f0       	brcs	.+30     	; 0x3460 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x368>
    3442:	da 01       	movw	r26, r20
    3444:	c9 01       	movw	r24, r18
    3446:	91 50       	subi	r25, 0x01	; 1
    3448:	a1 09       	sbc	r26, r1
    344a:	b1 09       	sbc	r27, r1
    344c:	a7 01       	movw	r20, r14
    344e:	96 01       	movw	r18, r12
    3450:	28 0f       	add	r18, r24
    3452:	39 1f       	adc	r19, r25
    3454:	4a 1f       	adc	r20, r26
    3456:	5b 1f       	adc	r21, r27
    3458:	c1 2c       	mov	r12, r1
    345a:	d1 2c       	mov	r13, r1
    345c:	76 01       	movw	r14, r12
    345e:	d3 94       	inc	r13
    3460:	a9 a5       	ldd	r26, Y+41	; 0x29
    3462:	ba a5       	ldd	r27, Y+42	; 0x2a
    3464:	1e 96       	adiw	r26, 0x0e	; 14
    3466:	1c 93       	st	X, r17
    3468:	0e 93       	st	-X, r16
    346a:	1d 97       	sbiw	r26, 0x0d	; 13
    346c:	50 96       	adiw	r26, 0x10	; 16
    346e:	dc 92       	st	X, r13
    3470:	ce 92       	st	-X, r12
    3472:	1f 97       	sbiw	r26, 0x0f	; 15
    3474:	51 96       	adiw	r26, 0x11	; 17
    3476:	2c 93       	st	X, r18
    3478:	51 97       	sbiw	r26, 0x11	; 17
    347a:	52 96       	adiw	r26, 0x12	; 18
    347c:	2c 93       	st	X, r18
    347e:	98 01       	movw	r18, r16
    3480:	a1 01       	movw	r20, r2
    3482:	c3 01       	movw	r24, r6
    3484:	b2 01       	movw	r22, r4
    3486:	0e 94 0c 24 	call	0x4818	; 0x4818 <__mulsi3>
    348a:	9b 01       	movw	r18, r22
    348c:	ac 01       	movw	r20, r24
    348e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3490:	7e 85       	ldd	r23, Y+14	; 0x0e
    3492:	8f 85       	ldd	r24, Y+15	; 0x0f
    3494:	98 89       	ldd	r25, Y+16	; 0x10
    3496:	74 c1       	rjmp	.+744    	; 0x3780 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x688>
    3498:	20 2f       	mov	r18, r16
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	40 e0       	ldi	r20, 0x00	; 0
    349e:	50 e0       	ldi	r21, 0x00	; 0
    34a0:	2d 8f       	std	Y+29, r18	; 0x1d
    34a2:	3e 8f       	std	Y+30, r19	; 0x1e
    34a4:	4f 8f       	std	Y+31, r20	; 0x1f
    34a6:	58 a3       	std	Y+32, r21	; 0x20
    34a8:	2d 85       	ldd	r18, Y+13	; 0x0d
    34aa:	3e 85       	ldd	r19, Y+14	; 0x0e
    34ac:	4f 85       	ldd	r20, Y+15	; 0x0f
    34ae:	58 89       	ldd	r21, Y+16	; 0x10
    34b0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    34b2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    34b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34b6:	98 a1       	ldd	r25, Y+32	; 0x20
    34b8:	0e 94 0c 24 	call	0x4818	; 0x4818 <__mulsi3>
    34bc:	69 8f       	std	Y+25, r22	; 0x19
    34be:	7a 8f       	std	Y+26, r23	; 0x1a
    34c0:	8b 8f       	std	Y+27, r24	; 0x1b
    34c2:	9c 8f       	std	Y+28, r25	; 0x1c
    34c4:	69 81       	ldd	r22, Y+1	; 0x01
    34c6:	7a 81       	ldd	r23, Y+2	; 0x02
    34c8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ca:	9c 81       	ldd	r25, Y+4	; 0x04
    34cc:	29 8d       	ldd	r18, Y+25	; 0x19
    34ce:	3a 8d       	ldd	r19, Y+26	; 0x1a
    34d0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    34d2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    34d4:	0e 94 1c 24 	call	0x4838	; 0x4838 <__udivmodsi4>
    34d8:	2d a3       	std	Y+37, r18	; 0x25
    34da:	3e a3       	std	Y+38, r19	; 0x26
    34dc:	4f a3       	std	Y+39, r20	; 0x27
    34de:	58 a7       	std	Y+40, r21	; 0x28
    34e0:	69 01       	movw	r12, r18
    34e2:	7a 01       	movw	r14, r20
    34e4:	32 e0       	ldi	r19, 0x02	; 2
    34e6:	f6 94       	lsr	r15
    34e8:	e7 94       	ror	r14
    34ea:	d7 94       	ror	r13
    34ec:	c7 94       	ror	r12
    34ee:	3a 95       	dec	r19
    34f0:	d1 f7       	brne	.-12     	; 0x34e6 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x3ee>
    34f2:	09 8d       	ldd	r16, Y+25	; 0x19
    34f4:	1a 8d       	ldd	r17, Y+26	; 0x1a
    34f6:	2b 8d       	ldd	r18, Y+27	; 0x1b
    34f8:	3c 8d       	ldd	r19, Y+28	; 0x1c
    34fa:	42 e0       	ldi	r20, 0x02	; 2
    34fc:	00 0f       	add	r16, r16
    34fe:	11 1f       	adc	r17, r17
    3500:	22 1f       	adc	r18, r18
    3502:	33 1f       	adc	r19, r19
    3504:	4a 95       	dec	r20
    3506:	d1 f7       	brne	.-12     	; 0x34fc <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x404>
    3508:	0d 8b       	std	Y+21, r16	; 0x15
    350a:	1e 8b       	std	Y+22, r17	; 0x16
    350c:	2f 8b       	std	Y+23, r18	; 0x17
    350e:	38 8f       	std	Y+24, r19	; 0x18
    3510:	54 e0       	ldi	r21, 0x04	; 4
    3512:	45 2e       	mov	r4, r21
    3514:	51 2c       	mov	r5, r1
    3516:	61 2c       	mov	r6, r1
    3518:	71 2c       	mov	r7, r1
    351a:	60 e3       	ldi	r22, 0x30	; 48
    351c:	86 2e       	mov	r8, r22
    351e:	91 2c       	mov	r9, r1
    3520:	a1 2c       	mov	r10, r1
    3522:	b1 2c       	mov	r11, r1
    3524:	00 e0       	ldi	r16, 0x00	; 0
    3526:	11 e0       	ldi	r17, 0x01	; 1
    3528:	20 e0       	ldi	r18, 0x00	; 0
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	09 87       	std	Y+9, r16	; 0x09
    352e:	1a 87       	std	Y+10, r17	; 0x0a
    3530:	2b 87       	std	Y+11, r18	; 0x0b
    3532:	3c 87       	std	Y+12, r19	; 0x0c
    3534:	0f ef       	ldi	r16, 0xFF	; 255
    3536:	1f ef       	ldi	r17, 0xFF	; 255
    3538:	98 01       	movw	r18, r16
    353a:	09 8b       	std	Y+17, r16	; 0x11
    353c:	1a 8b       	std	Y+18, r17	; 0x12
    353e:	2b 8b       	std	Y+19, r18	; 0x13
    3540:	3c 8b       	std	Y+20, r19	; 0x14
    3542:	c1 14       	cp	r12, r1
    3544:	d1 04       	cpc	r13, r1
    3546:	e1 04       	cpc	r14, r1
    3548:	f1 04       	cpc	r15, r1
    354a:	09 f4       	brne	.+2      	; 0x354e <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x456>
    354c:	8a c0       	rjmp	.+276    	; 0x3662 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x56a>
    354e:	11 e0       	ldi	r17, 0x01	; 1
    3550:	c1 16       	cp	r12, r17
    3552:	d1 06       	cpc	r13, r17
    3554:	e1 04       	cpc	r14, r1
    3556:	f1 04       	cpc	r15, r1
    3558:	08 f0       	brcs	.+2      	; 0x355c <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x464>
    355a:	5d c0       	rjmp	.+186    	; 0x3616 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x51e>
    355c:	2d 89       	ldd	r18, Y+21	; 0x15
    355e:	3e 89       	ldd	r19, Y+22	; 0x16
    3560:	4f 89       	ldd	r20, Y+23	; 0x17
    3562:	58 8d       	ldd	r21, Y+24	; 0x18
    3564:	c7 01       	movw	r24, r14
    3566:	b6 01       	movw	r22, r12
    3568:	0e 94 0c 24 	call	0x4818	; 0x4818 <__mulsi3>
    356c:	6f a7       	std	Y+47, r22	; 0x2f
    356e:	78 ab       	std	Y+48, r23	; 0x30
    3570:	89 ab       	std	Y+49, r24	; 0x31
    3572:	9a ab       	std	Y+50, r25	; 0x32
    3574:	09 81       	ldd	r16, Y+1	; 0x01
    3576:	1a 81       	ldd	r17, Y+2	; 0x02
    3578:	2b 81       	ldd	r18, Y+3	; 0x03
    357a:	3c 81       	ldd	r19, Y+4	; 0x04
    357c:	06 1b       	sub	r16, r22
    357e:	17 0b       	sbc	r17, r23
    3580:	28 0b       	sbc	r18, r24
    3582:	39 0b       	sbc	r19, r25
    3584:	0b a7       	std	Y+43, r16	; 0x2b
    3586:	1c a7       	std	Y+44, r17	; 0x2c
    3588:	2d a7       	std	Y+45, r18	; 0x2d
    358a:	3e a7       	std	Y+46, r19	; 0x2e
    358c:	49 89       	ldd	r20, Y+17	; 0x11
    358e:	5a 89       	ldd	r21, Y+18	; 0x12
    3590:	6b 89       	ldd	r22, Y+19	; 0x13
    3592:	7c 89       	ldd	r23, Y+20	; 0x14
    3594:	40 17       	cp	r20, r16
    3596:	51 07       	cpc	r21, r17
    3598:	62 07       	cpc	r22, r18
    359a:	73 07       	cpc	r23, r19
    359c:	50 f0       	brcs	.+20     	; 0x35b2 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x4ba>
    359e:	53 01       	movw	r10, r6
    35a0:	42 01       	movw	r8, r4
    35a2:	c9 86       	std	Y+9, r12	; 0x09
    35a4:	da 86       	std	Y+10, r13	; 0x0a
    35a6:	eb 86       	std	Y+11, r14	; 0x0b
    35a8:	fc 86       	std	Y+12, r15	; 0x0c
    35aa:	09 8b       	std	Y+17, r16	; 0x11
    35ac:	1a 8b       	std	Y+18, r17	; 0x12
    35ae:	2b 8b       	std	Y+19, r18	; 0x13
    35b0:	3c 8b       	std	Y+20, r19	; 0x14
    35b2:	c1 14       	cp	r12, r1
    35b4:	51 e0       	ldi	r21, 0x01	; 1
    35b6:	d5 06       	cpc	r13, r21
    35b8:	e1 04       	cpc	r14, r1
    35ba:	f1 04       	cpc	r15, r1
    35bc:	61 f1       	breq	.+88     	; 0x3616 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x51e>
    35be:	6f ef       	ldi	r22, 0xFF	; 255
    35c0:	c6 1a       	sub	r12, r22
    35c2:	d6 0a       	sbc	r13, r22
    35c4:	e6 0a       	sbc	r14, r22
    35c6:	f6 0a       	sbc	r15, r22
    35c8:	8d 89       	ldd	r24, Y+21	; 0x15
    35ca:	9e 89       	ldd	r25, Y+22	; 0x16
    35cc:	af 89       	ldd	r26, Y+23	; 0x17
    35ce:	b8 8d       	ldd	r27, Y+24	; 0x18
    35d0:	0f a5       	ldd	r16, Y+47	; 0x2f
    35d2:	18 a9       	ldd	r17, Y+48	; 0x30
    35d4:	29 a9       	ldd	r18, Y+49	; 0x31
    35d6:	3a a9       	ldd	r19, Y+50	; 0x32
    35d8:	80 0f       	add	r24, r16
    35da:	91 1f       	adc	r25, r17
    35dc:	a2 1f       	adc	r26, r18
    35de:	b3 1f       	adc	r27, r19
    35e0:	09 81       	ldd	r16, Y+1	; 0x01
    35e2:	1a 81       	ldd	r17, Y+2	; 0x02
    35e4:	2b 81       	ldd	r18, Y+3	; 0x03
    35e6:	3c 81       	ldd	r19, Y+4	; 0x04
    35e8:	80 1b       	sub	r24, r16
    35ea:	91 0b       	sbc	r25, r17
    35ec:	a2 0b       	sbc	r26, r18
    35ee:	b3 0b       	sbc	r27, r19
    35f0:	09 89       	ldd	r16, Y+17	; 0x11
    35f2:	1a 89       	ldd	r17, Y+18	; 0x12
    35f4:	2b 89       	ldd	r18, Y+19	; 0x13
    35f6:	3c 89       	ldd	r19, Y+20	; 0x14
    35f8:	08 17       	cp	r16, r24
    35fa:	19 07       	cpc	r17, r25
    35fc:	2a 07       	cpc	r18, r26
    35fe:	3b 07       	cpc	r19, r27
    3600:	50 f0       	brcs	.+20     	; 0x3616 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x51e>
    3602:	53 01       	movw	r10, r6
    3604:	42 01       	movw	r8, r4
    3606:	c9 86       	std	Y+9, r12	; 0x09
    3608:	da 86       	std	Y+10, r13	; 0x0a
    360a:	eb 86       	std	Y+11, r14	; 0x0b
    360c:	fc 86       	std	Y+12, r15	; 0x0c
    360e:	89 8b       	std	Y+17, r24	; 0x11
    3610:	9a 8b       	std	Y+18, r25	; 0x12
    3612:	ab 8b       	std	Y+19, r26	; 0x13
    3614:	bc 8b       	std	Y+20, r27	; 0x14
    3616:	1f ef       	ldi	r17, 0xFF	; 255
    3618:	41 1a       	sub	r4, r17
    361a:	51 0a       	sbc	r5, r17
    361c:	61 0a       	sbc	r6, r17
    361e:	71 0a       	sbc	r7, r17
    3620:	6d a1       	ldd	r22, Y+37	; 0x25
    3622:	7e a1       	ldd	r23, Y+38	; 0x26
    3624:	8f a1       	ldd	r24, Y+39	; 0x27
    3626:	98 a5       	ldd	r25, Y+40	; 0x28
    3628:	a3 01       	movw	r20, r6
    362a:	92 01       	movw	r18, r4
    362c:	0e 94 1c 24 	call	0x4838	; 0x4838 <__udivmodsi4>
    3630:	69 01       	movw	r12, r18
    3632:	7a 01       	movw	r14, r20
    3634:	0d 89       	ldd	r16, Y+21	; 0x15
    3636:	1e 89       	ldd	r17, Y+22	; 0x16
    3638:	2f 89       	ldd	r18, Y+23	; 0x17
    363a:	38 8d       	ldd	r19, Y+24	; 0x18
    363c:	49 8d       	ldd	r20, Y+25	; 0x19
    363e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3640:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3642:	7c 8d       	ldd	r23, Y+28	; 0x1c
    3644:	04 0f       	add	r16, r20
    3646:	15 1f       	adc	r17, r21
    3648:	26 1f       	adc	r18, r22
    364a:	37 1f       	adc	r19, r23
    364c:	0d 8b       	std	Y+21, r16	; 0x15
    364e:	1e 8b       	std	Y+22, r17	; 0x16
    3650:	2f 8b       	std	Y+23, r18	; 0x17
    3652:	38 8f       	std	Y+24, r19	; 0x18
    3654:	51 e3       	ldi	r21, 0x31	; 49
    3656:	45 16       	cp	r4, r21
    3658:	51 04       	cpc	r5, r1
    365a:	61 04       	cpc	r6, r1
    365c:	71 04       	cpc	r7, r1
    365e:	09 f0       	breq	.+2      	; 0x3662 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x56a>
    3660:	70 cf       	rjmp	.-288    	; 0x3542 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x44a>
    3662:	c5 01       	movw	r24, r10
    3664:	b4 01       	movw	r22, r8
    3666:	25 e0       	ldi	r18, 0x05	; 5
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	40 e0       	ldi	r20, 0x00	; 0
    366c:	50 e0       	ldi	r21, 0x00	; 0
    366e:	0e 94 1c 24 	call	0x4838	; 0x4838 <__udivmodsi4>
    3672:	21 15       	cp	r18, r1
    3674:	31 05       	cpc	r19, r1
    3676:	41 05       	cpc	r20, r1
    3678:	51 05       	cpc	r21, r1
    367a:	21 f4       	brne	.+8      	; 0x3684 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x58c>
    367c:	21 e0       	ldi	r18, 0x01	; 1
    367e:	30 e0       	ldi	r19, 0x00	; 0
    3680:	40 e0       	ldi	r20, 0x00	; 0
    3682:	50 e0       	ldi	r21, 0x00	; 0
    3684:	d5 01       	movw	r26, r10
    3686:	c4 01       	movw	r24, r8
    3688:	01 97       	sbiw	r24, 0x01	; 1
    368a:	a1 09       	sbc	r26, r1
    368c:	b1 09       	sbc	r27, r1
    368e:	82 1b       	sub	r24, r18
    3690:	93 0b       	sbc	r25, r19
    3692:	a4 0b       	sbc	r26, r20
    3694:	b5 0b       	sbc	r27, r21
    3696:	81 32       	cpi	r24, 0x21	; 33
    3698:	91 05       	cpc	r25, r1
    369a:	a1 05       	cpc	r26, r1
    369c:	b1 05       	cpc	r27, r1
    369e:	80 f0       	brcs	.+32     	; 0x36c0 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x5c8>
    36a0:	ba 01       	movw	r22, r20
    36a2:	a9 01       	movw	r20, r18
    36a4:	40 52       	subi	r20, 0x20	; 32
    36a6:	51 09       	sbc	r21, r1
    36a8:	61 09       	sbc	r22, r1
    36aa:	71 09       	sbc	r23, r1
    36ac:	9a 01       	movw	r18, r20
    36ae:	ab 01       	movw	r20, r22
    36b0:	28 0f       	add	r18, r24
    36b2:	39 1f       	adc	r19, r25
    36b4:	4a 1f       	adc	r20, r26
    36b6:	5b 1f       	adc	r21, r27
    36b8:	80 e2       	ldi	r24, 0x20	; 32
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	a0 e0       	ldi	r26, 0x00	; 0
    36be:	b0 e0       	ldi	r27, 0x00	; 0
    36c0:	09 85       	ldd	r16, Y+9	; 0x09
    36c2:	1a 85       	ldd	r17, Y+10	; 0x0a
    36c4:	08 9f       	mul	r16, r24
    36c6:	b0 01       	movw	r22, r0
    36c8:	09 9f       	mul	r16, r25
    36ca:	70 0d       	add	r23, r0
    36cc:	18 9f       	mul	r17, r24
    36ce:	70 0d       	add	r23, r0
    36d0:	11 24       	eor	r1, r1
    36d2:	60 34       	cpi	r22, 0x40	; 64
    36d4:	71 05       	cpc	r23, r1
    36d6:	08 f0       	brcs	.+2      	; 0x36da <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x5e2>
    36d8:	6f e3       	ldi	r22, 0x3F	; 63
    36da:	e9 a5       	ldd	r30, Y+41	; 0x29
    36dc:	fa a5       	ldd	r31, Y+42	; 0x2a
    36de:	64 8b       	std	Z+20, r22	; 0x14
    36e0:	82 87       	std	Z+10, r24	; 0x0a
    36e2:	23 87       	std	Z+11, r18	; 0x0b
    36e4:	24 87       	std	Z+12, r18	; 0x0c
    36e6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    36e8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    36ea:	4f 8d       	ldd	r20, Y+31	; 0x1f
    36ec:	58 a1       	ldd	r21, Y+32	; 0x20
    36ee:	c5 01       	movw	r24, r10
    36f0:	b4 01       	movw	r22, r8
    36f2:	0e 94 0c 24 	call	0x4818	; 0x4818 <__mulsi3>
    36f6:	6b 01       	movw	r12, r22
    36f8:	7c 01       	movw	r14, r24
    36fa:	25 e0       	ldi	r18, 0x05	; 5
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	40 e0       	ldi	r20, 0x00	; 0
    3700:	50 e0       	ldi	r21, 0x00	; 0
    3702:	0e 94 1c 24 	call	0x4838	; 0x4838 <__udivmodsi4>
    3706:	21 15       	cp	r18, r1
    3708:	31 05       	cpc	r19, r1
    370a:	41 05       	cpc	r20, r1
    370c:	51 05       	cpc	r21, r1
    370e:	21 f4       	brne	.+8      	; 0x3718 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x620>
    3710:	21 e0       	ldi	r18, 0x01	; 1
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	40 e0       	ldi	r20, 0x00	; 0
    3716:	50 e0       	ldi	r21, 0x00	; 0
    3718:	d7 01       	movw	r26, r14
    371a:	c6 01       	movw	r24, r12
    371c:	01 97       	sbiw	r24, 0x01	; 1
    371e:	a1 09       	sbc	r26, r1
    3720:	b1 09       	sbc	r27, r1
    3722:	82 1b       	sub	r24, r18
    3724:	93 0b       	sbc	r25, r19
    3726:	a4 0b       	sbc	r26, r20
    3728:	b5 0b       	sbc	r27, r21
    372a:	81 30       	cpi	r24, 0x01	; 1
    372c:	f1 e0       	ldi	r31, 0x01	; 1
    372e:	9f 07       	cpc	r25, r31
    3730:	a1 05       	cpc	r26, r1
    3732:	b1 05       	cpc	r27, r1
    3734:	78 f0       	brcs	.+30     	; 0x3754 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x65c>
    3736:	ba 01       	movw	r22, r20
    3738:	a9 01       	movw	r20, r18
    373a:	51 50       	subi	r21, 0x01	; 1
    373c:	61 09       	sbc	r22, r1
    373e:	71 09       	sbc	r23, r1
    3740:	9a 01       	movw	r18, r20
    3742:	ab 01       	movw	r20, r22
    3744:	28 0f       	add	r18, r24
    3746:	39 1f       	adc	r19, r25
    3748:	4a 1f       	adc	r20, r26
    374a:	5b 1f       	adc	r21, r27
    374c:	80 e0       	ldi	r24, 0x00	; 0
    374e:	91 e0       	ldi	r25, 0x01	; 1
    3750:	a0 e0       	ldi	r26, 0x00	; 0
    3752:	b0 e0       	ldi	r27, 0x00	; 0
    3754:	e9 a5       	ldd	r30, Y+41	; 0x29
    3756:	fa a5       	ldd	r31, Y+42	; 0x2a
    3758:	16 87       	std	Z+14, r17	; 0x0e
    375a:	05 87       	std	Z+13, r16	; 0x0d
    375c:	90 8b       	std	Z+16, r25	; 0x10
    375e:	87 87       	std	Z+15, r24	; 0x0f
    3760:	21 8b       	std	Z+17, r18	; 0x11
    3762:	22 8b       	std	Z+18, r18	; 0x12
    3764:	2d 85       	ldd	r18, Y+13	; 0x0d
    3766:	3e 85       	ldd	r19, Y+14	; 0x0e
    3768:	4f 85       	ldd	r20, Y+15	; 0x0f
    376a:	58 89       	ldd	r21, Y+16	; 0x10
    376c:	69 85       	ldd	r22, Y+9	; 0x09
    376e:	7a 85       	ldd	r23, Y+10	; 0x0a
    3770:	8b 85       	ldd	r24, Y+11	; 0x0b
    3772:	9c 85       	ldd	r25, Y+12	; 0x0c
    3774:	0e 94 0c 24 	call	0x4818	; 0x4818 <__mulsi3>
    3778:	9b 01       	movw	r18, r22
    377a:	ac 01       	movw	r20, r24
    377c:	c7 01       	movw	r24, r14
    377e:	b6 01       	movw	r22, r12
    3780:	0e 94 0c 24 	call	0x4818	; 0x4818 <__mulsi3>
    3784:	2b 01       	movw	r4, r22
    3786:	3c 01       	movw	r6, r24
    3788:	09 81       	ldd	r16, Y+1	; 0x01
    378a:	1a 81       	ldd	r17, Y+2	; 0x02
    378c:	2b 81       	ldd	r18, Y+3	; 0x03
    378e:	3c 81       	ldd	r19, Y+4	; 0x04
    3790:	60 17       	cp	r22, r16
    3792:	71 07       	cpc	r23, r17
    3794:	82 07       	cpc	r24, r18
    3796:	93 07       	cpc	r25, r19
    3798:	38 f4       	brcc	.+14     	; 0x37a8 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x6b0>
    379a:	d9 01       	movw	r26, r18
    379c:	c8 01       	movw	r24, r16
    379e:	84 19       	sub	r24, r4
    37a0:	95 09       	sbc	r25, r5
    37a2:	a6 09       	sbc	r26, r6
    37a4:	b7 09       	sbc	r27, r7
    37a6:	0a c0       	rjmp	.+20     	; 0x37bc <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x6c4>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	09 81       	ldd	r16, Y+1	; 0x01
    37ae:	1a 81       	ldd	r17, Y+2	; 0x02
    37b0:	2b 81       	ldd	r18, Y+3	; 0x03
    37b2:	3c 81       	ldd	r19, Y+4	; 0x04
    37b4:	80 1b       	sub	r24, r16
    37b6:	91 0b       	sbc	r25, r17
    37b8:	a2 0b       	sbc	r26, r18
    37ba:	b3 0b       	sbc	r27, r19
    37bc:	8c 01       	movw	r16, r24
    37be:	9d 01       	movw	r18, r26
    37c0:	40 e0       	ldi	r20, 0x00	; 0
    37c2:	50 e0       	ldi	r21, 0x00	; 0
    37c4:	ba 01       	movw	r22, r20
    37c6:	89 83       	std	Y+1, r24	; 0x01
    37c8:	1a 83       	std	Y+2, r17	; 0x02
    37ca:	2b 83       	std	Y+3, r18	; 0x03
    37cc:	3c 83       	std	Y+4, r19	; 0x04
    37ce:	4d 83       	std	Y+5, r20	; 0x05
    37d0:	5e 83       	std	Y+6, r21	; 0x06
    37d2:	6f 83       	std	Y+7, r22	; 0x07
    37d4:	78 87       	std	Y+8, r23	; 0x08
    37d6:	80 e4       	ldi	r24, 0x40	; 64
    37d8:	a8 2e       	mov	r10, r24
    37da:	92 e4       	ldi	r25, 0x42	; 66
    37dc:	b9 2e       	mov	r11, r25
    37de:	2f e0       	ldi	r18, 0x0F	; 15
    37e0:	c2 2e       	mov	r12, r18
    37e2:	d1 2c       	mov	r13, r1
    37e4:	e1 2c       	mov	r14, r1
    37e6:	f1 2c       	mov	r15, r1
    37e8:	00 e0       	ldi	r16, 0x00	; 0
    37ea:	10 e0       	ldi	r17, 0x00	; 0
    37ec:	29 81       	ldd	r18, Y+1	; 0x01
    37ee:	3a 81       	ldd	r19, Y+2	; 0x02
    37f0:	4b 81       	ldd	r20, Y+3	; 0x03
    37f2:	5c 81       	ldd	r21, Y+4	; 0x04
    37f4:	6d 81       	ldd	r22, Y+5	; 0x05
    37f6:	7e 81       	ldd	r23, Y+6	; 0x06
    37f8:	8f 81       	ldd	r24, Y+7	; 0x07
    37fa:	98 85       	ldd	r25, Y+8	; 0x08
    37fc:	0e 94 5f 24 	call	0x48be	; 0x48be <__muldi3>
    3800:	79 01       	movw	r14, r18
    3802:	8a 01       	movw	r16, r20
    3804:	1b 01       	movw	r2, r22
    3806:	4c 01       	movw	r8, r24
    3808:	c3 01       	movw	r24, r6
    380a:	b2 01       	movw	r22, r4
    380c:	29 a1       	ldd	r18, Y+33	; 0x21
    380e:	3a a1       	ldd	r19, Y+34	; 0x22
    3810:	4b a1       	ldd	r20, Y+35	; 0x23
    3812:	5c a1       	ldd	r21, Y+36	; 0x24
    3814:	0e 94 b8 24 	call	0x4970	; 0x4970 <__umulsidi3>
    3818:	59 01       	movw	r10, r18
    381a:	6a 01       	movw	r12, r20
    381c:	76 2e       	mov	r7, r22
    381e:	b7 2f       	mov	r27, r23
    3820:	a8 2f       	mov	r26, r24
    3822:	f9 2f       	mov	r31, r25
    3824:	e1 e0       	ldi	r30, 0x01	; 1
    3826:	97 01       	movw	r18, r14
    3828:	a8 01       	movw	r20, r16
    382a:	b1 01       	movw	r22, r2
    382c:	c4 01       	movw	r24, r8
    382e:	e7 2c       	mov	r14, r7
    3830:	fb 2e       	mov	r15, r27
    3832:	0a 2f       	mov	r16, r26
    3834:	1f 2f       	mov	r17, r31
    3836:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__cmpdi2>
    383a:	11 f0       	breq	.+4      	; 0x3840 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x748>
    383c:	08 f0       	brcs	.+2      	; 0x3840 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x748>
    383e:	e0 e0       	ldi	r30, 0x00	; 0
    3840:	a9 a5       	ldd	r26, Y+41	; 0x29
    3842:	ba a5       	ldd	r27, Y+42	; 0x2a
    3844:	53 96       	adiw	r26, 0x13	; 19
    3846:	ec 93       	st	X, r30
    3848:	e2 96       	adiw	r28, 0x32	; 50
    384a:	0f b6       	in	r0, 0x3f	; 63
    384c:	f8 94       	cli
    384e:	de bf       	out	0x3e, r29	; 62
    3850:	0f be       	out	0x3f, r0	; 63
    3852:	cd bf       	out	0x3d, r28	; 61
    3854:	df 91       	pop	r29
    3856:	cf 91       	pop	r28
    3858:	1f 91       	pop	r17
    385a:	0f 91       	pop	r16
    385c:	ff 90       	pop	r15
    385e:	ef 90       	pop	r14
    3860:	df 90       	pop	r13
    3862:	cf 90       	pop	r12
    3864:	bf 90       	pop	r11
    3866:	af 90       	pop	r10
    3868:	9f 90       	pop	r9
    386a:	8f 90       	pop	r8
    386c:	7f 90       	pop	r7
    386e:	6f 90       	pop	r6
    3870:	5f 90       	pop	r5
    3872:	4f 90       	pop	r4
    3874:	3f 90       	pop	r3
    3876:	2f 90       	pop	r2
    3878:	08 95       	ret

0000387a <_ZNK18ACAN2517FDSettings42dataBitRateIsAMultipleOfArbitrationBitRateEv>:
    387a:	cf 92       	push	r12
    387c:	df 92       	push	r13
    387e:	ef 92       	push	r14
    3880:	ff 92       	push	r15
    3882:	fc 01       	movw	r30, r24
    3884:	21 85       	ldd	r18, Z+9	; 0x09
    3886:	21 30       	cpi	r18, 0x01	; 1
    3888:	d9 f0       	breq	.+54     	; 0x38c0 <_ZNK18ACAN2517FDSettings42dataBitRateIsAMultipleOfArbitrationBitRateEv+0x46>
    388a:	a2 85       	ldd	r26, Z+10	; 0x0a
    388c:	b0 e0       	ldi	r27, 0x00	; 0
    388e:	11 96       	adiw	r26, 0x01	; 1
    3890:	83 85       	ldd	r24, Z+11	; 0x0b
    3892:	a8 0f       	add	r26, r24
    3894:	b1 1d       	adc	r27, r1
    3896:	30 e0       	ldi	r19, 0x00	; 0
    3898:	0e 94 4d 24 	call	0x489a	; 0x489a <__usmulhisi3>
    389c:	47 85       	ldd	r20, Z+15	; 0x0f
    389e:	50 89       	ldd	r21, Z+16	; 0x10
    38a0:	4f 5f       	subi	r20, 0xFF	; 255
    38a2:	5f 4f       	sbci	r21, 0xFF	; 255
    38a4:	21 89       	ldd	r18, Z+17	; 0x11
    38a6:	42 0f       	add	r20, r18
    38a8:	51 1d       	adc	r21, r1
    38aa:	6a 01       	movw	r12, r20
    38ac:	e1 2c       	mov	r14, r1
    38ae:	f1 2c       	mov	r15, r1
    38b0:	21 e0       	ldi	r18, 0x01	; 1
    38b2:	6c 15       	cp	r22, r12
    38b4:	7d 05       	cpc	r23, r13
    38b6:	8e 05       	cpc	r24, r14
    38b8:	9f 05       	cpc	r25, r15
    38ba:	19 f0       	breq	.+6      	; 0x38c2 <_ZNK18ACAN2517FDSettings42dataBitRateIsAMultipleOfArbitrationBitRateEv+0x48>
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	01 c0       	rjmp	.+2      	; 0x38c2 <_ZNK18ACAN2517FDSettings42dataBitRateIsAMultipleOfArbitrationBitRateEv+0x48>
    38c0:	21 e0       	ldi	r18, 0x01	; 1
    38c2:	82 2f       	mov	r24, r18
    38c4:	ff 90       	pop	r15
    38c6:	ef 90       	pop	r14
    38c8:	df 90       	pop	r13
    38ca:	cf 90       	pop	r12
    38cc:	08 95       	ret

000038ce <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv>:

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::CANBitSettingConsistency (void) const {
    38ce:	cf 92       	push	r12
    38d0:	df 92       	push	r13
    38d2:	ef 92       	push	r14
    38d4:	ff 92       	push	r15
    38d6:	cf 93       	push	r28
    38d8:	df 93       	push	r29
    38da:	fc 01       	movw	r30, r24
  uint32_t errorCode = 0 ; // Means no error
//--- Bit rate prescaler
  if (mBitRatePrescaler == 0) {
    38dc:	85 85       	ldd	r24, Z+13	; 0x0d
    38de:	96 85       	ldd	r25, Z+14	; 0x0e
    38e0:	00 97       	sbiw	r24, 0x00	; 0
    38e2:	49 f0       	breq	.+18     	; 0x38f6 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x28>
    errorCode |= kBitRatePrescalerIsZero ;
  }else if (mBitRatePrescaler > MAX_BRP) {
    38e4:	81 30       	cpi	r24, 0x01	; 1
    38e6:	91 40       	sbci	r25, 0x01	; 1
    38e8:	58 f0       	brcs	.+22     	; 0x3900 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x32>
    errorCode |= kBitRatePrescalerIsGreaterThan256 ;
    38ea:	92 e0       	ldi	r25, 0x02	; 2
    38ec:	c9 2e       	mov	r12, r25
    38ee:	d1 2c       	mov	r13, r1
    38f0:	e1 2c       	mov	r14, r1
    38f2:	f1 2c       	mov	r15, r1
    38f4:	08 c0       	rjmp	.+16     	; 0x3906 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x38>

uint32_t ACAN2517FDSettings::CANBitSettingConsistency (void) const {
  uint32_t errorCode = 0 ; // Means no error
//--- Bit rate prescaler
  if (mBitRatePrescaler == 0) {
    errorCode |= kBitRatePrescalerIsZero ;
    38f6:	c1 2c       	mov	r12, r1
    38f8:	d1 2c       	mov	r13, r1
    38fa:	76 01       	movw	r14, r12
    38fc:	c3 94       	inc	r12
    38fe:	03 c0       	rjmp	.+6      	; 0x3906 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x38>
}

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::CANBitSettingConsistency (void) const {
  uint32_t errorCode = 0 ; // Means no error
    3900:	c1 2c       	mov	r12, r1
    3902:	d1 2c       	mov	r13, r1
    3904:	76 01       	movw	r14, r12
    errorCode |= kBitRatePrescalerIsZero ;
  }else if (mBitRatePrescaler > MAX_BRP) {
    errorCode |= kBitRatePrescalerIsGreaterThan256 ;
  }
//--- Arbitration Phase Segment 1
  if (mArbitrationPhaseSegment1 < 2) {
    3906:	27 85       	ldd	r18, Z+15	; 0x0f
    3908:	30 89       	ldd	r19, Z+16	; 0x10
    390a:	22 30       	cpi	r18, 0x02	; 2
    390c:	31 05       	cpc	r19, r1
    390e:	18 f4       	brcc	.+6      	; 0x3916 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x48>
    errorCode |= kArbitrationPhaseSegment1IsLowerThan2 ;
    3910:	68 94       	set
    3912:	c2 f8       	bld	r12, 2
    3914:	06 c0       	rjmp	.+12     	; 0x3922 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x54>
  }else if (mArbitrationPhaseSegment1 > MAX_ARBITRATION_PHASE_SEGMENT_1) {
    3916:	21 30       	cpi	r18, 0x01	; 1
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	38 07       	cpc	r19, r24
    391c:	10 f0       	brcs	.+4      	; 0x3922 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x54>
    errorCode |= kArbitrationPhaseSegment1IsGreaterThan256 ;
    391e:	68 94       	set
    3920:	c3 f8       	bld	r12, 3
  }
//--- Arbitration Phase Segment 2
  if (mArbitrationPhaseSegment2 == 0) {
    3922:	91 89       	ldd	r25, Z+17	; 0x11
    3924:	91 11       	cpse	r25, r1
    3926:	03 c0       	rjmp	.+6      	; 0x392e <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x60>
    errorCode |= kArbitrationPhaseSegment2IsZero ;
    3928:	68 94       	set
    392a:	c4 f8       	bld	r12, 4
    392c:	04 c0       	rjmp	.+8      	; 0x3936 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x68>
  }else if (mArbitrationPhaseSegment2 > MAX_ARBITRATION_PHASE_SEGMENT_2) {
    392e:	91 38       	cpi	r25, 0x81	; 129
    3930:	10 f0       	brcs	.+4      	; 0x3936 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x68>
    errorCode |= kArbitrationPhaseSegment2IsGreaterThan128 ;
    3932:	68 94       	set
    3934:	c5 f8       	bld	r12, 5
  }
//--- Arbitration SJW
  if (mArbitrationSJW == 0) {
    3936:	82 89       	ldd	r24, Z+18	; 0x12
    3938:	81 11       	cpse	r24, r1
    393a:	03 c0       	rjmp	.+6      	; 0x3942 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x74>
    errorCode |= kArbitrationSJWIsZero ;
    393c:	68 94       	set
    393e:	c6 f8       	bld	r12, 6
    3940:	04 c0       	rjmp	.+8      	; 0x394a <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x7c>
  }else if (mArbitrationSJW > MAX_ARBITRATION_SJW) {
    3942:	81 38       	cpi	r24, 0x81	; 129
    3944:	10 f0       	brcs	.+4      	; 0x394a <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x7c>
    errorCode |= kArbitrationSJWIsGreaterThan128 ;
    3946:	68 94       	set
    3948:	c7 f8       	bld	r12, 7
  }
  if (mArbitrationSJW > mArbitrationPhaseSegment1) {
    394a:	48 2f       	mov	r20, r24
    394c:	50 e0       	ldi	r21, 0x00	; 0
    394e:	24 17       	cp	r18, r20
    3950:	35 07       	cpc	r19, r21
    3952:	10 f4       	brcc	.+4      	; 0x3958 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x8a>
    errorCode |= kArbitrationSJWIsGreaterThanPhaseSegment1 ;
    3954:	68 94       	set
    3956:	d0 f8       	bld	r13, 0
  }
  if (mArbitrationSJW > mArbitrationPhaseSegment2) {
    3958:	98 17       	cp	r25, r24
    395a:	10 f4       	brcc	.+4      	; 0x3960 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x92>
    errorCode |= kArbitrationSJWIsGreaterThanPhaseSegment2 ;
    395c:	68 94       	set
    395e:	d1 f8       	bld	r13, 1
  }
//--- Data bit rate ?
  if (mDataBitRateFactor != DataBitRateFactor::x1) {
    3960:	81 85       	ldd	r24, Z+9	; 0x09
    3962:	81 30       	cpi	r24, 0x01	; 1
    3964:	71 f1       	breq	.+92     	; 0x39c2 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xf4>
    3966:	ef 01       	movw	r28, r30
    if (! dataBitRateIsAMultipleOfArbitrationBitRate ()) {
    3968:	cf 01       	movw	r24, r30
    396a:	0e 94 3d 1c 	call	0x387a	; 0x387a <_ZNK18ACAN2517FDSettings42dataBitRateIsAMultipleOfArbitrationBitRateEv>
    396e:	81 11       	cpse	r24, r1
    3970:	02 c0       	rjmp	.+4      	; 0x3976 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xa8>
      errorCode |= kArbitrationTQCountNotDivisibleByDataBitRateFactor ;
    3972:	68 94       	set
    3974:	d2 f8       	bld	r13, 2
    }
  //--- Data Phase Segment 1
    if (mDataPhaseSegment1 < 2) {
    3976:	2a 85       	ldd	r18, Y+10	; 0x0a
    3978:	22 30       	cpi	r18, 0x02	; 2
    397a:	18 f4       	brcc	.+6      	; 0x3982 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xb4>
      errorCode |= kDataPhaseSegment1IsLowerThan2 ;
    397c:	68 94       	set
    397e:	d3 f8       	bld	r13, 3
    3980:	04 c0       	rjmp	.+8      	; 0x398a <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xbc>
    }else if (mDataPhaseSegment1 > MAX_DATA_PHASE_SEGMENT_1) {
    3982:	21 32       	cpi	r18, 0x21	; 33
    3984:	10 f0       	brcs	.+4      	; 0x398a <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xbc>
      errorCode |= kDataPhaseSegment1IsGreaterThan32 ;
    3986:	68 94       	set
    3988:	d4 f8       	bld	r13, 4
    }
  //--- Data Phase Segment 2
    if (mDataPhaseSegment2 == 0) {
    398a:	9b 85       	ldd	r25, Y+11	; 0x0b
    398c:	91 11       	cpse	r25, r1
    398e:	03 c0       	rjmp	.+6      	; 0x3996 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xc8>
      errorCode |= kDataPhaseSegment2IsZero ;
    3990:	68 94       	set
    3992:	d5 f8       	bld	r13, 5
    3994:	04 c0       	rjmp	.+8      	; 0x399e <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xd0>
    }else if (mDataPhaseSegment2 > MAX_DATA_PHASE_SEGMENT_2) {
    3996:	91 31       	cpi	r25, 0x11	; 17
    3998:	10 f0       	brcs	.+4      	; 0x399e <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xd0>
      errorCode |= kDataPhaseSegment2IsGreaterThan16 ;
    399a:	68 94       	set
    399c:	d6 f8       	bld	r13, 6
    }
  //--- Data SJW
    if (mDataSJW == 0) {
    399e:	8c 85       	ldd	r24, Y+12	; 0x0c
    39a0:	81 11       	cpse	r24, r1
    39a2:	03 c0       	rjmp	.+6      	; 0x39aa <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xdc>
      errorCode |= kDataSJWIsZero ;
    39a4:	68 94       	set
    39a6:	d7 f8       	bld	r13, 7
    39a8:	0c c0       	rjmp	.+24     	; 0x39c2 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xf4>
    }else if (mDataSJW > MAX_DATA_SJW) {
    39aa:	81 31       	cpi	r24, 0x11	; 17
    39ac:	10 f0       	brcs	.+4      	; 0x39b2 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xe4>
      errorCode |= kDataSJWIsGreaterThan16 ;
    39ae:	68 94       	set
    39b0:	e0 f8       	bld	r14, 0
    }
    if (mDataSJW > mDataPhaseSegment1) {
    39b2:	28 17       	cp	r18, r24
    39b4:	10 f4       	brcc	.+4      	; 0x39ba <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xec>
      errorCode |= kDataSJWIsGreaterThanPhaseSegment1 ;
    39b6:	68 94       	set
    39b8:	e1 f8       	bld	r14, 1
    }
    if (mDataSJW > mDataPhaseSegment2) {
    39ba:	98 17       	cp	r25, r24
    39bc:	10 f4       	brcc	.+4      	; 0x39c2 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xf4>
      errorCode |= kDataSJWIsGreaterThanPhaseSegment2 ;
    39be:	68 94       	set
    39c0:	e2 f8       	bld	r14, 2
    }
  }
//---
  return errorCode ;
}
    39c2:	c7 01       	movw	r24, r14
    39c4:	b6 01       	movw	r22, r12
    39c6:	df 91       	pop	r29
    39c8:	cf 91       	pop	r28
    39ca:	ff 90       	pop	r15
    39cc:	ef 90       	pop	r14
    39ce:	df 90       	pop	r13
    39d0:	cf 90       	pop	r12
    39d2:	08 95       	ret

000039d4 <_ZNK18ACAN2517FDSettings8ramUsageEv>:

//----------------------------------------------------------------------------------------------------------------------
//   RAM USAGE
//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::ramUsage (void) const {
    39d4:	cf 92       	push	r12
    39d6:	df 92       	push	r13
    39d8:	ef 92       	push	r14
    39da:	ff 92       	push	r15
    39dc:	cf 93       	push	r28
    39de:	df 93       	push	r29
    39e0:	fc 01       	movw	r30, r24

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::objectSizeForPayload (const PayloadSize inPayload) {
  static const uint8_t kPayload [8] = {16, 20, 24, 28, 32, 40, 56, 72} ;
  return kPayload [inPayload] ;
    39e2:	a1 a1       	ldd	r26, Z+33	; 0x21
    39e4:	b0 e0       	ldi	r27, 0x00	; 0
    39e6:	a4 55       	subi	r26, 0x54	; 84
    39e8:	bd 4f       	sbci	r27, 0xFD	; 253
    39ea:	ac 91       	ld	r26, X
//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::ramUsage (void) const {
  uint32_t result = 0 ;
//--- TXQ
  result += objectSizeForPayload (mControllerTXQBufferPayload) * mControllerTXQSize ;
    39ec:	20 a1       	ldd	r18, Z+32	; 0x20

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::objectSizeForPayload (const PayloadSize inPayload) {
  static const uint8_t kPayload [8] = {16, 20, 24, 28, 32, 40, 56, 72} ;
  return kPayload [inPayload] ;
    39ee:	c6 a1       	ldd	r28, Z+38	; 0x26
    39f0:	d0 e0       	ldi	r29, 0x00	; 0
    39f2:	c4 55       	subi	r28, 0x54	; 84
    39f4:	dd 4f       	sbci	r29, 0xFD	; 253
    39f6:	48 81       	ld	r20, Y
uint32_t ACAN2517FDSettings::ramUsage (void) const {
  uint32_t result = 0 ;
//--- TXQ
  result += objectSizeForPayload (mControllerTXQBufferPayload) * mControllerTXQSize ;
//--- Receive FIFO (FIFO #1)
  result += objectSizeForPayload (mControllerReceiveFIFOPayload) * mControllerReceiveFIFOSize ;
    39f8:	57 a1       	ldd	r21, Z+39	; 0x27
    39fa:	30 e0       	ldi	r19, 0x00	; 0
    39fc:	b0 e0       	ldi	r27, 0x00	; 0
    39fe:	0e 94 3e 24 	call	0x487c	; 0x487c <__umulhisi3>
    3a02:	6b 01       	movw	r12, r22
    3a04:	7c 01       	movw	r14, r24
    3a06:	25 2f       	mov	r18, r21
    3a08:	30 e0       	ldi	r19, 0x00	; 0
    3a0a:	a4 2f       	mov	r26, r20
    3a0c:	b0 e0       	ldi	r27, 0x00	; 0
    3a0e:	0e 94 3e 24 	call	0x487c	; 0x487c <__umulhisi3>
    3a12:	c6 0e       	add	r12, r22
    3a14:	d7 1e       	adc	r13, r23
    3a16:	e8 1e       	adc	r14, r24
    3a18:	f9 1e       	adc	r15, r25

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::objectSizeForPayload (const PayloadSize inPayload) {
  static const uint8_t kPayload [8] = {16, 20, 24, 28, 32, 40, 56, 72} ;
  return kPayload [inPayload] ;
    3a1a:	a5 8d       	ldd	r26, Z+29	; 0x1d
    3a1c:	b0 e0       	ldi	r27, 0x00	; 0
    3a1e:	a4 55       	subi	r26, 0x54	; 84
    3a20:	bd 4f       	sbci	r27, 0xFD	; 253
    3a22:	2c 91       	ld	r18, X
//--- TXQ
  result += objectSizeForPayload (mControllerTXQBufferPayload) * mControllerTXQSize ;
//--- Receive FIFO (FIFO #1)
  result += objectSizeForPayload (mControllerReceiveFIFOPayload) * mControllerReceiveFIFOSize ;
//--- Send FIFO (FIFO #2)
  result += objectSizeForPayload (mControllerTransmitFIFOPayload) * mControllerTransmitFIFOSize ;
    3a24:	a4 8d       	ldd	r26, Z+28	; 0x1c
//---
  return result ;
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	b0 e0       	ldi	r27, 0x00	; 0
    3a2a:	0e 94 3e 24 	call	0x487c	; 0x487c <__umulhisi3>
    3a2e:	6c 0d       	add	r22, r12
    3a30:	7d 1d       	adc	r23, r13
    3a32:	8e 1d       	adc	r24, r14
    3a34:	9f 1d       	adc	r25, r15
}
    3a36:	df 91       	pop	r29
    3a38:	cf 91       	pop	r28
    3a3a:	ff 90       	pop	r15
    3a3c:	ef 90       	pop	r14
    3a3e:	df 90       	pop	r13
    3a40:	cf 90       	pop	r12
    3a42:	08 95       	ret

00003a44 <_ZN18ACAN2517FDSettings20objectSizeForPayloadENS_11PayloadSizeE>:

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::objectSizeForPayload (const PayloadSize inPayload) {
  static const uint8_t kPayload [8] = {16, 20, 24, 28, 32, 40, 56, 72} ;
  return kPayload [inPayload] ;
    3a44:	e8 2f       	mov	r30, r24
    3a46:	f0 e0       	ldi	r31, 0x00	; 0
    3a48:	e4 55       	subi	r30, 0x54	; 84
    3a4a:	fd 4f       	sbci	r31, 0xFD	; 253
    3a4c:	60 81       	ld	r22, Z
    3a4e:	70 e0       	ldi	r23, 0x00	; 0
    3a50:	80 e0       	ldi	r24, 0x00	; 0
    3a52:	90 e0       	ldi	r25, 0x00	; 0
}
    3a54:	08 95       	ret

00003a56 <_ZN8SPIClass5beginEv>:
    interruptMode = 0;
    #ifdef SPI_TRANSACTION_MISMATCH_LED
    inTransactionFlag = 0;
    #endif
  }
  SREG = sreg;
    3a56:	cf 93       	push	r28
    3a58:	cf b7       	in	r28, 0x3f	; 63
    3a5a:	f8 94       	cli
    3a5c:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <_ZN8SPIClass11initializedE>
    3a60:	81 11       	cpse	r24, r1
    3a62:	27 c0       	rjmp	.+78     	; 0x3ab2 <_ZN8SPIClass5beginEv+0x5c>
    3a64:	e1 e3       	ldi	r30, 0x31	; 49
    3a66:	f1 e0       	ldi	r31, 0x01	; 1
    3a68:	84 91       	lpm	r24, Z
    3a6a:	ed e1       	ldi	r30, 0x1D	; 29
    3a6c:	f1 e0       	ldi	r31, 0x01	; 1
    3a6e:	94 91       	lpm	r25, Z
    3a70:	e8 2f       	mov	r30, r24
    3a72:	f0 e0       	ldi	r31, 0x00	; 0
    3a74:	ee 0f       	add	r30, r30
    3a76:	ff 1f       	adc	r31, r31
    3a78:	eb 5b       	subi	r30, 0xBB	; 187
    3a7a:	fe 4f       	sbci	r31, 0xFE	; 254
    3a7c:	a5 91       	lpm	r26, Z+
    3a7e:	b4 91       	lpm	r27, Z
    3a80:	ec 91       	ld	r30, X
    3a82:	e9 23       	and	r30, r25
    3a84:	21 f4       	brne	.+8      	; 0x3a8e <_ZN8SPIClass5beginEv+0x38>
    3a86:	61 e0       	ldi	r22, 0x01	; 1
    3a88:	8a e0       	ldi	r24, 0x0A	; 10
    3a8a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <digitalWrite>
    3a8e:	61 e0       	ldi	r22, 0x01	; 1
    3a90:	8a e0       	ldi	r24, 0x0A	; 10
    3a92:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <pinMode>
    3a96:	8c b5       	in	r24, 0x2c	; 44
    3a98:	80 61       	ori	r24, 0x10	; 16
    3a9a:	8c bd       	out	0x2c, r24	; 44
    3a9c:	8c b5       	in	r24, 0x2c	; 44
    3a9e:	80 64       	ori	r24, 0x40	; 64
    3aa0:	8c bd       	out	0x2c, r24	; 44
    3aa2:	61 e0       	ldi	r22, 0x01	; 1
    3aa4:	8d e0       	ldi	r24, 0x0D	; 13
    3aa6:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <pinMode>
    3aaa:	61 e0       	ldi	r22, 0x01	; 1
    3aac:	8b e0       	ldi	r24, 0x0B	; 11
    3aae:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <pinMode>
    3ab2:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <_ZN8SPIClass11initializedE>
    3ab6:	8f 5f       	subi	r24, 0xFF	; 255
    3ab8:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <_ZN8SPIClass11initializedE>
    3abc:	cf bf       	out	0x3f, r28	; 63
    3abe:	cf 91       	pop	r28
    3ac0:	08 95       	ret

00003ac2 <_ZN8SPIClass14usingInterruptEh>:
#endif

void SPIClass::usingInterrupt(uint8_t interruptNumber)
{
  uint8_t mask = 0;
  uint8_t sreg = SREG;
    3ac2:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    3ac4:	f8 94       	cli
  switch (interruptNumber) {
    3ac6:	88 23       	and	r24, r24
    3ac8:	49 f0       	breq	.+18     	; 0x3adc <_ZN8SPIClass14usingInterruptEh+0x1a>
    3aca:	81 30       	cpi	r24, 0x01	; 1
    3acc:	11 f4       	brne	.+4      	; 0x3ad2 <_ZN8SPIClass14usingInterruptEh+0x10>
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
  #endif
  #ifdef SPI_INT1_MASK
  case 1: mask = SPI_INT1_MASK; break;
    3ace:	82 e0       	ldi	r24, 0x02	; 2
    3ad0:	06 c0       	rjmp	.+12     	; 0x3ade <_ZN8SPIClass14usingInterruptEh+0x1c>
  #endif
  #ifdef SPI_INT7_MASK
  case 7: mask = SPI_INT7_MASK; break;
  #endif
  default:
    interruptMode = 2;
    3ad2:	82 e0       	ldi	r24, 0x02	; 2
    3ad4:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <_ZN8SPIClass13interruptModeE>
  #endif
#endif

void SPIClass::usingInterrupt(uint8_t interruptNumber)
{
  uint8_t mask = 0;
    3ad8:	80 e0       	ldi	r24, 0x00	; 0
  #ifdef SPI_INT7_MASK
  case 7: mask = SPI_INT7_MASK; break;
  #endif
  default:
    interruptMode = 2;
    break;
    3ada:	01 c0       	rjmp	.+2      	; 0x3ade <_ZN8SPIClass14usingInterruptEh+0x1c>
  uint8_t mask = 0;
  uint8_t sreg = SREG;
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
  switch (interruptNumber) {
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
    3adc:	81 e0       	ldi	r24, 0x01	; 1
  #endif
  default:
    interruptMode = 2;
    break;
  }
  interruptMask |= mask;
    3ade:	20 91 70 05 	lds	r18, 0x0570	; 0x800570 <_ZN8SPIClass13interruptMaskE>
    3ae2:	82 2b       	or	r24, r18
    3ae4:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <_ZN8SPIClass13interruptMaskE>
  if (!interruptMode)
    3ae8:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <_ZN8SPIClass13interruptModeE>
    3aec:	81 11       	cpse	r24, r1
    3aee:	03 c0       	rjmp	.+6      	; 0x3af6 <_ZN8SPIClass14usingInterruptEh+0x34>
    interruptMode = 1;
    3af0:	81 e0       	ldi	r24, 0x01	; 1
    3af2:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <_ZN8SPIClass13interruptModeE>
  SREG = sreg;
    3af6:	9f bf       	out	0x3f, r25	; 63
    3af8:	08 95       	ret

00003afa <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    3afa:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <_ZN7TwoWire14rxBufferLengthE>
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <_ZN7TwoWire13rxBufferIndexE>
    3b04:	82 1b       	sub	r24, r18
    3b06:	91 09       	sbc	r25, r1
    3b08:	08 95       	ret

00003b0a <_ZN7TwoWire4readEv>:
    3b0a:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <_ZN7TwoWire13rxBufferIndexE>
    3b0e:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <_ZN7TwoWire14rxBufferLengthE>
    3b12:	98 17       	cp	r25, r24
    3b14:	50 f4       	brcc	.+20     	; 0x3b2a <_ZN7TwoWire4readEv+0x20>
    3b16:	e9 2f       	mov	r30, r25
    3b18:	f0 e0       	ldi	r31, 0x00	; 0
    3b1a:	e6 55       	subi	r30, 0x56	; 86
    3b1c:	fa 4f       	sbci	r31, 0xFA	; 250
    3b1e:	20 81       	ld	r18, Z
    3b20:	30 e0       	ldi	r19, 0x00	; 0
    3b22:	9f 5f       	subi	r25, 0xFF	; 255
    3b24:	90 93 a9 05 	sts	0x05A9, r25	; 0x8005a9 <_ZN7TwoWire13rxBufferIndexE>
    3b28:	02 c0       	rjmp	.+4      	; 0x3b2e <_ZN7TwoWire4readEv+0x24>
    3b2a:	2f ef       	ldi	r18, 0xFF	; 255
    3b2c:	3f ef       	ldi	r19, 0xFF	; 255
    3b2e:	c9 01       	movw	r24, r18
    3b30:	08 95       	ret

00003b32 <_ZN7TwoWire4peekEv>:
    3b32:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <_ZN7TwoWire13rxBufferIndexE>
    3b36:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <_ZN7TwoWire14rxBufferLengthE>
    3b3a:	e8 17       	cp	r30, r24
    3b3c:	30 f4       	brcc	.+12     	; 0x3b4a <_ZN7TwoWire4peekEv+0x18>
    3b3e:	f0 e0       	ldi	r31, 0x00	; 0
    3b40:	e6 55       	subi	r30, 0x56	; 86
    3b42:	fa 4f       	sbci	r31, 0xFA	; 250
    3b44:	80 81       	ld	r24, Z
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	08 95       	ret
    3b4a:	8f ef       	ldi	r24, 0xFF	; 255
    3b4c:	9f ef       	ldi	r25, 0xFF	; 255
    3b4e:	08 95       	ret

00003b50 <_ZN7TwoWire5flushEv>:
    3b50:	08 95       	ret

00003b52 <_ZN7TwoWire16onReceiveServiceEPhi>:
    3b52:	cf 93       	push	r28
    3b54:	df 93       	push	r29
    3b56:	ec 01       	movw	r28, r24
    3b58:	e0 91 80 05 	lds	r30, 0x0580	; 0x800580 <_ZN7TwoWire14user_onReceiveE>
    3b5c:	f0 91 81 05 	lds	r31, 0x0581	; 0x800581 <_ZN7TwoWire14user_onReceiveE+0x1>
    3b60:	30 97       	sbiw	r30, 0x00	; 0
    3b62:	f1 f0       	breq	.+60     	; 0x3ba0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3b64:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <_ZN7TwoWire13rxBufferIndexE>
    3b68:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <_ZN7TwoWire14rxBufferLengthE>
    3b6c:	98 17       	cp	r25, r24
    3b6e:	c0 f0       	brcs	.+48     	; 0x3ba0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	29 2f       	mov	r18, r25
    3b74:	30 e0       	ldi	r19, 0x00	; 0
    3b76:	26 17       	cp	r18, r22
    3b78:	37 07       	cpc	r19, r23
    3b7a:	54 f4       	brge	.+20     	; 0x3b90 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    3b7c:	de 01       	movw	r26, r28
    3b7e:	a2 0f       	add	r26, r18
    3b80:	b3 1f       	adc	r27, r19
    3b82:	4c 91       	ld	r20, X
    3b84:	d9 01       	movw	r26, r18
    3b86:	a6 55       	subi	r26, 0x56	; 86
    3b88:	ba 4f       	sbci	r27, 0xFA	; 250
    3b8a:	4c 93       	st	X, r20
    3b8c:	9f 5f       	subi	r25, 0xFF	; 255
    3b8e:	f1 cf       	rjmp	.-30     	; 0x3b72 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    3b90:	10 92 a9 05 	sts	0x05A9, r1	; 0x8005a9 <_ZN7TwoWire13rxBufferIndexE>
    3b94:	60 93 a8 05 	sts	0x05A8, r22	; 0x8005a8 <_ZN7TwoWire14rxBufferLengthE>
    3b98:	cb 01       	movw	r24, r22
    3b9a:	df 91       	pop	r29
    3b9c:	cf 91       	pop	r28
    3b9e:	09 94       	ijmp
    3ba0:	df 91       	pop	r29
    3ba2:	cf 91       	pop	r28
    3ba4:	08 95       	ret

00003ba6 <_ZN7TwoWire16onRequestServiceEv>:
    3ba6:	e0 91 82 05 	lds	r30, 0x0582	; 0x800582 <_ZN7TwoWire14user_onRequestE>
    3baa:	f0 91 83 05 	lds	r31, 0x0583	; 0x800583 <_ZN7TwoWire14user_onRequestE+0x1>
    3bae:	30 97       	sbiw	r30, 0x00	; 0
    3bb0:	29 f0       	breq	.+10     	; 0x3bbc <_ZN7TwoWire16onRequestServiceEv+0x16>
    3bb2:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <_ZN7TwoWire13txBufferIndexE>
    3bb6:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <_ZN7TwoWire14txBufferLengthE>
    3bba:	09 94       	ijmp
    3bbc:	08 95       	ret

00003bbe <_ZN7TwoWire5writeEPKhj>:
    3bbe:	cf 92       	push	r12
    3bc0:	df 92       	push	r13
    3bc2:	ef 92       	push	r14
    3bc4:	ff 92       	push	r15
    3bc6:	0f 93       	push	r16
    3bc8:	1f 93       	push	r17
    3bca:	cf 93       	push	r28
    3bcc:	df 93       	push	r29
    3bce:	7c 01       	movw	r14, r24
    3bd0:	cb 01       	movw	r24, r22
    3bd2:	8a 01       	movw	r16, r20
    3bd4:	20 91 84 05 	lds	r18, 0x0584	; 0x800584 <_ZN7TwoWire12transmittingE>
    3bd8:	22 23       	and	r18, r18
    3bda:	89 f0       	breq	.+34     	; 0x3bfe <_ZN7TwoWire5writeEPKhj+0x40>
    3bdc:	eb 01       	movw	r28, r22
    3bde:	6b 01       	movw	r12, r22
    3be0:	c4 0e       	add	r12, r20
    3be2:	d5 1e       	adc	r13, r21
    3be4:	cc 15       	cp	r28, r12
    3be6:	dd 05       	cpc	r29, r13
    3be8:	69 f0       	breq	.+26     	; 0x3c04 <_ZN7TwoWire5writeEPKhj+0x46>
    3bea:	69 91       	ld	r22, Y+
    3bec:	d7 01       	movw	r26, r14
    3bee:	ed 91       	ld	r30, X+
    3bf0:	fc 91       	ld	r31, X
    3bf2:	01 90       	ld	r0, Z+
    3bf4:	f0 81       	ld	r31, Z
    3bf6:	e0 2d       	mov	r30, r0
    3bf8:	c7 01       	movw	r24, r14
    3bfa:	09 95       	icall
    3bfc:	f3 cf       	rjmp	.-26     	; 0x3be4 <_ZN7TwoWire5writeEPKhj+0x26>
    3bfe:	64 2f       	mov	r22, r20
    3c00:	0e 94 76 20 	call	0x40ec	; 0x40ec <twi_transmit>
    3c04:	c8 01       	movw	r24, r16
    3c06:	df 91       	pop	r29
    3c08:	cf 91       	pop	r28
    3c0a:	1f 91       	pop	r17
    3c0c:	0f 91       	pop	r16
    3c0e:	ff 90       	pop	r15
    3c10:	ef 90       	pop	r14
    3c12:	df 90       	pop	r13
    3c14:	cf 90       	pop	r12
    3c16:	08 95       	ret

00003c18 <_ZN7TwoWire5writeEh>:
    3c18:	cf 93       	push	r28
    3c1a:	df 93       	push	r29
    3c1c:	1f 92       	push	r1
    3c1e:	cd b7       	in	r28, 0x3d	; 61
    3c20:	de b7       	in	r29, 0x3e	; 62
    3c22:	69 83       	std	Y+1, r22	; 0x01
    3c24:	20 91 84 05 	lds	r18, 0x0584	; 0x800584 <_ZN7TwoWire12transmittingE>
    3c28:	22 23       	and	r18, r18
    3c2a:	d1 f0       	breq	.+52     	; 0x3c60 <_ZN7TwoWire5writeEh+0x48>
    3c2c:	20 91 85 05 	lds	r18, 0x0585	; 0x800585 <_ZN7TwoWire14txBufferLengthE>
    3c30:	20 32       	cpi	r18, 0x20	; 32
    3c32:	40 f0       	brcs	.+16     	; 0x3c44 <_ZN7TwoWire5writeEh+0x2c>
    3c34:	21 e0       	ldi	r18, 0x01	; 1
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	fc 01       	movw	r30, r24
    3c3a:	33 83       	std	Z+3, r19	; 0x03
    3c3c:	22 83       	std	Z+2, r18	; 0x02
    3c3e:	80 e0       	ldi	r24, 0x00	; 0
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	15 c0       	rjmp	.+42     	; 0x3c6e <_ZN7TwoWire5writeEh+0x56>
    3c44:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <_ZN7TwoWire13txBufferIndexE>
    3c48:	e8 2f       	mov	r30, r24
    3c4a:	f0 e0       	ldi	r31, 0x00	; 0
    3c4c:	e9 57       	subi	r30, 0x79	; 121
    3c4e:	fa 4f       	sbci	r31, 0xFA	; 250
    3c50:	99 81       	ldd	r25, Y+1	; 0x01
    3c52:	90 83       	st	Z, r25
    3c54:	8f 5f       	subi	r24, 0xFF	; 255
    3c56:	80 93 86 05 	sts	0x0586, r24	; 0x800586 <_ZN7TwoWire13txBufferIndexE>
    3c5a:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <_ZN7TwoWire14txBufferLengthE>
    3c5e:	05 c0       	rjmp	.+10     	; 0x3c6a <_ZN7TwoWire5writeEh+0x52>
    3c60:	61 e0       	ldi	r22, 0x01	; 1
    3c62:	ce 01       	movw	r24, r28
    3c64:	01 96       	adiw	r24, 0x01	; 1
    3c66:	0e 94 76 20 	call	0x40ec	; 0x40ec <twi_transmit>
    3c6a:	81 e0       	ldi	r24, 0x01	; 1
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	0f 90       	pop	r0
    3c70:	df 91       	pop	r29
    3c72:	cf 91       	pop	r28
    3c74:	08 95       	ret

00003c76 <_ZN7TwoWireC1Ev>:
    3c76:	fc 01       	movw	r30, r24
    3c78:	13 82       	std	Z+3, r1	; 0x03
    3c7a:	12 82       	std	Z+2, r1	; 0x02
    3c7c:	88 ee       	ldi	r24, 0xE8	; 232
    3c7e:	93 e0       	ldi	r25, 0x03	; 3
    3c80:	a0 e0       	ldi	r26, 0x00	; 0
    3c82:	b0 e0       	ldi	r27, 0x00	; 0
    3c84:	84 83       	std	Z+4, r24	; 0x04
    3c86:	95 83       	std	Z+5, r25	; 0x05
    3c88:	a6 83       	std	Z+6, r26	; 0x06
    3c8a:	b7 83       	std	Z+7, r27	; 0x07
    3c8c:	88 eb       	ldi	r24, 0xB8	; 184
    3c8e:	92 e0       	ldi	r25, 0x02	; 2
    3c90:	91 83       	std	Z+1, r25	; 0x01
    3c92:	80 83       	st	Z, r24
    3c94:	08 95       	ret

00003c96 <_ZN7TwoWire5beginEv>:
    3c96:	10 92 a9 05 	sts	0x05A9, r1	; 0x8005a9 <_ZN7TwoWire13rxBufferIndexE>
    3c9a:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <_ZN7TwoWire14rxBufferLengthE>
    3c9e:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <_ZN7TwoWire13txBufferIndexE>
    3ca2:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <_ZN7TwoWire14txBufferLengthE>
    3ca6:	0e 94 37 20 	call	0x406e	; 0x406e <twi_init>
    3caa:	83 ed       	ldi	r24, 0xD3	; 211
    3cac:	9d e1       	ldi	r25, 0x1D	; 29
    3cae:	0e 94 a3 20 	call	0x4146	; 0x4146 <twi_attachSlaveTxEvent>
    3cb2:	89 ea       	ldi	r24, 0xA9	; 169
    3cb4:	9d e1       	ldi	r25, 0x1D	; 29
    3cb6:	0c 94 9e 20 	jmp	0x413c	; 0x413c <twi_attachSlaveRxEvent>

00003cba <_ZN7TwoWire8setClockEm>:
    3cba:	cb 01       	movw	r24, r22
    3cbc:	ba 01       	movw	r22, r20
    3cbe:	0c 94 62 20 	jmp	0x40c4	; 0x40c4 <twi_setFrequency>

00003cc2 <_ZN7TwoWire17beginTransmissionEh>:
    3cc2:	81 e0       	ldi	r24, 0x01	; 1
    3cc4:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <_ZN7TwoWire12transmittingE>
    3cc8:	60 93 a7 05 	sts	0x05A7, r22	; 0x8005a7 <_ZN7TwoWire9txAddressE>
    3ccc:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <_ZN7TwoWire13txBufferIndexE>
    3cd0:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <_ZN7TwoWire14txBufferLengthE>
    3cd4:	08 95       	ret

00003cd6 <_ZN7TwoWire15endTransmissionEh>:
    3cd6:	0f 93       	push	r16
    3cd8:	06 2f       	mov	r16, r22
    3cda:	21 e0       	ldi	r18, 0x01	; 1
    3cdc:	40 91 85 05 	lds	r20, 0x0585	; 0x800585 <_ZN7TwoWire14txBufferLengthE>
    3ce0:	67 e8       	ldi	r22, 0x87	; 135
    3ce2:	75 e0       	ldi	r23, 0x05	; 5
    3ce4:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <_ZN7TwoWire9txAddressE>
    3ce8:	0e 94 ad 21 	call	0x435a	; 0x435a <twi_writeTo>
    3cec:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <_ZN7TwoWire13txBufferIndexE>
    3cf0:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <_ZN7TwoWire14txBufferLengthE>
    3cf4:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <_ZN7TwoWire12transmittingE>
    3cf8:	0f 91       	pop	r16
    3cfa:	08 95       	ret

00003cfc <_ZN7TwoWire11requestFromEhhmhh>:
    3cfc:	4f 92       	push	r4
    3cfe:	5f 92       	push	r5
    3d00:	6f 92       	push	r6
    3d02:	7f 92       	push	r7
    3d04:	af 92       	push	r10
    3d06:	bf 92       	push	r11
    3d08:	cf 92       	push	r12
    3d0a:	ef 92       	push	r14
    3d0c:	ff 92       	push	r15
    3d0e:	0f 93       	push	r16
    3d10:	1f 93       	push	r17
    3d12:	cf 93       	push	r28
    3d14:	df 93       	push	r29
    3d16:	5c 01       	movw	r10, r24
    3d18:	f6 2e       	mov	r15, r22
    3d1a:	d4 2f       	mov	r29, r20
    3d1c:	28 01       	movw	r4, r16
    3d1e:	39 01       	movw	r6, r18
    3d20:	ee 20       	and	r14, r14
    3d22:	21 f1       	breq	.+72     	; 0x3d6c <_ZN7TwoWire11requestFromEhhmhh+0x70>
    3d24:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <_ZN7TwoWire17beginTransmissionEh>
    3d28:	ce 2d       	mov	r28, r14
    3d2a:	c4 30       	cpi	r28, 0x04	; 4
    3d2c:	08 f0       	brcs	.+2      	; 0x3d30 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    3d2e:	c3 e0       	ldi	r28, 0x03	; 3
    3d30:	c1 50       	subi	r28, 0x01	; 1
    3d32:	c0 f0       	brcs	.+48     	; 0x3d64 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    3d34:	28 e0       	ldi	r18, 0x08	; 8
    3d36:	c2 9f       	mul	r28, r18
    3d38:	c0 01       	movw	r24, r0
    3d3a:	11 24       	eor	r1, r1
    3d3c:	a3 01       	movw	r20, r6
    3d3e:	92 01       	movw	r18, r4
    3d40:	04 c0       	rjmp	.+8      	; 0x3d4a <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    3d42:	56 95       	lsr	r21
    3d44:	47 95       	ror	r20
    3d46:	37 95       	ror	r19
    3d48:	27 95       	ror	r18
    3d4a:	8a 95       	dec	r24
    3d4c:	d2 f7       	brpl	.-12     	; 0x3d42 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    3d4e:	ca 01       	movw	r24, r20
    3d50:	b9 01       	movw	r22, r18
    3d52:	d5 01       	movw	r26, r10
    3d54:	ed 91       	ld	r30, X+
    3d56:	fc 91       	ld	r31, X
    3d58:	01 90       	ld	r0, Z+
    3d5a:	f0 81       	ld	r31, Z
    3d5c:	e0 2d       	mov	r30, r0
    3d5e:	c5 01       	movw	r24, r10
    3d60:	09 95       	icall
    3d62:	e6 cf       	rjmp	.-52     	; 0x3d30 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    3d64:	60 e0       	ldi	r22, 0x00	; 0
    3d66:	c5 01       	movw	r24, r10
    3d68:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <_ZN7TwoWire15endTransmissionEh>
    3d6c:	4d 2f       	mov	r20, r29
    3d6e:	d1 32       	cpi	r29, 0x21	; 33
    3d70:	08 f0       	brcs	.+2      	; 0x3d74 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    3d72:	40 e2       	ldi	r20, 0x20	; 32
    3d74:	2c 2d       	mov	r18, r12
    3d76:	6a ea       	ldi	r22, 0xAA	; 170
    3d78:	75 e0       	ldi	r23, 0x05	; 5
    3d7a:	8f 2d       	mov	r24, r15
    3d7c:	0e 94 c4 20 	call	0x4188	; 0x4188 <twi_readFrom>
    3d80:	10 92 a9 05 	sts	0x05A9, r1	; 0x8005a9 <_ZN7TwoWire13rxBufferIndexE>
    3d84:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <_ZN7TwoWire14rxBufferLengthE>
    3d88:	df 91       	pop	r29
    3d8a:	cf 91       	pop	r28
    3d8c:	1f 91       	pop	r17
    3d8e:	0f 91       	pop	r16
    3d90:	ff 90       	pop	r15
    3d92:	ef 90       	pop	r14
    3d94:	cf 90       	pop	r12
    3d96:	bf 90       	pop	r11
    3d98:	af 90       	pop	r10
    3d9a:	7f 90       	pop	r7
    3d9c:	6f 90       	pop	r6
    3d9e:	5f 90       	pop	r5
    3da0:	4f 90       	pop	r4
    3da2:	08 95       	ret

00003da4 <_ZN7TwoWire11requestFromEhhh>:
    3da4:	cf 92       	push	r12
    3da6:	ef 92       	push	r14
    3da8:	0f 93       	push	r16
    3daa:	1f 93       	push	r17
    3dac:	c2 2e       	mov	r12, r18
    3dae:	e1 2c       	mov	r14, r1
    3db0:	00 e0       	ldi	r16, 0x00	; 0
    3db2:	10 e0       	ldi	r17, 0x00	; 0
    3db4:	98 01       	movw	r18, r16
    3db6:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <_ZN7TwoWire11requestFromEhhmhh>
    3dba:	1f 91       	pop	r17
    3dbc:	0f 91       	pop	r16
    3dbe:	ef 90       	pop	r14
    3dc0:	cf 90       	pop	r12
    3dc2:	08 95       	ret

00003dc4 <_ZN7TwoWire11requestFromEhh>:
    3dc4:	21 e0       	ldi	r18, 0x01	; 1
    3dc6:	0c 94 d2 1e 	jmp	0x3da4	; 0x3da4 <_ZN7TwoWire11requestFromEhhh>

00003dca <_ZN7TwoWire15endTransmissionEv>:
    3dca:	61 e0       	ldi	r22, 0x01	; 1
    3dcc:	0c 94 6b 1e 	jmp	0x3cd6	; 0x3cd6 <_ZN7TwoWire15endTransmissionEh>

00003dd0 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3dd0:	84 e7       	ldi	r24, 0x74	; 116
    3dd2:	95 e0       	ldi	r25, 0x05	; 5
    3dd4:	0c 94 3b 1e 	jmp	0x3c76	; 0x3c76 <_ZN7TwoWireC1Ev>

00003dd8 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3dd8:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    3dda:	91 8d       	ldd	r25, Z+25	; 0x19
    3ddc:	22 8d       	ldd	r18, Z+26	; 0x1a
    3dde:	89 2f       	mov	r24, r25
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	80 5c       	subi	r24, 0xC0	; 192
    3de4:	9f 4f       	sbci	r25, 0xFF	; 255
    3de6:	82 1b       	sub	r24, r18
    3de8:	91 09       	sbc	r25, r1
}
    3dea:	8f 73       	andi	r24, 0x3F	; 63
    3dec:	99 27       	eor	r25, r25
    3dee:	08 95       	ret

00003df0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3df0:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3df2:	91 8d       	ldd	r25, Z+25	; 0x19
    3df4:	82 8d       	ldd	r24, Z+26	; 0x1a
    3df6:	98 17       	cp	r25, r24
    3df8:	31 f0       	breq	.+12     	; 0x3e06 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3dfa:	82 8d       	ldd	r24, Z+26	; 0x1a
    3dfc:	e8 0f       	add	r30, r24
    3dfe:	f1 1d       	adc	r31, r1
    3e00:	85 8d       	ldd	r24, Z+29	; 0x1d
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3e06:	8f ef       	ldi	r24, 0xFF	; 255
    3e08:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3e0a:	08 95       	ret

00003e0c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3e0c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3e0e:	91 8d       	ldd	r25, Z+25	; 0x19
    3e10:	82 8d       	ldd	r24, Z+26	; 0x1a
    3e12:	98 17       	cp	r25, r24
    3e14:	61 f0       	breq	.+24     	; 0x3e2e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3e16:	82 8d       	ldd	r24, Z+26	; 0x1a
    3e18:	df 01       	movw	r26, r30
    3e1a:	a8 0f       	add	r26, r24
    3e1c:	b1 1d       	adc	r27, r1
    3e1e:	5d 96       	adiw	r26, 0x1d	; 29
    3e20:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3e22:	92 8d       	ldd	r25, Z+26	; 0x1a
    3e24:	9f 5f       	subi	r25, 0xFF	; 255
    3e26:	9f 73       	andi	r25, 0x3F	; 63
    3e28:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3e2e:	8f ef       	ldi	r24, 0xFF	; 255
    3e30:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3e32:	08 95       	ret

00003e34 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    3e34:	fc 01       	movw	r30, r24
    3e36:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    3e38:	44 8d       	ldd	r20, Z+28	; 0x1c
    3e3a:	25 2f       	mov	r18, r21
    3e3c:	30 e0       	ldi	r19, 0x00	; 0
    3e3e:	84 2f       	mov	r24, r20
    3e40:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    3e42:	82 1b       	sub	r24, r18
    3e44:	93 0b       	sbc	r25, r19
    3e46:	54 17       	cp	r21, r20
    3e48:	10 f0       	brcs	.+4      	; 0x3e4e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    3e4a:	cf 96       	adiw	r24, 0x3f	; 63
    3e4c:	08 95       	ret
  return tail - head - 1;
    3e4e:	01 97       	sbiw	r24, 0x01	; 1
}
    3e50:	08 95       	ret

00003e52 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3e52:	8e ef       	ldi	r24, 0xFE	; 254
    3e54:	99 e0       	ldi	r25, 0x09	; 9
    3e56:	89 2b       	or	r24, r25
    3e58:	49 f0       	breq	.+18     	; 0x3e6c <_Z14serialEventRunv+0x1a>
    3e5a:	80 e0       	ldi	r24, 0x00	; 0
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	89 2b       	or	r24, r25
    3e60:	29 f0       	breq	.+10     	; 0x3e6c <_Z14serialEventRunv+0x1a>
    3e62:	0e 94 fe 09 	call	0x13fc	; 0x13fc <_Z17Serial0_availablev>
    3e66:	81 11       	cpse	r24, r1
    3e68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3e6c:	08 95       	ret

00003e6e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3e6e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3e70:	84 8d       	ldd	r24, Z+28	; 0x1c
    3e72:	df 01       	movw	r26, r30
    3e74:	a8 0f       	add	r26, r24
    3e76:	b1 1d       	adc	r27, r1
    3e78:	a3 5a       	subi	r26, 0xA3	; 163
    3e7a:	bf 4f       	sbci	r27, 0xFF	; 255
    3e7c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3e7e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	01 96       	adiw	r24, 0x01	; 1
    3e84:	8f 73       	andi	r24, 0x3F	; 63
    3e86:	99 27       	eor	r25, r25
    3e88:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3e8a:	a6 89       	ldd	r26, Z+22	; 0x16
    3e8c:	b7 89       	ldd	r27, Z+23	; 0x17
    3e8e:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3e90:	a0 89       	ldd	r26, Z+16	; 0x10
    3e92:	b1 89       	ldd	r27, Z+17	; 0x11
    3e94:	8c 91       	ld	r24, X
    3e96:	83 70       	andi	r24, 0x03	; 3
    3e98:	80 64       	ori	r24, 0x40	; 64
    3e9a:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    3e9c:	93 8d       	ldd	r25, Z+27	; 0x1b
    3e9e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3ea0:	98 13       	cpse	r25, r24
    3ea2:	06 c0       	rjmp	.+12     	; 0x3eb0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3ea4:	02 88       	ldd	r0, Z+18	; 0x12
    3ea6:	f3 89       	ldd	r31, Z+19	; 0x13
    3ea8:	e0 2d       	mov	r30, r0
    3eaa:	80 81       	ld	r24, Z
    3eac:	8f 7d       	andi	r24, 0xDF	; 223
    3eae:	80 83       	st	Z, r24
    3eb0:	08 95       	ret

00003eb2 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3eb2:	ef 92       	push	r14
    3eb4:	ff 92       	push	r15
    3eb6:	0f 93       	push	r16
    3eb8:	1f 93       	push	r17
    3eba:	cf 93       	push	r28
    3ebc:	df 93       	push	r29
    3ebe:	ec 01       	movw	r28, r24
  _written = true;
    3ec0:	81 e0       	ldi	r24, 0x01	; 1
    3ec2:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3ec4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3ec6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3ec8:	98 13       	cpse	r25, r24
    3eca:	05 c0       	rjmp	.+10     	; 0x3ed6 <_ZN14HardwareSerial5writeEh+0x24>
    3ecc:	e8 89       	ldd	r30, Y+16	; 0x10
    3ece:	f9 89       	ldd	r31, Y+17	; 0x11
    3ed0:	80 81       	ld	r24, Z
    3ed2:	85 fd       	sbrc	r24, 5
    3ed4:	26 c0       	rjmp	.+76     	; 0x3f22 <_ZN14HardwareSerial5writeEh+0x70>
    3ed6:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3ed8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3eda:	10 e0       	ldi	r17, 0x00	; 0
    3edc:	0f 5f       	subi	r16, 0xFF	; 255
    3ede:	1f 4f       	sbci	r17, 0xFF	; 255
    3ee0:	0f 73       	andi	r16, 0x3F	; 63
    3ee2:	11 27       	eor	r17, r17
    3ee4:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3ee6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3ee8:	e8 12       	cpse	r14, r24
    3eea:	0c c0       	rjmp	.+24     	; 0x3f04 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    3eec:	0f b6       	in	r0, 0x3f	; 63
    3eee:	07 fc       	sbrc	r0, 7
    3ef0:	fa cf       	rjmp	.-12     	; 0x3ee6 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3ef2:	e8 89       	ldd	r30, Y+16	; 0x10
    3ef4:	f9 89       	ldd	r31, Y+17	; 0x11
    3ef6:	80 81       	ld	r24, Z
    3ef8:	85 ff       	sbrs	r24, 5
    3efa:	f5 cf       	rjmp	.-22     	; 0x3ee6 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3efc:	ce 01       	movw	r24, r28
    3efe:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3f02:	f1 cf       	rjmp	.-30     	; 0x3ee6 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3f04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f06:	fe 01       	movw	r30, r28
    3f08:	e8 0f       	add	r30, r24
    3f0a:	f1 1d       	adc	r31, r1
    3f0c:	e3 5a       	subi	r30, 0xA3	; 163
    3f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f10:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3f12:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3f14:	f8 94       	cli
    _tx_buffer_head = i;
    3f16:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    3f18:	ea 89       	ldd	r30, Y+18	; 0x12
    3f1a:	fb 89       	ldd	r31, Y+19	; 0x13
    3f1c:	80 81       	ld	r24, Z
    3f1e:	80 62       	ori	r24, 0x20	; 32
    3f20:	0a c0       	rjmp	.+20     	; 0x3f36 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3f22:	9f b7       	in	r25, 0x3f	; 63
    3f24:	f8 94       	cli
      *_udr = c;
    3f26:	ee 89       	ldd	r30, Y+22	; 0x16
    3f28:	ff 89       	ldd	r31, Y+23	; 0x17
    3f2a:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3f2c:	e8 89       	ldd	r30, Y+16	; 0x10
    3f2e:	f9 89       	ldd	r31, Y+17	; 0x11
    3f30:	80 81       	ld	r24, Z
    3f32:	83 70       	andi	r24, 0x03	; 3
    3f34:	80 64       	ori	r24, 0x40	; 64
    3f36:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3f38:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    3f3a:	81 e0       	ldi	r24, 0x01	; 1
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	df 91       	pop	r29
    3f40:	cf 91       	pop	r28
    3f42:	1f 91       	pop	r17
    3f44:	0f 91       	pop	r16
    3f46:	ff 90       	pop	r15
    3f48:	ef 90       	pop	r14
    3f4a:	08 95       	ret

00003f4c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3f4c:	cf 93       	push	r28
    3f4e:	df 93       	push	r29
    3f50:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3f52:	88 8d       	ldd	r24, Y+24	; 0x18
    3f54:	88 23       	and	r24, r24
    3f56:	c9 f0       	breq	.+50     	; 0x3f8a <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3f58:	ea 89       	ldd	r30, Y+18	; 0x12
    3f5a:	fb 89       	ldd	r31, Y+19	; 0x13
    3f5c:	80 81       	ld	r24, Z
    3f5e:	85 fd       	sbrc	r24, 5
    3f60:	05 c0       	rjmp	.+10     	; 0x3f6c <_ZN14HardwareSerial5flushEv+0x20>
    3f62:	a8 89       	ldd	r26, Y+16	; 0x10
    3f64:	b9 89       	ldd	r27, Y+17	; 0x11
    3f66:	8c 91       	ld	r24, X
    3f68:	86 fd       	sbrc	r24, 6
    3f6a:	0f c0       	rjmp	.+30     	; 0x3f8a <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3f6c:	0f b6       	in	r0, 0x3f	; 63
    3f6e:	07 fc       	sbrc	r0, 7
    3f70:	f5 cf       	rjmp	.-22     	; 0x3f5c <_ZN14HardwareSerial5flushEv+0x10>
    3f72:	80 81       	ld	r24, Z
    3f74:	85 ff       	sbrs	r24, 5
    3f76:	f2 cf       	rjmp	.-28     	; 0x3f5c <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3f78:	a8 89       	ldd	r26, Y+16	; 0x10
    3f7a:	b9 89       	ldd	r27, Y+17	; 0x11
    3f7c:	8c 91       	ld	r24, X
    3f7e:	85 ff       	sbrs	r24, 5
    3f80:	ed cf       	rjmp	.-38     	; 0x3f5c <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3f82:	ce 01       	movw	r24, r28
    3f84:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3f88:	e7 cf       	rjmp	.-50     	; 0x3f58 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3f8a:	df 91       	pop	r29
    3f8c:	cf 91       	pop	r28
    3f8e:	08 95       	ret

00003f90 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    3f90:	08 95       	ret

00003f92 <attachInterrupt>:
    3f92:	82 30       	cpi	r24, 0x02	; 2
    3f94:	e8 f4       	brcc	.+58     	; 0x3fd0 <attachInterrupt+0x3e>
    3f96:	e8 2f       	mov	r30, r24
    3f98:	f0 e0       	ldi	r31, 0x00	; 0
    3f9a:	ee 0f       	add	r30, r30
    3f9c:	ff 1f       	adc	r31, r31
    3f9e:	e3 5e       	subi	r30, 0xE3	; 227
    3fa0:	fe 4f       	sbci	r31, 0xFE	; 254
    3fa2:	71 83       	std	Z+1, r23	; 0x01
    3fa4:	60 83       	st	Z, r22
    3fa6:	81 30       	cpi	r24, 0x01	; 1
    3fa8:	41 f0       	breq	.+16     	; 0x3fba <attachInterrupt+0x28>
    3faa:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    3fae:	8c 7f       	andi	r24, 0xFC	; 252
    3fb0:	48 2b       	or	r20, r24
    3fb2:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    3fb6:	e8 9a       	sbi	0x1d, 0	; 29
    3fb8:	08 95       	ret
    3fba:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    3fbe:	83 7f       	andi	r24, 0xF3	; 243
    3fc0:	44 0f       	add	r20, r20
    3fc2:	55 1f       	adc	r21, r21
    3fc4:	44 0f       	add	r20, r20
    3fc6:	55 1f       	adc	r21, r21
    3fc8:	48 2b       	or	r20, r24
    3fca:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    3fce:	e9 9a       	sbi	0x1d, 1	; 29
    3fd0:	08 95       	ret

00003fd2 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    3fd2:	1f 92       	push	r1
    3fd4:	0f 92       	push	r0
    3fd6:	0f b6       	in	r0, 0x3f	; 63
    3fd8:	0f 92       	push	r0
    3fda:	11 24       	eor	r1, r1
    3fdc:	2f 93       	push	r18
    3fde:	3f 93       	push	r19
    3fe0:	4f 93       	push	r20
    3fe2:	5f 93       	push	r21
    3fe4:	6f 93       	push	r22
    3fe6:	7f 93       	push	r23
    3fe8:	8f 93       	push	r24
    3fea:	9f 93       	push	r25
    3fec:	af 93       	push	r26
    3fee:	bf 93       	push	r27
    3ff0:	ef 93       	push	r30
    3ff2:	ff 93       	push	r31
    3ff4:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <intFunc>
    3ff8:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <intFunc+0x1>
    3ffc:	09 95       	icall
    3ffe:	ff 91       	pop	r31
    4000:	ef 91       	pop	r30
    4002:	bf 91       	pop	r27
    4004:	af 91       	pop	r26
    4006:	9f 91       	pop	r25
    4008:	8f 91       	pop	r24
    400a:	7f 91       	pop	r23
    400c:	6f 91       	pop	r22
    400e:	5f 91       	pop	r21
    4010:	4f 91       	pop	r20
    4012:	3f 91       	pop	r19
    4014:	2f 91       	pop	r18
    4016:	0f 90       	pop	r0
    4018:	0f be       	out	0x3f, r0	; 63
    401a:	0f 90       	pop	r0
    401c:	1f 90       	pop	r1
    401e:	18 95       	reti

00004020 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    4020:	1f 92       	push	r1
    4022:	0f 92       	push	r0
    4024:	0f b6       	in	r0, 0x3f	; 63
    4026:	0f 92       	push	r0
    4028:	11 24       	eor	r1, r1
    402a:	2f 93       	push	r18
    402c:	3f 93       	push	r19
    402e:	4f 93       	push	r20
    4030:	5f 93       	push	r21
    4032:	6f 93       	push	r22
    4034:	7f 93       	push	r23
    4036:	8f 93       	push	r24
    4038:	9f 93       	push	r25
    403a:	af 93       	push	r26
    403c:	bf 93       	push	r27
    403e:	ef 93       	push	r30
    4040:	ff 93       	push	r31
    4042:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <intFunc+0x2>
    4046:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <intFunc+0x3>
    404a:	09 95       	icall
    404c:	ff 91       	pop	r31
    404e:	ef 91       	pop	r30
    4050:	bf 91       	pop	r27
    4052:	af 91       	pop	r26
    4054:	9f 91       	pop	r25
    4056:	8f 91       	pop	r24
    4058:	7f 91       	pop	r23
    405a:	6f 91       	pop	r22
    405c:	5f 91       	pop	r21
    405e:	4f 91       	pop	r20
    4060:	3f 91       	pop	r19
    4062:	2f 91       	pop	r18
    4064:	0f 90       	pop	r0
    4066:	0f be       	out	0x3f, r0	; 63
    4068:	0f 90       	pop	r0
    406a:	1f 90       	pop	r1
    406c:	18 95       	reti

0000406e <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    406e:	10 92 3d 06 	sts	0x063D, r1	; 0x80063d <twi_state>
    4072:	81 e0       	ldi	r24, 0x01	; 1
    4074:	80 93 3b 06 	sts	0x063B, r24	; 0x80063b <twi_sendStop>
    4078:	10 92 3a 06 	sts	0x063A, r1	; 0x80063a <twi_inRepStart>
    407c:	61 e0       	ldi	r22, 0x01	; 1
    407e:	82 e1       	ldi	r24, 0x12	; 18
    4080:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <digitalWrite>
    4084:	61 e0       	ldi	r22, 0x01	; 1
    4086:	83 e1       	ldi	r24, 0x13	; 19
    4088:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <digitalWrite>
    408c:	e9 eb       	ldi	r30, 0xB9	; 185
    408e:	f0 e0       	ldi	r31, 0x00	; 0
    4090:	80 81       	ld	r24, Z
    4092:	8e 7f       	andi	r24, 0xFE	; 254
    4094:	80 83       	st	Z, r24
    4096:	80 81       	ld	r24, Z
    4098:	8d 7f       	andi	r24, 0xFD	; 253
    409a:	80 83       	st	Z, r24
    409c:	88 e4       	ldi	r24, 0x48	; 72
    409e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    40a2:	85 e4       	ldi	r24, 0x45	; 69
    40a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    40a8:	08 95       	ret

000040aa <twi_disable>:
    40aa:	ec eb       	ldi	r30, 0xBC	; 188
    40ac:	f0 e0       	ldi	r31, 0x00	; 0
    40ae:	80 81       	ld	r24, Z
    40b0:	8a 7b       	andi	r24, 0xBA	; 186
    40b2:	80 83       	st	Z, r24
    40b4:	60 e0       	ldi	r22, 0x00	; 0
    40b6:	82 e1       	ldi	r24, 0x12	; 18
    40b8:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <digitalWrite>
    40bc:	60 e0       	ldi	r22, 0x00	; 0
    40be:	83 e1       	ldi	r24, 0x13	; 19
    40c0:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <digitalWrite>

000040c4 <twi_setFrequency>:
    40c4:	9b 01       	movw	r18, r22
    40c6:	ac 01       	movw	r20, r24
    40c8:	60 e0       	ldi	r22, 0x00	; 0
    40ca:	74 e2       	ldi	r23, 0x24	; 36
    40cc:	84 ef       	ldi	r24, 0xF4	; 244
    40ce:	90 e0       	ldi	r25, 0x00	; 0
    40d0:	0e 94 1c 24 	call	0x4838	; 0x4838 <__udivmodsi4>
    40d4:	da 01       	movw	r26, r20
    40d6:	c9 01       	movw	r24, r18
    40d8:	40 97       	sbiw	r24, 0x10	; 16
    40da:	a1 09       	sbc	r26, r1
    40dc:	b1 09       	sbc	r27, r1
    40de:	b6 95       	lsr	r27
    40e0:	a7 95       	ror	r26
    40e2:	97 95       	ror	r25
    40e4:	87 95       	ror	r24
    40e6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    40ea:	08 95       	ret

000040ec <twi_transmit>:
    40ec:	40 91 ec 05 	lds	r20, 0x05EC	; 0x8005ec <twi_txBufferLength>
    40f0:	26 2f       	mov	r18, r22
    40f2:	30 e0       	ldi	r19, 0x00	; 0
    40f4:	24 0f       	add	r18, r20
    40f6:	31 1d       	adc	r19, r1
    40f8:	21 32       	cpi	r18, 0x21	; 33
    40fa:	31 05       	cpc	r19, r1
    40fc:	dc f4       	brge	.+54     	; 0x4134 <twi_transmit+0x48>
    40fe:	20 91 3d 06 	lds	r18, 0x063D	; 0x80063d <twi_state>
    4102:	24 30       	cpi	r18, 0x04	; 4
    4104:	c9 f4       	brne	.+50     	; 0x4138 <twi_transmit+0x4c>
    4106:	fc 01       	movw	r30, r24
    4108:	80 e0       	ldi	r24, 0x00	; 0
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	86 17       	cp	r24, r22
    410e:	58 f4       	brcc	.+22     	; 0x4126 <twi_transmit+0x3a>
    4110:	30 91 ec 05 	lds	r19, 0x05EC	; 0x8005ec <twi_txBufferLength>
    4114:	21 91       	ld	r18, Z+
    4116:	dc 01       	movw	r26, r24
    4118:	a2 51       	subi	r26, 0x12	; 18
    411a:	ba 4f       	sbci	r27, 0xFA	; 250
    411c:	a3 0f       	add	r26, r19
    411e:	b1 1d       	adc	r27, r1
    4120:	2c 93       	st	X, r18
    4122:	01 96       	adiw	r24, 0x01	; 1
    4124:	f3 cf       	rjmp	.-26     	; 0x410c <twi_transmit+0x20>
    4126:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <twi_txBufferLength>
    412a:	68 0f       	add	r22, r24
    412c:	60 93 ec 05 	sts	0x05EC, r22	; 0x8005ec <twi_txBufferLength>
    4130:	80 e0       	ldi	r24, 0x00	; 0
    4132:	08 95       	ret
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	08 95       	ret
    4138:	82 e0       	ldi	r24, 0x02	; 2
    413a:	08 95       	ret

0000413c <twi_attachSlaveRxEvent>:
    413c:	90 93 31 06 	sts	0x0631, r25	; 0x800631 <twi_onSlaveReceive+0x1>
    4140:	80 93 30 06 	sts	0x0630, r24	; 0x800630 <twi_onSlaveReceive>
    4144:	08 95       	ret

00004146 <twi_attachSlaveTxEvent>:
    4146:	90 93 33 06 	sts	0x0633, r25	; 0x800633 <twi_onSlaveTransmit+0x1>
    414a:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <twi_onSlaveTransmit>
    414e:	08 95       	ret

00004150 <twi_releaseBus>:
    4150:	85 ec       	ldi	r24, 0xC5	; 197
    4152:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4156:	10 92 3d 06 	sts	0x063D, r1	; 0x80063d <twi_state>
    415a:	08 95       	ret

0000415c <twi_handleTimeout>:
    415c:	cf 93       	push	r28
    415e:	df 93       	push	r29
    4160:	91 e0       	ldi	r25, 0x01	; 1
    4162:	90 93 35 06 	sts	0x0635, r25	; 0x800635 <twi_timed_out_flag>
    4166:	88 23       	and	r24, r24
    4168:	61 f0       	breq	.+24     	; 0x4182 <twi_handleTimeout+0x26>
    416a:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    416e:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
    4172:	0e 94 55 20 	call	0x40aa	; 0x40aa <twi_disable>
    4176:	0e 94 37 20 	call	0x406e	; 0x406e <twi_init>
    417a:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
    417e:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    4182:	df 91       	pop	r29
    4184:	cf 91       	pop	r28
    4186:	08 95       	ret

00004188 <twi_readFrom>:
    4188:	4f 92       	push	r4
    418a:	5f 92       	push	r5
    418c:	6f 92       	push	r6
    418e:	7f 92       	push	r7
    4190:	8f 92       	push	r8
    4192:	9f 92       	push	r9
    4194:	af 92       	push	r10
    4196:	bf 92       	push	r11
    4198:	cf 92       	push	r12
    419a:	df 92       	push	r13
    419c:	ef 92       	push	r14
    419e:	ff 92       	push	r15
    41a0:	0f 93       	push	r16
    41a2:	1f 93       	push	r17
    41a4:	cf 93       	push	r28
    41a6:	df 93       	push	r29
    41a8:	f8 2e       	mov	r15, r24
    41aa:	16 2f       	mov	r17, r22
    41ac:	07 2f       	mov	r16, r23
    41ae:	c4 2f       	mov	r28, r20
    41b0:	e2 2e       	mov	r14, r18
    41b2:	41 32       	cpi	r20, 0x21	; 33
    41b4:	08 f0       	brcs	.+2      	; 0x41b8 <twi_readFrom+0x30>
    41b6:	be c0       	rjmp	.+380    	; 0x4334 <twi_readFrom+0x1ac>
    41b8:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <micros>
    41bc:	4b 01       	movw	r8, r22
    41be:	5c 01       	movw	r10, r24
    41c0:	d0 91 3d 06 	lds	r29, 0x063D	; 0x80063d <twi_state>
    41c4:	dd 23       	and	r29, r29
    41c6:	31 f1       	breq	.+76     	; 0x4214 <twi_readFrom+0x8c>
    41c8:	80 91 36 06 	lds	r24, 0x0636	; 0x800636 <twi_timeout_us>
    41cc:	90 91 37 06 	lds	r25, 0x0637	; 0x800637 <twi_timeout_us+0x1>
    41d0:	a0 91 38 06 	lds	r26, 0x0638	; 0x800638 <twi_timeout_us+0x2>
    41d4:	b0 91 39 06 	lds	r27, 0x0639	; 0x800639 <twi_timeout_us+0x3>
    41d8:	89 2b       	or	r24, r25
    41da:	8a 2b       	or	r24, r26
    41dc:	8b 2b       	or	r24, r27
    41de:	81 f3       	breq	.-32     	; 0x41c0 <twi_readFrom+0x38>
    41e0:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <micros>
    41e4:	40 90 36 06 	lds	r4, 0x0636	; 0x800636 <twi_timeout_us>
    41e8:	50 90 37 06 	lds	r5, 0x0637	; 0x800637 <twi_timeout_us+0x1>
    41ec:	60 90 38 06 	lds	r6, 0x0638	; 0x800638 <twi_timeout_us+0x2>
    41f0:	70 90 39 06 	lds	r7, 0x0639	; 0x800639 <twi_timeout_us+0x3>
    41f4:	dc 01       	movw	r26, r24
    41f6:	cb 01       	movw	r24, r22
    41f8:	88 19       	sub	r24, r8
    41fa:	99 09       	sbc	r25, r9
    41fc:	aa 09       	sbc	r26, r10
    41fe:	bb 09       	sbc	r27, r11
    4200:	48 16       	cp	r4, r24
    4202:	59 06       	cpc	r5, r25
    4204:	6a 06       	cpc	r6, r26
    4206:	7b 06       	cpc	r7, r27
    4208:	d8 f6       	brcc	.-74     	; 0x41c0 <twi_readFrom+0x38>
    420a:	80 91 34 06 	lds	r24, 0x0634	; 0x800634 <twi_do_reset_on_timeout>
    420e:	0e 94 ae 20 	call	0x415c	; 0x415c <twi_handleTimeout>
    4212:	90 c0       	rjmp	.+288    	; 0x4334 <twi_readFrom+0x1ac>
    4214:	81 e0       	ldi	r24, 0x01	; 1
    4216:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <twi_state>
    421a:	e0 92 3b 06 	sts	0x063B, r14	; 0x80063b <twi_sendStop>
    421e:	9f ef       	ldi	r25, 0xFF	; 255
    4220:	90 93 ca 05 	sts	0x05CA, r25	; 0x8005ca <twi_error>
    4224:	10 92 0f 06 	sts	0x060F, r1	; 0x80060f <twi_masterBufferIndex>
    4228:	9c 0f       	add	r25, r28
    422a:	90 93 0e 06 	sts	0x060E, r25	; 0x80060e <twi_masterBufferLength>
    422e:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <twi_slarw>
    4232:	90 91 3c 06 	lds	r25, 0x063C	; 0x80063c <twi_slarw>
    4236:	8f 2d       	mov	r24, r15
    4238:	88 0f       	add	r24, r24
    423a:	89 2b       	or	r24, r25
    423c:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <twi_slarw>
    4240:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <twi_inRepStart>
    4244:	81 30       	cpi	r24, 0x01	; 1
    4246:	89 f5       	brne	.+98     	; 0x42aa <twi_readFrom+0x122>
    4248:	10 92 3a 06 	sts	0x063A, r1	; 0x80063a <twi_inRepStart>
    424c:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <micros>
    4250:	6b 01       	movw	r12, r22
    4252:	7c 01       	movw	r14, r24
    4254:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <twi_slarw>
    4258:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    425c:	80 91 36 06 	lds	r24, 0x0636	; 0x800636 <twi_timeout_us>
    4260:	90 91 37 06 	lds	r25, 0x0637	; 0x800637 <twi_timeout_us+0x1>
    4264:	a0 91 38 06 	lds	r26, 0x0638	; 0x800638 <twi_timeout_us+0x2>
    4268:	b0 91 39 06 	lds	r27, 0x0639	; 0x800639 <twi_timeout_us+0x3>
    426c:	89 2b       	or	r24, r25
    426e:	8a 2b       	or	r24, r26
    4270:	8b 2b       	or	r24, r27
    4272:	a9 f0       	breq	.+42     	; 0x429e <twi_readFrom+0x116>
    4274:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <micros>
    4278:	80 90 36 06 	lds	r8, 0x0636	; 0x800636 <twi_timeout_us>
    427c:	90 90 37 06 	lds	r9, 0x0637	; 0x800637 <twi_timeout_us+0x1>
    4280:	a0 90 38 06 	lds	r10, 0x0638	; 0x800638 <twi_timeout_us+0x2>
    4284:	b0 90 39 06 	lds	r11, 0x0639	; 0x800639 <twi_timeout_us+0x3>
    4288:	dc 01       	movw	r26, r24
    428a:	cb 01       	movw	r24, r22
    428c:	8c 19       	sub	r24, r12
    428e:	9d 09       	sbc	r25, r13
    4290:	ae 09       	sbc	r26, r14
    4292:	bf 09       	sbc	r27, r15
    4294:	88 16       	cp	r8, r24
    4296:	99 06       	cpc	r9, r25
    4298:	aa 06       	cpc	r10, r26
    429a:	bb 06       	cpc	r11, r27
    429c:	90 f1       	brcs	.+100    	; 0x4302 <twi_readFrom+0x17a>
    429e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    42a2:	83 fd       	sbrc	r24, 3
    42a4:	d7 cf       	rjmp	.-82     	; 0x4254 <twi_readFrom+0xcc>
    42a6:	85 ec       	ldi	r24, 0xC5	; 197
    42a8:	01 c0       	rjmp	.+2      	; 0x42ac <twi_readFrom+0x124>
    42aa:	85 ee       	ldi	r24, 0xE5	; 229
    42ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    42b0:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <micros>
    42b4:	6b 01       	movw	r12, r22
    42b6:	7c 01       	movw	r14, r24
    42b8:	80 91 3d 06 	lds	r24, 0x063D	; 0x80063d <twi_state>
    42bc:	81 30       	cpi	r24, 0x01	; 1
    42be:	31 f5       	brne	.+76     	; 0x430c <twi_readFrom+0x184>
    42c0:	80 91 36 06 	lds	r24, 0x0636	; 0x800636 <twi_timeout_us>
    42c4:	90 91 37 06 	lds	r25, 0x0637	; 0x800637 <twi_timeout_us+0x1>
    42c8:	a0 91 38 06 	lds	r26, 0x0638	; 0x800638 <twi_timeout_us+0x2>
    42cc:	b0 91 39 06 	lds	r27, 0x0639	; 0x800639 <twi_timeout_us+0x3>
    42d0:	89 2b       	or	r24, r25
    42d2:	8a 2b       	or	r24, r26
    42d4:	8b 2b       	or	r24, r27
    42d6:	81 f3       	breq	.-32     	; 0x42b8 <twi_readFrom+0x130>
    42d8:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <micros>
    42dc:	80 90 36 06 	lds	r8, 0x0636	; 0x800636 <twi_timeout_us>
    42e0:	90 90 37 06 	lds	r9, 0x0637	; 0x800637 <twi_timeout_us+0x1>
    42e4:	a0 90 38 06 	lds	r10, 0x0638	; 0x800638 <twi_timeout_us+0x2>
    42e8:	b0 90 39 06 	lds	r11, 0x0639	; 0x800639 <twi_timeout_us+0x3>
    42ec:	dc 01       	movw	r26, r24
    42ee:	cb 01       	movw	r24, r22
    42f0:	8c 19       	sub	r24, r12
    42f2:	9d 09       	sbc	r25, r13
    42f4:	ae 09       	sbc	r26, r14
    42f6:	bf 09       	sbc	r27, r15
    42f8:	88 16       	cp	r8, r24
    42fa:	99 06       	cpc	r9, r25
    42fc:	aa 06       	cpc	r10, r26
    42fe:	bb 06       	cpc	r11, r27
    4300:	d8 f6       	brcc	.-74     	; 0x42b8 <twi_readFrom+0x130>
    4302:	80 91 34 06 	lds	r24, 0x0634	; 0x800634 <twi_do_reset_on_timeout>
    4306:	0e 94 ae 20 	call	0x415c	; 0x415c <twi_handleTimeout>
    430a:	15 c0       	rjmp	.+42     	; 0x4336 <twi_readFrom+0x1ae>
    430c:	80 91 0f 06 	lds	r24, 0x060F	; 0x80060f <twi_masterBufferIndex>
    4310:	8c 17       	cp	r24, r28
    4312:	10 f4       	brcc	.+4      	; 0x4318 <twi_readFrom+0x190>
    4314:	c0 91 0f 06 	lds	r28, 0x060F	; 0x80060f <twi_masterBufferIndex>
    4318:	a0 e1       	ldi	r26, 0x10	; 16
    431a:	b6 e0       	ldi	r27, 0x06	; 6
    431c:	91 2f       	mov	r25, r17
    431e:	e1 2f       	mov	r30, r17
    4320:	f0 2f       	mov	r31, r16
    4322:	8e 2f       	mov	r24, r30
    4324:	89 1b       	sub	r24, r25
    4326:	8c 17       	cp	r24, r28
    4328:	18 f4       	brcc	.+6      	; 0x4330 <twi_readFrom+0x1a8>
    432a:	8d 91       	ld	r24, X+
    432c:	81 93       	st	Z+, r24
    432e:	f9 cf       	rjmp	.-14     	; 0x4322 <twi_readFrom+0x19a>
    4330:	dc 2f       	mov	r29, r28
    4332:	01 c0       	rjmp	.+2      	; 0x4336 <twi_readFrom+0x1ae>
    4334:	d0 e0       	ldi	r29, 0x00	; 0
    4336:	8d 2f       	mov	r24, r29
    4338:	df 91       	pop	r29
    433a:	cf 91       	pop	r28
    433c:	1f 91       	pop	r17
    433e:	0f 91       	pop	r16
    4340:	ff 90       	pop	r15
    4342:	ef 90       	pop	r14
    4344:	df 90       	pop	r13
    4346:	cf 90       	pop	r12
    4348:	bf 90       	pop	r11
    434a:	af 90       	pop	r10
    434c:	9f 90       	pop	r9
    434e:	8f 90       	pop	r8
    4350:	7f 90       	pop	r7
    4352:	6f 90       	pop	r6
    4354:	5f 90       	pop	r5
    4356:	4f 90       	pop	r4
    4358:	08 95       	ret

0000435a <twi_writeTo>:
    435a:	4f 92       	push	r4
    435c:	5f 92       	push	r5
    435e:	6f 92       	push	r6
    4360:	7f 92       	push	r7
    4362:	8f 92       	push	r8
    4364:	9f 92       	push	r9
    4366:	af 92       	push	r10
    4368:	bf 92       	push	r11
    436a:	cf 92       	push	r12
    436c:	df 92       	push	r13
    436e:	ef 92       	push	r14
    4370:	ff 92       	push	r15
    4372:	0f 93       	push	r16
    4374:	1f 93       	push	r17
    4376:	cf 93       	push	r28
    4378:	df 93       	push	r29
    437a:	41 32       	cpi	r20, 0x21	; 33
    437c:	08 f0       	brcs	.+2      	; 0x4380 <twi_writeTo+0x26>
    437e:	c6 c0       	rjmp	.+396    	; 0x450c <twi_writeTo+0x1b2>
    4380:	12 2f       	mov	r17, r18
    4382:	f4 2e       	mov	r15, r20
    4384:	d7 2e       	mov	r13, r23
    4386:	e6 2e       	mov	r14, r22
    4388:	d8 2f       	mov	r29, r24
    438a:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <micros>
    438e:	4b 01       	movw	r8, r22
    4390:	5c 01       	movw	r10, r24
    4392:	c0 91 3d 06 	lds	r28, 0x063D	; 0x80063d <twi_state>
    4396:	cc 23       	and	r28, r28
    4398:	11 f1       	breq	.+68     	; 0x43de <twi_writeTo+0x84>
    439a:	80 91 36 06 	lds	r24, 0x0636	; 0x800636 <twi_timeout_us>
    439e:	90 91 37 06 	lds	r25, 0x0637	; 0x800637 <twi_timeout_us+0x1>
    43a2:	a0 91 38 06 	lds	r26, 0x0638	; 0x800638 <twi_timeout_us+0x2>
    43a6:	b0 91 39 06 	lds	r27, 0x0639	; 0x800639 <twi_timeout_us+0x3>
    43aa:	89 2b       	or	r24, r25
    43ac:	8a 2b       	or	r24, r26
    43ae:	8b 2b       	or	r24, r27
    43b0:	81 f3       	breq	.-32     	; 0x4392 <twi_writeTo+0x38>
    43b2:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <micros>
    43b6:	40 90 36 06 	lds	r4, 0x0636	; 0x800636 <twi_timeout_us>
    43ba:	50 90 37 06 	lds	r5, 0x0637	; 0x800637 <twi_timeout_us+0x1>
    43be:	60 90 38 06 	lds	r6, 0x0638	; 0x800638 <twi_timeout_us+0x2>
    43c2:	70 90 39 06 	lds	r7, 0x0639	; 0x800639 <twi_timeout_us+0x3>
    43c6:	dc 01       	movw	r26, r24
    43c8:	cb 01       	movw	r24, r22
    43ca:	88 19       	sub	r24, r8
    43cc:	99 09       	sbc	r25, r9
    43ce:	aa 09       	sbc	r26, r10
    43d0:	bb 09       	sbc	r27, r11
    43d2:	48 16       	cp	r4, r24
    43d4:	59 06       	cpc	r5, r25
    43d6:	6a 06       	cpc	r6, r26
    43d8:	7b 06       	cpc	r7, r27
    43da:	d8 f6       	brcc	.-74     	; 0x4392 <twi_writeTo+0x38>
    43dc:	83 c0       	rjmp	.+262    	; 0x44e4 <twi_writeTo+0x18a>
    43de:	82 e0       	ldi	r24, 0x02	; 2
    43e0:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <twi_state>
    43e4:	00 93 3b 06 	sts	0x063B, r16	; 0x80063b <twi_sendStop>
    43e8:	8f ef       	ldi	r24, 0xFF	; 255
    43ea:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <twi_error>
    43ee:	10 92 0f 06 	sts	0x060F, r1	; 0x80060f <twi_masterBufferIndex>
    43f2:	f0 92 0e 06 	sts	0x060E, r15	; 0x80060e <twi_masterBufferLength>
    43f6:	9e 2d       	mov	r25, r14
    43f8:	a0 e1       	ldi	r26, 0x10	; 16
    43fa:	b6 e0       	ldi	r27, 0x06	; 6
    43fc:	ee 2d       	mov	r30, r14
    43fe:	fd 2d       	mov	r31, r13
    4400:	8e 2f       	mov	r24, r30
    4402:	89 1b       	sub	r24, r25
    4404:	8f 15       	cp	r24, r15
    4406:	18 f4       	brcc	.+6      	; 0x440e <twi_writeTo+0xb4>
    4408:	81 91       	ld	r24, Z+
    440a:	8d 93       	st	X+, r24
    440c:	f9 cf       	rjmp	.-14     	; 0x4400 <twi_writeTo+0xa6>
    440e:	10 92 3c 06 	sts	0x063C, r1	; 0x80063c <twi_slarw>
    4412:	90 91 3c 06 	lds	r25, 0x063C	; 0x80063c <twi_slarw>
    4416:	dd 0f       	add	r29, r29
    4418:	d9 2b       	or	r29, r25
    441a:	d0 93 3c 06 	sts	0x063C, r29	; 0x80063c <twi_slarw>
    441e:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <twi_inRepStart>
    4422:	81 30       	cpi	r24, 0x01	; 1
    4424:	89 f5       	brne	.+98     	; 0x4488 <twi_writeTo+0x12e>
    4426:	10 92 3a 06 	sts	0x063A, r1	; 0x80063a <twi_inRepStart>
    442a:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <micros>
    442e:	6b 01       	movw	r12, r22
    4430:	7c 01       	movw	r14, r24
    4432:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <twi_slarw>
    4436:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    443a:	80 91 36 06 	lds	r24, 0x0636	; 0x800636 <twi_timeout_us>
    443e:	90 91 37 06 	lds	r25, 0x0637	; 0x800637 <twi_timeout_us+0x1>
    4442:	a0 91 38 06 	lds	r26, 0x0638	; 0x800638 <twi_timeout_us+0x2>
    4446:	b0 91 39 06 	lds	r27, 0x0639	; 0x800639 <twi_timeout_us+0x3>
    444a:	89 2b       	or	r24, r25
    444c:	8a 2b       	or	r24, r26
    444e:	8b 2b       	or	r24, r27
    4450:	a9 f0       	breq	.+42     	; 0x447c <twi_writeTo+0x122>
    4452:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <micros>
    4456:	80 90 36 06 	lds	r8, 0x0636	; 0x800636 <twi_timeout_us>
    445a:	90 90 37 06 	lds	r9, 0x0637	; 0x800637 <twi_timeout_us+0x1>
    445e:	a0 90 38 06 	lds	r10, 0x0638	; 0x800638 <twi_timeout_us+0x2>
    4462:	b0 90 39 06 	lds	r11, 0x0639	; 0x800639 <twi_timeout_us+0x3>
    4466:	dc 01       	movw	r26, r24
    4468:	cb 01       	movw	r24, r22
    446a:	8c 19       	sub	r24, r12
    446c:	9d 09       	sbc	r25, r13
    446e:	ae 09       	sbc	r26, r14
    4470:	bf 09       	sbc	r27, r15
    4472:	88 16       	cp	r8, r24
    4474:	99 06       	cpc	r9, r25
    4476:	aa 06       	cpc	r10, r26
    4478:	bb 06       	cpc	r11, r27
    447a:	a0 f1       	brcs	.+104    	; 0x44e4 <twi_writeTo+0x18a>
    447c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4480:	83 fd       	sbrc	r24, 3
    4482:	d7 cf       	rjmp	.-82     	; 0x4432 <twi_writeTo+0xd8>
    4484:	85 ec       	ldi	r24, 0xC5	; 197
    4486:	01 c0       	rjmp	.+2      	; 0x448a <twi_writeTo+0x130>
    4488:	85 ee       	ldi	r24, 0xE5	; 229
    448a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    448e:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <micros>
    4492:	6b 01       	movw	r12, r22
    4494:	7c 01       	movw	r14, r24
    4496:	11 23       	and	r17, r17
    4498:	59 f1       	breq	.+86     	; 0x44f0 <twi_writeTo+0x196>
    449a:	80 91 3d 06 	lds	r24, 0x063D	; 0x80063d <twi_state>
    449e:	82 30       	cpi	r24, 0x02	; 2
    44a0:	39 f5       	brne	.+78     	; 0x44f0 <twi_writeTo+0x196>
    44a2:	80 91 36 06 	lds	r24, 0x0636	; 0x800636 <twi_timeout_us>
    44a6:	90 91 37 06 	lds	r25, 0x0637	; 0x800637 <twi_timeout_us+0x1>
    44aa:	a0 91 38 06 	lds	r26, 0x0638	; 0x800638 <twi_timeout_us+0x2>
    44ae:	b0 91 39 06 	lds	r27, 0x0639	; 0x800639 <twi_timeout_us+0x3>
    44b2:	89 2b       	or	r24, r25
    44b4:	8a 2b       	or	r24, r26
    44b6:	8b 2b       	or	r24, r27
    44b8:	71 f3       	breq	.-36     	; 0x4496 <twi_writeTo+0x13c>
    44ba:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <micros>
    44be:	80 90 36 06 	lds	r8, 0x0636	; 0x800636 <twi_timeout_us>
    44c2:	90 90 37 06 	lds	r9, 0x0637	; 0x800637 <twi_timeout_us+0x1>
    44c6:	a0 90 38 06 	lds	r10, 0x0638	; 0x800638 <twi_timeout_us+0x2>
    44ca:	b0 90 39 06 	lds	r11, 0x0639	; 0x800639 <twi_timeout_us+0x3>
    44ce:	dc 01       	movw	r26, r24
    44d0:	cb 01       	movw	r24, r22
    44d2:	8c 19       	sub	r24, r12
    44d4:	9d 09       	sbc	r25, r13
    44d6:	ae 09       	sbc	r26, r14
    44d8:	bf 09       	sbc	r27, r15
    44da:	88 16       	cp	r8, r24
    44dc:	99 06       	cpc	r9, r25
    44de:	aa 06       	cpc	r10, r26
    44e0:	bb 06       	cpc	r11, r27
    44e2:	c8 f6       	brcc	.-78     	; 0x4496 <twi_writeTo+0x13c>
    44e4:	80 91 34 06 	lds	r24, 0x0634	; 0x800634 <twi_do_reset_on_timeout>
    44e8:	0e 94 ae 20 	call	0x415c	; 0x415c <twi_handleTimeout>
    44ec:	c5 e0       	ldi	r28, 0x05	; 5
    44ee:	13 c0       	rjmp	.+38     	; 0x4516 <twi_writeTo+0x1bc>
    44f0:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <twi_error>
    44f4:	8f 3f       	cpi	r24, 0xFF	; 255
    44f6:	79 f0       	breq	.+30     	; 0x4516 <twi_writeTo+0x1bc>
    44f8:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <twi_error>
    44fc:	80 32       	cpi	r24, 0x20	; 32
    44fe:	41 f0       	breq	.+16     	; 0x4510 <twi_writeTo+0x1b6>
    4500:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <twi_error>
    4504:	80 33       	cpi	r24, 0x30	; 48
    4506:	31 f0       	breq	.+12     	; 0x4514 <twi_writeTo+0x1ba>
    4508:	c4 e0       	ldi	r28, 0x04	; 4
    450a:	05 c0       	rjmp	.+10     	; 0x4516 <twi_writeTo+0x1bc>
    450c:	c1 e0       	ldi	r28, 0x01	; 1
    450e:	03 c0       	rjmp	.+6      	; 0x4516 <twi_writeTo+0x1bc>
    4510:	c2 e0       	ldi	r28, 0x02	; 2
    4512:	01 c0       	rjmp	.+2      	; 0x4516 <twi_writeTo+0x1bc>
    4514:	c3 e0       	ldi	r28, 0x03	; 3
    4516:	8c 2f       	mov	r24, r28
    4518:	df 91       	pop	r29
    451a:	cf 91       	pop	r28
    451c:	1f 91       	pop	r17
    451e:	0f 91       	pop	r16
    4520:	ff 90       	pop	r15
    4522:	ef 90       	pop	r14
    4524:	df 90       	pop	r13
    4526:	cf 90       	pop	r12
    4528:	bf 90       	pop	r11
    452a:	af 90       	pop	r10
    452c:	9f 90       	pop	r9
    452e:	8f 90       	pop	r8
    4530:	7f 90       	pop	r7
    4532:	6f 90       	pop	r6
    4534:	5f 90       	pop	r5
    4536:	4f 90       	pop	r4
    4538:	08 95       	ret

0000453a <twi_stop>:
    453a:	85 ed       	ldi	r24, 0xD5	; 213
    453c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4540:	80 91 36 06 	lds	r24, 0x0636	; 0x800636 <twi_timeout_us>
    4544:	90 91 37 06 	lds	r25, 0x0637	; 0x800637 <twi_timeout_us+0x1>
    4548:	a0 91 38 06 	lds	r26, 0x0638	; 0x800638 <twi_timeout_us+0x2>
    454c:	b0 91 39 06 	lds	r27, 0x0639	; 0x800639 <twi_timeout_us+0x3>
    4550:	07 96       	adiw	r24, 0x07	; 7
    4552:	a1 1d       	adc	r26, r1
    4554:	b1 1d       	adc	r27, r1
    4556:	23 e0       	ldi	r18, 0x03	; 3
    4558:	b6 95       	lsr	r27
    455a:	a7 95       	ror	r26
    455c:	97 95       	ror	r25
    455e:	87 95       	ror	r24
    4560:	2a 95       	dec	r18
    4562:	d1 f7       	brne	.-12     	; 0x4558 <twi_stop+0x1e>
    4564:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4568:	24 ff       	sbrs	r18, 4
    456a:	1c c0       	rjmp	.+56     	; 0x45a4 <twi_stop+0x6a>
    456c:	40 91 36 06 	lds	r20, 0x0636	; 0x800636 <twi_timeout_us>
    4570:	50 91 37 06 	lds	r21, 0x0637	; 0x800637 <twi_timeout_us+0x1>
    4574:	60 91 38 06 	lds	r22, 0x0638	; 0x800638 <twi_timeout_us+0x2>
    4578:	70 91 39 06 	lds	r23, 0x0639	; 0x800639 <twi_timeout_us+0x3>
    457c:	45 2b       	or	r20, r21
    457e:	46 2b       	or	r20, r22
    4580:	47 2b       	or	r20, r23
    4582:	81 f3       	breq	.-32     	; 0x4564 <twi_stop+0x2a>
    4584:	00 97       	sbiw	r24, 0x00	; 0
    4586:	a1 05       	cpc	r26, r1
    4588:	b1 05       	cpc	r27, r1
    458a:	41 f0       	breq	.+16     	; 0x459c <twi_stop+0x62>
    458c:	25 e3       	ldi	r18, 0x35	; 53
    458e:	2a 95       	dec	r18
    4590:	f1 f7       	brne	.-4      	; 0x458e <twi_stop+0x54>
    4592:	00 00       	nop
    4594:	01 97       	sbiw	r24, 0x01	; 1
    4596:	a1 09       	sbc	r26, r1
    4598:	b1 09       	sbc	r27, r1
    459a:	e4 cf       	rjmp	.-56     	; 0x4564 <twi_stop+0x2a>
    459c:	80 91 34 06 	lds	r24, 0x0634	; 0x800634 <twi_do_reset_on_timeout>
    45a0:	0c 94 ae 20 	jmp	0x415c	; 0x415c <twi_handleTimeout>
    45a4:	10 92 3d 06 	sts	0x063D, r1	; 0x80063d <twi_state>
    45a8:	08 95       	ret

000045aa <__vector_24>:

ISR(TWI_vect)
{
    45aa:	1f 92       	push	r1
    45ac:	0f 92       	push	r0
    45ae:	0f b6       	in	r0, 0x3f	; 63
    45b0:	0f 92       	push	r0
    45b2:	11 24       	eor	r1, r1
    45b4:	2f 93       	push	r18
    45b6:	3f 93       	push	r19
    45b8:	4f 93       	push	r20
    45ba:	5f 93       	push	r21
    45bc:	6f 93       	push	r22
    45be:	7f 93       	push	r23
    45c0:	8f 93       	push	r24
    45c2:	9f 93       	push	r25
    45c4:	af 93       	push	r26
    45c6:	bf 93       	push	r27
    45c8:	ef 93       	push	r30
    45ca:	ff 93       	push	r31
  switch(TW_STATUS){
    45cc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    45d0:	88 7f       	andi	r24, 0xF8	; 248
    45d2:	80 36       	cpi	r24, 0x60	; 96
    45d4:	09 f4       	brne	.+2      	; 0x45d8 <__vector_24+0x2e>
    45d6:	9e c0       	rjmp	.+316    	; 0x4714 <__vector_24+0x16a>
    45d8:	78 f5       	brcc	.+94     	; 0x4638 <__vector_24+0x8e>
    45da:	88 32       	cpi	r24, 0x28	; 40
    45dc:	09 f4       	brne	.+2      	; 0x45e0 <__vector_24+0x36>
    45de:	5d c0       	rjmp	.+186    	; 0x469a <__vector_24+0xf0>
    45e0:	90 f4       	brcc	.+36     	; 0x4606 <__vector_24+0x5c>
    45e2:	80 31       	cpi	r24, 0x10	; 16
    45e4:	09 f4       	brne	.+2      	; 0x45e8 <__vector_24+0x3e>
    45e6:	56 c0       	rjmp	.+172    	; 0x4694 <__vector_24+0xea>
    45e8:	38 f4       	brcc	.+14     	; 0x45f8 <__vector_24+0x4e>
    45ea:	88 23       	and	r24, r24
    45ec:	09 f4       	brne	.+2      	; 0x45f0 <__vector_24+0x46>
    45ee:	f5 c0       	rjmp	.+490    	; 0x47da <__vector_24+0x230>
    45f0:	88 30       	cpi	r24, 0x08	; 8
    45f2:	09 f4       	brne	.+2      	; 0x45f6 <__vector_24+0x4c>
    45f4:	4f c0       	rjmp	.+158    	; 0x4694 <__vector_24+0xea>
    45f6:	f5 c0       	rjmp	.+490    	; 0x47e2 <__vector_24+0x238>
    45f8:	88 31       	cpi	r24, 0x18	; 24
    45fa:	09 f4       	brne	.+2      	; 0x45fe <__vector_24+0x54>
    45fc:	4e c0       	rjmp	.+156    	; 0x469a <__vector_24+0xf0>
    45fe:	80 32       	cpi	r24, 0x20	; 32
    4600:	09 f4       	brne	.+2      	; 0x4604 <__vector_24+0x5a>
    4602:	5f c0       	rjmp	.+190    	; 0x46c2 <__vector_24+0x118>
    4604:	ee c0       	rjmp	.+476    	; 0x47e2 <__vector_24+0x238>
    4606:	80 34       	cpi	r24, 0x40	; 64
    4608:	09 f4       	brne	.+2      	; 0x460c <__vector_24+0x62>
    460a:	6a c0       	rjmp	.+212    	; 0x46e0 <__vector_24+0x136>
    460c:	58 f4       	brcc	.+22     	; 0x4624 <__vector_24+0x7a>
    460e:	80 33       	cpi	r24, 0x30	; 48
    4610:	09 f4       	brne	.+2      	; 0x4614 <__vector_24+0x6a>
    4612:	57 c0       	rjmp	.+174    	; 0x46c2 <__vector_24+0x118>
    4614:	88 33       	cpi	r24, 0x38	; 56
    4616:	09 f0       	breq	.+2      	; 0x461a <__vector_24+0x70>
    4618:	e4 c0       	rjmp	.+456    	; 0x47e2 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    461a:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <twi_error>
      twi_releaseBus();
    461e:	0e 94 a8 20 	call	0x4150	; 0x4150 <twi_releaseBus>
      break;
    4622:	df c0       	rjmp	.+446    	; 0x47e2 <__vector_24+0x238>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4624:	80 35       	cpi	r24, 0x50	; 80
    4626:	09 f4       	brne	.+2      	; 0x462a <__vector_24+0x80>
    4628:	4f c0       	rjmp	.+158    	; 0x46c8 <__vector_24+0x11e>
    462a:	88 35       	cpi	r24, 0x58	; 88
    462c:	09 f4       	brne	.+2      	; 0x4630 <__vector_24+0x86>
    462e:	5d c0       	rjmp	.+186    	; 0x46ea <__vector_24+0x140>
    4630:	88 34       	cpi	r24, 0x48	; 72
    4632:	09 f0       	breq	.+2      	; 0x4636 <__vector_24+0x8c>
    4634:	d6 c0       	rjmp	.+428    	; 0x47e2 <__vector_24+0x238>
    4636:	d3 c0       	rjmp	.+422    	; 0x47de <__vector_24+0x234>
    4638:	88 39       	cpi	r24, 0x98	; 152
    463a:	09 f4       	brne	.+2      	; 0x463e <__vector_24+0x94>
    463c:	c4 c0       	rjmp	.+392    	; 0x47c6 <__vector_24+0x21c>
    463e:	a8 f4       	brcc	.+42     	; 0x466a <__vector_24+0xc0>
    4640:	88 37       	cpi	r24, 0x78	; 120
    4642:	09 f4       	brne	.+2      	; 0x4646 <__vector_24+0x9c>
    4644:	67 c0       	rjmp	.+206    	; 0x4714 <__vector_24+0x16a>
    4646:	38 f4       	brcc	.+14     	; 0x4656 <__vector_24+0xac>
    4648:	88 36       	cpi	r24, 0x68	; 104
    464a:	09 f4       	brne	.+2      	; 0x464e <__vector_24+0xa4>
    464c:	63 c0       	rjmp	.+198    	; 0x4714 <__vector_24+0x16a>
    464e:	80 37       	cpi	r24, 0x70	; 112
    4650:	09 f4       	brne	.+2      	; 0x4654 <__vector_24+0xaa>
    4652:	60 c0       	rjmp	.+192    	; 0x4714 <__vector_24+0x16a>
    4654:	c6 c0       	rjmp	.+396    	; 0x47e2 <__vector_24+0x238>
    4656:	88 38       	cpi	r24, 0x88	; 136
    4658:	09 f4       	brne	.+2      	; 0x465c <__vector_24+0xb2>
    465a:	b5 c0       	rjmp	.+362    	; 0x47c6 <__vector_24+0x21c>
    465c:	80 39       	cpi	r24, 0x90	; 144
    465e:	09 f4       	brne	.+2      	; 0x4662 <__vector_24+0xb8>
    4660:	5f c0       	rjmp	.+190    	; 0x4720 <__vector_24+0x176>
    4662:	80 38       	cpi	r24, 0x80	; 128
    4664:	09 f0       	breq	.+2      	; 0x4668 <__vector_24+0xbe>
    4666:	bd c0       	rjmp	.+378    	; 0x47e2 <__vector_24+0x238>
    4668:	5b c0       	rjmp	.+182    	; 0x4720 <__vector_24+0x176>
    466a:	80 3b       	cpi	r24, 0xB0	; 176
    466c:	09 f4       	brne	.+2      	; 0x4670 <__vector_24+0xc6>
    466e:	83 c0       	rjmp	.+262    	; 0x4776 <__vector_24+0x1cc>
    4670:	38 f4       	brcc	.+14     	; 0x4680 <__vector_24+0xd6>
    4672:	80 3a       	cpi	r24, 0xA0	; 160
    4674:	09 f4       	brne	.+2      	; 0x4678 <__vector_24+0xce>
    4676:	66 c0       	rjmp	.+204    	; 0x4744 <__vector_24+0x19a>
    4678:	88 3a       	cpi	r24, 0xA8	; 168
    467a:	09 f4       	brne	.+2      	; 0x467e <__vector_24+0xd4>
    467c:	7c c0       	rjmp	.+248    	; 0x4776 <__vector_24+0x1cc>
    467e:	b1 c0       	rjmp	.+354    	; 0x47e2 <__vector_24+0x238>
    4680:	80 3c       	cpi	r24, 0xC0	; 192
    4682:	09 f4       	brne	.+2      	; 0x4686 <__vector_24+0xdc>
    4684:	a4 c0       	rjmp	.+328    	; 0x47ce <__vector_24+0x224>
    4686:	88 3c       	cpi	r24, 0xC8	; 200
    4688:	09 f4       	brne	.+2      	; 0x468c <__vector_24+0xe2>
    468a:	a1 c0       	rjmp	.+322    	; 0x47ce <__vector_24+0x224>
    468c:	88 3b       	cpi	r24, 0xB8	; 184
    468e:	09 f4       	brne	.+2      	; 0x4692 <__vector_24+0xe8>
    4690:	87 c0       	rjmp	.+270    	; 0x47a0 <__vector_24+0x1f6>
    4692:	a7 c0       	rjmp	.+334    	; 0x47e2 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4694:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <twi_slarw>
    4698:	10 c0       	rjmp	.+32     	; 0x46ba <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    469a:	90 91 0f 06 	lds	r25, 0x060F	; 0x80060f <twi_masterBufferIndex>
    469e:	80 91 0e 06 	lds	r24, 0x060E	; 0x80060e <twi_masterBufferLength>
    46a2:	98 17       	cp	r25, r24
    46a4:	70 f5       	brcc	.+92     	; 0x4702 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    46a6:	e0 91 0f 06 	lds	r30, 0x060F	; 0x80060f <twi_masterBufferIndex>
    46aa:	81 e0       	ldi	r24, 0x01	; 1
    46ac:	8e 0f       	add	r24, r30
    46ae:	80 93 0f 06 	sts	0x060F, r24	; 0x80060f <twi_masterBufferIndex>
    46b2:	f0 e0       	ldi	r31, 0x00	; 0
    46b4:	e0 5f       	subi	r30, 0xF0	; 240
    46b6:	f9 4f       	sbci	r31, 0xF9	; 249
    46b8:	80 81       	ld	r24, Z
    46ba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    46be:	85 ec       	ldi	r24, 0xC5	; 197
    46c0:	83 c0       	rjmp	.+262    	; 0x47c8 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    46c2:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <twi_error>
    46c6:	8b c0       	rjmp	.+278    	; 0x47de <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    46c8:	e0 91 0f 06 	lds	r30, 0x060F	; 0x80060f <twi_masterBufferIndex>
    46cc:	81 e0       	ldi	r24, 0x01	; 1
    46ce:	8e 0f       	add	r24, r30
    46d0:	80 93 0f 06 	sts	0x060F, r24	; 0x80060f <twi_masterBufferIndex>
    46d4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    46d8:	f0 e0       	ldi	r31, 0x00	; 0
    46da:	e0 5f       	subi	r30, 0xF0	; 240
    46dc:	f9 4f       	sbci	r31, 0xF9	; 249
    46de:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    46e0:	90 91 0f 06 	lds	r25, 0x060F	; 0x80060f <twi_masterBufferIndex>
    46e4:	80 91 0e 06 	lds	r24, 0x060E	; 0x80060e <twi_masterBufferLength>
    46e8:	6b c0       	rjmp	.+214    	; 0x47c0 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    46ea:	e0 91 0f 06 	lds	r30, 0x060F	; 0x80060f <twi_masterBufferIndex>
    46ee:	81 e0       	ldi	r24, 0x01	; 1
    46f0:	8e 0f       	add	r24, r30
    46f2:	80 93 0f 06 	sts	0x060F, r24	; 0x80060f <twi_masterBufferIndex>
    46f6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    46fa:	f0 e0       	ldi	r31, 0x00	; 0
    46fc:	e0 5f       	subi	r30, 0xF0	; 240
    46fe:	f9 4f       	sbci	r31, 0xF9	; 249
    4700:	80 83       	st	Z, r24
      if (twi_sendStop){
    4702:	80 91 3b 06 	lds	r24, 0x063B	; 0x80063b <twi_sendStop>
    4706:	81 11       	cpse	r24, r1
    4708:	6a c0       	rjmp	.+212    	; 0x47de <__vector_24+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    470a:	81 e0       	ldi	r24, 0x01	; 1
    470c:	80 93 3a 06 	sts	0x063A, r24	; 0x80063a <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4710:	84 ea       	ldi	r24, 0xA4	; 164
    4712:	5e c0       	rjmp	.+188    	; 0x47d0 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4714:	83 e0       	ldi	r24, 0x03	; 3
    4716:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    471a:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <twi_rxBufferIndex>
    471e:	cf cf       	rjmp	.-98     	; 0x46be <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4720:	80 91 cb 05 	lds	r24, 0x05CB	; 0x8005cb <twi_rxBufferIndex>
    4724:	80 32       	cpi	r24, 0x20	; 32
    4726:	08 f0       	brcs	.+2      	; 0x472a <__vector_24+0x180>
    4728:	4e c0       	rjmp	.+156    	; 0x47c6 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    472a:	e0 91 cb 05 	lds	r30, 0x05CB	; 0x8005cb <twi_rxBufferIndex>
    472e:	81 e0       	ldi	r24, 0x01	; 1
    4730:	8e 0f       	add	r24, r30
    4732:	80 93 cb 05 	sts	0x05CB, r24	; 0x8005cb <twi_rxBufferIndex>
    4736:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    473a:	f0 e0       	ldi	r31, 0x00	; 0
    473c:	e4 53       	subi	r30, 0x34	; 52
    473e:	fa 4f       	sbci	r31, 0xFA	; 250
    4740:	80 83       	st	Z, r24
    4742:	bd cf       	rjmp	.-134    	; 0x46be <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    4744:	0e 94 a8 20 	call	0x4150	; 0x4150 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4748:	80 91 cb 05 	lds	r24, 0x05CB	; 0x8005cb <twi_rxBufferIndex>
    474c:	80 32       	cpi	r24, 0x20	; 32
    474e:	30 f4       	brcc	.+12     	; 0x475c <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4750:	e0 91 cb 05 	lds	r30, 0x05CB	; 0x8005cb <twi_rxBufferIndex>
    4754:	f0 e0       	ldi	r31, 0x00	; 0
    4756:	e4 53       	subi	r30, 0x34	; 52
    4758:	fa 4f       	sbci	r31, 0xFA	; 250
    475a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    475c:	60 91 cb 05 	lds	r22, 0x05CB	; 0x8005cb <twi_rxBufferIndex>
    4760:	70 e0       	ldi	r23, 0x00	; 0
    4762:	e0 91 30 06 	lds	r30, 0x0630	; 0x800630 <twi_onSlaveReceive>
    4766:	f0 91 31 06 	lds	r31, 0x0631	; 0x800631 <twi_onSlaveReceive+0x1>
    476a:	8c ec       	ldi	r24, 0xCC	; 204
    476c:	95 e0       	ldi	r25, 0x05	; 5
    476e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4770:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <twi_rxBufferIndex>
      break;
    4774:	36 c0       	rjmp	.+108    	; 0x47e2 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4776:	84 e0       	ldi	r24, 0x04	; 4
    4778:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    477c:	10 92 ed 05 	sts	0x05ED, r1	; 0x8005ed <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4780:	10 92 ec 05 	sts	0x05EC, r1	; 0x8005ec <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4784:	e0 91 32 06 	lds	r30, 0x0632	; 0x800632 <twi_onSlaveTransmit>
    4788:	f0 91 33 06 	lds	r31, 0x0633	; 0x800633 <twi_onSlaveTransmit+0x1>
    478c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    478e:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <twi_txBufferLength>
    4792:	81 11       	cpse	r24, r1
    4794:	05 c0       	rjmp	.+10     	; 0x47a0 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    4796:	81 e0       	ldi	r24, 0x01	; 1
    4798:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    479c:	10 92 ee 05 	sts	0x05EE, r1	; 0x8005ee <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    47a0:	e0 91 ed 05 	lds	r30, 0x05ED	; 0x8005ed <twi_txBufferIndex>
    47a4:	81 e0       	ldi	r24, 0x01	; 1
    47a6:	8e 0f       	add	r24, r30
    47a8:	80 93 ed 05 	sts	0x05ED, r24	; 0x8005ed <twi_txBufferIndex>
    47ac:	f0 e0       	ldi	r31, 0x00	; 0
    47ae:	e2 51       	subi	r30, 0x12	; 18
    47b0:	fa 4f       	sbci	r31, 0xFA	; 250
    47b2:	80 81       	ld	r24, Z
    47b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    47b8:	90 91 ed 05 	lds	r25, 0x05ED	; 0x8005ed <twi_txBufferIndex>
    47bc:	80 91 ec 05 	lds	r24, 0x05EC	; 0x8005ec <twi_txBufferLength>
    47c0:	98 17       	cp	r25, r24
    47c2:	08 f4       	brcc	.+2      	; 0x47c6 <__vector_24+0x21c>
    47c4:	7c cf       	rjmp	.-264    	; 0x46be <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    47c6:	85 e8       	ldi	r24, 0x85	; 133
    47c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    47cc:	0a c0       	rjmp	.+20     	; 0x47e2 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    47ce:	85 ec       	ldi	r24, 0xC5	; 197
    47d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    47d4:	10 92 3d 06 	sts	0x063D, r1	; 0x80063d <twi_state>
      break;
    47d8:	04 c0       	rjmp	.+8      	; 0x47e2 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    47da:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <twi_error>
      twi_stop();
    47de:	0e 94 9d 22 	call	0x453a	; 0x453a <twi_stop>
      break;
  }
}
    47e2:	ff 91       	pop	r31
    47e4:	ef 91       	pop	r30
    47e6:	bf 91       	pop	r27
    47e8:	af 91       	pop	r26
    47ea:	9f 91       	pop	r25
    47ec:	8f 91       	pop	r24
    47ee:	7f 91       	pop	r23
    47f0:	6f 91       	pop	r22
    47f2:	5f 91       	pop	r21
    47f4:	4f 91       	pop	r20
    47f6:	3f 91       	pop	r19
    47f8:	2f 91       	pop	r18
    47fa:	0f 90       	pop	r0
    47fc:	0f be       	out	0x3f, r0	; 63
    47fe:	0f 90       	pop	r0
    4800:	1f 90       	pop	r1
    4802:	18 95       	reti

00004804 <__cmpsf2>:
    4804:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__fp_cmp>
    4808:	08 f4       	brcc	.+2      	; 0x480c <__cmpsf2+0x8>
    480a:	81 e0       	ldi	r24, 0x01	; 1
    480c:	08 95       	ret

0000480e <__unordsf2>:
    480e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__fp_cmp>
    4812:	88 0b       	sbc	r24, r24
    4814:	99 0b       	sbc	r25, r25
    4816:	08 95       	ret

00004818 <__mulsi3>:
    4818:	db 01       	movw	r26, r22
    481a:	8f 93       	push	r24
    481c:	9f 93       	push	r25
    481e:	0e 94 54 24 	call	0x48a8	; 0x48a8 <__muluhisi3>
    4822:	bf 91       	pop	r27
    4824:	af 91       	pop	r26
    4826:	a2 9f       	mul	r26, r18
    4828:	80 0d       	add	r24, r0
    482a:	91 1d       	adc	r25, r1
    482c:	a3 9f       	mul	r26, r19
    482e:	90 0d       	add	r25, r0
    4830:	b2 9f       	mul	r27, r18
    4832:	90 0d       	add	r25, r0
    4834:	11 24       	eor	r1, r1
    4836:	08 95       	ret

00004838 <__udivmodsi4>:
    4838:	a1 e2       	ldi	r26, 0x21	; 33
    483a:	1a 2e       	mov	r1, r26
    483c:	aa 1b       	sub	r26, r26
    483e:	bb 1b       	sub	r27, r27
    4840:	fd 01       	movw	r30, r26
    4842:	0d c0       	rjmp	.+26     	; 0x485e <__udivmodsi4_ep>

00004844 <__udivmodsi4_loop>:
    4844:	aa 1f       	adc	r26, r26
    4846:	bb 1f       	adc	r27, r27
    4848:	ee 1f       	adc	r30, r30
    484a:	ff 1f       	adc	r31, r31
    484c:	a2 17       	cp	r26, r18
    484e:	b3 07       	cpc	r27, r19
    4850:	e4 07       	cpc	r30, r20
    4852:	f5 07       	cpc	r31, r21
    4854:	20 f0       	brcs	.+8      	; 0x485e <__udivmodsi4_ep>
    4856:	a2 1b       	sub	r26, r18
    4858:	b3 0b       	sbc	r27, r19
    485a:	e4 0b       	sbc	r30, r20
    485c:	f5 0b       	sbc	r31, r21

0000485e <__udivmodsi4_ep>:
    485e:	66 1f       	adc	r22, r22
    4860:	77 1f       	adc	r23, r23
    4862:	88 1f       	adc	r24, r24
    4864:	99 1f       	adc	r25, r25
    4866:	1a 94       	dec	r1
    4868:	69 f7       	brne	.-38     	; 0x4844 <__udivmodsi4_loop>
    486a:	60 95       	com	r22
    486c:	70 95       	com	r23
    486e:	80 95       	com	r24
    4870:	90 95       	com	r25
    4872:	9b 01       	movw	r18, r22
    4874:	ac 01       	movw	r20, r24
    4876:	bd 01       	movw	r22, r26
    4878:	cf 01       	movw	r24, r30
    487a:	08 95       	ret

0000487c <__umulhisi3>:
    487c:	a2 9f       	mul	r26, r18
    487e:	b0 01       	movw	r22, r0
    4880:	b3 9f       	mul	r27, r19
    4882:	c0 01       	movw	r24, r0
    4884:	a3 9f       	mul	r26, r19
    4886:	70 0d       	add	r23, r0
    4888:	81 1d       	adc	r24, r1
    488a:	11 24       	eor	r1, r1
    488c:	91 1d       	adc	r25, r1
    488e:	b2 9f       	mul	r27, r18
    4890:	70 0d       	add	r23, r0
    4892:	81 1d       	adc	r24, r1
    4894:	11 24       	eor	r1, r1
    4896:	91 1d       	adc	r25, r1
    4898:	08 95       	ret

0000489a <__usmulhisi3>:
    489a:	0e 94 3e 24 	call	0x487c	; 0x487c <__umulhisi3>

0000489e <__usmulhisi3_tail>:
    489e:	b7 ff       	sbrs	r27, 7
    48a0:	08 95       	ret
    48a2:	82 1b       	sub	r24, r18
    48a4:	93 0b       	sbc	r25, r19
    48a6:	08 95       	ret

000048a8 <__muluhisi3>:
    48a8:	0e 94 3e 24 	call	0x487c	; 0x487c <__umulhisi3>
    48ac:	a5 9f       	mul	r26, r21
    48ae:	90 0d       	add	r25, r0
    48b0:	b4 9f       	mul	r27, r20
    48b2:	90 0d       	add	r25, r0
    48b4:	a4 9f       	mul	r26, r20
    48b6:	80 0d       	add	r24, r0
    48b8:	91 1d       	adc	r25, r1
    48ba:	11 24       	eor	r1, r1
    48bc:	08 95       	ret

000048be <__muldi3>:
    48be:	df 93       	push	r29
    48c0:	cf 93       	push	r28
    48c2:	1f 93       	push	r17
    48c4:	0f 93       	push	r16
    48c6:	9a 9d       	mul	r25, r10
    48c8:	f0 2d       	mov	r31, r0
    48ca:	21 9f       	mul	r18, r17
    48cc:	f0 0d       	add	r31, r0
    48ce:	8b 9d       	mul	r24, r11
    48d0:	f0 0d       	add	r31, r0
    48d2:	8a 9d       	mul	r24, r10
    48d4:	e0 2d       	mov	r30, r0
    48d6:	f1 0d       	add	r31, r1
    48d8:	03 9f       	mul	r16, r19
    48da:	f0 0d       	add	r31, r0
    48dc:	02 9f       	mul	r16, r18
    48de:	e0 0d       	add	r30, r0
    48e0:	f1 1d       	adc	r31, r1
    48e2:	4e 9d       	mul	r20, r14
    48e4:	e0 0d       	add	r30, r0
    48e6:	f1 1d       	adc	r31, r1
    48e8:	5e 9d       	mul	r21, r14
    48ea:	f0 0d       	add	r31, r0
    48ec:	4f 9d       	mul	r20, r15
    48ee:	f0 0d       	add	r31, r0
    48f0:	7f 93       	push	r23
    48f2:	6f 93       	push	r22
    48f4:	bf 92       	push	r11
    48f6:	af 92       	push	r10
    48f8:	5f 93       	push	r21
    48fa:	4f 93       	push	r20
    48fc:	d5 01       	movw	r26, r10
    48fe:	0e 94 3e 24 	call	0x487c	; 0x487c <__umulhisi3>
    4902:	8b 01       	movw	r16, r22
    4904:	ac 01       	movw	r20, r24
    4906:	d7 01       	movw	r26, r14
    4908:	0e 94 3e 24 	call	0x487c	; 0x487c <__umulhisi3>
    490c:	eb 01       	movw	r28, r22
    490e:	e8 0f       	add	r30, r24
    4910:	f9 1f       	adc	r31, r25
    4912:	d6 01       	movw	r26, r12
    4914:	0e 94 af 24 	call	0x495e	; 0x495e <__muldi3_6>
    4918:	2f 91       	pop	r18
    491a:	3f 91       	pop	r19
    491c:	d6 01       	movw	r26, r12
    491e:	0e 94 3e 24 	call	0x487c	; 0x487c <__umulhisi3>
    4922:	c6 0f       	add	r28, r22
    4924:	d7 1f       	adc	r29, r23
    4926:	e8 1f       	adc	r30, r24
    4928:	f9 1f       	adc	r31, r25
    492a:	af 91       	pop	r26
    492c:	bf 91       	pop	r27
    492e:	0e 94 af 24 	call	0x495e	; 0x495e <__muldi3_6>
    4932:	2f 91       	pop	r18
    4934:	3f 91       	pop	r19
    4936:	0e 94 3e 24 	call	0x487c	; 0x487c <__umulhisi3>
    493a:	c6 0f       	add	r28, r22
    493c:	d7 1f       	adc	r29, r23
    493e:	e8 1f       	adc	r30, r24
    4940:	f9 1f       	adc	r31, r25
    4942:	d6 01       	movw	r26, r12
    4944:	0e 94 3e 24 	call	0x487c	; 0x487c <__umulhisi3>
    4948:	e6 0f       	add	r30, r22
    494a:	f7 1f       	adc	r31, r23
    494c:	98 01       	movw	r18, r16
    494e:	be 01       	movw	r22, r28
    4950:	cf 01       	movw	r24, r30
    4952:	11 24       	eor	r1, r1
    4954:	0f 91       	pop	r16
    4956:	1f 91       	pop	r17
    4958:	cf 91       	pop	r28
    495a:	df 91       	pop	r29
    495c:	08 95       	ret

0000495e <__muldi3_6>:
    495e:	0e 94 3e 24 	call	0x487c	; 0x487c <__umulhisi3>
    4962:	46 0f       	add	r20, r22
    4964:	57 1f       	adc	r21, r23
    4966:	c8 1f       	adc	r28, r24
    4968:	d9 1f       	adc	r29, r25
    496a:	08 f4       	brcc	.+2      	; 0x496e <__muldi3_6+0x10>
    496c:	31 96       	adiw	r30, 0x01	; 1
    496e:	08 95       	ret

00004970 <__umulsidi3>:
    4970:	e8 94       	clt

00004972 <__umulsidi3_helper>:
    4972:	df 93       	push	r29
    4974:	cf 93       	push	r28
    4976:	fc 01       	movw	r30, r24
    4978:	db 01       	movw	r26, r22
    497a:	0e 94 3e 24 	call	0x487c	; 0x487c <__umulhisi3>
    497e:	7f 93       	push	r23
    4980:	6f 93       	push	r22
    4982:	e9 01       	movw	r28, r18
    4984:	9a 01       	movw	r18, r20
    4986:	ac 01       	movw	r20, r24
    4988:	bf 93       	push	r27
    498a:	af 93       	push	r26
    498c:	3f 93       	push	r19
    498e:	2f 93       	push	r18
    4990:	df 01       	movw	r26, r30
    4992:	0e 94 3e 24 	call	0x487c	; 0x487c <__umulhisi3>
    4996:	26 f4       	brtc	.+8      	; 0x49a0 <__umulsidi3_helper+0x2e>
    4998:	6c 1b       	sub	r22, r28
    499a:	7d 0b       	sbc	r23, r29
    499c:	82 0b       	sbc	r24, r18
    499e:	93 0b       	sbc	r25, r19
    49a0:	9e 01       	movw	r18, r28
    49a2:	eb 01       	movw	r28, r22
    49a4:	fc 01       	movw	r30, r24
    49a6:	0e 94 af 24 	call	0x495e	; 0x495e <__muldi3_6>
    49aa:	af 91       	pop	r26
    49ac:	bf 91       	pop	r27
    49ae:	2f 91       	pop	r18
    49b0:	3f 91       	pop	r19
    49b2:	0e 94 af 24 	call	0x495e	; 0x495e <__muldi3_6>
    49b6:	be 01       	movw	r22, r28
    49b8:	cf 01       	movw	r24, r30
    49ba:	f9 01       	movw	r30, r18
    49bc:	2f 91       	pop	r18
    49be:	3f 91       	pop	r19
    49c0:	cf 91       	pop	r28
    49c2:	df 91       	pop	r29
    49c4:	08 95       	ret

000049c6 <__cmpdi2>:
    49c6:	2a 15       	cp	r18, r10
    49c8:	3b 05       	cpc	r19, r11
    49ca:	4c 05       	cpc	r20, r12
    49cc:	5d 05       	cpc	r21, r13
    49ce:	6e 05       	cpc	r22, r14
    49d0:	7f 05       	cpc	r23, r15
    49d2:	80 07       	cpc	r24, r16
    49d4:	91 07       	cpc	r25, r17
    49d6:	08 95       	ret

000049d8 <__tablejump2__>:
    49d8:	ee 0f       	add	r30, r30
    49da:	ff 1f       	adc	r31, r31
    49dc:	05 90       	lpm	r0, Z+
    49de:	f4 91       	lpm	r31, Z
    49e0:	e0 2d       	mov	r30, r0
    49e2:	09 94       	ijmp

000049e4 <malloc>:
    49e4:	0f 93       	push	r16
    49e6:	1f 93       	push	r17
    49e8:	cf 93       	push	r28
    49ea:	df 93       	push	r29
    49ec:	82 30       	cpi	r24, 0x02	; 2
    49ee:	91 05       	cpc	r25, r1
    49f0:	10 f4       	brcc	.+4      	; 0x49f6 <malloc+0x12>
    49f2:	82 e0       	ldi	r24, 0x02	; 2
    49f4:	90 e0       	ldi	r25, 0x00	; 0
    49f6:	e0 91 40 06 	lds	r30, 0x0640	; 0x800640 <__flp>
    49fa:	f0 91 41 06 	lds	r31, 0x0641	; 0x800641 <__flp+0x1>
    49fe:	20 e0       	ldi	r18, 0x00	; 0
    4a00:	30 e0       	ldi	r19, 0x00	; 0
    4a02:	a0 e0       	ldi	r26, 0x00	; 0
    4a04:	b0 e0       	ldi	r27, 0x00	; 0
    4a06:	30 97       	sbiw	r30, 0x00	; 0
    4a08:	19 f1       	breq	.+70     	; 0x4a50 <malloc+0x6c>
    4a0a:	40 81       	ld	r20, Z
    4a0c:	51 81       	ldd	r21, Z+1	; 0x01
    4a0e:	02 81       	ldd	r16, Z+2	; 0x02
    4a10:	13 81       	ldd	r17, Z+3	; 0x03
    4a12:	48 17       	cp	r20, r24
    4a14:	59 07       	cpc	r21, r25
    4a16:	c8 f0       	brcs	.+50     	; 0x4a4a <malloc+0x66>
    4a18:	84 17       	cp	r24, r20
    4a1a:	95 07       	cpc	r25, r21
    4a1c:	69 f4       	brne	.+26     	; 0x4a38 <malloc+0x54>
    4a1e:	10 97       	sbiw	r26, 0x00	; 0
    4a20:	31 f0       	breq	.+12     	; 0x4a2e <malloc+0x4a>
    4a22:	12 96       	adiw	r26, 0x02	; 2
    4a24:	0c 93       	st	X, r16
    4a26:	12 97       	sbiw	r26, 0x02	; 2
    4a28:	13 96       	adiw	r26, 0x03	; 3
    4a2a:	1c 93       	st	X, r17
    4a2c:	27 c0       	rjmp	.+78     	; 0x4a7c <malloc+0x98>
    4a2e:	00 93 40 06 	sts	0x0640, r16	; 0x800640 <__flp>
    4a32:	10 93 41 06 	sts	0x0641, r17	; 0x800641 <__flp+0x1>
    4a36:	22 c0       	rjmp	.+68     	; 0x4a7c <malloc+0x98>
    4a38:	21 15       	cp	r18, r1
    4a3a:	31 05       	cpc	r19, r1
    4a3c:	19 f0       	breq	.+6      	; 0x4a44 <malloc+0x60>
    4a3e:	42 17       	cp	r20, r18
    4a40:	53 07       	cpc	r21, r19
    4a42:	18 f4       	brcc	.+6      	; 0x4a4a <malloc+0x66>
    4a44:	9a 01       	movw	r18, r20
    4a46:	bd 01       	movw	r22, r26
    4a48:	ef 01       	movw	r28, r30
    4a4a:	df 01       	movw	r26, r30
    4a4c:	f8 01       	movw	r30, r16
    4a4e:	db cf       	rjmp	.-74     	; 0x4a06 <malloc+0x22>
    4a50:	21 15       	cp	r18, r1
    4a52:	31 05       	cpc	r19, r1
    4a54:	f9 f0       	breq	.+62     	; 0x4a94 <malloc+0xb0>
    4a56:	28 1b       	sub	r18, r24
    4a58:	39 0b       	sbc	r19, r25
    4a5a:	24 30       	cpi	r18, 0x04	; 4
    4a5c:	31 05       	cpc	r19, r1
    4a5e:	80 f4       	brcc	.+32     	; 0x4a80 <malloc+0x9c>
    4a60:	8a 81       	ldd	r24, Y+2	; 0x02
    4a62:	9b 81       	ldd	r25, Y+3	; 0x03
    4a64:	61 15       	cp	r22, r1
    4a66:	71 05       	cpc	r23, r1
    4a68:	21 f0       	breq	.+8      	; 0x4a72 <malloc+0x8e>
    4a6a:	fb 01       	movw	r30, r22
    4a6c:	93 83       	std	Z+3, r25	; 0x03
    4a6e:	82 83       	std	Z+2, r24	; 0x02
    4a70:	04 c0       	rjmp	.+8      	; 0x4a7a <malloc+0x96>
    4a72:	90 93 41 06 	sts	0x0641, r25	; 0x800641 <__flp+0x1>
    4a76:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__flp>
    4a7a:	fe 01       	movw	r30, r28
    4a7c:	32 96       	adiw	r30, 0x02	; 2
    4a7e:	44 c0       	rjmp	.+136    	; 0x4b08 <malloc+0x124>
    4a80:	fe 01       	movw	r30, r28
    4a82:	e2 0f       	add	r30, r18
    4a84:	f3 1f       	adc	r31, r19
    4a86:	81 93       	st	Z+, r24
    4a88:	91 93       	st	Z+, r25
    4a8a:	22 50       	subi	r18, 0x02	; 2
    4a8c:	31 09       	sbc	r19, r1
    4a8e:	39 83       	std	Y+1, r19	; 0x01
    4a90:	28 83       	st	Y, r18
    4a92:	3a c0       	rjmp	.+116    	; 0x4b08 <malloc+0x124>
    4a94:	20 91 3e 06 	lds	r18, 0x063E	; 0x80063e <__brkval>
    4a98:	30 91 3f 06 	lds	r19, 0x063F	; 0x80063f <__brkval+0x1>
    4a9c:	23 2b       	or	r18, r19
    4a9e:	41 f4       	brne	.+16     	; 0x4ab0 <malloc+0xcc>
    4aa0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4aa4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4aa8:	30 93 3f 06 	sts	0x063F, r19	; 0x80063f <__brkval+0x1>
    4aac:	20 93 3e 06 	sts	0x063E, r18	; 0x80063e <__brkval>
    4ab0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    4ab4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4ab8:	21 15       	cp	r18, r1
    4aba:	31 05       	cpc	r19, r1
    4abc:	41 f4       	brne	.+16     	; 0x4ace <malloc+0xea>
    4abe:	2d b7       	in	r18, 0x3d	; 61
    4ac0:	3e b7       	in	r19, 0x3e	; 62
    4ac2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4ac6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4aca:	24 1b       	sub	r18, r20
    4acc:	35 0b       	sbc	r19, r21
    4ace:	e0 91 3e 06 	lds	r30, 0x063E	; 0x80063e <__brkval>
    4ad2:	f0 91 3f 06 	lds	r31, 0x063F	; 0x80063f <__brkval+0x1>
    4ad6:	e2 17       	cp	r30, r18
    4ad8:	f3 07       	cpc	r31, r19
    4ada:	a0 f4       	brcc	.+40     	; 0x4b04 <malloc+0x120>
    4adc:	2e 1b       	sub	r18, r30
    4ade:	3f 0b       	sbc	r19, r31
    4ae0:	28 17       	cp	r18, r24
    4ae2:	39 07       	cpc	r19, r25
    4ae4:	78 f0       	brcs	.+30     	; 0x4b04 <malloc+0x120>
    4ae6:	ac 01       	movw	r20, r24
    4ae8:	4e 5f       	subi	r20, 0xFE	; 254
    4aea:	5f 4f       	sbci	r21, 0xFF	; 255
    4aec:	24 17       	cp	r18, r20
    4aee:	35 07       	cpc	r19, r21
    4af0:	48 f0       	brcs	.+18     	; 0x4b04 <malloc+0x120>
    4af2:	4e 0f       	add	r20, r30
    4af4:	5f 1f       	adc	r21, r31
    4af6:	50 93 3f 06 	sts	0x063F, r21	; 0x80063f <__brkval+0x1>
    4afa:	40 93 3e 06 	sts	0x063E, r20	; 0x80063e <__brkval>
    4afe:	81 93       	st	Z+, r24
    4b00:	91 93       	st	Z+, r25
    4b02:	02 c0       	rjmp	.+4      	; 0x4b08 <malloc+0x124>
    4b04:	e0 e0       	ldi	r30, 0x00	; 0
    4b06:	f0 e0       	ldi	r31, 0x00	; 0
    4b08:	cf 01       	movw	r24, r30
    4b0a:	df 91       	pop	r29
    4b0c:	cf 91       	pop	r28
    4b0e:	1f 91       	pop	r17
    4b10:	0f 91       	pop	r16
    4b12:	08 95       	ret

00004b14 <free>:
    4b14:	cf 93       	push	r28
    4b16:	df 93       	push	r29
    4b18:	00 97       	sbiw	r24, 0x00	; 0
    4b1a:	09 f4       	brne	.+2      	; 0x4b1e <free+0xa>
    4b1c:	81 c0       	rjmp	.+258    	; 0x4c20 <free+0x10c>
    4b1e:	fc 01       	movw	r30, r24
    4b20:	32 97       	sbiw	r30, 0x02	; 2
    4b22:	13 82       	std	Z+3, r1	; 0x03
    4b24:	12 82       	std	Z+2, r1	; 0x02
    4b26:	a0 91 40 06 	lds	r26, 0x0640	; 0x800640 <__flp>
    4b2a:	b0 91 41 06 	lds	r27, 0x0641	; 0x800641 <__flp+0x1>
    4b2e:	10 97       	sbiw	r26, 0x00	; 0
    4b30:	81 f4       	brne	.+32     	; 0x4b52 <free+0x3e>
    4b32:	20 81       	ld	r18, Z
    4b34:	31 81       	ldd	r19, Z+1	; 0x01
    4b36:	82 0f       	add	r24, r18
    4b38:	93 1f       	adc	r25, r19
    4b3a:	20 91 3e 06 	lds	r18, 0x063E	; 0x80063e <__brkval>
    4b3e:	30 91 3f 06 	lds	r19, 0x063F	; 0x80063f <__brkval+0x1>
    4b42:	28 17       	cp	r18, r24
    4b44:	39 07       	cpc	r19, r25
    4b46:	51 f5       	brne	.+84     	; 0x4b9c <free+0x88>
    4b48:	f0 93 3f 06 	sts	0x063F, r31	; 0x80063f <__brkval+0x1>
    4b4c:	e0 93 3e 06 	sts	0x063E, r30	; 0x80063e <__brkval>
    4b50:	67 c0       	rjmp	.+206    	; 0x4c20 <free+0x10c>
    4b52:	ed 01       	movw	r28, r26
    4b54:	20 e0       	ldi	r18, 0x00	; 0
    4b56:	30 e0       	ldi	r19, 0x00	; 0
    4b58:	ce 17       	cp	r28, r30
    4b5a:	df 07       	cpc	r29, r31
    4b5c:	40 f4       	brcc	.+16     	; 0x4b6e <free+0x5a>
    4b5e:	4a 81       	ldd	r20, Y+2	; 0x02
    4b60:	5b 81       	ldd	r21, Y+3	; 0x03
    4b62:	9e 01       	movw	r18, r28
    4b64:	41 15       	cp	r20, r1
    4b66:	51 05       	cpc	r21, r1
    4b68:	f1 f0       	breq	.+60     	; 0x4ba6 <free+0x92>
    4b6a:	ea 01       	movw	r28, r20
    4b6c:	f5 cf       	rjmp	.-22     	; 0x4b58 <free+0x44>
    4b6e:	d3 83       	std	Z+3, r29	; 0x03
    4b70:	c2 83       	std	Z+2, r28	; 0x02
    4b72:	40 81       	ld	r20, Z
    4b74:	51 81       	ldd	r21, Z+1	; 0x01
    4b76:	84 0f       	add	r24, r20
    4b78:	95 1f       	adc	r25, r21
    4b7a:	c8 17       	cp	r28, r24
    4b7c:	d9 07       	cpc	r29, r25
    4b7e:	59 f4       	brne	.+22     	; 0x4b96 <free+0x82>
    4b80:	88 81       	ld	r24, Y
    4b82:	99 81       	ldd	r25, Y+1	; 0x01
    4b84:	84 0f       	add	r24, r20
    4b86:	95 1f       	adc	r25, r21
    4b88:	02 96       	adiw	r24, 0x02	; 2
    4b8a:	91 83       	std	Z+1, r25	; 0x01
    4b8c:	80 83       	st	Z, r24
    4b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b90:	9b 81       	ldd	r25, Y+3	; 0x03
    4b92:	93 83       	std	Z+3, r25	; 0x03
    4b94:	82 83       	std	Z+2, r24	; 0x02
    4b96:	21 15       	cp	r18, r1
    4b98:	31 05       	cpc	r19, r1
    4b9a:	29 f4       	brne	.+10     	; 0x4ba6 <free+0x92>
    4b9c:	f0 93 41 06 	sts	0x0641, r31	; 0x800641 <__flp+0x1>
    4ba0:	e0 93 40 06 	sts	0x0640, r30	; 0x800640 <__flp>
    4ba4:	3d c0       	rjmp	.+122    	; 0x4c20 <free+0x10c>
    4ba6:	e9 01       	movw	r28, r18
    4ba8:	fb 83       	std	Y+3, r31	; 0x03
    4baa:	ea 83       	std	Y+2, r30	; 0x02
    4bac:	49 91       	ld	r20, Y+
    4bae:	59 91       	ld	r21, Y+
    4bb0:	c4 0f       	add	r28, r20
    4bb2:	d5 1f       	adc	r29, r21
    4bb4:	ec 17       	cp	r30, r28
    4bb6:	fd 07       	cpc	r31, r29
    4bb8:	61 f4       	brne	.+24     	; 0x4bd2 <free+0xbe>
    4bba:	80 81       	ld	r24, Z
    4bbc:	91 81       	ldd	r25, Z+1	; 0x01
    4bbe:	84 0f       	add	r24, r20
    4bc0:	95 1f       	adc	r25, r21
    4bc2:	02 96       	adiw	r24, 0x02	; 2
    4bc4:	e9 01       	movw	r28, r18
    4bc6:	99 83       	std	Y+1, r25	; 0x01
    4bc8:	88 83       	st	Y, r24
    4bca:	82 81       	ldd	r24, Z+2	; 0x02
    4bcc:	93 81       	ldd	r25, Z+3	; 0x03
    4bce:	9b 83       	std	Y+3, r25	; 0x03
    4bd0:	8a 83       	std	Y+2, r24	; 0x02
    4bd2:	e0 e0       	ldi	r30, 0x00	; 0
    4bd4:	f0 e0       	ldi	r31, 0x00	; 0
    4bd6:	12 96       	adiw	r26, 0x02	; 2
    4bd8:	8d 91       	ld	r24, X+
    4bda:	9c 91       	ld	r25, X
    4bdc:	13 97       	sbiw	r26, 0x03	; 3
    4bde:	00 97       	sbiw	r24, 0x00	; 0
    4be0:	19 f0       	breq	.+6      	; 0x4be8 <free+0xd4>
    4be2:	fd 01       	movw	r30, r26
    4be4:	dc 01       	movw	r26, r24
    4be6:	f7 cf       	rjmp	.-18     	; 0x4bd6 <free+0xc2>
    4be8:	8d 91       	ld	r24, X+
    4bea:	9c 91       	ld	r25, X
    4bec:	11 97       	sbiw	r26, 0x01	; 1
    4bee:	9d 01       	movw	r18, r26
    4bf0:	2e 5f       	subi	r18, 0xFE	; 254
    4bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    4bf4:	82 0f       	add	r24, r18
    4bf6:	93 1f       	adc	r25, r19
    4bf8:	20 91 3e 06 	lds	r18, 0x063E	; 0x80063e <__brkval>
    4bfc:	30 91 3f 06 	lds	r19, 0x063F	; 0x80063f <__brkval+0x1>
    4c00:	28 17       	cp	r18, r24
    4c02:	39 07       	cpc	r19, r25
    4c04:	69 f4       	brne	.+26     	; 0x4c20 <free+0x10c>
    4c06:	30 97       	sbiw	r30, 0x00	; 0
    4c08:	29 f4       	brne	.+10     	; 0x4c14 <free+0x100>
    4c0a:	10 92 41 06 	sts	0x0641, r1	; 0x800641 <__flp+0x1>
    4c0e:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__flp>
    4c12:	02 c0       	rjmp	.+4      	; 0x4c18 <free+0x104>
    4c14:	13 82       	std	Z+3, r1	; 0x03
    4c16:	12 82       	std	Z+2, r1	; 0x02
    4c18:	b0 93 3f 06 	sts	0x063F, r27	; 0x80063f <__brkval+0x1>
    4c1c:	a0 93 3e 06 	sts	0x063E, r26	; 0x80063e <__brkval>
    4c20:	df 91       	pop	r29
    4c22:	cf 91       	pop	r28
    4c24:	08 95       	ret

00004c26 <__do_global_dtors>:
    4c26:	10 e0       	ldi	r17, 0x00	; 0
    4c28:	cb ea       	ldi	r28, 0xAB	; 171
    4c2a:	d0 e0       	ldi	r29, 0x00	; 0
    4c2c:	04 c0       	rjmp	.+8      	; 0x4c36 <__do_global_dtors+0x10>
    4c2e:	fe 01       	movw	r30, r28
    4c30:	0e 94 ec 24 	call	0x49d8	; 0x49d8 <__tablejump2__>
    4c34:	21 96       	adiw	r28, 0x01	; 1
    4c36:	cc 3a       	cpi	r28, 0xAC	; 172
    4c38:	d1 07       	cpc	r29, r17
    4c3a:	c9 f7       	brne	.-14     	; 0x4c2e <__do_global_dtors+0x8>
    4c3c:	f8 94       	cli

00004c3e <__stop_program>:
    4c3e:	ff cf       	rjmp	.-2      	; 0x4c3e <__stop_program>
