
pdm_sketch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d8  00800100  00004ca8  00004d3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004ca8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000370  008002d8  008002d8  00004f14  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004f14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004f44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007b8  00000000  00000000  00004f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001538c  00000000  00000000  0000573c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000393a  00000000  00000000  0001aac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004e74  00000000  00000000  0001e402  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001b48  00000000  00000000  00023278  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005ffe  00000000  00000000  00024dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009f99  00000000  00000000  0002adbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000790  00000000  00000000  00034d57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ac 00 	jmp	0x158	; 0x158 <__dtors_end>
       4:	0c 94 1d 20 	jmp	0x403a	; 0x403a <__vector_1>
       8:	0c 94 44 20 	jmp	0x4088	; 0x4088 <__vector_2>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <__vector_16>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__vector_18>
      4c:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__vector_19>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 09 23 	jmp	0x4612	; 0x4612 <__vector_24>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	73 65       	ori	r23, 0x53	; 83
      6a:	74 20       	and	r7, r4
      6c:	63 61       	ori	r22, 0x13	; 19
      6e:	6c 69       	ori	r22, 0x9C	; 156
      70:	62 72       	andi	r22, 0x22	; 34
      72:	61 74       	andi	r22, 0x41	; 65
      74:	69 6f       	ori	r22, 0xF9	; 249
      76:	6e 00       	.word	0x006e	; ????

00000078 <_ZZN8INA233_S10resetAlarmEvE3__c>:
      78:	72 65 73 65 74 20 61 6c 61 72 6d 00                 reset alarm.

00000084 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_4>:
      84:	55 56 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     UV WARN LIMIT re
      94:	61 64 62 61 63 6b 3a 20 00                          adback: .

0000009d <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_3>:
      9d:	55 56 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     UV WARN LIMIT: .

000000ad <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_2>:
      ad:	4f 56 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     OV WARN LIMIT re
      bd:	61 64 62 61 63 6b 3a 20 00                          adback: .

000000c6 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_1>:
      c6:	4f 56 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     OV WARN LIMIT: .

000000d6 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_0>:
      d6:	4f 43 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     OC WARN LIMIT re
      e6:	61 64 62 61 63 6b 3a 20 00                          adback: .

000000ef <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c>:
      ef:	4f 43 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     OC WARN LIMIT: .

000000ff <digital_pin_to_timer_PGM>:
      ff:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     10f:	00 00 00 00                                         ....

00000113 <digital_pin_to_bit_mask_PGM>:
     113:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     123:	04 08 10 20                                         ... 

00000127 <digital_pin_to_port_PGM>:
     127:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     137:	03 03 03 03                                         ....

0000013b <port_to_output_PGM>:
     13b:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000145 <port_to_mode_PGM>:
     145:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000150 <__ctors_start>:
     150:	65 06       	cpc	r6, r21
     152:	3c 0a       	sbc	r3, r28
     154:	1c 1f       	adc	r17, r28

00000156 <__ctors_end>:
     156:	8d 07       	cpc	r24, r29

00000158 <__dtors_end>:
     158:	11 24       	eor	r1, r1
     15a:	1f be       	out	0x3f, r1	; 63
     15c:	cf ef       	ldi	r28, 0xFF	; 255
     15e:	d8 e0       	ldi	r29, 0x08	; 8
     160:	de bf       	out	0x3e, r29	; 62
     162:	cd bf       	out	0x3d, r28	; 61

00000164 <__do_copy_data>:
     164:	12 e0       	ldi	r17, 0x02	; 2
     166:	a0 e0       	ldi	r26, 0x00	; 0
     168:	b1 e0       	ldi	r27, 0x01	; 1
     16a:	e8 ea       	ldi	r30, 0xA8	; 168
     16c:	fc e4       	ldi	r31, 0x4C	; 76
     16e:	02 c0       	rjmp	.+4      	; 0x174 <__do_copy_data+0x10>
     170:	05 90       	lpm	r0, Z+
     172:	0d 92       	st	X+, r0
     174:	a8 3d       	cpi	r26, 0xD8	; 216
     176:	b1 07       	cpc	r27, r17
     178:	d9 f7       	brne	.-10     	; 0x170 <__do_copy_data+0xc>

0000017a <__do_clear_bss>:
     17a:	26 e0       	ldi	r18, 0x06	; 6
     17c:	a8 ed       	ldi	r26, 0xD8	; 216
     17e:	b2 e0       	ldi	r27, 0x02	; 2
     180:	01 c0       	rjmp	.+2      	; 0x184 <.do_clear_bss_start>

00000182 <.do_clear_bss_loop>:
     182:	1d 92       	st	X+, r1

00000184 <.do_clear_bss_start>:
     184:	a8 34       	cpi	r26, 0x48	; 72
     186:	b2 07       	cpc	r27, r18
     188:	e1 f7       	brne	.-8      	; 0x182 <.do_clear_bss_loop>

0000018a <__do_global_ctors>:
     18a:	10 e0       	ldi	r17, 0x00	; 0
     18c:	cb ea       	ldi	r28, 0xAB	; 171
     18e:	d0 e0       	ldi	r29, 0x00	; 0
     190:	04 c0       	rjmp	.+8      	; 0x19a <__do_global_ctors+0x10>
     192:	21 97       	sbiw	r28, 0x01	; 1
     194:	fe 01       	movw	r30, r28
     196:	0e 94 20 25 	call	0x4a40	; 0x4a40 <__tablejump2__>
     19a:	c8 3a       	cpi	r28, 0xA8	; 168
     19c:	d1 07       	cpc	r29, r17
     19e:	c9 f7       	brne	.-14     	; 0x192 <__do_global_ctors+0x8>
     1a0:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <main>
     1a4:	0c 94 47 26 	jmp	0x4c8e	; 0x4c8e <__do_global_dtors>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>:

void INA233_S::getAlarm()
{
    INA233_Data_Package data = receiveData_(0x7C, 1);
    Serial.print("status input: ");
    Serial.println(data.msg[0], BIN);
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
     1b4:	dc 01       	movw	r26, r24
     1b6:	6c 93       	st	X, r22
     1b8:	12 96       	adiw	r26, 0x02	; 2
     1ba:	5c 93       	st	X, r21
     1bc:	4e 93       	st	-X, r20
     1be:	11 97       	sbiw	r26, 0x01	; 1
     1c0:	14 96       	adiw	r26, 0x04	; 4
     1c2:	3c 93       	st	X, r19
     1c4:	2e 93       	st	-X, r18
     1c6:	13 97       	sbiw	r26, 0x03	; 3
     1c8:	2c e0       	ldi	r18, 0x0C	; 12
     1ca:	fe 01       	movw	r30, r28
     1cc:	35 96       	adiw	r30, 0x05	; 5
     1ce:	15 96       	adiw	r26, 0x05	; 5
     1d0:	01 90       	ld	r0, Z+
     1d2:	0d 92       	st	X+, r0
     1d4:	2a 95       	dec	r18
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config+0x24>
     1d8:	2a e0       	ldi	r18, 0x0A	; 10
     1da:	fc 01       	movw	r30, r24
     1dc:	71 96       	adiw	r30, 0x11	; 17
     1de:	df 01       	movw	r26, r30
     1e0:	32 2f       	mov	r19, r18
     1e2:	1d 92       	st	X+, r1
     1e4:	3a 95       	dec	r19
     1e6:	e9 f7       	brne	.-6      	; 0x1e2 <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config+0x36>
     1e8:	dc 01       	movw	r26, r24
     1ea:	5b 96       	adiw	r26, 0x1b	; 27
     1ec:	1c 92       	st	X, r1
     1ee:	5b 97       	sbiw	r26, 0x1b	; 27
     1f0:	5c 96       	adiw	r26, 0x1c	; 28
     1f2:	2c 93       	st	X, r18
     1f4:	5c 97       	sbiw	r26, 0x1c	; 28
     1f6:	5d 96       	adiw	r26, 0x1d	; 29
     1f8:	1c 92       	st	X, r1
     1fa:	5d 97       	sbiw	r26, 0x1d	; 29
     1fc:	5e 96       	adiw	r26, 0x1e	; 30
     1fe:	1c 92       	st	X, r1
     200:	5e 97       	sbiw	r26, 0x1e	; 30
     202:	5f 96       	adiw	r26, 0x1f	; 31
     204:	1c 92       	st	X, r1
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <_ZN8INA233_S15transmitCommandEh>:
     20c:	cf 93       	push	r28
     20e:	c6 2f       	mov	r28, r22
     210:	fc 01       	movw	r30, r24
     212:	60 81       	ld	r22, Z
     214:	8a e7       	ldi	r24, 0x7A	; 122
     216:	95 e0       	ldi	r25, 0x05	; 5
     218:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_ZN7TwoWire17beginTransmissionEh>
     21c:	6c 2f       	mov	r22, r28
     21e:	8a e7       	ldi	r24, 0x7A	; 122
     220:	95 e0       	ldi	r25, 0x05	; 5
     222:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <_ZN7TwoWire5writeEh>
     226:	8a e7       	ldi	r24, 0x7A	; 122
     228:	95 e0       	ldi	r25, 0x05	; 5
     22a:	cf 91       	pop	r28
     22c:	0c 94 19 1f 	jmp	0x3e32	; 0x3e32 <_ZN7TwoWire15endTransmissionEv>

00000230 <_ZN8INA233_S10resetAlarmEv>:
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	ec 01       	movw	r28, r24
     236:	68 e7       	ldi	r22, 0x78	; 120
     238:	70 e0       	ldi	r23, 0x00	; 0
     23a:	8f ec       	ldi	r24, 0xCF	; 207
     23c:	94 e0       	ldi	r25, 0x04	; 4
     23e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     242:	63 e0       	ldi	r22, 0x03	; 3
     244:	ce 01       	movw	r24, r28
     246:	df 91       	pop	r29
     248:	cf 91       	pop	r28
     24a:	0c 94 06 01 	jmp	0x20c	; 0x20c <_ZN8INA233_S15transmitCommandEh>

0000024e <_ZN8INA233_S9resetChipEv>:
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	ec 01       	movw	r28, r24
     254:	68 e2       	ldi	r22, 0x28	; 40
     256:	71 e0       	ldi	r23, 0x01	; 1
     258:	8f ec       	ldi	r24, 0xCF	; 207
     25a:	94 e0       	ldi	r25, 0x04	; 4
     25c:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN5Print7printlnEPKc>
     260:	62 e1       	ldi	r22, 0x12	; 18
     262:	ce 01       	movw	r24, r28
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	0c 94 06 01 	jmp	0x20c	; 0x20c <_ZN8INA233_S15transmitCommandEh>

0000026c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>:
     26c:	1f 93       	push	r17
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	fc 01       	movw	r30, r24
     274:	eb 01       	movw	r28, r22
     276:	14 2f       	mov	r17, r20
     278:	9a 85       	ldd	r25, Y+10	; 0x0a
     27a:	93 30       	cpi	r25, 0x03	; 3
     27c:	18 f0       	brcs	.+6      	; 0x284 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x18>
     27e:	63 e3       	ldi	r22, 0x33	; 51
     280:	71 e0       	ldi	r23, 0x01	; 1
     282:	04 c0       	rjmp	.+8      	; 0x28c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x20>
     284:	91 11       	cpse	r25, r1
     286:	0f c0       	rjmp	.+30     	; 0x2a6 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x3a>
     288:	69 e9       	ldi	r22, 0x99	; 153
     28a:	71 e0       	ldi	r23, 0x01	; 1
     28c:	8f ec       	ldi	r24, 0xCF	; 207
     28e:	94 e0       	ldi	r25, 0x04	; 4
     290:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN5Print7printlnEPKc>
     294:	68 e7       	ldi	r22, 0x78	; 120
     296:	71 e0       	ldi	r23, 0x01	; 1
     298:	8f ec       	ldi	r24, 0xCF	; 207
     29a:	94 e0       	ldi	r25, 0x04	; 4
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	1f 91       	pop	r17
     2a2:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <_ZN5Print7printlnEPKc>
     2a6:	60 81       	ld	r22, Z
     2a8:	8a e7       	ldi	r24, 0x7A	; 122
     2aa:	95 e0       	ldi	r25, 0x05	; 5
     2ac:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_ZN7TwoWire17beginTransmissionEh>
     2b0:	61 2f       	mov	r22, r17
     2b2:	8a e7       	ldi	r24, 0x7A	; 122
     2b4:	95 e0       	ldi	r25, 0x05	; 5
     2b6:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <_ZN7TwoWire5writeEh>
     2ba:	68 81       	ld	r22, Y
     2bc:	8a e7       	ldi	r24, 0x7A	; 122
     2be:	95 e0       	ldi	r25, 0x05	; 5
     2c0:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <_ZN7TwoWire5writeEh>
     2c4:	8a 85       	ldd	r24, Y+10	; 0x0a
     2c6:	82 30       	cpi	r24, 0x02	; 2
     2c8:	29 f4       	brne	.+10     	; 0x2d4 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x68>
     2ca:	69 81       	ldd	r22, Y+1	; 0x01
     2cc:	8a e7       	ldi	r24, 0x7A	; 122
     2ce:	95 e0       	ldi	r25, 0x05	; 5
     2d0:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <_ZN7TwoWire5writeEh>
     2d4:	8a e7       	ldi	r24, 0x7A	; 122
     2d6:	95 e0       	ldi	r25, 0x05	; 5
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	1f 91       	pop	r17
     2de:	0c 94 19 1f 	jmp	0x3e32	; 0x3e32 <_ZN7TwoWire15endTransmissionEv>

000002e2 <_ZN8INA233_S12receiveData_Ehh>:
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	0f 93       	push	r16
     2e8:	1f 93       	push	r17
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	ec 01       	movw	r28, r24
     2f0:	7b 01       	movw	r14, r22
     2f2:	02 2f       	mov	r16, r18
     2f4:	8f e0       	ldi	r24, 0x0F	; 15
     2f6:	fe 01       	movw	r30, r28
     2f8:	11 92       	st	Z+, r1
     2fa:	8a 95       	dec	r24
     2fc:	e9 f7       	brne	.-6      	; 0x2f8 <_ZN8INA233_S12receiveData_Ehh+0x16>
     2fe:	8a e0       	ldi	r24, 0x0A	; 10
     300:	8b 87       	std	Y+11, r24	; 0x0b
     302:	64 2f       	mov	r22, r20
     304:	c7 01       	movw	r24, r14
     306:	0e 94 06 01 	call	0x20c	; 0x20c <_ZN8INA233_S15transmitCommandEh>
     30a:	40 2f       	mov	r20, r16
     30c:	f7 01       	movw	r30, r14
     30e:	60 81       	ld	r22, Z
     310:	8a e7       	ldi	r24, 0x7A	; 122
     312:	95 e0       	ldi	r25, 0x05	; 5
     314:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <_ZN7TwoWire11requestFromEhh>
     318:	8a e7       	ldi	r24, 0x7A	; 122
     31a:	95 e0       	ldi	r25, 0x05	; 5
     31c:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <_ZN7TwoWire9availableEv>
     320:	89 2b       	or	r24, r25
     322:	79 f0       	breq	.+30     	; 0x342 <_ZN8INA233_S12receiveData_Ehh+0x60>
     324:	1a 85       	ldd	r17, Y+10	; 0x0a
     326:	8a e7       	ldi	r24, 0x7A	; 122
     328:	95 e0       	ldi	r25, 0x05	; 5
     32a:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <_ZN7TwoWire4readEv>
     32e:	fe 01       	movw	r30, r28
     330:	e1 0f       	add	r30, r17
     332:	f1 1d       	adc	r31, r1
     334:	80 83       	st	Z, r24
     336:	1f 5f       	subi	r17, 0xFF	; 255
     338:	1a 87       	std	Y+10, r17	; 0x0a
     33a:	1a 30       	cpi	r17, 0x0A	; 10
     33c:	68 f3       	brcs	.-38     	; 0x318 <_ZN8INA233_S12receiveData_Ehh+0x36>
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	8c 87       	std	Y+12, r24	; 0x0c
     342:	8a 85       	ldd	r24, Y+10	; 0x0a
     344:	80 17       	cp	r24, r16
     346:	18 f4       	brcc	.+6      	; 0x34e <_ZN8INA233_S12receiveData_Ehh+0x6c>
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	8d 87       	std	Y+13, r24	; 0x0d
     34c:	04 c0       	rjmp	.+8      	; 0x356 <_ZN8INA233_S12receiveData_Ehh+0x74>
     34e:	08 17       	cp	r16, r24
     350:	10 f4       	brcc	.+4      	; 0x356 <_ZN8INA233_S12receiveData_Ehh+0x74>
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	8e 87       	std	Y+14, r24	; 0x0e
     356:	ce 01       	movw	r24, r28
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	1f 91       	pop	r17
     35e:	0f 91       	pop	r16
     360:	ff 90       	pop	r15
     362:	ef 90       	pop	r14
     364:	08 95       	ret

00000366 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>:
     366:	ef 92       	push	r14
     368:	ff 92       	push	r15
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	2f 97       	sbiw	r28, 0x0f	; 15
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	f8 94       	cli
     37c:	de bf       	out	0x3e, r29	; 62
     37e:	0f be       	out	0x3f, r0	; 63
     380:	cd bf       	out	0x3d, r28	; 61
     382:	8b 01       	movw	r16, r22
     384:	fb 01       	movw	r30, r22
     386:	22 85       	ldd	r18, Z+10	; 0x0a
     388:	bc 01       	movw	r22, r24
     38a:	ce 01       	movw	r24, r28
     38c:	01 96       	adiw	r24, 0x01	; 1
     38e:	7c 01       	movw	r14, r24
     390:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
     394:	f8 01       	movw	r30, r16
     396:	62 85       	ldd	r22, Z+10	; 0x0a
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	a8 01       	movw	r20, r16
     39c:	d7 01       	movw	r26, r14
     39e:	c8 01       	movw	r24, r16
     3a0:	9d 01       	movw	r18, r26
     3a2:	2e 19       	sub	r18, r14
     3a4:	3f 09       	sbc	r19, r15
     3a6:	26 17       	cp	r18, r22
     3a8:	37 07       	cpc	r19, r23
     3aa:	40 f4       	brcc	.+16     	; 0x3bc <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x56>
     3ac:	fc 01       	movw	r30, r24
     3ae:	31 91       	ld	r19, Z+
     3b0:	cf 01       	movw	r24, r30
     3b2:	2d 91       	ld	r18, X+
     3b4:	32 17       	cp	r19, r18
     3b6:	a1 f3       	breq	.-24     	; 0x3a0 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x3a>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	0a c0       	rjmp	.+20     	; 0x3d0 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x6a>
     3bc:	60 0f       	add	r22, r16
     3be:	71 1f       	adc	r23, r17
     3c0:	46 17       	cp	r20, r22
     3c2:	57 07       	cpc	r21, r23
     3c4:	21 f0       	breq	.+8      	; 0x3ce <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x68>
     3c6:	fa 01       	movw	r30, r20
     3c8:	11 92       	st	Z+, r1
     3ca:	af 01       	movw	r20, r30
     3cc:	f9 cf       	rjmp	.-14     	; 0x3c0 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x5a>
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	2f 96       	adiw	r28, 0x0f	; 15
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	de bf       	out	0x3e, r29	; 62
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	cd bf       	out	0x3d, r28	; 61
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	08 95       	ret

000003ea <_ZN8INA233_S15setADC_SettingsEj>:
     3ea:	ef 92       	push	r14
     3ec:	ff 92       	push	r15
     3ee:	0f 93       	push	r16
     3f0:	1f 93       	push	r17
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	2f 97       	sbiw	r28, 0x0f	; 15
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	de bf       	out	0x3e, r29	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	cd bf       	out	0x3d, r28	; 61
     406:	7c 01       	movw	r14, r24
     408:	8e 01       	movw	r16, r28
     40a:	0f 5f       	subi	r16, 0xFF	; 255
     40c:	1f 4f       	sbci	r17, 0xFF	; 255
     40e:	8f e0       	ldi	r24, 0x0F	; 15
     410:	f8 01       	movw	r30, r16
     412:	11 92       	st	Z+, r1
     414:	8a 95       	dec	r24
     416:	e9 f7       	brne	.-6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     418:	8a e0       	ldi	r24, 0x0A	; 10
     41a:	8c 87       	std	Y+12, r24	; 0x0c
     41c:	69 83       	std	Y+1, r22	; 0x01
     41e:	7a 83       	std	Y+2, r23	; 0x02
     420:	82 e0       	ldi	r24, 0x02	; 2
     422:	8b 87       	std	Y+11, r24	; 0x0b
     424:	40 ed       	ldi	r20, 0xD0	; 208
     426:	b8 01       	movw	r22, r16
     428:	c7 01       	movw	r24, r14
     42a:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     42e:	40 ed       	ldi	r20, 0xD0	; 208
     430:	b8 01       	movw	r22, r16
     432:	c7 01       	movw	r24, r14
     434:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	2f 96       	adiw	r28, 0x0f	; 15
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	f8 94       	cli
     440:	de bf       	out	0x3e, r29	; 62
     442:	0f be       	out	0x3f, r0	; 63
     444:	cd bf       	out	0x3d, r28	; 61
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
     452:	08 95       	ret

00000454 <_ZN8INA233_S15setCallibrationEj>:
     454:	cf 92       	push	r12
     456:	df 92       	push	r13
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
     468:	2f 97       	sbiw	r28, 0x0f	; 15
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	7c 01       	movw	r14, r24
     476:	6b 01       	movw	r12, r22
     478:	68 e6       	ldi	r22, 0x68	; 104
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	8f ec       	ldi	r24, 0xCF	; 207
     47e:	94 e0       	ldi	r25, 0x04	; 4
     480:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     484:	8e 01       	movw	r16, r28
     486:	0f 5f       	subi	r16, 0xFF	; 255
     488:	1f 4f       	sbci	r17, 0xFF	; 255
     48a:	8f e0       	ldi	r24, 0x0F	; 15
     48c:	f8 01       	movw	r30, r16
     48e:	11 92       	st	Z+, r1
     490:	8a 95       	dec	r24
     492:	e9 f7       	brne	.-6      	; 0x48e <_ZN8INA233_S15setCallibrationEj+0x3a>
     494:	8a e0       	ldi	r24, 0x0A	; 10
     496:	8c 87       	std	Y+12, r24	; 0x0c
     498:	c9 82       	std	Y+1, r12	; 0x01
     49a:	da 82       	std	Y+2, r13	; 0x02
     49c:	82 e0       	ldi	r24, 0x02	; 2
     49e:	8b 87       	std	Y+11, r24	; 0x0b
     4a0:	44 ed       	ldi	r20, 0xD4	; 212
     4a2:	b8 01       	movw	r22, r16
     4a4:	c7 01       	movw	r24, r14
     4a6:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     4aa:	44 ed       	ldi	r20, 0xD4	; 212
     4ac:	b8 01       	movw	r22, r16
     4ae:	c7 01       	movw	r24, r14
     4b0:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	2f 96       	adiw	r28, 0x0f	; 15
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	f8 94       	cli
     4bc:	de bf       	out	0x3e, r29	; 62
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	cd bf       	out	0x3d, r28	; 61
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	df 90       	pop	r13
     4d0:	cf 90       	pop	r12
     4d2:	08 95       	ret

000004d4 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config>:
     4d4:	4f 92       	push	r4
     4d6:	5f 92       	push	r5
     4d8:	6f 92       	push	r6
     4da:	7f 92       	push	r7
     4dc:	af 92       	push	r10
     4de:	bf 92       	push	r11
     4e0:	cf 92       	push	r12
     4e2:	df 92       	push	r13
     4e4:	ef 92       	push	r14
     4e6:	ff 92       	push	r15
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	ae 97       	sbiw	r28, 0x2e	; 46
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	cd bf       	out	0x3d, r28	; 61
     500:	5c 01       	movw	r10, r24
     502:	cf 8e       	std	Y+31, r12	; 0x1f
     504:	d8 a2       	std	Y+32, r13	; 0x20
     506:	e9 a2       	std	Y+33, r14	; 0x21
     508:	fa a2       	std	Y+34, r15	; 0x22
     50a:	0b a3       	std	Y+35, r16	; 0x23
     50c:	1c a3       	std	Y+36, r17	; 0x24
     50e:	2d a3       	std	Y+37, r18	; 0x25
     510:	3e a3       	std	Y+38, r19	; 0x26
     512:	4f a3       	std	Y+39, r20	; 0x27
     514:	58 a7       	std	Y+40, r21	; 0x28
     516:	69 a7       	std	Y+41, r22	; 0x29
     518:	7a a7       	std	Y+42, r23	; 0x2a
     51a:	cf 8c       	ldd	r12, Y+31	; 0x1f
     51c:	d8 a0       	ldd	r13, Y+32	; 0x20
     51e:	e9 a0       	ldd	r14, Y+33	; 0x21
     520:	fa a0       	ldd	r15, Y+34	; 0x22
     522:	8b a1       	ldd	r24, Y+35	; 0x23
     524:	9c a1       	ldd	r25, Y+36	; 0x24
     526:	ad a1       	ldd	r26, Y+37	; 0x25
     528:	be a1       	ldd	r27, Y+38	; 0x26
     52a:	8b a7       	std	Y+43, r24	; 0x2b
     52c:	9c a7       	std	Y+44, r25	; 0x2c
     52e:	ad a7       	std	Y+45, r26	; 0x2d
     530:	be a7       	std	Y+46, r27	; 0x2e
     532:	4f a0       	ldd	r4, Y+39	; 0x27
     534:	58 a4       	ldd	r5, Y+40	; 0x28
     536:	69 a4       	ldd	r6, Y+41	; 0x29
     538:	7a a4       	ldd	r7, Y+42	; 0x2a
     53a:	65 eb       	ldi	r22, 0xB5	; 181
     53c:	71 e0       	ldi	r23, 0x01	; 1
     53e:	8f ec       	ldi	r24, 0xCF	; 207
     540:	94 e0       	ldi	r25, 0x04	; 4
     542:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN5Print7printlnEPKc>
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	a9 01       	movw	r20, r18
     54c:	c7 01       	movw	r24, r14
     54e:	b6 01       	movw	r22, r12
     550:	0e 94 41 09 	call	0x1282	; 0x1282 <__gesf2>
     554:	18 16       	cp	r1, r24
     556:	0c f0       	brlt	.+2      	; 0x55a <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x86>
     558:	51 c0       	rjmp	.+162    	; 0x5fc <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x128>
     55a:	d5 01       	movw	r26, r10
     55c:	11 96       	adiw	r26, 0x01	; 1
     55e:	6d 91       	ld	r22, X+
     560:	7c 91       	ld	r23, X
     562:	12 97       	sbiw	r26, 0x02	; 2
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 b3 08 	call	0x1166	; 0x1166 <__floatunsisf>
     56c:	a7 01       	movw	r20, r14
     56e:	96 01       	movw	r18, r12
     570:	0e 94 46 09 	call	0x128c	; 0x128c <__mulsf3>
     574:	6b 01       	movw	r12, r22
     576:	7c 01       	movw	r14, r24
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	a9 01       	movw	r20, r18
     57e:	0e 94 41 09 	call	0x1282	; 0x1282 <__gesf2>
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	40 e0       	ldi	r20, 0x00	; 0
     588:	5f e3       	ldi	r21, 0x3F	; 63
     58a:	87 fd       	sbrc	r24, 7
     58c:	05 c0       	rjmp	.+10     	; 0x598 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xc4>
     58e:	c7 01       	movw	r24, r14
     590:	b6 01       	movw	r22, r12
     592:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__addsf3>
     596:	04 c0       	rjmp	.+8      	; 0x5a0 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xcc>
     598:	c7 01       	movw	r24, r14
     59a:	b6 01       	movw	r22, r12
     59c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__subsf3>
     5a0:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__fixsfsi>
     5a4:	8b 01       	movw	r16, r22
     5a6:	7e 01       	movw	r14, r28
     5a8:	b0 e1       	ldi	r27, 0x10	; 16
     5aa:	eb 0e       	add	r14, r27
     5ac:	f1 1c       	adc	r15, r1
     5ae:	8f e0       	ldi	r24, 0x0F	; 15
     5b0:	f7 01       	movw	r30, r14
     5b2:	11 92       	st	Z+, r1
     5b4:	8a 95       	dec	r24
     5b6:	e9 f7       	brne	.-6      	; 0x5b2 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xde>
     5b8:	8a e0       	ldi	r24, 0x0A	; 10
     5ba:	8b 8f       	std	Y+27, r24	; 0x1b
     5bc:	08 8b       	std	Y+16, r16	; 0x10
     5be:	19 8b       	std	Y+17, r17	; 0x11
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	8a 8f       	std	Y+26, r24	; 0x1a
     5c4:	6f ee       	ldi	r22, 0xEF	; 239
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	8f ec       	ldi	r24, 0xCF	; 207
     5ca:	94 e0       	ldi	r25, 0x04	; 4
     5cc:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     5d0:	4a e0       	ldi	r20, 0x0A	; 10
     5d2:	50 e0       	ldi	r21, 0x00	; 0
     5d4:	b8 01       	movw	r22, r16
     5d6:	8f ec       	ldi	r24, 0xCF	; 207
     5d8:	94 e0       	ldi	r25, 0x04	; 4
     5da:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <_ZN5Print7printlnEji>
     5de:	4a e4       	ldi	r20, 0x4A	; 74
     5e0:	b7 01       	movw	r22, r14
     5e2:	c5 01       	movw	r24, r10
     5e4:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     5e8:	22 e0       	ldi	r18, 0x02	; 2
     5ea:	4a e4       	ldi	r20, 0x4A	; 74
     5ec:	b5 01       	movw	r22, r10
     5ee:	ce 01       	movw	r24, r28
     5f0:	01 96       	adiw	r24, 0x01	; 1
     5f2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
     5f6:	66 ed       	ldi	r22, 0xD6	; 214
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	af c0       	rjmp	.+350    	; 0x75a <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x286>
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	a9 01       	movw	r20, r18
     602:	6b a5       	ldd	r22, Y+43	; 0x2b
     604:	7c a5       	ldd	r23, Y+44	; 0x2c
     606:	8d a5       	ldd	r24, Y+45	; 0x2d
     608:	9e a5       	ldd	r25, Y+46	; 0x2e
     60a:	0e 94 41 09 	call	0x1282	; 0x1282 <__gesf2>
     60e:	18 16       	cp	r1, r24
     610:	0c f0       	brlt	.+2      	; 0x614 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x140>
     612:	4e c0       	rjmp	.+156    	; 0x6b0 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x1dc>
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	48 e4       	ldi	r20, 0x48	; 72
     61a:	54 e4       	ldi	r21, 0x44	; 68
     61c:	6b a5       	ldd	r22, Y+43	; 0x2b
     61e:	7c a5       	ldd	r23, Y+44	; 0x2c
     620:	8d a5       	ldd	r24, Y+45	; 0x2d
     622:	9e a5       	ldd	r25, Y+46	; 0x2e
     624:	0e 94 46 09 	call	0x128c	; 0x128c <__mulsf3>
     628:	6b 01       	movw	r12, r22
     62a:	7c 01       	movw	r14, r24
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	a9 01       	movw	r20, r18
     632:	0e 94 41 09 	call	0x1282	; 0x1282 <__gesf2>
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	40 e0       	ldi	r20, 0x00	; 0
     63c:	5f e3       	ldi	r21, 0x3F	; 63
     63e:	87 fd       	sbrc	r24, 7
     640:	05 c0       	rjmp	.+10     	; 0x64c <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x178>
     642:	c7 01       	movw	r24, r14
     644:	b6 01       	movw	r22, r12
     646:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__addsf3>
     64a:	04 c0       	rjmp	.+8      	; 0x654 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x180>
     64c:	c7 01       	movw	r24, r14
     64e:	b6 01       	movw	r22, r12
     650:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__subsf3>
     654:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__fixsfsi>
     658:	8b 01       	movw	r16, r22
     65a:	7e 01       	movw	r14, r28
     65c:	f0 e1       	ldi	r31, 0x10	; 16
     65e:	ef 0e       	add	r14, r31
     660:	f1 1c       	adc	r15, r1
     662:	8f e0       	ldi	r24, 0x0F	; 15
     664:	d7 01       	movw	r26, r14
     666:	1d 92       	st	X+, r1
     668:	8a 95       	dec	r24
     66a:	e9 f7       	brne	.-6      	; 0x666 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x192>
     66c:	8a e0       	ldi	r24, 0x0A	; 10
     66e:	8b 8f       	std	Y+27, r24	; 0x1b
     670:	08 8b       	std	Y+16, r16	; 0x10
     672:	19 8b       	std	Y+17, r17	; 0x11
     674:	82 e0       	ldi	r24, 0x02	; 2
     676:	8a 8f       	std	Y+26, r24	; 0x1a
     678:	66 ec       	ldi	r22, 0xC6	; 198
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	8f ec       	ldi	r24, 0xCF	; 207
     67e:	94 e0       	ldi	r25, 0x04	; 4
     680:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     684:	4a e0       	ldi	r20, 0x0A	; 10
     686:	50 e0       	ldi	r21, 0x00	; 0
     688:	b8 01       	movw	r22, r16
     68a:	8f ec       	ldi	r24, 0xCF	; 207
     68c:	94 e0       	ldi	r25, 0x04	; 4
     68e:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <_ZN5Print7printlnEji>
     692:	47 e5       	ldi	r20, 0x57	; 87
     694:	b7 01       	movw	r22, r14
     696:	c5 01       	movw	r24, r10
     698:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     69c:	22 e0       	ldi	r18, 0x02	; 2
     69e:	47 e5       	ldi	r20, 0x57	; 87
     6a0:	b5 01       	movw	r22, r10
     6a2:	ce 01       	movw	r24, r28
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
     6aa:	6d ea       	ldi	r22, 0xAD	; 173
     6ac:	70 e0       	ldi	r23, 0x00	; 0
     6ae:	55 c0       	rjmp	.+170    	; 0x75a <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x286>
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	a9 01       	movw	r20, r18
     6b6:	c3 01       	movw	r24, r6
     6b8:	b2 01       	movw	r22, r4
     6ba:	0e 94 41 09 	call	0x1282	; 0x1282 <__gesf2>
     6be:	18 16       	cp	r1, r24
     6c0:	0c f0       	brlt	.+2      	; 0x6c4 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x1f0>
     6c2:	5a c0       	rjmp	.+180    	; 0x778 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x2a4>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	48 e4       	ldi	r20, 0x48	; 72
     6ca:	54 e4       	ldi	r21, 0x44	; 68
     6cc:	c3 01       	movw	r24, r6
     6ce:	b2 01       	movw	r22, r4
     6d0:	0e 94 46 09 	call	0x128c	; 0x128c <__mulsf3>
     6d4:	6b 01       	movw	r12, r22
     6d6:	7c 01       	movw	r14, r24
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	a9 01       	movw	r20, r18
     6de:	0e 94 41 09 	call	0x1282	; 0x1282 <__gesf2>
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	5f e3       	ldi	r21, 0x3F	; 63
     6ea:	87 fd       	sbrc	r24, 7
     6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x224>
     6ee:	c7 01       	movw	r24, r14
     6f0:	b6 01       	movw	r22, r12
     6f2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__addsf3>
     6f6:	04 c0       	rjmp	.+8      	; 0x700 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x22c>
     6f8:	c7 01       	movw	r24, r14
     6fa:	b6 01       	movw	r22, r12
     6fc:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__subsf3>
     700:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__fixsfsi>
     704:	8b 01       	movw	r16, r22
     706:	7e 01       	movw	r14, r28
     708:	b0 e1       	ldi	r27, 0x10	; 16
     70a:	eb 0e       	add	r14, r27
     70c:	f1 1c       	adc	r15, r1
     70e:	8f e0       	ldi	r24, 0x0F	; 15
     710:	f7 01       	movw	r30, r14
     712:	11 92       	st	Z+, r1
     714:	8a 95       	dec	r24
     716:	e9 f7       	brne	.-6      	; 0x712 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x23e>
     718:	8a e0       	ldi	r24, 0x0A	; 10
     71a:	8b 8f       	std	Y+27, r24	; 0x1b
     71c:	08 8b       	std	Y+16, r16	; 0x10
     71e:	19 8b       	std	Y+17, r17	; 0x11
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	8a 8f       	std	Y+26, r24	; 0x1a
     724:	6d e9       	ldi	r22, 0x9D	; 157
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	8f ec       	ldi	r24, 0xCF	; 207
     72a:	94 e0       	ldi	r25, 0x04	; 4
     72c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     730:	4a e0       	ldi	r20, 0x0A	; 10
     732:	50 e0       	ldi	r21, 0x00	; 0
     734:	b8 01       	movw	r22, r16
     736:	8f ec       	ldi	r24, 0xCF	; 207
     738:	94 e0       	ldi	r25, 0x04	; 4
     73a:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <_ZN5Print7printlnEji>
     73e:	48 e5       	ldi	r20, 0x58	; 88
     740:	b7 01       	movw	r22, r14
     742:	c5 01       	movw	r24, r10
     744:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     748:	22 e0       	ldi	r18, 0x02	; 2
     74a:	48 e5       	ldi	r20, 0x58	; 88
     74c:	b5 01       	movw	r22, r10
     74e:	ce 01       	movw	r24, r28
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
     756:	64 e8       	ldi	r22, 0x84	; 132
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	8f ec       	ldi	r24, 0xCF	; 207
     75c:	94 e0       	ldi	r25, 0x04	; 4
     75e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     762:	69 81       	ldd	r22, Y+1	; 0x01
     764:	7a 81       	ldd	r23, Y+2	; 0x02
     766:	4a e0       	ldi	r20, 0x0A	; 10
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	8f ec       	ldi	r24, 0xCF	; 207
     76c:	94 e0       	ldi	r25, 0x04	; 4
     76e:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_ZN5Print7printlnEii>
     772:	8a e0       	ldi	r24, 0x0A	; 10
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	00 c0       	rjmp	.+0      	; 0x778 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x2a4>
     778:	ae 96       	adiw	r28, 0x2e	; 46
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	cd bf       	out	0x3d, r28	; 61
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	ff 90       	pop	r15
     78e:	ef 90       	pop	r14
     790:	df 90       	pop	r13
     792:	cf 90       	pop	r12
     794:	bf 90       	pop	r11
     796:	af 90       	pop	r10
     798:	7f 90       	pop	r7
     79a:	6f 90       	pop	r6
     79c:	5f 90       	pop	r5
     79e:	4f 90       	pop	r4
     7a0:	08 95       	ret

000007a2 <_ZN8INA233_S10initializeEv>:
     7a2:	cf 92       	push	r12
     7a4:	df 92       	push	r13
     7a6:	ef 92       	push	r14
     7a8:	ff 92       	push	r15
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	ec 01       	movw	r28, r24
     7b4:	0e 94 27 01 	call	0x24e	; 0x24e <_ZN8INA233_S9resetChipEv>
     7b8:	6b 81       	ldd	r22, Y+3	; 0x03
     7ba:	7c 81       	ldd	r23, Y+4	; 0x04
     7bc:	ce 01       	movw	r24, r28
     7be:	0e 94 2a 02 	call	0x454	; 0x454 <_ZN8INA233_S15setCallibrationEj>
     7c2:	81 30       	cpi	r24, 0x01	; 1
     7c4:	91 05       	cpc	r25, r1
     7c6:	a1 f0       	breq	.+40     	; 0x7f0 <_ZN8INA233_S10initializeEv+0x4e>
     7c8:	ce 01       	movw	r24, r28
     7ca:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8INA233_S10resetAlarmEv>
     7ce:	cd 80       	ldd	r12, Y+5	; 0x05
     7d0:	de 80       	ldd	r13, Y+6	; 0x06
     7d2:	ef 80       	ldd	r14, Y+7	; 0x07
     7d4:	f8 84       	ldd	r15, Y+8	; 0x08
     7d6:	09 85       	ldd	r16, Y+9	; 0x09
     7d8:	1a 85       	ldd	r17, Y+10	; 0x0a
     7da:	2b 85       	ldd	r18, Y+11	; 0x0b
     7dc:	3c 85       	ldd	r19, Y+12	; 0x0c
     7de:	4d 85       	ldd	r20, Y+13	; 0x0d
     7e0:	5e 85       	ldd	r21, Y+14	; 0x0e
     7e2:	6f 85       	ldd	r22, Y+15	; 0x0f
     7e4:	78 89       	ldd	r23, Y+16	; 0x10
     7e6:	ce 01       	movw	r24, r28
     7e8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config>
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	df 90       	pop	r13
     7fe:	cf 90       	pop	r12
     800:	08 95       	ret

00000802 <_ZN8INA233_S10getCurrentEv>:
     802:	cf 92       	push	r12
     804:	df 92       	push	r13
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	2f 97       	sbiw	r28, 0x0f	; 15
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
     822:	7c 01       	movw	r14, r24
     824:	22 e0       	ldi	r18, 0x02	; 2
     826:	49 e8       	ldi	r20, 0x89	; 137
     828:	bc 01       	movw	r22, r24
     82a:	ce 01       	movw	r24, r28
     82c:	01 96       	adiw	r24, 0x01	; 1
     82e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
     832:	09 81       	ldd	r16, Y+1	; 0x01
     834:	1a 81       	ldd	r17, Y+2	; 0x02
     836:	62 ec       	ldi	r22, 0xC2	; 194
     838:	71 e0       	ldi	r23, 0x01	; 1
     83a:	8f ec       	ldi	r24, 0xCF	; 207
     83c:	94 e0       	ldi	r25, 0x04	; 4
     83e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN5Print5printEPKc>
     842:	4a e0       	ldi	r20, 0x0A	; 10
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	b8 01       	movw	r22, r16
     848:	8f ec       	ldi	r24, 0xCF	; 207
     84a:	94 e0       	ldi	r25, 0x04	; 4
     84c:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_ZN5Print7printlnEii>
     850:	f7 01       	movw	r30, r14
     852:	61 81       	ldd	r22, Z+1	; 0x01
     854:	72 81       	ldd	r23, Z+2	; 0x02
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 b3 08 	call	0x1166	; 0x1166 <__floatunsisf>
     85e:	9b 01       	movw	r18, r22
     860:	ac 01       	movw	r20, r24
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	80 e8       	ldi	r24, 0x80	; 128
     868:	9f e3       	ldi	r25, 0x3F	; 63
     86a:	0e 94 0b 08 	call	0x1016	; 0x1016 <__divsf3>
     86e:	6b 01       	movw	r12, r22
     870:	7c 01       	movw	r14, r24
     872:	b8 01       	movw	r22, r16
     874:	11 0f       	add	r17, r17
     876:	88 0b       	sbc	r24, r24
     878:	99 0b       	sbc	r25, r25
     87a:	0e 94 b5 08 	call	0x116a	; 0x116a <__floatsisf>
     87e:	9b 01       	movw	r18, r22
     880:	ac 01       	movw	r20, r24
     882:	c7 01       	movw	r24, r14
     884:	b6 01       	movw	r22, r12
     886:	0e 94 46 09 	call	0x128c	; 0x128c <__mulsf3>
     88a:	2f 96       	adiw	r28, 0x0f	; 15
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	de bf       	out	0x3e, r29	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	cd bf       	out	0x3d, r28	; 61
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	ff 90       	pop	r15
     8a0:	ef 90       	pop	r14
     8a2:	df 90       	pop	r13
     8a4:	cf 90       	pop	r12
     8a6:	08 95       	ret

000008a8 <_ZN8INA233_S17testCommunicationEv>:
    Serial.println("reset chip");
    transmitCommand(0x12);
}

int INA233_S::testCommunication()
{
     8a8:	af 92       	push	r10
     8aa:	bf 92       	push	r11
     8ac:	df 92       	push	r13
     8ae:	ef 92       	push	r14
     8b0:	ff 92       	push	r15
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
     8be:	66 97       	sbiw	r28, 0x16	; 22
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	f8 94       	cli
     8c4:	de bf       	out	0x3e, r29	; 62
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	cd bf       	out	0x3d, r28	; 61
     8ca:	8c 01       	movw	r16, r24
    Serial.println("test communications");
     8cc:	63 ee       	ldi	r22, 0xE3	; 227
     8ce:	71 e0       	ldi	r23, 0x01	; 1
     8d0:	8f ec       	ldi	r24, 0xCF	; 207
     8d2:	94 e0       	ldi	r25, 0x04	; 4
     8d4:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN5Print7printlnEPKc>
    // TO DO ! Read MFR_MODEL, compare if correct.
    // Is there a way in wire.h to check for communications?
    INA233_Data_Package data = receiveData_(0x12, 7);
     8d8:	27 e0       	ldi	r18, 0x07	; 7
     8da:	42 e1       	ldi	r20, 0x12	; 18
     8dc:	b8 01       	movw	r22, r16
     8de:	ce 01       	movw	r24, r28
     8e0:	01 96       	adiw	r24, 0x01	; 1
     8e2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
    uint8_t compare[7]{
        0x06, 0x49, 0x4E, 0x41, 0x32, 0x33, 0x33};
     8e6:	87 e0       	ldi	r24, 0x07	; 7
     8e8:	e1 e2       	ldi	r30, 0x21	; 33
     8ea:	f1 e0       	ldi	r31, 0x01	; 1
     8ec:	de 01       	movw	r26, r28
     8ee:	50 96       	adiw	r26, 0x10	; 16
     8f0:	01 90       	ld	r0, Z+
     8f2:	0d 92       	st	X+, r0
     8f4:	8a 95       	dec	r24
     8f6:	e1 f7       	brne	.-8      	; 0x8f0 <_ZN8INA233_S17testCommunicationEv+0x48>
     8f8:	8e 01       	movw	r16, r28
     8fa:	0f 5f       	subi	r16, 0xFF	; 255
     8fc:	1f 4f       	sbci	r17, 0xFF	; 255
     8fe:	7e 01       	movw	r14, r28
     900:	80 e1       	ldi	r24, 0x10	; 16
     902:	e8 0e       	add	r14, r24
     904:	f1 1c       	adc	r15, r1
     906:	5e 01       	movw	r10, r28
     908:	e8 e0       	ldi	r30, 0x08	; 8
     90a:	ae 0e       	add	r10, r30
     90c:	b1 1c       	adc	r11, r1

    for (int ii = 0; ii <= 6; ii++)
    {
        Serial.print("Readback MFR_MODEL: ");
     90e:	67 ef       	ldi	r22, 0xF7	; 247
     910:	71 e0       	ldi	r23, 0x01	; 1
     912:	8f ec       	ldi	r24, 0xCF	; 207
     914:	94 e0       	ldi	r25, 0x04	; 4
     916:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN5Print5printEPKc>
        Serial.print(data.msg[ii]);
     91a:	f8 01       	movw	r30, r16
     91c:	d1 90       	ld	r13, Z+
     91e:	8f 01       	movw	r16, r30
     920:	4a e0       	ldi	r20, 0x0A	; 10
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	6d 2d       	mov	r22, r13
     926:	8f ec       	ldi	r24, 0xCF	; 207
     928:	94 e0       	ldi	r25, 0x04	; 4
     92a:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <_ZN5Print5printEhi>
        if (compare[ii] != data.msg[ii])
     92e:	f7 01       	movw	r30, r14
     930:	81 91       	ld	r24, Z+
     932:	7f 01       	movw	r14, r30
     934:	d8 16       	cp	r13, r24
     936:	49 f0       	breq	.+18     	; 0x94a <__stack+0x4b>
        {
            Serial.println("Communication error");
     938:	6c e0       	ldi	r22, 0x0C	; 12
     93a:	72 e0       	ldi	r23, 0x02	; 2
     93c:	8f ec       	ldi	r24, 0xCF	; 207
     93e:	94 e0       	ldi	r25, 0x04	; 4
     940:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN5Print7printlnEPKc>
			return 1;
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	05 c0       	rjmp	.+10     	; 0x954 <__stack+0x55>
    // Is there a way in wire.h to check for communications?
    INA233_Data_Package data = receiveData_(0x12, 7);
    uint8_t compare[7]{
        0x06, 0x49, 0x4E, 0x41, 0x32, 0x33, 0x33};

    for (int ii = 0; ii <= 6; ii++)
     94a:	0a 15       	cp	r16, r10
     94c:	1b 05       	cpc	r17, r11
     94e:	f9 f6       	brne	.-66     	; 0x90e <__stack+0xf>
            Serial.println("Communication error");
			return 1;
        }
    }
	
	return 0;
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
}
     954:	66 96       	adiw	r28, 0x16	; 22
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	f8 94       	cli
     95a:	de bf       	out	0x3e, r29	; 62
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	cd bf       	out	0x3d, r28	; 61
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	1f 91       	pop	r17
     966:	0f 91       	pop	r16
     968:	ff 90       	pop	r15
     96a:	ef 90       	pop	r14
     96c:	df 90       	pop	r13
     96e:	bf 90       	pop	r11
     970:	af 90       	pop	r10
     972:	08 95       	ret

00000974 <_ZZ5setupENUlvE_4_FUNEv>:
	Serial.print (settings.ramUsage());
	Serial.println (" bytes");
	
	
	// ___________________________ CAN BEGIN ______________________________//
	const uint32_t errorCode = can.begin (settings, [] { can.isr(); });
     974:	8b e7       	ldi	r24, 0x7B	; 123
     976:	94 e0       	ldi	r25, 0x04	; 4
     978:	0c 94 c2 13 	jmp	0x2784	; 0x2784 <_ZN10ACAN2517FD3isrEv>

0000097c <_ZN12CANFDMessageC1Ev>:

//·············································································
//   Constructors
//·············································································

  public : CANFDMessage (void) :
     97c:	fc 01       	movw	r30, r24
  id (0),  // Frame identifier
  ext (false), // false -> base frame, true -> extended frame
  type (CANFD_WITH_BIT_RATE_SWITCH),
  idx (0),  // This field is used by the driver
  len (0), // Length of data (0 ... 64)
  data () {
     97e:	10 82       	st	Z, r1
     980:	11 82       	std	Z+1, r1	; 0x01
     982:	12 82       	std	Z+2, r1	; 0x02
     984:	13 82       	std	Z+3, r1	; 0x03
     986:	14 82       	std	Z+4, r1	; 0x04
     988:	83 e0       	ldi	r24, 0x03	; 3
     98a:	85 83       	std	Z+5, r24	; 0x05
     98c:	16 82       	std	Z+6, r1	; 0x06
     98e:	17 82       	std	Z+7, r1	; 0x07
     990:	df 01       	movw	r26, r30
     992:	18 96       	adiw	r26, 0x08	; 8
     994:	e8 5b       	subi	r30, 0xB8	; 184
     996:	ff 4f       	sbci	r31, 0xFF	; 255
     998:	1d 92       	st	X+, r1
     99a:	ae 17       	cp	r26, r30
     99c:	bf 07       	cpc	r27, r31
     99e:	e1 f7       	brne	.-8      	; 0x998 <_ZN12CANFDMessageC1Ev+0x1c>
  }
     9a0:	08 95       	ret

000009a2 <_ZN6mosfetC1Eh>:

// ___________________________ INA233 AND MOSFET/RLE SETUP ______________________________//
class  mosfet{
public:
	mosfet() = delete;
	mosfet(uint8_t MOSpin) : MOSpin_(MOSpin){
     9a2:	fc 01       	movw	r30, r24
     9a4:	86 2f       	mov	r24, r22
     9a6:	60 83       	st	Z, r22
		pinMode(MOSpin_, OUTPUT);
     9a8:	61 e0       	ldi	r22, 0x01	; 1
     9aa:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <pinMode>

000009ae <setup>:

void blink_light();
uint8_t STATE = HIGH;
unsigned long blink_time = 0, blink_interval = 500;

void setup() {	
     9ae:	cf 92       	push	r12
     9b0:	df 92       	push	r13
     9b2:	ef 92       	push	r14
     9b4:	ff 92       	push	r15
     9b6:	0f 93       	push	r16
     9b8:	1f 93       	push	r17
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
     9c2:	a8 97       	sbiw	r28, 0x28	; 40
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	f8 94       	cli
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	cd bf       	out	0x3d, r28	; 61
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
     9ce:	9d e0       	ldi	r25, 0x0D	; 13
     9d0:	88 e1       	ldi	r24, 0x18	; 24
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	a8 95       	wdr
     9d8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     9dc:	0f be       	out	0x3f, r0	; 63
     9de:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
	wdt_enable(WDTO_500MS);
	
	Wire.begin();
     9e2:	8a e7       	ldi	r24, 0x7A	; 122
     9e4:	95 e0       	ldi	r25, 0x05	; 5
     9e6:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <_ZN7TwoWire5beginEv>
	Wire.setClock(10000);
     9ea:	40 e1       	ldi	r20, 0x10	; 16
     9ec:	57 e2       	ldi	r21, 0x27	; 39
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	8a e7       	ldi	r24, 0x7A	; 122
     9f4:	95 e0       	ldi	r25, 0x05	; 5
     9f6:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <_ZN7TwoWire8setClockEm>
	//Serial.begin(9600);
	
	pinMode(9, OUTPUT);
     9fa:	61 e0       	ldi	r22, 0x01	; 1
     9fc:	89 e0       	ldi	r24, 0x09	; 9
     9fe:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <pinMode>
     a02:	0d e0       	ldi	r16, 0x0D	; 13
     a04:	11 e0       	ldi	r17, 0x01	; 1
     a06:	9b e1       	ldi	r25, 0x1B	; 27
     a08:	c9 2e       	mov	r12, r25
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	d9 2e       	mov	r13, r25
     a0e:	78 01       	movw	r14, r16
	
	// Setup for each INA233 sensor
	for (uint8_t ii = 0; ii < 7; ii++){
		SensorList[ii]->initialize();
     a10:	f7 01       	movw	r30, r14
     a12:	81 91       	ld	r24, Z+
     a14:	91 91       	ld	r25, Z+
     a16:	7f 01       	movw	r14, r30
     a18:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <_ZN8INA233_S10initializeEv>
	//Serial.begin(9600);
	
	pinMode(9, OUTPUT);
	
	// Setup for each INA233 sensor
	for (uint8_t ii = 0; ii < 7; ii++){
     a1c:	ce 14       	cp	r12, r14
     a1e:	df 04       	cpc	r13, r15
     a20:	b9 f7       	brne	.-18     	; 0xa10 <setup+0x62>
		SensorList[ii]->initialize();
	}

	for (uint8_t ii = 0; ii < 7; ii++){
		SensorList[ii]->setADC_Settings(default_address);
     a22:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <default_address>
     a26:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <default_address+0x1>
     a2a:	f8 01       	movw	r30, r16
     a2c:	81 91       	ld	r24, Z+
     a2e:	91 91       	ld	r25, Z+
     a30:	8f 01       	movw	r16, r30
     a32:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_ZN8INA233_S15setADC_SettingsEj>
	// Setup for each INA233 sensor
	for (uint8_t ii = 0; ii < 7; ii++){
		SensorList[ii]->initialize();
	}

	for (uint8_t ii = 0; ii < 7; ii++){
     a36:	c0 16       	cp	r12, r16
     a38:	d1 06       	cpc	r13, r17
     a3a:	99 f7       	brne	.-26     	; 0xa22 <setup+0x74>
		SensorList[ii]->setADC_Settings(default_address);
	}
	
	
	// ___________________________ START SPI ______________________________//
	SPI.begin () ;
     a3c:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <_ZN8SPIClass5beginEv>
		// For version >= 2.1.0
	ACAN2517FDSettings settings (ACAN2517FDSettings::OSC_20MHz, 500UL * 1000UL, DataBitRateFactor::x8);
     a40:	88 ee       	ldi	r24, 0xE8	; 232
     a42:	c8 2e       	mov	r12, r24
     a44:	83 e0       	ldi	r24, 0x03	; 3
     a46:	d8 2e       	mov	r13, r24
     a48:	e1 2c       	mov	r14, r1
     a4a:	f1 2c       	mov	r15, r1
     a4c:	08 e0       	ldi	r16, 0x08	; 8
     a4e:	20 e2       	ldi	r18, 0x20	; 32
     a50:	31 ea       	ldi	r19, 0xA1	; 161
     a52:	47 e0       	ldi	r20, 0x07	; 7
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	64 e0       	ldi	r22, 0x04	; 4
     a58:	ce 01       	movw	r24, r28
     a5a:	01 96       	adiw	r24, 0x01	; 1
     a5c:	0e 94 b0 18 	call	0x3160	; 0x3160 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm>
		/* For version < 2.1.0
			ACAN2517FDSettings settings (ACAN2517FDSettings::OSC_20MHz, 125UL * 1000UL, ACAN2517FDSettings::DATA_BITRATE_x8);*/
	settings.mRequestedMode = ACAN2517FDSettings::NormalFD;
     a60:	1a 8e       	std	Y+26, r1	; 0x1a
	
	// Default values are too high for an Arduino Uno that contains 2048 bytes of RAM: reduce them
	settings.mDriverTransmitFIFOSize = 1;
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	9c 8f       	std	Y+28, r25	; 0x1c
     a68:	8b 8f       	std	Y+27, r24	; 0x1b
	settings.mDriverReceiveFIFOSize = 1;
     a6a:	9e a3       	std	Y+38, r25	; 0x26
     a6c:	8d a3       	std	Y+37, r24	; 0x25
	
	
	// ___________________________ RAM USAGE ______________________________//
	Serial.print ("MCP2517FD RAM Usage: ");
     a6e:	60 e2       	ldi	r22, 0x20	; 32
     a70:	72 e0       	ldi	r23, 0x02	; 2
     a72:	8f ec       	ldi	r24, 0xCF	; 207
     a74:	94 e0       	ldi	r25, 0x04	; 4
     a76:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN5Print5printEPKc>
	Serial.print (settings.ramUsage());
     a7a:	ce 01       	movw	r24, r28
     a7c:	01 96       	adiw	r24, 0x01	; 1
     a7e:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <_ZNK18ACAN2517FDSettings8ramUsageEv>
     a82:	ab 01       	movw	r20, r22
     a84:	bc 01       	movw	r22, r24
     a86:	2a e0       	ldi	r18, 0x0A	; 10
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	8f ec       	ldi	r24, 0xCF	; 207
     a8c:	94 e0       	ldi	r25, 0x04	; 4
     a8e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZN5Print5printEmi>
	Serial.println (" bytes");
     a92:	66 e3       	ldi	r22, 0x36	; 54
     a94:	72 e0       	ldi	r23, 0x02	; 2
     a96:	8f ec       	ldi	r24, 0xCF	; 207
     a98:	94 e0       	ldi	r25, 0x04	; 4
     a9a:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN5Print7printlnEPKc>
	
	
	// ___________________________ CAN BEGIN ______________________________//
	const uint32_t errorCode = can.begin (settings, [] { can.isr(); });
     a9e:	4a eb       	ldi	r20, 0xBA	; 186
     aa0:	54 e0       	ldi	r21, 0x04	; 4
     aa2:	be 01       	movw	r22, r28
     aa4:	6f 5f       	subi	r22, 0xFF	; 255
     aa6:	7f 4f       	sbci	r23, 0xFF	; 255
     aa8:	8b e7       	ldi	r24, 0x7B	; 123
     aaa:	94 e0       	ldi	r25, 0x04	; 4
     aac:	0e 94 4e 18 	call	0x309c	; 0x309c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvE>
     ab0:	6b 01       	movw	r12, r22
     ab2:	7c 01       	movw	r14, r24
	if (errorCode != 0) {
     ab4:	67 2b       	or	r22, r23
     ab6:	68 2b       	or	r22, r24
     ab8:	69 2b       	or	r22, r25
     aba:	71 f0       	breq	.+28     	; 0xad8 <setup+0x12a>
		Serial.print ("Configuration error 0x");
     abc:	6d e3       	ldi	r22, 0x3D	; 61
     abe:	72 e0       	ldi	r23, 0x02	; 2
     ac0:	8f ec       	ldi	r24, 0xCF	; 207
     ac2:	94 e0       	ldi	r25, 0x04	; 4
     ac4:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN5Print5printEPKc>
		Serial.println (errorCode, HEX);
     ac8:	20 e1       	ldi	r18, 0x10	; 16
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	b7 01       	movw	r22, r14
     ace:	a6 01       	movw	r20, r12
     ad0:	8f ec       	ldi	r24, 0xCF	; 207
     ad2:	94 e0       	ldi	r25, 0x04	; 4
     ad4:	0e 94 8a 0b 	call	0x1714	; 0x1714 <_ZN5Print7printlnEmi>
     ad8:	eb e3       	ldi	r30, 0x3B	; 59
     ada:	f4 e0       	ldi	r31, 0x04	; 4
	
	Wire.begin();
	Wire.setClock(10000);
	//Serial.begin(9600);
	
	pinMode(9, OUTPUT);
     adc:	80 e0       	ldi	r24, 0x00	; 0
		Serial.print ("Configuration error 0x");
		Serial.println (errorCode, HEX);
	}
	
	for (int ii = 0; ii < 64; ii++){
		frame_FD.data[ii] = ii;
     ade:	81 93       	st	Z+, r24
     ae0:	8f 5f       	subi	r24, 0xFF	; 255
	if (errorCode != 0) {
		Serial.print ("Configuration error 0x");
		Serial.println (errorCode, HEX);
	}
	
	for (int ii = 0; ii < 64; ii++){
     ae2:	80 34       	cpi	r24, 0x40	; 64
     ae4:	e1 f7       	brne	.-8      	; 0xade <setup+0x130>
     ae6:	e3 ef       	ldi	r30, 0xF3	; 243
     ae8:	f3 e0       	ldi	r31, 0x03	; 3
     aea:	80 e0       	ldi	r24, 0x00	; 0
		frame_FD.data[ii] = ii;
	}
	for (int ii = 0; ii < 8; ii++){
		frame.data[ii] = ii;
     aec:	81 93       	st	Z+, r24
     aee:	8f 5f       	subi	r24, 0xFF	; 255
	}
	
	for (int ii = 0; ii < 64; ii++){
		frame_FD.data[ii] = ii;
	}
	for (int ii = 0; ii < 8; ii++){
     af0:	88 30       	cpi	r24, 0x08	; 8
     af2:	e1 f7       	brne	.-8      	; 0xaec <setup+0x13e>
		frame.data[ii] = ii;
	}
	frame.len = 8;
     af4:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <frame+0x7>
	frame_FD.len = 64; // Valid lengths are: 0, 1, ..., 8, 12, 16, 20, 24, 32, 48, 64
     af8:	80 e4       	ldi	r24, 0x40	; 64
     afa:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <frame_FD+0x7>
	frame.type = CANFDMessage::CAN_DATA;
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <frame+0x5>
	frame_FD.type = CANFDMessage::CANFD_WITH_BIT_RATE_SWITCH;
     b04:	83 e0       	ldi	r24, 0x03	; 3
     b06:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <frame_FD+0x5>
	
	frame.id = 0x500;
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	95 e0       	ldi	r25, 0x05	; 5
     b0e:	a0 e0       	ldi	r26, 0x00	; 0
     b10:	b0 e0       	ldi	r27, 0x00	; 0
     b12:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <frame>
     b16:	90 93 ec 03 	sts	0x03EC, r25	; 0x8003ec <frame+0x1>
     b1a:	a0 93 ed 03 	sts	0x03ED, r26	; 0x8003ed <frame+0x2>
     b1e:	b0 93 ee 03 	sts	0x03EE, r27	; 0x8003ee <frame+0x3>
	frame_FD.id = 0x501;
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	95 e0       	ldi	r25, 0x05	; 5
     b26:	a0 e0       	ldi	r26, 0x00	; 0
     b28:	b0 e0       	ldi	r27, 0x00	; 0
     b2a:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <frame_FD>
     b2e:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <frame_FD+0x1>
     b32:	a0 93 35 04 	sts	0x0435, r26	; 0x800435 <frame_FD+0x2>
     b36:	b0 93 36 04 	sts	0x0436, r27	; 0x800436 <frame_FD+0x3>
}
     b3a:	a8 96       	adiw	r28, 0x28	; 40
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	cd bf       	out	0x3d, r28	; 61
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	1f 91       	pop	r17
     b4c:	0f 91       	pop	r16
     b4e:	ff 90       	pop	r15
     b50:	ef 90       	pop	r14
     b52:	df 90       	pop	r13
     b54:	cf 90       	pop	r12
     b56:	08 95       	ret

00000b58 <_Z29check_INA233_miscommunicationv>:
	//p2.close_MOSFET();
	
	wdt_reset();	
}

void check_INA233_miscommunication(){
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
	
	if((millis() - timeStamps[0]) > interval_INA233_checking){
     b60:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <millis>
     b64:	00 91 c3 03 	lds	r16, 0x03C3	; 0x8003c3 <timeStamps>
     b68:	10 91 c4 03 	lds	r17, 0x03C4	; 0x8003c4 <timeStamps+0x1>
     b6c:	20 91 c5 03 	lds	r18, 0x03C5	; 0x8003c5 <timeStamps+0x2>
     b70:	30 91 c6 03 	lds	r19, 0x03C6	; 0x8003c6 <timeStamps+0x3>
     b74:	dc 01       	movw	r26, r24
     b76:	cb 01       	movw	r24, r22
     b78:	80 1b       	sub	r24, r16
     b7a:	91 0b       	sbc	r25, r17
     b7c:	a2 0b       	sbc	r26, r18
     b7e:	b3 0b       	sbc	r27, r19
     b80:	81 31       	cpi	r24, 0x11	; 17
     b82:	97 42       	sbci	r25, 0x27	; 39
     b84:	a1 05       	cpc	r26, r1
     b86:	b1 05       	cpc	r27, r1
     b88:	08 f1       	brcs	.+66     	; 0xbcc <_Z29check_INA233_miscommunicationv+0x74>
     b8a:	cd e0       	ldi	r28, 0x0D	; 13
     b8c:	d1 e0       	ldi	r29, 0x01	; 1
     b8e:	0b e0       	ldi	r16, 0x0B	; 11
     b90:	11 e0       	ldi	r17, 0x01	; 1
		
		for (uint8_t ii = 0; ii < 7; ii++){
			// If communication is not responding properly, open mosfet
			if(SensorList[ii]->testCommunication() == 1){
     b92:	89 91       	ld	r24, Y+
     b94:	99 91       	ld	r25, Y+
     b96:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_ZN8INA233_S17testCommunicationEv>
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	39 f4       	brne	.+14     	; 0xbac <_Z29check_INA233_miscommunicationv+0x54>
		digitalWrite(MOSpin_, HIGH);
	}
	
	// Break circuit
	void open_MOSFET(){
		digitalWrite(MOSpin_, LOW);
     b9e:	d8 01       	movw	r26, r16
     ba0:	ed 91       	ld	r30, X+
     ba2:	fc 91       	ld	r31, X
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <digitalWrite>
     bac:	0e 5f       	subi	r16, 0xFE	; 254
     bae:	1f 4f       	sbci	r17, 0xFF	; 255

void check_INA233_miscommunication(){
	
	if((millis() - timeStamps[0]) > interval_INA233_checking){
		
		for (uint8_t ii = 0; ii < 7; ii++){
     bb0:	b1 e0       	ldi	r27, 0x01	; 1
     bb2:	cb 31       	cpi	r28, 0x1B	; 27
     bb4:	db 07       	cpc	r29, r27
     bb6:	69 f7       	brne	.-38     	; 0xb92 <_Z29check_INA233_miscommunicationv+0x3a>
			if(SensorList[ii]->testCommunication() == 1){
				MosfetList[ii]->open_MOSFET();
			}
		}		
		
		timeStamps[0] = millis();
     bb8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <millis>
     bbc:	60 93 c3 03 	sts	0x03C3, r22	; 0x8003c3 <timeStamps>
     bc0:	70 93 c4 03 	sts	0x03C4, r23	; 0x8003c4 <timeStamps+0x1>
     bc4:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <timeStamps+0x2>
     bc8:	90 93 c6 03 	sts	0x03C6, r25	; 0x8003c6 <timeStamps+0x3>
	}
}
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	1f 91       	pop	r17
     bd2:	0f 91       	pop	r16
     bd4:	08 95       	ret

00000bd6 <_Z11blink_lightv>:

void blink_light(){
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
	if (millis() - blink_time > blink_interval){
     bda:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <millis>
     bde:	00 91 d8 02 	lds	r16, 0x02D8	; 0x8002d8 <__data_end>
     be2:	10 91 d9 02 	lds	r17, 0x02D9	; 0x8002d9 <__data_end+0x1>
     be6:	20 91 da 02 	lds	r18, 0x02DA	; 0x8002da <__data_end+0x2>
     bea:	30 91 db 02 	lds	r19, 0x02DB	; 0x8002db <__data_end+0x3>
     bee:	dc 01       	movw	r26, r24
     bf0:	cb 01       	movw	r24, r22
     bf2:	80 1b       	sub	r24, r16
     bf4:	91 0b       	sbc	r25, r17
     bf6:	a2 0b       	sbc	r26, r18
     bf8:	b3 0b       	sbc	r27, r19
     bfa:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <blink_interval>
     bfe:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <blink_interval+0x1>
     c02:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <blink_interval+0x2>
     c06:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <blink_interval+0x3>
     c0a:	08 17       	cp	r16, r24
     c0c:	19 07       	cpc	r17, r25
     c0e:	2a 07       	cpc	r18, r26
     c10:	3b 07       	cpc	r19, r27
     c12:	a0 f4       	brcc	.+40     	; 0xc3c <_Z11blink_lightv+0x66>
		STATE = !STATE;
     c14:	61 e0       	ldi	r22, 0x01	; 1
     c16:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <STATE>
     c1a:	81 11       	cpse	r24, r1
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <STATE>
		digitalWrite(9, STATE);
     c22:	89 e0       	ldi	r24, 0x09	; 9
     c24:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <digitalWrite>
		//p1.close_MOSFET();
		
		blink_time = millis();
     c28:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <millis>
     c2c:	60 93 d8 02 	sts	0x02D8, r22	; 0x8002d8 <__data_end>
     c30:	70 93 d9 02 	sts	0x02D9, r23	; 0x8002d9 <__data_end+0x1>
     c34:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <__data_end+0x2>
     c38:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <__data_end+0x3>
	}
}
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	08 95       	ret

00000c42 <loop>:
	frame.id = 0x500;
	frame_FD.id = 0x501;
}


void loop() {
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	cb e0       	ldi	r28, 0x0B	; 11
     c48:	d1 e0       	ldi	r29, 0x01	; 1
	
	// Let power through MOSFETs
	for (uint8_t ii = 0; ii < 7; ii++){
		MosfetList[ii]->close_MOSFET();
     c4a:	e9 91       	ld	r30, Y+
     c4c:	f9 91       	ld	r31, Y+
		pinMode(MOSpin_, OUTPUT);
	}
	
	// Complete circuit
	void close_MOSFET(){
		digitalWrite(MOSpin_, HIGH);
     c4e:	61 e0       	ldi	r22, 0x01	; 1
     c50:	80 81       	ld	r24, Z
     c52:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <digitalWrite>


void loop() {
	
	// Let power through MOSFETs
	for (uint8_t ii = 0; ii < 7; ii++){
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	c9 31       	cpi	r28, 0x19	; 25
     c5a:	d8 07       	cpc	r29, r24
     c5c:	b1 f7       	brne	.-20     	; 0xc4a <loop+0x8>
		MosfetList[ii]->close_MOSFET();
	}	
	
	// Make sure communication with INA233 still works, if not then open mosfet
	check_INA233_miscommunication();
     c5e:	0e 94 ac 05 	call	0xb58	; 0xb58 <_Z29check_INA233_miscommunicationv>
	
	float current_1 = Sensor_1.getCurrent();
     c62:	83 ea       	ldi	r24, 0xA3	; 163
     c64:	93 e0       	ldi	r25, 0x03	; 3
     c66:	0e 94 01 04 	call	0x802	; 0x802 <_ZN8INA233_S10getCurrentEv>
     c6a:	ab 01       	movw	r20, r22
     c6c:	bc 01       	movw	r22, r24
	int test = 1;
	
	Serial.println(current_1);
     c6e:	22 e0       	ldi	r18, 0x02	; 2
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	8f ec       	ldi	r24, 0xCF	; 207
     c74:	94 e0       	ldi	r25, 0x04	; 4
     c76:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <_ZN5Print7printlnEdi>
	
	if (can.available ()) {
     c7a:	8b e7       	ldi	r24, 0x7B	; 123
     c7c:	94 e0       	ldi	r25, 0x04	; 4
     c7e:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <_ZN10ACAN2517FD9availableEv>
     c82:	88 23       	and	r24, r24
     c84:	e1 f0       	breq	.+56     	; 0xcbe <loop+0x7c>
		can.receive (frame);
     c86:	6b ee       	ldi	r22, 0xEB	; 235
     c88:	73 e0       	ldi	r23, 0x03	; 3
     c8a:	8b e7       	ldi	r24, 0x7B	; 123
     c8c:	94 e0       	ldi	r25, 0x04	; 4
     c8e:	0e 94 17 10 	call	0x202e	; 0x202e <_ZN10ACAN2517FD7receiveER12CANFDMessage>
		Serial.print ("Received: ");
     c92:	64 e5       	ldi	r22, 0x54	; 84
     c94:	72 e0       	ldi	r23, 0x02	; 2
     c96:	8f ec       	ldi	r24, 0xCF	; 207
     c98:	94 e0       	ldi	r25, 0x04	; 4
     c9a:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN5Print5printEPKc>
		
		if (frame.data[0] == 0x01){
     c9e:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <frame+0x8>
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	21 f4       	brne	.+8      	; 0xcae <loop+0x6c>
			digitalWrite(9, HIGH);
     ca6:	61 e0       	ldi	r22, 0x01	; 1
     ca8:	89 e0       	ldi	r24, 0x09	; 9
     caa:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <digitalWrite>
		}

		if (frame.data[0] == 0x02){
     cae:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <frame+0x8>
     cb2:	82 30       	cpi	r24, 0x02	; 2
     cb4:	21 f4       	brne	.+8      	; 0xcbe <loop+0x7c>
			digitalWrite(9, LOW); 
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	89 e0       	ldi	r24, 0x09	; 9
     cba:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <digitalWrite>
		}
		
	}
	blink_light();
     cbe:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <_Z11blink_lightv>
	//p2.close_MOSFET();
	
	wdt_reset();	
     cc2:	a8 95       	wdr
}
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	08 95       	ret

00000cca <_GLOBAL__sub_I_can>:
};

struct INA233_Alarm_Config
{
  float overCurrent = 0, overVoltage = 0, underVoltage = 0;
  INA233_Alarm_Config(float oc, float ov, float uv) : overCurrent(oc), overVoltage(ov), underVoltage(uv) {}  
     cca:	e3 ec       	ldi	r30, 0xC3	; 195
     ccc:	f4 e0       	ldi	r31, 0x04	; 4
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	70 e4       	ldi	r23, 0x40	; 64
     cd6:	40 83       	st	Z, r20
     cd8:	51 83       	std	Z+1, r21	; 0x01
     cda:	62 83       	std	Z+2, r22	; 0x02
     cdc:	73 83       	std	Z+3, r23	; 0x03
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	a0 e5       	ldi	r26, 0x50	; 80
     ce4:	b1 e4       	ldi	r27, 0x41	; 65
     ce6:	84 83       	std	Z+4, r24	; 0x04
     ce8:	95 83       	std	Z+5, r25	; 0x05
     cea:	a6 83       	std	Z+6, r26	; 0x06
     cec:	b7 83       	std	Z+7, r27	; 0x07
     cee:	10 86       	std	Z+8, r1	; 0x08
     cf0:	11 86       	std	Z+9, r1	; 0x09
     cf2:	12 86       	std	Z+10, r1	; 0x0a
     cf4:	13 86       	std	Z+11, r1	; 0x0b
     cf6:	e7 eb       	ldi	r30, 0xB7	; 183
     cf8:	f4 e0       	ldi	r31, 0x04	; 4
     cfa:	40 83       	st	Z, r20
     cfc:	51 83       	std	Z+1, r21	; 0x01
     cfe:	62 83       	std	Z+2, r22	; 0x02
     d00:	73 83       	std	Z+3, r23	; 0x03
     d02:	84 83       	std	Z+4, r24	; 0x04
     d04:	95 83       	std	Z+5, r25	; 0x05
     d06:	a6 83       	std	Z+6, r26	; 0x06
     d08:	b7 83       	std	Z+7, r27	; 0x07
     d0a:	10 86       	std	Z+8, r1	; 0x08
     d0c:	11 86       	std	Z+9, r1	; 0x09
     d0e:	12 86       	std	Z+10, r1	; 0x0a
     d10:	13 86       	std	Z+11, r1	; 0x0b

// ___________________________ CANBUS SETTINGS ______________________________//
static const byte MCP2517_CS  = 7 ; // CS input of MCP2517
static const byte MCP2517_INT =  2 ; // INT output of MCP2517

ACAN2517FD can (MCP2517_CS, SPI, MCP2517_INT);
     d12:	22 e0       	ldi	r18, 0x02	; 2
     d14:	49 e7       	ldi	r20, 0x79	; 121
     d16:	55 e0       	ldi	r21, 0x05	; 5
     d18:	67 e0       	ldi	r22, 0x07	; 7
     d1a:	8b e7       	ldi	r24, 0x7B	; 123
     d1c:	94 e0       	ldi	r25, 0x04	; 4
     d1e:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <_ZN10ACAN2517FDC1EhR8SPIClassh>
	CANFDMessage frame_FD, frame;
     d22:	83 e3       	ldi	r24, 0x33	; 51
     d24:	94 e0       	ldi	r25, 0x04	; 4
     d26:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN12CANFDMessageC1Ev>
     d2a:	8b ee       	ldi	r24, 0xEB	; 235
     d2c:	93 e0       	ldi	r25, 0x03	; 3
     d2e:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN12CANFDMessageC1Ev>
uint16_t default_address = 0b0100011100100111;
unsigned long timeStamps[10] = {0};


// creating each INA233 sensor object
INA233_S Sensor_1(adrSensor1, m_valueSensor1, cal_valueSensor1, alarmConfigSensor1), 
     d32:	8d b7       	in	r24, 0x3d	; 61
     d34:	9e b7       	in	r25, 0x3e	; 62
     d36:	0c 97       	sbiw	r24, 0x0c	; 12
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	f8 94       	cli
     d3c:	9e bf       	out	0x3e, r25	; 62
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	8d bf       	out	0x3d, r24	; 61
     d42:	ad b7       	in	r26, 0x3d	; 61
     d44:	be b7       	in	r27, 0x3e	; 62
     d46:	11 96       	adiw	r26, 0x01	; 1
     d48:	8c e0       	ldi	r24, 0x0C	; 12
     d4a:	e3 ec       	ldi	r30, 0xC3	; 195
     d4c:	f4 e0       	ldi	r31, 0x04	; 4
     d4e:	01 90       	ld	r0, Z+
     d50:	0d 92       	st	X+, r0
     d52:	8a 95       	dec	r24
     d54:	e1 f7       	brne	.-8      	; 0xd4e <_GLOBAL__sub_I_can+0x84>
     d56:	23 e3       	ldi	r18, 0x33	; 51
     d58:	38 e0       	ldi	r19, 0x08	; 8
     d5a:	44 e3       	ldi	r20, 0x34	; 52
     d5c:	53 e0       	ldi	r21, 0x03	; 3
     d5e:	60 e4       	ldi	r22, 0x40	; 64
     d60:	83 ea       	ldi	r24, 0xA3	; 163
     d62:	93 e0       	ldi	r25, 0x03	; 3
     d64:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_2(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     d68:	8d b7       	in	r24, 0x3d	; 61
     d6a:	9e b7       	in	r25, 0x3e	; 62
     d6c:	0c 97       	sbiw	r24, 0x0c	; 12
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	9e bf       	out	0x3e, r25	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	8d bf       	out	0x3d, r24	; 61
     d78:	ad b7       	in	r26, 0x3d	; 61
     d7a:	be b7       	in	r27, 0x3e	; 62
     d7c:	11 96       	adiw	r26, 0x01	; 1
     d7e:	8c e0       	ldi	r24, 0x0C	; 12
     d80:	e7 eb       	ldi	r30, 0xB7	; 183
     d82:	f4 e0       	ldi	r31, 0x04	; 4
     d84:	01 90       	ld	r0, Z+
     d86:	0d 92       	st	X+, r0
     d88:	8a 95       	dec	r24
     d8a:	e1 f7       	brne	.-8      	; 0xd84 <_GLOBAL__sub_I_can+0xba>
     d8c:	23 e3       	ldi	r18, 0x33	; 51
     d8e:	38 e0       	ldi	r19, 0x08	; 8
     d90:	44 e3       	ldi	r20, 0x34	; 52
     d92:	53 e0       	ldi	r21, 0x03	; 3
     d94:	61 e4       	ldi	r22, 0x41	; 65
     d96:	83 e8       	ldi	r24, 0x83	; 131
     d98:	93 e0       	ldi	r25, 0x03	; 3
     d9a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_3(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     d9e:	8d b7       	in	r24, 0x3d	; 61
     da0:	9e b7       	in	r25, 0x3e	; 62
     da2:	0c 97       	sbiw	r24, 0x0c	; 12
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	9e bf       	out	0x3e, r25	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	8d bf       	out	0x3d, r24	; 61
     dae:	ad b7       	in	r26, 0x3d	; 61
     db0:	be b7       	in	r27, 0x3e	; 62
     db2:	11 96       	adiw	r26, 0x01	; 1
     db4:	8c e0       	ldi	r24, 0x0C	; 12
     db6:	e7 eb       	ldi	r30, 0xB7	; 183
     db8:	f4 e0       	ldi	r31, 0x04	; 4
     dba:	01 90       	ld	r0, Z+
     dbc:	0d 92       	st	X+, r0
     dbe:	8a 95       	dec	r24
     dc0:	e1 f7       	brne	.-8      	; 0xdba <_GLOBAL__sub_I_can+0xf0>
     dc2:	23 e3       	ldi	r18, 0x33	; 51
     dc4:	38 e0       	ldi	r19, 0x08	; 8
     dc6:	44 e3       	ldi	r20, 0x34	; 52
     dc8:	53 e0       	ldi	r21, 0x03	; 3
     dca:	61 e4       	ldi	r22, 0x41	; 65
     dcc:	83 e6       	ldi	r24, 0x63	; 99
     dce:	93 e0       	ldi	r25, 0x03	; 3
     dd0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_4(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     dd4:	8d b7       	in	r24, 0x3d	; 61
     dd6:	9e b7       	in	r25, 0x3e	; 62
     dd8:	84 96       	adiw	r24, 0x24	; 36
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	9e bf       	out	0x3e, r25	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	8d bf       	out	0x3d, r24	; 61
     de4:	0c 97       	sbiw	r24, 0x0c	; 12
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	f8 94       	cli
     dea:	9e bf       	out	0x3e, r25	; 62
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	8d bf       	out	0x3d, r24	; 61
     df0:	ad b7       	in	r26, 0x3d	; 61
     df2:	be b7       	in	r27, 0x3e	; 62
     df4:	11 96       	adiw	r26, 0x01	; 1
     df6:	8c e0       	ldi	r24, 0x0C	; 12
     df8:	e7 eb       	ldi	r30, 0xB7	; 183
     dfa:	f4 e0       	ldi	r31, 0x04	; 4
     dfc:	01 90       	ld	r0, Z+
     dfe:	0d 92       	st	X+, r0
     e00:	8a 95       	dec	r24
     e02:	e1 f7       	brne	.-8      	; 0xdfc <_GLOBAL__sub_I_can+0x132>
     e04:	23 e3       	ldi	r18, 0x33	; 51
     e06:	38 e0       	ldi	r19, 0x08	; 8
     e08:	44 e3       	ldi	r20, 0x34	; 52
     e0a:	53 e0       	ldi	r21, 0x03	; 3
     e0c:	61 e4       	ldi	r22, 0x41	; 65
     e0e:	83 e4       	ldi	r24, 0x43	; 67
     e10:	93 e0       	ldi	r25, 0x03	; 3
     e12:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_5(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     e16:	8d b7       	in	r24, 0x3d	; 61
     e18:	9e b7       	in	r25, 0x3e	; 62
     e1a:	0c 97       	sbiw	r24, 0x0c	; 12
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	9e bf       	out	0x3e, r25	; 62
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	8d bf       	out	0x3d, r24	; 61
     e26:	ad b7       	in	r26, 0x3d	; 61
     e28:	be b7       	in	r27, 0x3e	; 62
     e2a:	11 96       	adiw	r26, 0x01	; 1
     e2c:	8c e0       	ldi	r24, 0x0C	; 12
     e2e:	e7 eb       	ldi	r30, 0xB7	; 183
     e30:	f4 e0       	ldi	r31, 0x04	; 4
     e32:	01 90       	ld	r0, Z+
     e34:	0d 92       	st	X+, r0
     e36:	8a 95       	dec	r24
     e38:	e1 f7       	brne	.-8      	; 0xe32 <_GLOBAL__sub_I_can+0x168>
     e3a:	23 e3       	ldi	r18, 0x33	; 51
     e3c:	38 e0       	ldi	r19, 0x08	; 8
     e3e:	44 e3       	ldi	r20, 0x34	; 52
     e40:	53 e0       	ldi	r21, 0x03	; 3
     e42:	61 e4       	ldi	r22, 0x41	; 65
     e44:	83 e2       	ldi	r24, 0x23	; 35
     e46:	93 e0       	ldi	r25, 0x03	; 3
     e48:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_6(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     e4c:	8d b7       	in	r24, 0x3d	; 61
     e4e:	9e b7       	in	r25, 0x3e	; 62
     e50:	0c 97       	sbiw	r24, 0x0c	; 12
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	9e bf       	out	0x3e, r25	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	8d bf       	out	0x3d, r24	; 61
     e5c:	ad b7       	in	r26, 0x3d	; 61
     e5e:	be b7       	in	r27, 0x3e	; 62
     e60:	11 96       	adiw	r26, 0x01	; 1
     e62:	8c e0       	ldi	r24, 0x0C	; 12
     e64:	e7 eb       	ldi	r30, 0xB7	; 183
     e66:	f4 e0       	ldi	r31, 0x04	; 4
     e68:	01 90       	ld	r0, Z+
     e6a:	0d 92       	st	X+, r0
     e6c:	8a 95       	dec	r24
     e6e:	e1 f7       	brne	.-8      	; 0xe68 <_GLOBAL__sub_I_can+0x19e>
     e70:	23 e3       	ldi	r18, 0x33	; 51
     e72:	38 e0       	ldi	r19, 0x08	; 8
     e74:	44 e3       	ldi	r20, 0x34	; 52
     e76:	53 e0       	ldi	r21, 0x03	; 3
     e78:	61 e4       	ldi	r22, 0x41	; 65
     e7a:	83 e0       	ldi	r24, 0x03	; 3
     e7c:	93 e0       	ldi	r25, 0x03	; 3
     e7e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_7(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2);
     e82:	8d b7       	in	r24, 0x3d	; 61
     e84:	9e b7       	in	r25, 0x3e	; 62
     e86:	84 96       	adiw	r24, 0x24	; 36
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	9e bf       	out	0x3e, r25	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	8d bf       	out	0x3d, r24	; 61
     e92:	0c 97       	sbiw	r24, 0x0c	; 12
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	9e bf       	out	0x3e, r25	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	8d bf       	out	0x3d, r24	; 61
     e9e:	ad b7       	in	r26, 0x3d	; 61
     ea0:	be b7       	in	r27, 0x3e	; 62
     ea2:	11 96       	adiw	r26, 0x01	; 1
     ea4:	8c e0       	ldi	r24, 0x0C	; 12
     ea6:	e7 eb       	ldi	r30, 0xB7	; 183
     ea8:	f4 e0       	ldi	r31, 0x04	; 4
     eaa:	01 90       	ld	r0, Z+
     eac:	0d 92       	st	X+, r0
     eae:	8a 95       	dec	r24
     eb0:	e1 f7       	brne	.-8      	; 0xeaa <_GLOBAL__sub_I_can+0x1e0>
     eb2:	23 e3       	ldi	r18, 0x33	; 51
     eb4:	38 e0       	ldi	r19, 0x08	; 8
     eb6:	44 e3       	ldi	r20, 0x34	; 52
     eb8:	53 e0       	ldi	r21, 0x03	; 3
     eba:	61 e4       	ldi	r22, 0x41	; 65
     ebc:	83 ee       	ldi	r24, 0xE3	; 227
     ebe:	92 e0       	ldi	r25, 0x02	; 2
     ec0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
// INA233 [0 to 6] are the mosfets, [7 to 9] others
INA233_S* SensorList[] = { &Sensor_1, &Sensor_2, &Sensor_3, &Sensor_4, &Sensor_5, &Sensor_6, &Sensor_7 };


// Create instances of each mosfet object
mosfet	p1(p1_ACM_E_Pin), 
     ec4:	63 e0       	ldi	r22, 0x03	; 3
     ec6:	82 ee       	ldi	r24, 0xE2	; 226
     ec8:	92 e0       	ldi	r25, 0x02	; 2
     eca:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_ZN6mosfetC1Eh>
		p2(p2_ACM_E_Pin), 
     ece:	65 e0       	ldi	r22, 0x05	; 5
     ed0:	81 ee       	ldi	r24, 0xE1	; 225
     ed2:	92 e0       	ldi	r25, 0x02	; 2
     ed4:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_ZN6mosfetC1Eh>
		p3(p3_ACM_E_Pin), 
     ed8:	66 e0       	ldi	r22, 0x06	; 6
     eda:	80 ee       	ldi	r24, 0xE0	; 224
     edc:	92 e0       	ldi	r25, 0x02	; 2
     ede:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_ZN6mosfetC1Eh>
		p4(p4_ACM_E_Pin),
     ee2:	6a e0       	ldi	r22, 0x0A	; 10
     ee4:	8f ed       	ldi	r24, 0xDF	; 223
     ee6:	92 e0       	ldi	r25, 0x02	; 2
     ee8:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_ZN6mosfetC1Eh>
		p5(p5_ACM_E_Pin),
     eec:	6f e0       	ldi	r22, 0x0F	; 15
     eee:	8e ed       	ldi	r24, 0xDE	; 222
     ef0:	92 e0       	ldi	r25, 0x02	; 2
     ef2:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_ZN6mosfetC1Eh>
		p6(p6_ACM_E_Pin),
     ef6:	60 e1       	ldi	r22, 0x10	; 16
     ef8:	8d ed       	ldi	r24, 0xDD	; 221
     efa:	92 e0       	ldi	r25, 0x02	; 2
     efc:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_ZN6mosfetC1Eh>
		p7(p7_ACM_E_Pin);
     f00:	8d b7       	in	r24, 0x3d	; 61
     f02:	9e b7       	in	r25, 0x3e	; 62
     f04:	0c 96       	adiw	r24, 0x0c	; 12
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	9e bf       	out	0x3e, r25	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	8d bf       	out	0x3d, r24	; 61
     f10:	61 e1       	ldi	r22, 0x11	; 17
     f12:	8c ed       	ldi	r24, 0xDC	; 220
     f14:	92 e0       	ldi	r25, 0x02	; 2
     f16:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <_ZN6mosfetC1Eh>

00000f1a <_GLOBAL__sub_D_can>:
//······················································································································
// Destructor
//······················································································································

  public: ~ ACANFDBuffer (void) {
    delete [] mBuffer ;
     f1a:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <can+0x26>
     f1e:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <can+0x27>
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	11 f0       	breq	.+4      	; 0xf2a <_GLOBAL__sub_D_can+0x10>
     f26:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <_ZdaPv>
     f2a:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <can+0x10>
     f2e:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <can+0x11>
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	11 f0       	breq	.+4      	; 0xf3a <_GLOBAL__sub_D_can+0x20>
     f36:	0c 94 7f 0a 	jmp	0x14fe	; 0x14fe <_ZdaPv>
     f3a:	08 95       	ret

00000f3c <__subsf3>:
     f3c:	50 58       	subi	r21, 0x80	; 128

00000f3e <__addsf3>:
     f3e:	bb 27       	eor	r27, r27
     f40:	aa 27       	eor	r26, r26
     f42:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__addsf3x>
     f46:	0c 94 07 09 	jmp	0x120e	; 0x120e <__fp_round>
     f4a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__fp_pscA>
     f4e:	38 f0       	brcs	.+14     	; 0xf5e <__addsf3+0x20>
     f50:	0e 94 00 09 	call	0x1200	; 0x1200 <__fp_pscB>
     f54:	20 f0       	brcs	.+8      	; 0xf5e <__addsf3+0x20>
     f56:	39 f4       	brne	.+14     	; 0xf66 <__addsf3+0x28>
     f58:	9f 3f       	cpi	r25, 0xFF	; 255
     f5a:	19 f4       	brne	.+6      	; 0xf62 <__addsf3+0x24>
     f5c:	26 f4       	brtc	.+8      	; 0xf66 <__addsf3+0x28>
     f5e:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__fp_nan>
     f62:	0e f4       	brtc	.+2      	; 0xf66 <__addsf3+0x28>
     f64:	e0 95       	com	r30
     f66:	e7 fb       	bst	r30, 7
     f68:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__fp_inf>

00000f6c <__addsf3x>:
     f6c:	e9 2f       	mov	r30, r25
     f6e:	0e 94 18 09 	call	0x1230	; 0x1230 <__fp_split3>
     f72:	58 f3       	brcs	.-42     	; 0xf4a <__addsf3+0xc>
     f74:	ba 17       	cp	r27, r26
     f76:	62 07       	cpc	r22, r18
     f78:	73 07       	cpc	r23, r19
     f7a:	84 07       	cpc	r24, r20
     f7c:	95 07       	cpc	r25, r21
     f7e:	20 f0       	brcs	.+8      	; 0xf88 <__addsf3x+0x1c>
     f80:	79 f4       	brne	.+30     	; 0xfa0 <__addsf3x+0x34>
     f82:	a6 f5       	brtc	.+104    	; 0xfec <__addsf3x+0x80>
     f84:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__fp_zero>
     f88:	0e f4       	brtc	.+2      	; 0xf8c <__addsf3x+0x20>
     f8a:	e0 95       	com	r30
     f8c:	0b 2e       	mov	r0, r27
     f8e:	ba 2f       	mov	r27, r26
     f90:	a0 2d       	mov	r26, r0
     f92:	0b 01       	movw	r0, r22
     f94:	b9 01       	movw	r22, r18
     f96:	90 01       	movw	r18, r0
     f98:	0c 01       	movw	r0, r24
     f9a:	ca 01       	movw	r24, r20
     f9c:	a0 01       	movw	r20, r0
     f9e:	11 24       	eor	r1, r1
     fa0:	ff 27       	eor	r31, r31
     fa2:	59 1b       	sub	r21, r25
     fa4:	99 f0       	breq	.+38     	; 0xfcc <__addsf3x+0x60>
     fa6:	59 3f       	cpi	r21, 0xF9	; 249
     fa8:	50 f4       	brcc	.+20     	; 0xfbe <__addsf3x+0x52>
     faa:	50 3e       	cpi	r21, 0xE0	; 224
     fac:	68 f1       	brcs	.+90     	; 0x1008 <__addsf3x+0x9c>
     fae:	1a 16       	cp	r1, r26
     fb0:	f0 40       	sbci	r31, 0x00	; 0
     fb2:	a2 2f       	mov	r26, r18
     fb4:	23 2f       	mov	r18, r19
     fb6:	34 2f       	mov	r19, r20
     fb8:	44 27       	eor	r20, r20
     fba:	58 5f       	subi	r21, 0xF8	; 248
     fbc:	f3 cf       	rjmp	.-26     	; 0xfa4 <__addsf3x+0x38>
     fbe:	46 95       	lsr	r20
     fc0:	37 95       	ror	r19
     fc2:	27 95       	ror	r18
     fc4:	a7 95       	ror	r26
     fc6:	f0 40       	sbci	r31, 0x00	; 0
     fc8:	53 95       	inc	r21
     fca:	c9 f7       	brne	.-14     	; 0xfbe <__addsf3x+0x52>
     fcc:	7e f4       	brtc	.+30     	; 0xfec <__addsf3x+0x80>
     fce:	1f 16       	cp	r1, r31
     fd0:	ba 0b       	sbc	r27, r26
     fd2:	62 0b       	sbc	r22, r18
     fd4:	73 0b       	sbc	r23, r19
     fd6:	84 0b       	sbc	r24, r20
     fd8:	ba f0       	brmi	.+46     	; 0x1008 <__addsf3x+0x9c>
     fda:	91 50       	subi	r25, 0x01	; 1
     fdc:	a1 f0       	breq	.+40     	; 0x1006 <__addsf3x+0x9a>
     fde:	ff 0f       	add	r31, r31
     fe0:	bb 1f       	adc	r27, r27
     fe2:	66 1f       	adc	r22, r22
     fe4:	77 1f       	adc	r23, r23
     fe6:	88 1f       	adc	r24, r24
     fe8:	c2 f7       	brpl	.-16     	; 0xfda <__addsf3x+0x6e>
     fea:	0e c0       	rjmp	.+28     	; 0x1008 <__addsf3x+0x9c>
     fec:	ba 0f       	add	r27, r26
     fee:	62 1f       	adc	r22, r18
     ff0:	73 1f       	adc	r23, r19
     ff2:	84 1f       	adc	r24, r20
     ff4:	48 f4       	brcc	.+18     	; 0x1008 <__addsf3x+0x9c>
     ff6:	87 95       	ror	r24
     ff8:	77 95       	ror	r23
     ffa:	67 95       	ror	r22
     ffc:	b7 95       	ror	r27
     ffe:	f7 95       	ror	r31
    1000:	9e 3f       	cpi	r25, 0xFE	; 254
    1002:	08 f0       	brcs	.+2      	; 0x1006 <__addsf3x+0x9a>
    1004:	b0 cf       	rjmp	.-160    	; 0xf66 <__addsf3+0x28>
    1006:	93 95       	inc	r25
    1008:	88 0f       	add	r24, r24
    100a:	08 f0       	brcs	.+2      	; 0x100e <__addsf3x+0xa2>
    100c:	99 27       	eor	r25, r25
    100e:	ee 0f       	add	r30, r30
    1010:	97 95       	ror	r25
    1012:	87 95       	ror	r24
    1014:	08 95       	ret

00001016 <__divsf3>:
    1016:	0e 94 1f 08 	call	0x103e	; 0x103e <__divsf3x>
    101a:	0c 94 07 09 	jmp	0x120e	; 0x120e <__fp_round>
    101e:	0e 94 00 09 	call	0x1200	; 0x1200 <__fp_pscB>
    1022:	58 f0       	brcs	.+22     	; 0x103a <__divsf3+0x24>
    1024:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__fp_pscA>
    1028:	40 f0       	brcs	.+16     	; 0x103a <__divsf3+0x24>
    102a:	29 f4       	brne	.+10     	; 0x1036 <__divsf3+0x20>
    102c:	5f 3f       	cpi	r21, 0xFF	; 255
    102e:	29 f0       	breq	.+10     	; 0x103a <__divsf3+0x24>
    1030:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__fp_inf>
    1034:	51 11       	cpse	r21, r1
    1036:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__fp_szero>
    103a:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__fp_nan>

0000103e <__divsf3x>:
    103e:	0e 94 18 09 	call	0x1230	; 0x1230 <__fp_split3>
    1042:	68 f3       	brcs	.-38     	; 0x101e <__divsf3+0x8>

00001044 <__divsf3_pse>:
    1044:	99 23       	and	r25, r25
    1046:	b1 f3       	breq	.-20     	; 0x1034 <__divsf3+0x1e>
    1048:	55 23       	and	r21, r21
    104a:	91 f3       	breq	.-28     	; 0x1030 <__divsf3+0x1a>
    104c:	95 1b       	sub	r25, r21
    104e:	55 0b       	sbc	r21, r21
    1050:	bb 27       	eor	r27, r27
    1052:	aa 27       	eor	r26, r26
    1054:	62 17       	cp	r22, r18
    1056:	73 07       	cpc	r23, r19
    1058:	84 07       	cpc	r24, r20
    105a:	38 f0       	brcs	.+14     	; 0x106a <__divsf3_pse+0x26>
    105c:	9f 5f       	subi	r25, 0xFF	; 255
    105e:	5f 4f       	sbci	r21, 0xFF	; 255
    1060:	22 0f       	add	r18, r18
    1062:	33 1f       	adc	r19, r19
    1064:	44 1f       	adc	r20, r20
    1066:	aa 1f       	adc	r26, r26
    1068:	a9 f3       	breq	.-22     	; 0x1054 <__divsf3_pse+0x10>
    106a:	35 d0       	rcall	.+106    	; 0x10d6 <__divsf3_pse+0x92>
    106c:	0e 2e       	mov	r0, r30
    106e:	3a f0       	brmi	.+14     	; 0x107e <__divsf3_pse+0x3a>
    1070:	e0 e8       	ldi	r30, 0x80	; 128
    1072:	32 d0       	rcall	.+100    	; 0x10d8 <__divsf3_pse+0x94>
    1074:	91 50       	subi	r25, 0x01	; 1
    1076:	50 40       	sbci	r21, 0x00	; 0
    1078:	e6 95       	lsr	r30
    107a:	00 1c       	adc	r0, r0
    107c:	ca f7       	brpl	.-14     	; 0x1070 <__divsf3_pse+0x2c>
    107e:	2b d0       	rcall	.+86     	; 0x10d6 <__divsf3_pse+0x92>
    1080:	fe 2f       	mov	r31, r30
    1082:	29 d0       	rcall	.+82     	; 0x10d6 <__divsf3_pse+0x92>
    1084:	66 0f       	add	r22, r22
    1086:	77 1f       	adc	r23, r23
    1088:	88 1f       	adc	r24, r24
    108a:	bb 1f       	adc	r27, r27
    108c:	26 17       	cp	r18, r22
    108e:	37 07       	cpc	r19, r23
    1090:	48 07       	cpc	r20, r24
    1092:	ab 07       	cpc	r26, r27
    1094:	b0 e8       	ldi	r27, 0x80	; 128
    1096:	09 f0       	breq	.+2      	; 0x109a <__divsf3_pse+0x56>
    1098:	bb 0b       	sbc	r27, r27
    109a:	80 2d       	mov	r24, r0
    109c:	bf 01       	movw	r22, r30
    109e:	ff 27       	eor	r31, r31
    10a0:	93 58       	subi	r25, 0x83	; 131
    10a2:	5f 4f       	sbci	r21, 0xFF	; 255
    10a4:	3a f0       	brmi	.+14     	; 0x10b4 <__divsf3_pse+0x70>
    10a6:	9e 3f       	cpi	r25, 0xFE	; 254
    10a8:	51 05       	cpc	r21, r1
    10aa:	78 f0       	brcs	.+30     	; 0x10ca <__divsf3_pse+0x86>
    10ac:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__fp_inf>
    10b0:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__fp_szero>
    10b4:	5f 3f       	cpi	r21, 0xFF	; 255
    10b6:	e4 f3       	brlt	.-8      	; 0x10b0 <__divsf3_pse+0x6c>
    10b8:	98 3e       	cpi	r25, 0xE8	; 232
    10ba:	d4 f3       	brlt	.-12     	; 0x10b0 <__divsf3_pse+0x6c>
    10bc:	86 95       	lsr	r24
    10be:	77 95       	ror	r23
    10c0:	67 95       	ror	r22
    10c2:	b7 95       	ror	r27
    10c4:	f7 95       	ror	r31
    10c6:	9f 5f       	subi	r25, 0xFF	; 255
    10c8:	c9 f7       	brne	.-14     	; 0x10bc <__divsf3_pse+0x78>
    10ca:	88 0f       	add	r24, r24
    10cc:	91 1d       	adc	r25, r1
    10ce:	96 95       	lsr	r25
    10d0:	87 95       	ror	r24
    10d2:	97 f9       	bld	r25, 7
    10d4:	08 95       	ret
    10d6:	e1 e0       	ldi	r30, 0x01	; 1
    10d8:	66 0f       	add	r22, r22
    10da:	77 1f       	adc	r23, r23
    10dc:	88 1f       	adc	r24, r24
    10de:	bb 1f       	adc	r27, r27
    10e0:	62 17       	cp	r22, r18
    10e2:	73 07       	cpc	r23, r19
    10e4:	84 07       	cpc	r24, r20
    10e6:	ba 07       	cpc	r27, r26
    10e8:	20 f0       	brcs	.+8      	; 0x10f2 <__divsf3_pse+0xae>
    10ea:	62 1b       	sub	r22, r18
    10ec:	73 0b       	sbc	r23, r19
    10ee:	84 0b       	sbc	r24, r20
    10f0:	ba 0b       	sbc	r27, r26
    10f2:	ee 1f       	adc	r30, r30
    10f4:	88 f7       	brcc	.-30     	; 0x10d8 <__divsf3_pse+0x94>
    10f6:	e0 95       	com	r30
    10f8:	08 95       	ret

000010fa <__fixsfsi>:
    10fa:	0e 94 84 08 	call	0x1108	; 0x1108 <__fixunssfsi>
    10fe:	68 94       	set
    1100:	b1 11       	cpse	r27, r1
    1102:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__fp_szero>
    1106:	08 95       	ret

00001108 <__fixunssfsi>:
    1108:	0e 94 20 09 	call	0x1240	; 0x1240 <__fp_splitA>
    110c:	88 f0       	brcs	.+34     	; 0x1130 <__fixunssfsi+0x28>
    110e:	9f 57       	subi	r25, 0x7F	; 127
    1110:	98 f0       	brcs	.+38     	; 0x1138 <__fixunssfsi+0x30>
    1112:	b9 2f       	mov	r27, r25
    1114:	99 27       	eor	r25, r25
    1116:	b7 51       	subi	r27, 0x17	; 23
    1118:	b0 f0       	brcs	.+44     	; 0x1146 <__fixunssfsi+0x3e>
    111a:	e1 f0       	breq	.+56     	; 0x1154 <__fixunssfsi+0x4c>
    111c:	66 0f       	add	r22, r22
    111e:	77 1f       	adc	r23, r23
    1120:	88 1f       	adc	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	1a f0       	brmi	.+6      	; 0x112c <__fixunssfsi+0x24>
    1126:	ba 95       	dec	r27
    1128:	c9 f7       	brne	.-14     	; 0x111c <__fixunssfsi+0x14>
    112a:	14 c0       	rjmp	.+40     	; 0x1154 <__fixunssfsi+0x4c>
    112c:	b1 30       	cpi	r27, 0x01	; 1
    112e:	91 f0       	breq	.+36     	; 0x1154 <__fixunssfsi+0x4c>
    1130:	0e 94 3a 09 	call	0x1274	; 0x1274 <__fp_zero>
    1134:	b1 e0       	ldi	r27, 0x01	; 1
    1136:	08 95       	ret
    1138:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__fp_zero>
    113c:	67 2f       	mov	r22, r23
    113e:	78 2f       	mov	r23, r24
    1140:	88 27       	eor	r24, r24
    1142:	b8 5f       	subi	r27, 0xF8	; 248
    1144:	39 f0       	breq	.+14     	; 0x1154 <__fixunssfsi+0x4c>
    1146:	b9 3f       	cpi	r27, 0xF9	; 249
    1148:	cc f3       	brlt	.-14     	; 0x113c <__fixunssfsi+0x34>
    114a:	86 95       	lsr	r24
    114c:	77 95       	ror	r23
    114e:	67 95       	ror	r22
    1150:	b3 95       	inc	r27
    1152:	d9 f7       	brne	.-10     	; 0x114a <__fixunssfsi+0x42>
    1154:	3e f4       	brtc	.+14     	; 0x1164 <__fixunssfsi+0x5c>
    1156:	90 95       	com	r25
    1158:	80 95       	com	r24
    115a:	70 95       	com	r23
    115c:	61 95       	neg	r22
    115e:	7f 4f       	sbci	r23, 0xFF	; 255
    1160:	8f 4f       	sbci	r24, 0xFF	; 255
    1162:	9f 4f       	sbci	r25, 0xFF	; 255
    1164:	08 95       	ret

00001166 <__floatunsisf>:
    1166:	e8 94       	clt
    1168:	09 c0       	rjmp	.+18     	; 0x117c <__floatsisf+0x12>

0000116a <__floatsisf>:
    116a:	97 fb       	bst	r25, 7
    116c:	3e f4       	brtc	.+14     	; 0x117c <__floatsisf+0x12>
    116e:	90 95       	com	r25
    1170:	80 95       	com	r24
    1172:	70 95       	com	r23
    1174:	61 95       	neg	r22
    1176:	7f 4f       	sbci	r23, 0xFF	; 255
    1178:	8f 4f       	sbci	r24, 0xFF	; 255
    117a:	9f 4f       	sbci	r25, 0xFF	; 255
    117c:	99 23       	and	r25, r25
    117e:	a9 f0       	breq	.+42     	; 0x11aa <__floatsisf+0x40>
    1180:	f9 2f       	mov	r31, r25
    1182:	96 e9       	ldi	r25, 0x96	; 150
    1184:	bb 27       	eor	r27, r27
    1186:	93 95       	inc	r25
    1188:	f6 95       	lsr	r31
    118a:	87 95       	ror	r24
    118c:	77 95       	ror	r23
    118e:	67 95       	ror	r22
    1190:	b7 95       	ror	r27
    1192:	f1 11       	cpse	r31, r1
    1194:	f8 cf       	rjmp	.-16     	; 0x1186 <__floatsisf+0x1c>
    1196:	fa f4       	brpl	.+62     	; 0x11d6 <__floatsisf+0x6c>
    1198:	bb 0f       	add	r27, r27
    119a:	11 f4       	brne	.+4      	; 0x11a0 <__floatsisf+0x36>
    119c:	60 ff       	sbrs	r22, 0
    119e:	1b c0       	rjmp	.+54     	; 0x11d6 <__floatsisf+0x6c>
    11a0:	6f 5f       	subi	r22, 0xFF	; 255
    11a2:	7f 4f       	sbci	r23, 0xFF	; 255
    11a4:	8f 4f       	sbci	r24, 0xFF	; 255
    11a6:	9f 4f       	sbci	r25, 0xFF	; 255
    11a8:	16 c0       	rjmp	.+44     	; 0x11d6 <__floatsisf+0x6c>
    11aa:	88 23       	and	r24, r24
    11ac:	11 f0       	breq	.+4      	; 0x11b2 <__floatsisf+0x48>
    11ae:	96 e9       	ldi	r25, 0x96	; 150
    11b0:	11 c0       	rjmp	.+34     	; 0x11d4 <__floatsisf+0x6a>
    11b2:	77 23       	and	r23, r23
    11b4:	21 f0       	breq	.+8      	; 0x11be <__floatsisf+0x54>
    11b6:	9e e8       	ldi	r25, 0x8E	; 142
    11b8:	87 2f       	mov	r24, r23
    11ba:	76 2f       	mov	r23, r22
    11bc:	05 c0       	rjmp	.+10     	; 0x11c8 <__floatsisf+0x5e>
    11be:	66 23       	and	r22, r22
    11c0:	71 f0       	breq	.+28     	; 0x11de <__floatsisf+0x74>
    11c2:	96 e8       	ldi	r25, 0x86	; 134
    11c4:	86 2f       	mov	r24, r22
    11c6:	70 e0       	ldi	r23, 0x00	; 0
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	2a f0       	brmi	.+10     	; 0x11d6 <__floatsisf+0x6c>
    11cc:	9a 95       	dec	r25
    11ce:	66 0f       	add	r22, r22
    11d0:	77 1f       	adc	r23, r23
    11d2:	88 1f       	adc	r24, r24
    11d4:	da f7       	brpl	.-10     	; 0x11cc <__floatsisf+0x62>
    11d6:	88 0f       	add	r24, r24
    11d8:	96 95       	lsr	r25
    11da:	87 95       	ror	r24
    11dc:	97 f9       	bld	r25, 7
    11de:	08 95       	ret

000011e0 <__fp_inf>:
    11e0:	97 f9       	bld	r25, 7
    11e2:	9f 67       	ori	r25, 0x7F	; 127
    11e4:	80 e8       	ldi	r24, 0x80	; 128
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	08 95       	ret

000011ec <__fp_nan>:
    11ec:	9f ef       	ldi	r25, 0xFF	; 255
    11ee:	80 ec       	ldi	r24, 0xC0	; 192
    11f0:	08 95       	ret

000011f2 <__fp_pscA>:
    11f2:	00 24       	eor	r0, r0
    11f4:	0a 94       	dec	r0
    11f6:	16 16       	cp	r1, r22
    11f8:	17 06       	cpc	r1, r23
    11fa:	18 06       	cpc	r1, r24
    11fc:	09 06       	cpc	r0, r25
    11fe:	08 95       	ret

00001200 <__fp_pscB>:
    1200:	00 24       	eor	r0, r0
    1202:	0a 94       	dec	r0
    1204:	12 16       	cp	r1, r18
    1206:	13 06       	cpc	r1, r19
    1208:	14 06       	cpc	r1, r20
    120a:	05 06       	cpc	r0, r21
    120c:	08 95       	ret

0000120e <__fp_round>:
    120e:	09 2e       	mov	r0, r25
    1210:	03 94       	inc	r0
    1212:	00 0c       	add	r0, r0
    1214:	11 f4       	brne	.+4      	; 0x121a <__fp_round+0xc>
    1216:	88 23       	and	r24, r24
    1218:	52 f0       	brmi	.+20     	; 0x122e <__fp_round+0x20>
    121a:	bb 0f       	add	r27, r27
    121c:	40 f4       	brcc	.+16     	; 0x122e <__fp_round+0x20>
    121e:	bf 2b       	or	r27, r31
    1220:	11 f4       	brne	.+4      	; 0x1226 <__fp_round+0x18>
    1222:	60 ff       	sbrs	r22, 0
    1224:	04 c0       	rjmp	.+8      	; 0x122e <__fp_round+0x20>
    1226:	6f 5f       	subi	r22, 0xFF	; 255
    1228:	7f 4f       	sbci	r23, 0xFF	; 255
    122a:	8f 4f       	sbci	r24, 0xFF	; 255
    122c:	9f 4f       	sbci	r25, 0xFF	; 255
    122e:	08 95       	ret

00001230 <__fp_split3>:
    1230:	57 fd       	sbrc	r21, 7
    1232:	90 58       	subi	r25, 0x80	; 128
    1234:	44 0f       	add	r20, r20
    1236:	55 1f       	adc	r21, r21
    1238:	59 f0       	breq	.+22     	; 0x1250 <__fp_splitA+0x10>
    123a:	5f 3f       	cpi	r21, 0xFF	; 255
    123c:	71 f0       	breq	.+28     	; 0x125a <__fp_splitA+0x1a>
    123e:	47 95       	ror	r20

00001240 <__fp_splitA>:
    1240:	88 0f       	add	r24, r24
    1242:	97 fb       	bst	r25, 7
    1244:	99 1f       	adc	r25, r25
    1246:	61 f0       	breq	.+24     	; 0x1260 <__fp_splitA+0x20>
    1248:	9f 3f       	cpi	r25, 0xFF	; 255
    124a:	79 f0       	breq	.+30     	; 0x126a <__fp_splitA+0x2a>
    124c:	87 95       	ror	r24
    124e:	08 95       	ret
    1250:	12 16       	cp	r1, r18
    1252:	13 06       	cpc	r1, r19
    1254:	14 06       	cpc	r1, r20
    1256:	55 1f       	adc	r21, r21
    1258:	f2 cf       	rjmp	.-28     	; 0x123e <__fp_split3+0xe>
    125a:	46 95       	lsr	r20
    125c:	f1 df       	rcall	.-30     	; 0x1240 <__fp_splitA>
    125e:	08 c0       	rjmp	.+16     	; 0x1270 <__fp_splitA+0x30>
    1260:	16 16       	cp	r1, r22
    1262:	17 06       	cpc	r1, r23
    1264:	18 06       	cpc	r1, r24
    1266:	99 1f       	adc	r25, r25
    1268:	f1 cf       	rjmp	.-30     	; 0x124c <__fp_splitA+0xc>
    126a:	86 95       	lsr	r24
    126c:	71 05       	cpc	r23, r1
    126e:	61 05       	cpc	r22, r1
    1270:	08 94       	sec
    1272:	08 95       	ret

00001274 <__fp_zero>:
    1274:	e8 94       	clt

00001276 <__fp_szero>:
    1276:	bb 27       	eor	r27, r27
    1278:	66 27       	eor	r22, r22
    127a:	77 27       	eor	r23, r23
    127c:	cb 01       	movw	r24, r22
    127e:	97 f9       	bld	r25, 7
    1280:	08 95       	ret

00001282 <__gesf2>:
    1282:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fp_cmp>
    1286:	08 f4       	brcc	.+2      	; 0x128a <__gesf2+0x8>
    1288:	8f ef       	ldi	r24, 0xFF	; 255
    128a:	08 95       	ret

0000128c <__mulsf3>:
    128c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3x>
    1290:	0c 94 07 09 	jmp	0x120e	; 0x120e <__fp_round>
    1294:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__fp_pscA>
    1298:	38 f0       	brcs	.+14     	; 0x12a8 <__mulsf3+0x1c>
    129a:	0e 94 00 09 	call	0x1200	; 0x1200 <__fp_pscB>
    129e:	20 f0       	brcs	.+8      	; 0x12a8 <__mulsf3+0x1c>
    12a0:	95 23       	and	r25, r21
    12a2:	11 f0       	breq	.+4      	; 0x12a8 <__mulsf3+0x1c>
    12a4:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__fp_inf>
    12a8:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__fp_nan>
    12ac:	11 24       	eor	r1, r1
    12ae:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__fp_szero>

000012b2 <__mulsf3x>:
    12b2:	0e 94 18 09 	call	0x1230	; 0x1230 <__fp_split3>
    12b6:	70 f3       	brcs	.-36     	; 0x1294 <__mulsf3+0x8>

000012b8 <__mulsf3_pse>:
    12b8:	95 9f       	mul	r25, r21
    12ba:	c1 f3       	breq	.-16     	; 0x12ac <__mulsf3+0x20>
    12bc:	95 0f       	add	r25, r21
    12be:	50 e0       	ldi	r21, 0x00	; 0
    12c0:	55 1f       	adc	r21, r21
    12c2:	62 9f       	mul	r22, r18
    12c4:	f0 01       	movw	r30, r0
    12c6:	72 9f       	mul	r23, r18
    12c8:	bb 27       	eor	r27, r27
    12ca:	f0 0d       	add	r31, r0
    12cc:	b1 1d       	adc	r27, r1
    12ce:	63 9f       	mul	r22, r19
    12d0:	aa 27       	eor	r26, r26
    12d2:	f0 0d       	add	r31, r0
    12d4:	b1 1d       	adc	r27, r1
    12d6:	aa 1f       	adc	r26, r26
    12d8:	64 9f       	mul	r22, r20
    12da:	66 27       	eor	r22, r22
    12dc:	b0 0d       	add	r27, r0
    12de:	a1 1d       	adc	r26, r1
    12e0:	66 1f       	adc	r22, r22
    12e2:	82 9f       	mul	r24, r18
    12e4:	22 27       	eor	r18, r18
    12e6:	b0 0d       	add	r27, r0
    12e8:	a1 1d       	adc	r26, r1
    12ea:	62 1f       	adc	r22, r18
    12ec:	73 9f       	mul	r23, r19
    12ee:	b0 0d       	add	r27, r0
    12f0:	a1 1d       	adc	r26, r1
    12f2:	62 1f       	adc	r22, r18
    12f4:	83 9f       	mul	r24, r19
    12f6:	a0 0d       	add	r26, r0
    12f8:	61 1d       	adc	r22, r1
    12fa:	22 1f       	adc	r18, r18
    12fc:	74 9f       	mul	r23, r20
    12fe:	33 27       	eor	r19, r19
    1300:	a0 0d       	add	r26, r0
    1302:	61 1d       	adc	r22, r1
    1304:	23 1f       	adc	r18, r19
    1306:	84 9f       	mul	r24, r20
    1308:	60 0d       	add	r22, r0
    130a:	21 1d       	adc	r18, r1
    130c:	82 2f       	mov	r24, r18
    130e:	76 2f       	mov	r23, r22
    1310:	6a 2f       	mov	r22, r26
    1312:	11 24       	eor	r1, r1
    1314:	9f 57       	subi	r25, 0x7F	; 127
    1316:	50 40       	sbci	r21, 0x00	; 0
    1318:	9a f0       	brmi	.+38     	; 0x1340 <__mulsf3_pse+0x88>
    131a:	f1 f0       	breq	.+60     	; 0x1358 <__mulsf3_pse+0xa0>
    131c:	88 23       	and	r24, r24
    131e:	4a f0       	brmi	.+18     	; 0x1332 <__mulsf3_pse+0x7a>
    1320:	ee 0f       	add	r30, r30
    1322:	ff 1f       	adc	r31, r31
    1324:	bb 1f       	adc	r27, r27
    1326:	66 1f       	adc	r22, r22
    1328:	77 1f       	adc	r23, r23
    132a:	88 1f       	adc	r24, r24
    132c:	91 50       	subi	r25, 0x01	; 1
    132e:	50 40       	sbci	r21, 0x00	; 0
    1330:	a9 f7       	brne	.-22     	; 0x131c <__mulsf3_pse+0x64>
    1332:	9e 3f       	cpi	r25, 0xFE	; 254
    1334:	51 05       	cpc	r21, r1
    1336:	80 f0       	brcs	.+32     	; 0x1358 <__mulsf3_pse+0xa0>
    1338:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__fp_inf>
    133c:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__fp_szero>
    1340:	5f 3f       	cpi	r21, 0xFF	; 255
    1342:	e4 f3       	brlt	.-8      	; 0x133c <__mulsf3_pse+0x84>
    1344:	98 3e       	cpi	r25, 0xE8	; 232
    1346:	d4 f3       	brlt	.-12     	; 0x133c <__mulsf3_pse+0x84>
    1348:	86 95       	lsr	r24
    134a:	77 95       	ror	r23
    134c:	67 95       	ror	r22
    134e:	b7 95       	ror	r27
    1350:	f7 95       	ror	r31
    1352:	e7 95       	ror	r30
    1354:	9f 5f       	subi	r25, 0xFF	; 255
    1356:	c1 f7       	brne	.-16     	; 0x1348 <__mulsf3_pse+0x90>
    1358:	fe 2b       	or	r31, r30
    135a:	88 0f       	add	r24, r24
    135c:	91 1d       	adc	r25, r1
    135e:	96 95       	lsr	r25
    1360:	87 95       	ror	r24
    1362:	97 f9       	bld	r25, 7
    1364:	08 95       	ret

00001366 <__fp_cmp>:
    1366:	99 0f       	add	r25, r25
    1368:	00 08       	sbc	r0, r0
    136a:	55 0f       	add	r21, r21
    136c:	aa 0b       	sbc	r26, r26
    136e:	e0 e8       	ldi	r30, 0x80	; 128
    1370:	fe ef       	ldi	r31, 0xFE	; 254
    1372:	16 16       	cp	r1, r22
    1374:	17 06       	cpc	r1, r23
    1376:	e8 07       	cpc	r30, r24
    1378:	f9 07       	cpc	r31, r25
    137a:	c0 f0       	brcs	.+48     	; 0x13ac <__fp_cmp+0x46>
    137c:	12 16       	cp	r1, r18
    137e:	13 06       	cpc	r1, r19
    1380:	e4 07       	cpc	r30, r20
    1382:	f5 07       	cpc	r31, r21
    1384:	98 f0       	brcs	.+38     	; 0x13ac <__fp_cmp+0x46>
    1386:	62 1b       	sub	r22, r18
    1388:	73 0b       	sbc	r23, r19
    138a:	84 0b       	sbc	r24, r20
    138c:	95 0b       	sbc	r25, r21
    138e:	39 f4       	brne	.+14     	; 0x139e <__fp_cmp+0x38>
    1390:	0a 26       	eor	r0, r26
    1392:	61 f0       	breq	.+24     	; 0x13ac <__fp_cmp+0x46>
    1394:	23 2b       	or	r18, r19
    1396:	24 2b       	or	r18, r20
    1398:	25 2b       	or	r18, r21
    139a:	21 f4       	brne	.+8      	; 0x13a4 <__fp_cmp+0x3e>
    139c:	08 95       	ret
    139e:	0a 26       	eor	r0, r26
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <__fp_cmp+0x3e>
    13a2:	a1 40       	sbci	r26, 0x01	; 1
    13a4:	a6 95       	lsr	r26
    13a6:	8f ef       	ldi	r24, 0xFF	; 255
    13a8:	81 1d       	adc	r24, r1
    13aa:	81 1d       	adc	r24, r1
    13ac:	08 95       	ret

000013ae <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	08 95       	ret

000013b4 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    13b4:	1f 92       	push	r1
    13b6:	0f 92       	push	r0
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	0f 92       	push	r0
    13bc:	11 24       	eor	r1, r1
    13be:	2f 93       	push	r18
    13c0:	8f 93       	push	r24
    13c2:	9f 93       	push	r25
    13c4:	ef 93       	push	r30
    13c6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    13c8:	e0 91 df 04 	lds	r30, 0x04DF	; 0x8004df <Serial+0x10>
    13cc:	f0 91 e0 04 	lds	r31, 0x04E0	; 0x8004e0 <Serial+0x11>
    13d0:	80 81       	ld	r24, Z
    13d2:	e0 91 e5 04 	lds	r30, 0x04E5	; 0x8004e5 <Serial+0x16>
    13d6:	f0 91 e6 04 	lds	r31, 0x04E6	; 0x8004e6 <Serial+0x17>
    13da:	82 fd       	sbrc	r24, 2
    13dc:	12 c0       	rjmp	.+36     	; 0x1402 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    13de:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    13e0:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <Serial+0x19>
    13e4:	8f 5f       	subi	r24, 0xFF	; 255
    13e6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    13e8:	20 91 e9 04 	lds	r18, 0x04E9	; 0x8004e9 <Serial+0x1a>
    13ec:	82 17       	cp	r24, r18
    13ee:	51 f0       	breq	.+20     	; 0x1404 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    13f0:	e0 91 e8 04 	lds	r30, 0x04E8	; 0x8004e8 <Serial+0x19>
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	e1 53       	subi	r30, 0x31	; 49
    13f8:	fb 4f       	sbci	r31, 0xFB	; 251
    13fa:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    13fc:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <Serial+0x19>
    1400:	01 c0       	rjmp	.+2      	; 0x1404 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1402:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1404:	ff 91       	pop	r31
    1406:	ef 91       	pop	r30
    1408:	9f 91       	pop	r25
    140a:	8f 91       	pop	r24
    140c:	2f 91       	pop	r18
    140e:	0f 90       	pop	r0
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	0f 90       	pop	r0
    1414:	1f 90       	pop	r1
    1416:	18 95       	reti

00001418 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1418:	1f 92       	push	r1
    141a:	0f 92       	push	r0
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	0f 92       	push	r0
    1420:	11 24       	eor	r1, r1
    1422:	2f 93       	push	r18
    1424:	3f 93       	push	r19
    1426:	4f 93       	push	r20
    1428:	5f 93       	push	r21
    142a:	6f 93       	push	r22
    142c:	7f 93       	push	r23
    142e:	8f 93       	push	r24
    1430:	9f 93       	push	r25
    1432:	af 93       	push	r26
    1434:	bf 93       	push	r27
    1436:	ef 93       	push	r30
    1438:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    143a:	8f ec       	ldi	r24, 0xCF	; 207
    143c:	94 e0       	ldi	r25, 0x04	; 4
    143e:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1442:	ff 91       	pop	r31
    1444:	ef 91       	pop	r30
    1446:	bf 91       	pop	r27
    1448:	af 91       	pop	r26
    144a:	9f 91       	pop	r25
    144c:	8f 91       	pop	r24
    144e:	7f 91       	pop	r23
    1450:	6f 91       	pop	r22
    1452:	5f 91       	pop	r21
    1454:	4f 91       	pop	r20
    1456:	3f 91       	pop	r19
    1458:	2f 91       	pop	r18
    145a:	0f 90       	pop	r0
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	0f 90       	pop	r0
    1460:	1f 90       	pop	r1
    1462:	18 95       	reti

00001464 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1464:	8f ec       	ldi	r24, 0xCF	; 207
    1466:	94 e0       	ldi	r25, 0x04	; 4
    1468:	0e 94 20 1f 	call	0x3e40	; 0x3e40 <_ZN14HardwareSerial9availableEv>
    146c:	21 e0       	ldi	r18, 0x01	; 1
    146e:	89 2b       	or	r24, r25
    1470:	09 f4       	brne	.+2      	; 0x1474 <_Z17Serial0_availablev+0x10>
    1472:	20 e0       	ldi	r18, 0x00	; 0
}
    1474:	82 2f       	mov	r24, r18
    1476:	08 95       	ret

00001478 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1478:	ef ec       	ldi	r30, 0xCF	; 207
    147a:	f4 e0       	ldi	r31, 0x04	; 4
    147c:	13 82       	std	Z+3, r1	; 0x03
    147e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1480:	88 ee       	ldi	r24, 0xE8	; 232
    1482:	93 e0       	ldi	r25, 0x03	; 3
    1484:	a0 e0       	ldi	r26, 0x00	; 0
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	84 83       	std	Z+4, r24	; 0x04
    148a:	95 83       	std	Z+5, r25	; 0x05
    148c:	a6 83       	std	Z+6, r26	; 0x06
    148e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1490:	8a ec       	ldi	r24, 0xCA	; 202
    1492:	92 e0       	ldi	r25, 0x02	; 2
    1494:	91 83       	std	Z+1, r25	; 0x01
    1496:	80 83       	st	Z, r24
    1498:	85 ec       	ldi	r24, 0xC5	; 197
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	95 87       	std	Z+13, r25	; 0x0d
    149e:	84 87       	std	Z+12, r24	; 0x0c
    14a0:	84 ec       	ldi	r24, 0xC4	; 196
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	97 87       	std	Z+15, r25	; 0x0f
    14a6:	86 87       	std	Z+14, r24	; 0x0e
    14a8:	80 ec       	ldi	r24, 0xC0	; 192
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	91 8b       	std	Z+17, r25	; 0x11
    14ae:	80 8b       	std	Z+16, r24	; 0x10
    14b0:	81 ec       	ldi	r24, 0xC1	; 193
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	93 8b       	std	Z+19, r25	; 0x13
    14b6:	82 8b       	std	Z+18, r24	; 0x12
    14b8:	82 ec       	ldi	r24, 0xC2	; 194
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	95 8b       	std	Z+21, r25	; 0x15
    14be:	84 8b       	std	Z+20, r24	; 0x14
    14c0:	86 ec       	ldi	r24, 0xC6	; 198
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	97 8b       	std	Z+23, r25	; 0x17
    14c6:	86 8b       	std	Z+22, r24	; 0x16
    14c8:	11 8e       	std	Z+25, r1	; 0x19
    14ca:	12 8e       	std	Z+26, r1	; 0x1a
    14cc:	13 8e       	std	Z+27, r1	; 0x1b
    14ce:	14 8e       	std	Z+28, r1	; 0x1c
    14d0:	08 95       	ret

000014d2 <initVariant>:
    14d2:	08 95       	ret

000014d4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    14d4:	0e 94 65 0d 	call	0x1aca	; 0x1aca <init>

	initVariant();
    14d8:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    14dc:	0e 94 d7 04 	call	0x9ae	; 0x9ae <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    14e0:	cd e5       	ldi	r28, 0x5D	; 93
    14e2:	df e1       	ldi	r29, 0x1F	; 31
#endif
	
	setup();
    
	for (;;) {
		loop();
    14e4:	0e 94 21 06 	call	0xc42	; 0xc42 <loop>
		if (serialEventRun) serialEventRun();
    14e8:	20 97       	sbiw	r28, 0x00	; 0
    14ea:	e1 f3       	breq	.-8      	; 0x14e4 <main+0x10>
    14ec:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <_Z14serialEventRunv>
    14f0:	f9 cf       	rjmp	.-14     	; 0x14e4 <main+0x10>

000014f2 <_Znwj>:
    14f2:	0c 94 26 25 	jmp	0x4a4c	; 0x4a4c <malloc>

000014f6 <_Znaj>:
}

void * operator new(size_t size, void * ptr) noexcept {
  (void)size;
  return ptr;
}
    14f6:	0c 94 26 25 	jmp	0x4a4c	; 0x4a4c <malloc>

000014fa <_ZdlPv>:
    14fa:	0c 94 be 25 	jmp	0x4b7c	; 0x4b7c <free>

000014fe <_ZdaPv>:
void operator delete(void * ptr) {
  free(ptr);
}

void operator delete[](void * ptr) {
  free(ptr);
    14fe:	0c 94 be 25 	jmp	0x4b7c	; 0x4b7c <free>

00001502 <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1502:	cf 92       	push	r12
    1504:	df 92       	push	r13
    1506:	ef 92       	push	r14
    1508:	ff 92       	push	r15
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	6c 01       	movw	r12, r24
    1514:	7a 01       	movw	r14, r20
    1516:	8b 01       	movw	r16, r22
    1518:	c0 e0       	ldi	r28, 0x00	; 0
    151a:	d0 e0       	ldi	r29, 0x00	; 0
    151c:	ce 15       	cp	r28, r14
    151e:	df 05       	cpc	r29, r15
    1520:	81 f0       	breq	.+32     	; 0x1542 <_ZN5Print5writeEPKhj+0x40>
    1522:	d8 01       	movw	r26, r16
    1524:	6d 91       	ld	r22, X+
    1526:	8d 01       	movw	r16, r26
    1528:	d6 01       	movw	r26, r12
    152a:	ed 91       	ld	r30, X+
    152c:	fc 91       	ld	r31, X
    152e:	01 90       	ld	r0, Z+
    1530:	f0 81       	ld	r31, Z
    1532:	e0 2d       	mov	r30, r0
    1534:	c6 01       	movw	r24, r12
    1536:	09 95       	icall
    1538:	89 2b       	or	r24, r25
    153a:	11 f0       	breq	.+4      	; 0x1540 <_ZN5Print5writeEPKhj+0x3e>
    153c:	21 96       	adiw	r28, 0x01	; 1
    153e:	ee cf       	rjmp	.-36     	; 0x151c <_ZN5Print5writeEPKhj+0x1a>
    1540:	7e 01       	movw	r14, r28
    1542:	c7 01       	movw	r24, r14
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	ff 90       	pop	r15
    154e:	ef 90       	pop	r14
    1550:	df 90       	pop	r13
    1552:	cf 90       	pop	r12
    1554:	08 95       	ret

00001556 <_ZN5Print5writeEPKc>:
    1556:	61 15       	cp	r22, r1
    1558:	71 05       	cpc	r23, r1
    155a:	79 f0       	breq	.+30     	; 0x157a <_ZN5Print5writeEPKc+0x24>
    155c:	fb 01       	movw	r30, r22
    155e:	01 90       	ld	r0, Z+
    1560:	00 20       	and	r0, r0
    1562:	e9 f7       	brne	.-6      	; 0x155e <_ZN5Print5writeEPKc+0x8>
    1564:	31 97       	sbiw	r30, 0x01	; 1
    1566:	af 01       	movw	r20, r30
    1568:	46 1b       	sub	r20, r22
    156a:	57 0b       	sbc	r21, r23
    156c:	dc 01       	movw	r26, r24
    156e:	ed 91       	ld	r30, X+
    1570:	fc 91       	ld	r31, X
    1572:	02 80       	ldd	r0, Z+2	; 0x02
    1574:	f3 81       	ldd	r31, Z+3	; 0x03
    1576:	e0 2d       	mov	r30, r0
    1578:	09 94       	ijmp
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	08 95       	ret

00001580 <_ZN5Print5printEPK19__FlashStringHelper>:
    1580:	ef 92       	push	r14
    1582:	ff 92       	push	r15
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	8c 01       	movw	r16, r24
    158e:	7b 01       	movw	r14, r22
    1590:	c0 e0       	ldi	r28, 0x00	; 0
    1592:	d0 e0       	ldi	r29, 0x00	; 0
    1594:	f7 01       	movw	r30, r14
    1596:	ec 0f       	add	r30, r28
    1598:	fd 1f       	adc	r31, r29
    159a:	64 91       	lpm	r22, Z
    159c:	66 23       	and	r22, r22
    159e:	61 f0       	breq	.+24     	; 0x15b8 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    15a0:	d8 01       	movw	r26, r16
    15a2:	ed 91       	ld	r30, X+
    15a4:	fc 91       	ld	r31, X
    15a6:	01 90       	ld	r0, Z+
    15a8:	f0 81       	ld	r31, Z
    15aa:	e0 2d       	mov	r30, r0
    15ac:	c8 01       	movw	r24, r16
    15ae:	09 95       	icall
    15b0:	89 2b       	or	r24, r25
    15b2:	11 f0       	breq	.+4      	; 0x15b8 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    15b4:	21 96       	adiw	r28, 0x01	; 1
    15b6:	ee cf       	rjmp	.-36     	; 0x1594 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    15b8:	ce 01       	movw	r24, r28
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	1f 91       	pop	r17
    15c0:	0f 91       	pop	r16
    15c2:	ff 90       	pop	r15
    15c4:	ef 90       	pop	r14
    15c6:	08 95       	ret

000015c8 <_ZN5Print5printEPKc>:
    15c8:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <_ZN5Print5writeEPKc>

000015cc <_ZN5Print5printEc>:
    15cc:	dc 01       	movw	r26, r24
    15ce:	ed 91       	ld	r30, X+
    15d0:	fc 91       	ld	r31, X
    15d2:	01 90       	ld	r0, Z+
    15d4:	f0 81       	ld	r31, Z
    15d6:	e0 2d       	mov	r30, r0
    15d8:	09 94       	ijmp

000015da <_ZN5Print7printlnEv>:
    15da:	6f e5       	ldi	r22, 0x5F	; 95
    15dc:	72 e0       	ldi	r23, 0x02	; 2
    15de:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <_ZN5Print5writeEPKc>

000015e2 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    15e2:	0f 93       	push	r16
    15e4:	1f 93       	push	r17
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	ec 01       	movw	r28, r24
    15ec:	0e 94 c0 0a 	call	0x1580	; 0x1580 <_ZN5Print5printEPK19__FlashStringHelper>
    15f0:	8c 01       	movw	r16, r24
    15f2:	ce 01       	movw	r24, r28
    15f4:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN5Print7printlnEv>
    15f8:	80 0f       	add	r24, r16
    15fa:	91 1f       	adc	r25, r17
    15fc:	df 91       	pop	r29
    15fe:	cf 91       	pop	r28
    1600:	1f 91       	pop	r17
    1602:	0f 91       	pop	r16
    1604:	08 95       	ret

00001606 <_ZN5Print7printlnEPKc>:
    1606:	0f 93       	push	r16
    1608:	1f 93       	push	r17
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	ec 01       	movw	r28, r24
    1610:	0e 94 ab 0a 	call	0x1556	; 0x1556 <_ZN5Print5writeEPKc>
    1614:	8c 01       	movw	r16, r24
    1616:	ce 01       	movw	r24, r28
    1618:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN5Print7printlnEv>
    161c:	80 0f       	add	r24, r16
    161e:	91 1f       	adc	r25, r17
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	08 95       	ret

0000162a <_ZN5Print11printNumberEmh>:
    162a:	8f 92       	push	r8
    162c:	9f 92       	push	r9
    162e:	af 92       	push	r10
    1630:	bf 92       	push	r11
    1632:	ef 92       	push	r14
    1634:	ff 92       	push	r15
    1636:	0f 93       	push	r16
    1638:	1f 93       	push	r17
    163a:	cf 93       	push	r28
    163c:	df 93       	push	r29
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	a1 97       	sbiw	r28, 0x21	; 33
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	7c 01       	movw	r14, r24
    1650:	fa 01       	movw	r30, r20
    1652:	cb 01       	movw	r24, r22
    1654:	19 a2       	std	Y+33, r1	; 0x21
    1656:	22 30       	cpi	r18, 0x02	; 2
    1658:	08 f4       	brcc	.+2      	; 0x165c <_ZN5Print11printNumberEmh+0x32>
    165a:	2a e0       	ldi	r18, 0x0A	; 10
    165c:	8e 01       	movw	r16, r28
    165e:	0f 5d       	subi	r16, 0xDF	; 223
    1660:	1f 4f       	sbci	r17, 0xFF	; 255
    1662:	82 2e       	mov	r8, r18
    1664:	91 2c       	mov	r9, r1
    1666:	a1 2c       	mov	r10, r1
    1668:	b1 2c       	mov	r11, r1
    166a:	bf 01       	movw	r22, r30
    166c:	a5 01       	movw	r20, r10
    166e:	94 01       	movw	r18, r8
    1670:	0e 94 50 24 	call	0x48a0	; 0x48a0 <__udivmodsi4>
    1674:	f9 01       	movw	r30, r18
    1676:	ca 01       	movw	r24, r20
    1678:	01 50       	subi	r16, 0x01	; 1
    167a:	11 09       	sbc	r17, r1
    167c:	6a 30       	cpi	r22, 0x0A	; 10
    167e:	10 f4       	brcc	.+4      	; 0x1684 <_ZN5Print11printNumberEmh+0x5a>
    1680:	60 5d       	subi	r22, 0xD0	; 208
    1682:	01 c0       	rjmp	.+2      	; 0x1686 <_ZN5Print11printNumberEmh+0x5c>
    1684:	69 5c       	subi	r22, 0xC9	; 201
    1686:	d8 01       	movw	r26, r16
    1688:	6c 93       	st	X, r22
    168a:	23 2b       	or	r18, r19
    168c:	24 2b       	or	r18, r20
    168e:	25 2b       	or	r18, r21
    1690:	61 f7       	brne	.-40     	; 0x166a <_ZN5Print11printNumberEmh+0x40>
    1692:	b8 01       	movw	r22, r16
    1694:	c7 01       	movw	r24, r14
    1696:	0e 94 ab 0a 	call	0x1556	; 0x1556 <_ZN5Print5writeEPKc>
    169a:	a1 96       	adiw	r28, 0x21	; 33
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	f8 94       	cli
    16a0:	de bf       	out	0x3e, r29	; 62
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	cd bf       	out	0x3d, r28	; 61
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	ff 90       	pop	r15
    16b0:	ef 90       	pop	r14
    16b2:	bf 90       	pop	r11
    16b4:	af 90       	pop	r10
    16b6:	9f 90       	pop	r9
    16b8:	8f 90       	pop	r8
    16ba:	08 95       	ret

000016bc <_ZN5Print5printEmi>:
    16bc:	21 15       	cp	r18, r1
    16be:	31 05       	cpc	r19, r1
    16c0:	41 f4       	brne	.+16     	; 0x16d2 <_ZN5Print5printEmi+0x16>
    16c2:	dc 01       	movw	r26, r24
    16c4:	ed 91       	ld	r30, X+
    16c6:	fc 91       	ld	r31, X
    16c8:	01 90       	ld	r0, Z+
    16ca:	f0 81       	ld	r31, Z
    16cc:	e0 2d       	mov	r30, r0
    16ce:	64 2f       	mov	r22, r20
    16d0:	09 94       	ijmp
    16d2:	0c 94 15 0b 	jmp	0x162a	; 0x162a <_ZN5Print11printNumberEmh>

000016d6 <_ZN5Print5printEhi>:
    16d6:	9a 01       	movw	r18, r20
    16d8:	46 2f       	mov	r20, r22
    16da:	50 e0       	ldi	r21, 0x00	; 0
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	70 e0       	ldi	r23, 0x00	; 0
    16e0:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <_ZN5Print5printEmi>

000016e4 <_ZN5Print5printEji>:
    16e4:	9a 01       	movw	r18, r20
    16e6:	ab 01       	movw	r20, r22
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	70 e0       	ldi	r23, 0x00	; 0
    16ec:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <_ZN5Print5printEmi>

000016f0 <_ZN5Print7printlnEji>:
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	ec 01       	movw	r28, r24
    16fa:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <_ZN5Print5printEji>
    16fe:	8c 01       	movw	r16, r24
    1700:	ce 01       	movw	r24, r28
    1702:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN5Print7printlnEv>
    1706:	80 0f       	add	r24, r16
    1708:	91 1f       	adc	r25, r17
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	08 95       	ret

00001714 <_ZN5Print7printlnEmi>:
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	ec 01       	movw	r28, r24
    171e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZN5Print5printEmi>
    1722:	8c 01       	movw	r16, r24
    1724:	ce 01       	movw	r24, r28
    1726:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN5Print7printlnEv>
    172a:	80 0f       	add	r24, r16
    172c:	91 1f       	adc	r25, r17
    172e:	df 91       	pop	r29
    1730:	cf 91       	pop	r28
    1732:	1f 91       	pop	r17
    1734:	0f 91       	pop	r16
    1736:	08 95       	ret

00001738 <_ZN5Print5printEli>:
    1738:	cf 92       	push	r12
    173a:	df 92       	push	r13
    173c:	ef 92       	push	r14
    173e:	ff 92       	push	r15
    1740:	0f 93       	push	r16
    1742:	1f 93       	push	r17
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	21 15       	cp	r18, r1
    174a:	31 05       	cpc	r19, r1
    174c:	81 f4       	brne	.+32     	; 0x176e <_ZN5Print5printEli+0x36>
    174e:	dc 01       	movw	r26, r24
    1750:	ed 91       	ld	r30, X+
    1752:	fc 91       	ld	r31, X
    1754:	01 90       	ld	r0, Z+
    1756:	f0 81       	ld	r31, Z
    1758:	e0 2d       	mov	r30, r0
    175a:	64 2f       	mov	r22, r20
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	1f 91       	pop	r17
    1762:	0f 91       	pop	r16
    1764:	ff 90       	pop	r15
    1766:	ef 90       	pop	r14
    1768:	df 90       	pop	r13
    176a:	cf 90       	pop	r12
    176c:	09 94       	ijmp
    176e:	2a 30       	cpi	r18, 0x0A	; 10
    1770:	31 05       	cpc	r19, r1
    1772:	01 f5       	brne	.+64     	; 0x17b4 <_ZN5Print5printEli+0x7c>
    1774:	77 ff       	sbrs	r23, 7
    1776:	1d c0       	rjmp	.+58     	; 0x17b2 <_ZN5Print5printEli+0x7a>
    1778:	6a 01       	movw	r12, r20
    177a:	7b 01       	movw	r14, r22
    177c:	ec 01       	movw	r28, r24
    177e:	6d e2       	ldi	r22, 0x2D	; 45
    1780:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <_ZN5Print5printEc>
    1784:	8c 01       	movw	r16, r24
    1786:	44 27       	eor	r20, r20
    1788:	55 27       	eor	r21, r21
    178a:	ba 01       	movw	r22, r20
    178c:	4c 19       	sub	r20, r12
    178e:	5d 09       	sbc	r21, r13
    1790:	6e 09       	sbc	r22, r14
    1792:	7f 09       	sbc	r23, r15
    1794:	2a e0       	ldi	r18, 0x0A	; 10
    1796:	ce 01       	movw	r24, r28
    1798:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN5Print11printNumberEmh>
    179c:	80 0f       	add	r24, r16
    179e:	91 1f       	adc	r25, r17
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	1f 91       	pop	r17
    17a6:	0f 91       	pop	r16
    17a8:	ff 90       	pop	r15
    17aa:	ef 90       	pop	r14
    17ac:	df 90       	pop	r13
    17ae:	cf 90       	pop	r12
    17b0:	08 95       	ret
    17b2:	2a e0       	ldi	r18, 0x0A	; 10
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	ff 90       	pop	r15
    17be:	ef 90       	pop	r14
    17c0:	df 90       	pop	r13
    17c2:	cf 90       	pop	r12
    17c4:	0c 94 15 0b 	jmp	0x162a	; 0x162a <_ZN5Print11printNumberEmh>

000017c8 <_ZN5Print5printEii>:
    17c8:	9a 01       	movw	r18, r20
    17ca:	ab 01       	movw	r20, r22
    17cc:	77 0f       	add	r23, r23
    17ce:	66 0b       	sbc	r22, r22
    17d0:	77 0b       	sbc	r23, r23
    17d2:	0c 94 9c 0b 	jmp	0x1738	; 0x1738 <_ZN5Print5printEli>

000017d6 <_ZN5Print7printlnEii>:
    17d6:	0f 93       	push	r16
    17d8:	1f 93       	push	r17
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	ec 01       	movw	r28, r24
    17e0:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_ZN5Print5printEii>
    17e4:	8c 01       	movw	r16, r24
    17e6:	ce 01       	movw	r24, r28
    17e8:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN5Print7printlnEv>
    17ec:	80 0f       	add	r24, r16
    17ee:	91 1f       	adc	r25, r17
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	08 95       	ret

000017fa <_ZN5Print10printFloatEdh>:
    17fa:	7f 92       	push	r7
    17fc:	8f 92       	push	r8
    17fe:	9f 92       	push	r9
    1800:	af 92       	push	r10
    1802:	bf 92       	push	r11
    1804:	cf 92       	push	r12
    1806:	df 92       	push	r13
    1808:	ef 92       	push	r14
    180a:	ff 92       	push	r15
    180c:	0f 93       	push	r16
    180e:	1f 93       	push	r17
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	8c 01       	movw	r16, r24
    1816:	6a 01       	movw	r12, r20
    1818:	7b 01       	movw	r14, r22
    181a:	72 2e       	mov	r7, r18
    181c:	9a 01       	movw	r18, r20
    181e:	ab 01       	movw	r20, r22
    1820:	c7 01       	movw	r24, r14
    1822:	b6 01       	movw	r22, r12
    1824:	0e 94 3b 24 	call	0x4876	; 0x4876 <__unordsf2>
    1828:	88 23       	and	r24, r24
    182a:	19 f0       	breq	.+6      	; 0x1832 <_ZN5Print10printFloatEdh+0x38>
    182c:	62 e6       	ldi	r22, 0x62	; 98
    182e:	72 e0       	ldi	r23, 0x02	; 2
    1830:	27 c0       	rjmp	.+78     	; 0x1880 <_ZN5Print10printFloatEdh+0x86>
    1832:	46 01       	movw	r8, r12
    1834:	57 01       	movw	r10, r14
    1836:	e8 94       	clt
    1838:	b7 f8       	bld	r11, 7
    183a:	2f ef       	ldi	r18, 0xFF	; 255
    183c:	3f ef       	ldi	r19, 0xFF	; 255
    183e:	4f e7       	ldi	r20, 0x7F	; 127
    1840:	5f e7       	ldi	r21, 0x7F	; 127
    1842:	c5 01       	movw	r24, r10
    1844:	b4 01       	movw	r22, r8
    1846:	0e 94 3b 24 	call	0x4876	; 0x4876 <__unordsf2>
    184a:	81 11       	cpse	r24, r1
    184c:	0d c0       	rjmp	.+26     	; 0x1868 <_ZN5Print10printFloatEdh+0x6e>
    184e:	2f ef       	ldi	r18, 0xFF	; 255
    1850:	3f ef       	ldi	r19, 0xFF	; 255
    1852:	4f e7       	ldi	r20, 0x7F	; 127
    1854:	5f e7       	ldi	r21, 0x7F	; 127
    1856:	c5 01       	movw	r24, r10
    1858:	b4 01       	movw	r22, r8
    185a:	0e 94 36 24 	call	0x486c	; 0x486c <__cmpsf2>
    185e:	18 16       	cp	r1, r24
    1860:	1c f4       	brge	.+6      	; 0x1868 <_ZN5Print10printFloatEdh+0x6e>
    1862:	66 e6       	ldi	r22, 0x66	; 102
    1864:	72 e0       	ldi	r23, 0x02	; 2
    1866:	0c c0       	rjmp	.+24     	; 0x1880 <_ZN5Print10printFloatEdh+0x86>
    1868:	2f ef       	ldi	r18, 0xFF	; 255
    186a:	3f ef       	ldi	r19, 0xFF	; 255
    186c:	4f e7       	ldi	r20, 0x7F	; 127
    186e:	5f e4       	ldi	r21, 0x4F	; 79
    1870:	c7 01       	movw	r24, r14
    1872:	b6 01       	movw	r22, r12
    1874:	0e 94 41 09 	call	0x1282	; 0x1282 <__gesf2>
    1878:	18 16       	cp	r1, r24
    187a:	94 f4       	brge	.+36     	; 0x18a0 <_ZN5Print10printFloatEdh+0xa6>
    187c:	6a e6       	ldi	r22, 0x6A	; 106
    187e:	72 e0       	ldi	r23, 0x02	; 2
    1880:	c8 01       	movw	r24, r16
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	ff 90       	pop	r15
    188c:	ef 90       	pop	r14
    188e:	df 90       	pop	r13
    1890:	cf 90       	pop	r12
    1892:	bf 90       	pop	r11
    1894:	af 90       	pop	r10
    1896:	9f 90       	pop	r9
    1898:	8f 90       	pop	r8
    189a:	7f 90       	pop	r7
    189c:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <_ZN5Print5writeEPKc>
    18a0:	2f ef       	ldi	r18, 0xFF	; 255
    18a2:	3f ef       	ldi	r19, 0xFF	; 255
    18a4:	4f e7       	ldi	r20, 0x7F	; 127
    18a6:	5f ec       	ldi	r21, 0xCF	; 207
    18a8:	c7 01       	movw	r24, r14
    18aa:	b6 01       	movw	r22, r12
    18ac:	0e 94 36 24 	call	0x486c	; 0x486c <__cmpsf2>
    18b0:	87 fd       	sbrc	r24, 7
    18b2:	e4 cf       	rjmp	.-56     	; 0x187c <_ZN5Print10printFloatEdh+0x82>
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	a9 01       	movw	r20, r18
    18ba:	c7 01       	movw	r24, r14
    18bc:	b6 01       	movw	r22, r12
    18be:	0e 94 36 24 	call	0x486c	; 0x486c <__cmpsf2>
    18c2:	87 ff       	sbrs	r24, 7
    18c4:	0a c0       	rjmp	.+20     	; 0x18da <_ZN5Print10printFloatEdh+0xe0>
    18c6:	6d e2       	ldi	r22, 0x2D	; 45
    18c8:	c8 01       	movw	r24, r16
    18ca:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <_ZN5Print5printEc>
    18ce:	ec 01       	movw	r28, r24
    18d0:	f7 fa       	bst	r15, 7
    18d2:	f0 94       	com	r15
    18d4:	f7 f8       	bld	r15, 7
    18d6:	f0 94       	com	r15
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <_ZN5Print10printFloatEdh+0xe4>
    18da:	c0 e0       	ldi	r28, 0x00	; 0
    18dc:	d0 e0       	ldi	r29, 0x00	; 0
    18de:	b1 2c       	mov	r11, r1
    18e0:	60 e0       	ldi	r22, 0x00	; 0
    18e2:	70 e0       	ldi	r23, 0x00	; 0
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	9f e3       	ldi	r25, 0x3F	; 63
    18e8:	7b 14       	cp	r7, r11
    18ea:	41 f0       	breq	.+16     	; 0x18fc <_ZN5Print10printFloatEdh+0x102>
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e2       	ldi	r20, 0x20	; 32
    18f2:	51 e4       	ldi	r21, 0x41	; 65
    18f4:	0e 94 0b 08 	call	0x1016	; 0x1016 <__divsf3>
    18f8:	b3 94       	inc	r11
    18fa:	f6 cf       	rjmp	.-20     	; 0x18e8 <_ZN5Print10printFloatEdh+0xee>
    18fc:	a7 01       	movw	r20, r14
    18fe:	96 01       	movw	r18, r12
    1900:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__addsf3>
    1904:	6b 01       	movw	r12, r22
    1906:	7c 01       	movw	r14, r24
    1908:	0e 94 84 08 	call	0x1108	; 0x1108 <__fixunssfsi>
    190c:	4b 01       	movw	r8, r22
    190e:	5c 01       	movw	r10, r24
    1910:	2a e0       	ldi	r18, 0x0A	; 10
    1912:	ab 01       	movw	r20, r22
    1914:	bc 01       	movw	r22, r24
    1916:	c8 01       	movw	r24, r16
    1918:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN5Print11printNumberEmh>
    191c:	c8 0f       	add	r28, r24
    191e:	d9 1f       	adc	r29, r25
    1920:	77 20       	and	r7, r7
    1922:	b9 f1       	breq	.+110    	; 0x1992 <_ZN5Print10printFloatEdh+0x198>
    1924:	c5 01       	movw	r24, r10
    1926:	b4 01       	movw	r22, r8
    1928:	0e 94 b3 08 	call	0x1166	; 0x1166 <__floatunsisf>
    192c:	9b 01       	movw	r18, r22
    192e:	ac 01       	movw	r20, r24
    1930:	c7 01       	movw	r24, r14
    1932:	b6 01       	movw	r22, r12
    1934:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__subsf3>
    1938:	6b 01       	movw	r12, r22
    193a:	7c 01       	movw	r14, r24
    193c:	6e e2       	ldi	r22, 0x2E	; 46
    193e:	c8 01       	movw	r24, r16
    1940:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <_ZN5Print5printEc>
    1944:	c8 0f       	add	r28, r24
    1946:	d9 1f       	adc	r29, r25
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	40 e2       	ldi	r20, 0x20	; 32
    194e:	51 e4       	ldi	r21, 0x41	; 65
    1950:	c7 01       	movw	r24, r14
    1952:	b6 01       	movw	r22, r12
    1954:	0e 94 46 09 	call	0x128c	; 0x128c <__mulsf3>
    1958:	4b 01       	movw	r8, r22
    195a:	5c 01       	movw	r10, r24
    195c:	0e 94 84 08 	call	0x1108	; 0x1108 <__fixunssfsi>
    1960:	6b 01       	movw	r12, r22
    1962:	7c 01       	movw	r14, r24
    1964:	4a e0       	ldi	r20, 0x0A	; 10
    1966:	50 e0       	ldi	r21, 0x00	; 0
    1968:	c8 01       	movw	r24, r16
    196a:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <_ZN5Print5printEji>
    196e:	c8 0f       	add	r28, r24
    1970:	d9 1f       	adc	r29, r25
    1972:	b6 01       	movw	r22, r12
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	0e 94 b3 08 	call	0x1166	; 0x1166 <__floatunsisf>
    197c:	9b 01       	movw	r18, r22
    197e:	ac 01       	movw	r20, r24
    1980:	c5 01       	movw	r24, r10
    1982:	b4 01       	movw	r22, r8
    1984:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__subsf3>
    1988:	6b 01       	movw	r12, r22
    198a:	7c 01       	movw	r14, r24
    198c:	7a 94       	dec	r7
    198e:	71 10       	cpse	r7, r1
    1990:	db cf       	rjmp	.-74     	; 0x1948 <_ZN5Print10printFloatEdh+0x14e>
    1992:	ce 01       	movw	r24, r28
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	1f 91       	pop	r17
    199a:	0f 91       	pop	r16
    199c:	ff 90       	pop	r15
    199e:	ef 90       	pop	r14
    19a0:	df 90       	pop	r13
    19a2:	cf 90       	pop	r12
    19a4:	bf 90       	pop	r11
    19a6:	af 90       	pop	r10
    19a8:	9f 90       	pop	r9
    19aa:	8f 90       	pop	r8
    19ac:	7f 90       	pop	r7
    19ae:	08 95       	ret

000019b0 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    19b0:	0f 93       	push	r16
    19b2:	1f 93       	push	r17
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    19ba:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <_ZN5Print10printFloatEdh>
    19be:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    19c0:	ce 01       	movw	r24, r28
    19c2:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN5Print7printlnEv>
  return n;
}
    19c6:	80 0f       	add	r24, r16
    19c8:	91 1f       	adc	r25, r17
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	08 95       	ret

000019d4 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    19d4:	1f 92       	push	r1
    19d6:	0f 92       	push	r0
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	0f 92       	push	r0
    19dc:	11 24       	eor	r1, r1
    19de:	2f 93       	push	r18
    19e0:	3f 93       	push	r19
    19e2:	8f 93       	push	r24
    19e4:	9f 93       	push	r25
    19e6:	af 93       	push	r26
    19e8:	bf 93       	push	r27
    19ea:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <timer0_millis>
    19ee:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <timer0_millis+0x1>
    19f2:	a0 91 6f 05 	lds	r26, 0x056F	; 0x80056f <timer0_millis+0x2>
    19f6:	b0 91 70 05 	lds	r27, 0x0570	; 0x800570 <timer0_millis+0x3>
    19fa:	30 91 6c 05 	lds	r19, 0x056C	; 0x80056c <timer0_fract>
    19fe:	23 e0       	ldi	r18, 0x03	; 3
    1a00:	23 0f       	add	r18, r19
    1a02:	2d 37       	cpi	r18, 0x7D	; 125
    1a04:	20 f4       	brcc	.+8      	; 0x1a0e <__vector_16+0x3a>
    1a06:	01 96       	adiw	r24, 0x01	; 1
    1a08:	a1 1d       	adc	r26, r1
    1a0a:	b1 1d       	adc	r27, r1
    1a0c:	05 c0       	rjmp	.+10     	; 0x1a18 <__vector_16+0x44>
    1a0e:	26 e8       	ldi	r18, 0x86	; 134
    1a10:	23 0f       	add	r18, r19
    1a12:	02 96       	adiw	r24, 0x02	; 2
    1a14:	a1 1d       	adc	r26, r1
    1a16:	b1 1d       	adc	r27, r1
    1a18:	20 93 6c 05 	sts	0x056C, r18	; 0x80056c <timer0_fract>
    1a1c:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <timer0_millis>
    1a20:	90 93 6e 05 	sts	0x056E, r25	; 0x80056e <timer0_millis+0x1>
    1a24:	a0 93 6f 05 	sts	0x056F, r26	; 0x80056f <timer0_millis+0x2>
    1a28:	b0 93 70 05 	sts	0x0570, r27	; 0x800570 <timer0_millis+0x3>
    1a2c:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <timer0_overflow_count>
    1a30:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <timer0_overflow_count+0x1>
    1a34:	a0 91 73 05 	lds	r26, 0x0573	; 0x800573 <timer0_overflow_count+0x2>
    1a38:	b0 91 74 05 	lds	r27, 0x0574	; 0x800574 <timer0_overflow_count+0x3>
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	a1 1d       	adc	r26, r1
    1a40:	b1 1d       	adc	r27, r1
    1a42:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <timer0_overflow_count>
    1a46:	90 93 72 05 	sts	0x0572, r25	; 0x800572 <timer0_overflow_count+0x1>
    1a4a:	a0 93 73 05 	sts	0x0573, r26	; 0x800573 <timer0_overflow_count+0x2>
    1a4e:	b0 93 74 05 	sts	0x0574, r27	; 0x800574 <timer0_overflow_count+0x3>
    1a52:	bf 91       	pop	r27
    1a54:	af 91       	pop	r26
    1a56:	9f 91       	pop	r25
    1a58:	8f 91       	pop	r24
    1a5a:	3f 91       	pop	r19
    1a5c:	2f 91       	pop	r18
    1a5e:	0f 90       	pop	r0
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	0f 90       	pop	r0
    1a64:	1f 90       	pop	r1
    1a66:	18 95       	reti

00001a68 <millis>:
    1a68:	2f b7       	in	r18, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	60 91 6d 05 	lds	r22, 0x056D	; 0x80056d <timer0_millis>
    1a70:	70 91 6e 05 	lds	r23, 0x056E	; 0x80056e <timer0_millis+0x1>
    1a74:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <timer0_millis+0x2>
    1a78:	90 91 70 05 	lds	r25, 0x0570	; 0x800570 <timer0_millis+0x3>
    1a7c:	2f bf       	out	0x3f, r18	; 63
    1a7e:	08 95       	ret

00001a80 <micros>:
    1a80:	3f b7       	in	r19, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <timer0_overflow_count>
    1a88:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <timer0_overflow_count+0x1>
    1a8c:	a0 91 73 05 	lds	r26, 0x0573	; 0x800573 <timer0_overflow_count+0x2>
    1a90:	b0 91 74 05 	lds	r27, 0x0574	; 0x800574 <timer0_overflow_count+0x3>
    1a94:	26 b5       	in	r18, 0x26	; 38
    1a96:	a8 9b       	sbis	0x15, 0	; 21
    1a98:	05 c0       	rjmp	.+10     	; 0x1aa4 <micros+0x24>
    1a9a:	2f 3f       	cpi	r18, 0xFF	; 255
    1a9c:	19 f0       	breq	.+6      	; 0x1aa4 <micros+0x24>
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	a1 1d       	adc	r26, r1
    1aa2:	b1 1d       	adc	r27, r1
    1aa4:	3f bf       	out	0x3f, r19	; 63
    1aa6:	ba 2f       	mov	r27, r26
    1aa8:	a9 2f       	mov	r26, r25
    1aaa:	98 2f       	mov	r25, r24
    1aac:	88 27       	eor	r24, r24
    1aae:	82 0f       	add	r24, r18
    1ab0:	91 1d       	adc	r25, r1
    1ab2:	a1 1d       	adc	r26, r1
    1ab4:	b1 1d       	adc	r27, r1
    1ab6:	bc 01       	movw	r22, r24
    1ab8:	cd 01       	movw	r24, r26
    1aba:	42 e0       	ldi	r20, 0x02	; 2
    1abc:	66 0f       	add	r22, r22
    1abe:	77 1f       	adc	r23, r23
    1ac0:	88 1f       	adc	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	4a 95       	dec	r20
    1ac6:	d1 f7       	brne	.-12     	; 0x1abc <micros+0x3c>
    1ac8:	08 95       	ret

00001aca <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1aca:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1acc:	84 b5       	in	r24, 0x24	; 36
    1ace:	82 60       	ori	r24, 0x02	; 2
    1ad0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1ad2:	84 b5       	in	r24, 0x24	; 36
    1ad4:	81 60       	ori	r24, 0x01	; 1
    1ad6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1ad8:	85 b5       	in	r24, 0x25	; 37
    1ada:	82 60       	ori	r24, 0x02	; 2
    1adc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1ade:	85 b5       	in	r24, 0x25	; 37
    1ae0:	81 60       	ori	r24, 0x01	; 1
    1ae2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1ae4:	ee e6       	ldi	r30, 0x6E	; 110
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	81 60       	ori	r24, 0x01	; 1
    1aec:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1aee:	e1 e8       	ldi	r30, 0x81	; 129
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1af4:	80 81       	ld	r24, Z
    1af6:	82 60       	ori	r24, 0x02	; 2
    1af8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1afa:	80 81       	ld	r24, Z
    1afc:	81 60       	ori	r24, 0x01	; 1
    1afe:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1b00:	e0 e8       	ldi	r30, 0x80	; 128
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	81 60       	ori	r24, 0x01	; 1
    1b08:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1b0a:	e1 eb       	ldi	r30, 0xB1	; 177
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	84 60       	ori	r24, 0x04	; 4
    1b12:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1b14:	e0 eb       	ldi	r30, 0xB0	; 176
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	81 60       	ori	r24, 0x01	; 1
    1b1c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1b1e:	ea e7       	ldi	r30, 0x7A	; 122
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	84 60       	ori	r24, 0x04	; 4
    1b26:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1b28:	80 81       	ld	r24, Z
    1b2a:	82 60       	ori	r24, 0x02	; 2
    1b2c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1b2e:	80 81       	ld	r24, Z
    1b30:	81 60       	ori	r24, 0x01	; 1
    1b32:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1b34:	80 81       	ld	r24, Z
    1b36:	80 68       	ori	r24, 0x80	; 128
    1b38:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1b3a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    1b3e:	08 95       	ret

00001b40 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1b40:	83 30       	cpi	r24, 0x03	; 3
    1b42:	81 f0       	breq	.+32     	; 0x1b64 <turnOffPWM+0x24>
    1b44:	28 f4       	brcc	.+10     	; 0x1b50 <turnOffPWM+0x10>
    1b46:	81 30       	cpi	r24, 0x01	; 1
    1b48:	99 f0       	breq	.+38     	; 0x1b70 <turnOffPWM+0x30>
    1b4a:	82 30       	cpi	r24, 0x02	; 2
    1b4c:	a1 f0       	breq	.+40     	; 0x1b76 <turnOffPWM+0x36>
    1b4e:	08 95       	ret
    1b50:	87 30       	cpi	r24, 0x07	; 7
    1b52:	a9 f0       	breq	.+42     	; 0x1b7e <turnOffPWM+0x3e>
    1b54:	88 30       	cpi	r24, 0x08	; 8
    1b56:	b9 f0       	breq	.+46     	; 0x1b86 <turnOffPWM+0x46>
    1b58:	84 30       	cpi	r24, 0x04	; 4
    1b5a:	d1 f4       	brne	.+52     	; 0x1b90 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1b5c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1b60:	8f 7d       	andi	r24, 0xDF	; 223
    1b62:	03 c0       	rjmp	.+6      	; 0x1b6a <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1b64:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1b68:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1b6a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1b6e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1b70:	84 b5       	in	r24, 0x24	; 36
    1b72:	8f 77       	andi	r24, 0x7F	; 127
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1b76:	84 b5       	in	r24, 0x24	; 36
    1b78:	8f 7d       	andi	r24, 0xDF	; 223
    1b7a:	84 bd       	out	0x24, r24	; 36
    1b7c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1b7e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1b82:	8f 77       	andi	r24, 0x7F	; 127
    1b84:	03 c0       	rjmp	.+6      	; 0x1b8c <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1b86:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1b8a:	8f 7d       	andi	r24, 0xDF	; 223
    1b8c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1b90:	08 95       	ret

00001b92 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1b92:	cf 93       	push	r28
    1b94:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	fc 01       	movw	r30, r24
    1b9a:	ed 5e       	subi	r30, 0xED	; 237
    1b9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b9e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	e9 5d       	subi	r30, 0xD9	; 217
    1ba4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ba6:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1ba8:	88 23       	and	r24, r24
    1baa:	61 f1       	breq	.+88     	; 0x1c04 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	eb 5b       	subi	r30, 0xBB	; 187
    1bb6:	fe 4f       	sbci	r31, 0xFE	; 254
    1bb8:	c5 91       	lpm	r28, Z+
    1bba:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	e5 5c       	subi	r30, 0xC5	; 197
    1bc0:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc2:	a5 91       	lpm	r26, Z+
    1bc4:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1bc6:	61 11       	cpse	r22, r1
    1bc8:	09 c0       	rjmp	.+18     	; 0x1bdc <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1bca:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1bcc:	f8 94       	cli
		*reg &= ~bit;
    1bce:	88 81       	ld	r24, Y
    1bd0:	20 95       	com	r18
    1bd2:	82 23       	and	r24, r18
    1bd4:	88 83       	st	Y, r24
		*out &= ~bit;
    1bd6:	ec 91       	ld	r30, X
    1bd8:	2e 23       	and	r18, r30
    1bda:	0b c0       	rjmp	.+22     	; 0x1bf2 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1bdc:	62 30       	cpi	r22, 0x02	; 2
    1bde:	61 f4       	brne	.+24     	; 0x1bf8 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1be0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1be2:	f8 94       	cli
		*reg &= ~bit;
    1be4:	88 81       	ld	r24, Y
    1be6:	32 2f       	mov	r19, r18
    1be8:	30 95       	com	r19
    1bea:	83 23       	and	r24, r19
    1bec:	88 83       	st	Y, r24
		*out |= bit;
    1bee:	ec 91       	ld	r30, X
    1bf0:	2e 2b       	or	r18, r30
    1bf2:	2c 93       	st	X, r18
		SREG = oldSREG;
    1bf4:	9f bf       	out	0x3f, r25	; 63
    1bf6:	06 c0       	rjmp	.+12     	; 0x1c04 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1bf8:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1bfa:	f8 94       	cli
		*reg |= bit;
    1bfc:	e8 81       	ld	r30, Y
    1bfe:	2e 2b       	or	r18, r30
    1c00:	28 83       	st	Y, r18
		SREG = oldSREG;
    1c02:	8f bf       	out	0x3f, r24	; 63
	}
}
    1c04:	df 91       	pop	r29
    1c06:	cf 91       	pop	r28
    1c08:	08 95       	ret

00001c0a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1c0a:	1f 93       	push	r17
    1c0c:	cf 93       	push	r28
    1c0e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1c10:	28 2f       	mov	r18, r24
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	f9 01       	movw	r30, r18
    1c16:	e1 50       	subi	r30, 0x01	; 1
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1c1c:	f9 01       	movw	r30, r18
    1c1e:	ed 5e       	subi	r30, 0xED	; 237
    1c20:	fe 4f       	sbci	r31, 0xFE	; 254
    1c22:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1c24:	f9 01       	movw	r30, r18
    1c26:	e9 5d       	subi	r30, 0xD9	; 217
    1c28:	fe 4f       	sbci	r31, 0xFE	; 254
    1c2a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1c2c:	cc 23       	and	r28, r28
    1c2e:	c1 f0       	breq	.+48     	; 0x1c60 <digitalWrite+0x56>
    1c30:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1c32:	81 11       	cpse	r24, r1
    1c34:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <turnOffPWM>

	out = portOutputRegister(port);
    1c38:	ec 2f       	mov	r30, r28
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	ee 0f       	add	r30, r30
    1c3e:	ff 1f       	adc	r31, r31
    1c40:	e5 5c       	subi	r30, 0xC5	; 197
    1c42:	fe 4f       	sbci	r31, 0xFE	; 254
    1c44:	a5 91       	lpm	r26, Z+
    1c46:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1c48:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1c4a:	f8 94       	cli

	if (val == LOW) {
    1c4c:	11 11       	cpse	r17, r1
    1c4e:	04 c0       	rjmp	.+8      	; 0x1c58 <digitalWrite+0x4e>
		*out &= ~bit;
    1c50:	8c 91       	ld	r24, X
    1c52:	d0 95       	com	r29
    1c54:	d8 23       	and	r29, r24
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <digitalWrite+0x52>
	} else {
		*out |= bit;
    1c58:	ec 91       	ld	r30, X
    1c5a:	de 2b       	or	r29, r30
    1c5c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1c5e:	9f bf       	out	0x3f, r25	; 63
}
    1c60:	df 91       	pop	r29
    1c62:	cf 91       	pop	r28
    1c64:	1f 91       	pop	r17
    1c66:	08 95       	ret

00001c68 <_ZL23enterU32InBufferAtIndexmPhh>:
        wait = false ;
      }
    }
  }
  return recoveryDone ;
}
    1c68:	fa 01       	movw	r30, r20
    1c6a:	e2 0f       	add	r30, r18
    1c6c:	f1 1d       	adc	r31, r1
    1c6e:	60 83       	st	Z, r22
    1c70:	71 83       	std	Z+1, r23	; 0x01
    1c72:	82 83       	std	Z+2, r24	; 0x02
    1c74:	93 83       	std	Z+3, r25	; 0x03
    1c76:	08 95       	ret

00001c78 <_ZL20u32FromBufferAtIndexPhh>:
    1c78:	fc 01       	movw	r30, r24
    1c7a:	e6 0f       	add	r30, r22
    1c7c:	f1 1d       	adc	r31, r1
    1c7e:	20 81       	ld	r18, Z
    1c80:	31 81       	ldd	r19, Z+1	; 0x01
    1c82:	62 81       	ldd	r22, Z+2	; 0x02
    1c84:	86 2f       	mov	r24, r22
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	a0 e0       	ldi	r26, 0x00	; 0
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	99 27       	eor	r25, r25
    1c90:	88 27       	eor	r24, r24
    1c92:	93 2b       	or	r25, r19
    1c94:	82 2b       	or	r24, r18
    1c96:	23 81       	ldd	r18, Z+3	; 0x03
    1c98:	bc 01       	movw	r22, r24
    1c9a:	cd 01       	movw	r24, r26
    1c9c:	92 2b       	or	r25, r18
    1c9e:	08 95       	ret

00001ca0 <_ZL19lengthCodeForLengthh>:
    1ca0:	88 31       	cpi	r24, 0x18	; 24
    1ca2:	e9 f0       	breq	.+58     	; 0x1cde <_ZL19lengthCodeForLengthh+0x3e>
    1ca4:	58 f4       	brcc	.+22     	; 0x1cbc <_ZL19lengthCodeForLengthh+0x1c>
    1ca6:	80 31       	cpi	r24, 0x10	; 16
    1ca8:	71 f1       	breq	.+92     	; 0x1d06 <_ZL19lengthCodeForLengthh+0x66>
    1caa:	84 31       	cpi	r24, 0x14	; 20
    1cac:	99 f0       	breq	.+38     	; 0x1cd4 <_ZL19lengthCodeForLengthh+0x34>
    1cae:	8c 30       	cpi	r24, 0x0C	; 12
    1cb0:	59 f4       	brne	.+22     	; 0x1cc8 <_ZL19lengthCodeForLengthh+0x28>
    1cb2:	69 e0       	ldi	r22, 0x09	; 9
    1cb4:	70 e0       	ldi	r23, 0x00	; 0
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	08 95       	ret
    1cbc:	80 33       	cpi	r24, 0x30	; 48
    1cbe:	c9 f0       	breq	.+50     	; 0x1cf2 <_ZL19lengthCodeForLengthh+0x52>
    1cc0:	80 34       	cpi	r24, 0x40	; 64
    1cc2:	e1 f0       	breq	.+56     	; 0x1cfc <_ZL19lengthCodeForLengthh+0x5c>
    1cc4:	80 32       	cpi	r24, 0x20	; 32
    1cc6:	81 f0       	breq	.+32     	; 0x1ce8 <_ZL19lengthCodeForLengthh+0x48>
    1cc8:	68 2f       	mov	r22, r24
    1cca:	6f 70       	andi	r22, 0x0F	; 15
    1ccc:	70 e0       	ldi	r23, 0x00	; 0
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	08 95       	ret
    1cd4:	6b e0       	ldi	r22, 0x0B	; 11
    1cd6:	70 e0       	ldi	r23, 0x00	; 0
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	08 95       	ret
    1cde:	6c e0       	ldi	r22, 0x0C	; 12
    1ce0:	70 e0       	ldi	r23, 0x00	; 0
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	08 95       	ret
    1ce8:	6d e0       	ldi	r22, 0x0D	; 13
    1cea:	70 e0       	ldi	r23, 0x00	; 0
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	08 95       	ret
    1cf2:	6e e0       	ldi	r22, 0x0E	; 14
    1cf4:	70 e0       	ldi	r23, 0x00	; 0
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	08 95       	ret
    1cfc:	6f e0       	ldi	r22, 0x0F	; 15
    1cfe:	70 e0       	ldi	r23, 0x00	; 0
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	08 95       	ret
    1d06:	6a e0       	ldi	r22, 0x0A	; 10
    1d08:	70 e0       	ldi	r23, 0x00	; 0
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	08 95       	ret

00001d10 <_ZN12ACANFDBuffer6appendERK12CANFDMessage.part.2>:
    1d10:	cf 93       	push	r28
    1d12:	df 93       	push	r29
    1d14:	ec 01       	movw	r28, r24
    1d16:	4a 85       	ldd	r20, Y+10	; 0x0a
    1d18:	5b 85       	ldd	r21, Y+11	; 0x0b
    1d1a:	88 e4       	ldi	r24, 0x48	; 72
    1d1c:	84 9f       	mul	r24, r20
    1d1e:	90 01       	movw	r18, r0
    1d20:	85 9f       	mul	r24, r21
    1d22:	30 0d       	add	r19, r0
    1d24:	11 24       	eor	r1, r1
    1d26:	a8 81       	ld	r26, Y
    1d28:	b9 81       	ldd	r27, Y+1	; 0x01
    1d2a:	a2 0f       	add	r26, r18
    1d2c:	b3 1f       	adc	r27, r19
    1d2e:	fb 01       	movw	r30, r22
    1d30:	01 90       	ld	r0, Z+
    1d32:	0d 92       	st	X+, r0
    1d34:	8a 95       	dec	r24
    1d36:	e1 f7       	brne	.-8      	; 0x1d30 <_ZN12ACANFDBuffer6appendERK12CANFDMessage.part.2+0x20>
    1d38:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d3c:	ac 85       	ldd	r26, Y+12	; 0x0c
    1d3e:	bd 85       	ldd	r27, Y+13	; 0x0d
    1d40:	01 96       	adiw	r24, 0x01	; 1
    1d42:	a1 1d       	adc	r26, r1
    1d44:	b1 1d       	adc	r27, r1
    1d46:	8a 87       	std	Y+10, r24	; 0x0a
    1d48:	9b 87       	std	Y+11, r25	; 0x0b
    1d4a:	ac 87       	std	Y+12, r26	; 0x0c
    1d4c:	bd 87       	std	Y+13, r27	; 0x0d
    1d4e:	4a 81       	ldd	r20, Y+2	; 0x02
    1d50:	5b 81       	ldd	r21, Y+3	; 0x03
    1d52:	6c 81       	ldd	r22, Y+4	; 0x04
    1d54:	7d 81       	ldd	r23, Y+5	; 0x05
    1d56:	84 17       	cp	r24, r20
    1d58:	95 07       	cpc	r25, r21
    1d5a:	a6 07       	cpc	r26, r22
    1d5c:	b7 07       	cpc	r27, r23
    1d5e:	21 f4       	brne	.+8      	; 0x1d68 <_ZN12ACANFDBuffer6appendERK12CANFDMessage.part.2+0x58>
    1d60:	1a 86       	std	Y+10, r1	; 0x0a
    1d62:	1b 86       	std	Y+11, r1	; 0x0b
    1d64:	1c 86       	std	Y+12, r1	; 0x0c
    1d66:	1d 86       	std	Y+13, r1	; 0x0d
    1d68:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d6a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d6c:	a8 89       	ldd	r26, Y+16	; 0x10
    1d6e:	b9 89       	ldd	r27, Y+17	; 0x11
    1d70:	01 96       	adiw	r24, 0x01	; 1
    1d72:	a1 1d       	adc	r26, r1
    1d74:	b1 1d       	adc	r27, r1
    1d76:	8e 87       	std	Y+14, r24	; 0x0e
    1d78:	9f 87       	std	Y+15, r25	; 0x0f
    1d7a:	a8 8b       	std	Y+16, r26	; 0x10
    1d7c:	b9 8b       	std	Y+17, r27	; 0x11
    1d7e:	4a 89       	ldd	r20, Y+18	; 0x12
    1d80:	5b 89       	ldd	r21, Y+19	; 0x13
    1d82:	6c 89       	ldd	r22, Y+20	; 0x14
    1d84:	7d 89       	ldd	r23, Y+21	; 0x15
    1d86:	48 17       	cp	r20, r24
    1d88:	59 07       	cpc	r21, r25
    1d8a:	6a 07       	cpc	r22, r26
    1d8c:	7b 07       	cpc	r23, r27
    1d8e:	20 f4       	brcc	.+8      	; 0x1d98 <_ZN12ACANFDBuffer6appendERK12CANFDMessage.part.2+0x88>
    1d90:	8a 8b       	std	Y+18, r24	; 0x12
    1d92:	9b 8b       	std	Y+19, r25	; 0x13
    1d94:	ac 8b       	std	Y+20, r26	; 0x14
    1d96:	bd 8b       	std	Y+21, r27	; 0x15
    1d98:	df 91       	pop	r29
    1d9a:	cf 91       	pop	r28
    1d9c:	08 95       	ret

00001d9e <_ZN12ACANFDBuffer6removeER12CANFDMessage.part.3>:
    1d9e:	cf 93       	push	r28
    1da0:	df 93       	push	r29
    1da2:	ec 01       	movw	r28, r24
    1da4:	4e 81       	ldd	r20, Y+6	; 0x06
    1da6:	5f 81       	ldd	r21, Y+7	; 0x07
    1da8:	88 e4       	ldi	r24, 0x48	; 72
    1daa:	84 9f       	mul	r24, r20
    1dac:	90 01       	movw	r18, r0
    1dae:	85 9f       	mul	r24, r21
    1db0:	30 0d       	add	r19, r0
    1db2:	11 24       	eor	r1, r1
    1db4:	e8 81       	ld	r30, Y
    1db6:	f9 81       	ldd	r31, Y+1	; 0x01
    1db8:	e2 0f       	add	r30, r18
    1dba:	f3 1f       	adc	r31, r19
    1dbc:	db 01       	movw	r26, r22
    1dbe:	01 90       	ld	r0, Z+
    1dc0:	0d 92       	st	X+, r0
    1dc2:	8a 95       	dec	r24
    1dc4:	e1 f7       	brne	.-8      	; 0x1dbe <_ZN12ACANFDBuffer6removeER12CANFDMessage.part.3+0x20>
    1dc6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dc8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dca:	a8 89       	ldd	r26, Y+16	; 0x10
    1dcc:	b9 89       	ldd	r27, Y+17	; 0x11
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	a1 09       	sbc	r26, r1
    1dd2:	b1 09       	sbc	r27, r1
    1dd4:	8e 87       	std	Y+14, r24	; 0x0e
    1dd6:	9f 87       	std	Y+15, r25	; 0x0f
    1dd8:	a8 8b       	std	Y+16, r26	; 0x10
    1dda:	b9 8b       	std	Y+17, r27	; 0x11
    1ddc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dde:	9f 81       	ldd	r25, Y+7	; 0x07
    1de0:	a8 85       	ldd	r26, Y+8	; 0x08
    1de2:	b9 85       	ldd	r27, Y+9	; 0x09
    1de4:	01 96       	adiw	r24, 0x01	; 1
    1de6:	a1 1d       	adc	r26, r1
    1de8:	b1 1d       	adc	r27, r1
    1dea:	8e 83       	std	Y+6, r24	; 0x06
    1dec:	9f 83       	std	Y+7, r25	; 0x07
    1dee:	a8 87       	std	Y+8, r26	; 0x08
    1df0:	b9 87       	std	Y+9, r27	; 0x09
    1df2:	4a 81       	ldd	r20, Y+2	; 0x02
    1df4:	5b 81       	ldd	r21, Y+3	; 0x03
    1df6:	6c 81       	ldd	r22, Y+4	; 0x04
    1df8:	7d 81       	ldd	r23, Y+5	; 0x05
    1dfa:	84 17       	cp	r24, r20
    1dfc:	95 07       	cpc	r25, r21
    1dfe:	a6 07       	cpc	r26, r22
    1e00:	b7 07       	cpc	r27, r23
    1e02:	21 f4       	brne	.+8      	; 0x1e0c <_ZN12ACANFDBuffer6removeER12CANFDMessage.part.3+0x6e>
    1e04:	1e 82       	std	Y+6, r1	; 0x06
    1e06:	1f 82       	std	Y+7, r1	; 0x07
    1e08:	18 86       	std	Y+8, r1	; 0x08
    1e0a:	19 86       	std	Y+9, r1	; 0x09
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	08 95       	ret

00001e12 <_ZN8SPIClass8transferEPvj.part.6>:
    1e12:	fc 01       	movw	r30, r24
    1e14:	20 81       	ld	r18, Z
    1e16:	2e bd       	out	0x2e, r18	; 46
    1e18:	9b 01       	movw	r18, r22
    1e1a:	21 50       	subi	r18, 0x01	; 1
    1e1c:	31 09       	sbc	r19, r1
    1e1e:	41 f0       	breq	.+16     	; 0x1e30 <_ZN8SPIClass8transferEPvj.part.6+0x1e>
    1e20:	51 81       	ldd	r21, Z+1	; 0x01
    1e22:	0d b4       	in	r0, 0x2d	; 45
    1e24:	07 fe       	sbrs	r0, 7
    1e26:	fd cf       	rjmp	.-6      	; 0x1e22 <_ZN8SPIClass8transferEPvj.part.6+0x10>
    1e28:	4e b5       	in	r20, 0x2e	; 46
    1e2a:	5e bd       	out	0x2e, r21	; 46
    1e2c:	41 93       	st	Z+, r20
    1e2e:	f5 cf       	rjmp	.-22     	; 0x1e1a <_ZN8SPIClass8transferEPvj.part.6+0x8>
    1e30:	61 50       	subi	r22, 0x01	; 1
    1e32:	71 09       	sbc	r23, r1
    1e34:	fc 01       	movw	r30, r24
    1e36:	e6 0f       	add	r30, r22
    1e38:	f7 1f       	adc	r31, r23
    1e3a:	0d b4       	in	r0, 0x2d	; 45
    1e3c:	07 fe       	sbrs	r0, 7
    1e3e:	fd cf       	rjmp	.-6      	; 0x1e3a <_ZN8SPIClass8transferEPvj.part.6+0x28>
    1e40:	8e b5       	in	r24, 0x2e	; 46
    1e42:	80 83       	st	Z, r24
    1e44:	08 95       	ret

00001e46 <_ZN12ACANFDBuffer12initWithSizeEm>:
    1e46:	8f 92       	push	r8
    1e48:	9f 92       	push	r9
    1e4a:	af 92       	push	r10
    1e4c:	bf 92       	push	r11
    1e4e:	cf 92       	push	r12
    1e50:	df 92       	push	r13
    1e52:	ef 92       	push	r14
    1e54:	ff 92       	push	r15
    1e56:	0f 93       	push	r16
    1e58:	1f 93       	push	r17
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	ec 01       	movw	r28, r24
    1e60:	6a 01       	movw	r12, r20
    1e62:	7b 01       	movw	r14, r22
    1e64:	45 3c       	cpi	r20, 0xC5	; 197
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	58 07       	cpc	r21, r24
    1e6a:	38 f4       	brcc	.+14     	; 0x1e7a <_ZN12ACANFDBuffer12initWithSizeEm+0x34>
    1e6c:	28 e4       	ldi	r18, 0x48	; 72
    1e6e:	24 9f       	mul	r18, r20
    1e70:	c0 01       	movw	r24, r0
    1e72:	25 9f       	mul	r18, r21
    1e74:	90 0d       	add	r25, r0
    1e76:	11 24       	eor	r1, r1
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <_ZN12ACANFDBuffer12initWithSizeEm+0x38>
    1e7a:	8f ef       	ldi	r24, 0xFF	; 255
    1e7c:	9f ef       	ldi	r25, 0xFF	; 255
    1e7e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_Znaj>
    1e82:	4c 01       	movw	r8, r24
    1e84:	56 01       	movw	r10, r12
    1e86:	8c 01       	movw	r16, r24
    1e88:	a1 14       	cp	r10, r1
    1e8a:	b1 04       	cpc	r11, r1
    1e8c:	49 f0       	breq	.+18     	; 0x1ea0 <_ZN12ACANFDBuffer12initWithSizeEm+0x5a>
    1e8e:	c8 01       	movw	r24, r16
    1e90:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN12CANFDMessageC1Ev>
    1e94:	08 5b       	subi	r16, 0xB8	; 184
    1e96:	1f 4f       	sbci	r17, 0xFF	; 255
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	a8 1a       	sub	r10, r24
    1e9c:	b1 08       	sbc	r11, r1
    1e9e:	f4 cf       	rjmp	.-24     	; 0x1e88 <_ZN12ACANFDBuffer12initWithSizeEm+0x42>
    1ea0:	88 82       	st	Y, r8
    1ea2:	99 82       	std	Y+1, r9	; 0x01
    1ea4:	ca 82       	std	Y+2, r12	; 0x02
    1ea6:	db 82       	std	Y+3, r13	; 0x03
    1ea8:	ec 82       	std	Y+4, r14	; 0x04
    1eaa:	fd 82       	std	Y+5, r15	; 0x05
    1eac:	1e 82       	std	Y+6, r1	; 0x06
    1eae:	1f 82       	std	Y+7, r1	; 0x07
    1eb0:	18 86       	std	Y+8, r1	; 0x08
    1eb2:	19 86       	std	Y+9, r1	; 0x09
    1eb4:	1a 86       	std	Y+10, r1	; 0x0a
    1eb6:	1b 86       	std	Y+11, r1	; 0x0b
    1eb8:	1c 86       	std	Y+12, r1	; 0x0c
    1eba:	1d 86       	std	Y+13, r1	; 0x0d
    1ebc:	1e 86       	std	Y+14, r1	; 0x0e
    1ebe:	1f 86       	std	Y+15, r1	; 0x0f
    1ec0:	18 8a       	std	Y+16, r1	; 0x10
    1ec2:	19 8a       	std	Y+17, r1	; 0x11
    1ec4:	1a 8a       	std	Y+18, r1	; 0x12
    1ec6:	1b 8a       	std	Y+19, r1	; 0x13
    1ec8:	1c 8a       	std	Y+20, r1	; 0x14
    1eca:	1d 8a       	std	Y+21, r1	; 0x15
    1ecc:	df 91       	pop	r29
    1ece:	cf 91       	pop	r28
    1ed0:	1f 91       	pop	r17
    1ed2:	0f 91       	pop	r16
    1ed4:	ff 90       	pop	r15
    1ed6:	ef 90       	pop	r14
    1ed8:	df 90       	pop	r13
    1eda:	cf 90       	pop	r12
    1edc:	bf 90       	pop	r11
    1ede:	af 90       	pop	r10
    1ee0:	9f 90       	pop	r9
    1ee2:	8f 90       	pop	r8
    1ee4:	08 95       	ret

00001ee6 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    1ee6:	20 91 77 05 	lds	r18, 0x0577	; 0x800577 <_ZN8SPIClass13interruptModeE>
    1eea:	22 23       	and	r18, r18
    1eec:	99 f0       	breq	.+38     	; 0x1f14 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    1eee:	4f b7       	in	r20, 0x3f	; 63
    1ef0:	f8 94       	cli
    1ef2:	20 91 77 05 	lds	r18, 0x0577	; 0x800577 <_ZN8SPIClass13interruptModeE>
    1ef6:	21 30       	cpi	r18, 0x01	; 1
    1ef8:	59 f4       	brne	.+22     	; 0x1f10 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    1efa:	2d b3       	in	r18, 0x1d	; 29
    1efc:	20 93 75 05 	sts	0x0575, r18	; 0x800575 <_ZN8SPIClass13interruptSaveE>
    1f00:	3d b3       	in	r19, 0x1d	; 29
    1f02:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <_ZN8SPIClass13interruptMaskE>
    1f06:	20 95       	com	r18
    1f08:	23 23       	and	r18, r19
    1f0a:	2d bb       	out	0x1d, r18	; 29
    1f0c:	4f bf       	out	0x3f, r20	; 63
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    1f10:	40 93 75 05 	sts	0x0575, r20	; 0x800575 <_ZN8SPIClass13interruptSaveE>
    1f14:	8c bd       	out	0x2c, r24	; 44
    1f16:	9d bd       	out	0x2d, r25	; 45
    1f18:	08 95       	ret

00001f1a <_ZN8SPIClass10transfer16Ej>:
    1f1a:	0c b4       	in	r0, 0x2c	; 44
    1f1c:	05 fc       	sbrc	r0, 5
    1f1e:	0d c0       	rjmp	.+26     	; 0x1f3a <_ZN8SPIClass10transfer16Ej+0x20>
    1f20:	9e bd       	out	0x2e, r25	; 46
    1f22:	00 00       	nop
    1f24:	0d b4       	in	r0, 0x2d	; 45
    1f26:	07 fe       	sbrs	r0, 7
    1f28:	fd cf       	rjmp	.-6      	; 0x1f24 <_ZN8SPIClass10transfer16Ej+0xa>
    1f2a:	9e b5       	in	r25, 0x2e	; 46
    1f2c:	8e bd       	out	0x2e, r24	; 46
    1f2e:	00 00       	nop
    1f30:	0d b4       	in	r0, 0x2d	; 45
    1f32:	07 fe       	sbrs	r0, 7
    1f34:	fd cf       	rjmp	.-6      	; 0x1f30 <_ZN8SPIClass10transfer16Ej+0x16>
    1f36:	8e b5       	in	r24, 0x2e	; 46
    1f38:	08 95       	ret
    1f3a:	8e bd       	out	0x2e, r24	; 46
    1f3c:	00 00       	nop
    1f3e:	0d b4       	in	r0, 0x2d	; 45
    1f40:	07 fe       	sbrs	r0, 7
    1f42:	fd cf       	rjmp	.-6      	; 0x1f3e <_ZN8SPIClass10transfer16Ej+0x24>
    1f44:	8e b5       	in	r24, 0x2e	; 46
    1f46:	9e bd       	out	0x2e, r25	; 46
    1f48:	00 00       	nop
    1f4a:	0d b4       	in	r0, 0x2d	; 45
    1f4c:	07 fe       	sbrs	r0, 7
    1f4e:	fd cf       	rjmp	.-6      	; 0x1f4a <_ZN8SPIClass10transfer16Ej+0x30>
    1f50:	9e b5       	in	r25, 0x2e	; 46
    1f52:	08 95       	ret

00001f54 <_ZN8SPIClass14endTransactionEv>:
    1f54:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <_ZN8SPIClass13interruptModeE>
    1f58:	88 23       	and	r24, r24
    1f5a:	61 f0       	breq	.+24     	; 0x1f74 <_ZN8SPIClass14endTransactionEv+0x20>
    1f5c:	9f b7       	in	r25, 0x3f	; 63
    1f5e:	f8 94       	cli
    1f60:	20 91 77 05 	lds	r18, 0x0577	; 0x800577 <_ZN8SPIClass13interruptModeE>
    1f64:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <_ZN8SPIClass13interruptSaveE>
    1f68:	21 30       	cpi	r18, 0x01	; 1
    1f6a:	19 f4       	brne	.+6      	; 0x1f72 <_ZN8SPIClass14endTransactionEv+0x1e>
    1f6c:	8d bb       	out	0x1d, r24	; 29
    1f6e:	9f bf       	out	0x3f, r25	; 63
    1f70:	08 95       	ret
    1f72:	8f bf       	out	0x3f, r24	; 63
    1f74:	08 95       	ret

00001f76 <_ZN10ACAN2517FDC1EhR8SPIClassh>:
    1f76:	fc 01       	movw	r30, r24
    1f78:	11 82       	std	Z+1, r1	; 0x01
    1f7a:	10 82       	st	Z, r1
    1f7c:	80 e5       	ldi	r24, 0x50	; 80
    1f7e:	82 83       	std	Z+2, r24	; 0x02
    1f80:	13 82       	std	Z+3, r1	; 0x03
    1f82:	55 83       	std	Z+5, r21	; 0x05
    1f84:	44 83       	std	Z+4, r20	; 0x04
    1f86:	66 83       	std	Z+6, r22	; 0x06
    1f88:	27 83       	std	Z+7, r18	; 0x07
    1f8a:	10 86       	std	Z+8, r1	; 0x08
    1f8c:	11 86       	std	Z+9, r1	; 0x09
    1f8e:	12 86       	std	Z+10, r1	; 0x0a
    1f90:	13 86       	std	Z+11, r1	; 0x0b
    1f92:	14 86       	std	Z+12, r1	; 0x0c
    1f94:	15 86       	std	Z+13, r1	; 0x0d
    1f96:	16 86       	std	Z+14, r1	; 0x0e
    1f98:	17 86       	std	Z+15, r1	; 0x0f
    1f9a:	11 8a       	std	Z+17, r1	; 0x11
    1f9c:	10 8a       	std	Z+16, r1	; 0x10
    1f9e:	12 8a       	std	Z+18, r1	; 0x12
    1fa0:	13 8a       	std	Z+19, r1	; 0x13
    1fa2:	14 8a       	std	Z+20, r1	; 0x14
    1fa4:	15 8a       	std	Z+21, r1	; 0x15
    1fa6:	16 8a       	std	Z+22, r1	; 0x16
    1fa8:	17 8a       	std	Z+23, r1	; 0x17
    1faa:	10 8e       	std	Z+24, r1	; 0x18
    1fac:	11 8e       	std	Z+25, r1	; 0x19
    1fae:	12 8e       	std	Z+26, r1	; 0x1a
    1fb0:	13 8e       	std	Z+27, r1	; 0x1b
    1fb2:	14 8e       	std	Z+28, r1	; 0x1c
    1fb4:	15 8e       	std	Z+29, r1	; 0x1d
    1fb6:	16 8e       	std	Z+30, r1	; 0x1e
    1fb8:	17 8e       	std	Z+31, r1	; 0x1f
    1fba:	10 a2       	std	Z+32, r1	; 0x20
    1fbc:	11 a2       	std	Z+33, r1	; 0x21
    1fbe:	12 a2       	std	Z+34, r1	; 0x22
    1fc0:	13 a2       	std	Z+35, r1	; 0x23
    1fc2:	14 a2       	std	Z+36, r1	; 0x24
    1fc4:	15 a2       	std	Z+37, r1	; 0x25
    1fc6:	17 a2       	std	Z+39, r1	; 0x27
    1fc8:	16 a2       	std	Z+38, r1	; 0x26
    1fca:	10 a6       	std	Z+40, r1	; 0x28
    1fcc:	11 a6       	std	Z+41, r1	; 0x29
    1fce:	12 a6       	std	Z+42, r1	; 0x2a
    1fd0:	13 a6       	std	Z+43, r1	; 0x2b
    1fd2:	14 a6       	std	Z+44, r1	; 0x2c
    1fd4:	15 a6       	std	Z+45, r1	; 0x2d
    1fd6:	16 a6       	std	Z+46, r1	; 0x2e
    1fd8:	17 a6       	std	Z+47, r1	; 0x2f
    1fda:	10 aa       	std	Z+48, r1	; 0x30
    1fdc:	11 aa       	std	Z+49, r1	; 0x31
    1fde:	12 aa       	std	Z+50, r1	; 0x32
    1fe0:	13 aa       	std	Z+51, r1	; 0x33
    1fe2:	14 aa       	std	Z+52, r1	; 0x34
    1fe4:	15 aa       	std	Z+53, r1	; 0x35
    1fe6:	16 aa       	std	Z+54, r1	; 0x36
    1fe8:	17 aa       	std	Z+55, r1	; 0x37
    1fea:	10 ae       	std	Z+56, r1	; 0x38
    1fec:	11 ae       	std	Z+57, r1	; 0x39
    1fee:	12 ae       	std	Z+58, r1	; 0x3a
    1ff0:	13 ae       	std	Z+59, r1	; 0x3b
    1ff2:	08 95       	ret

00001ff4 <_ZN10ACAN2517FD9availableEv>:
    1ff4:	0f 93       	push	r16
    1ff6:	1f 93       	push	r17
    1ff8:	cf 93       	push	r28
    1ffa:	8c 01       	movw	r16, r24
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	82 81       	ldd	r24, Z+2	; 0x02
    2000:	93 81       	ldd	r25, Z+3	; 0x03
    2002:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2006:	f8 94       	cli
    2008:	c1 e0       	ldi	r28, 0x01	; 1
    200a:	f8 01       	movw	r30, r16
    200c:	86 8d       	ldd	r24, Z+30	; 0x1e
    200e:	97 8d       	ldd	r25, Z+31	; 0x1f
    2010:	a0 a1       	ldd	r26, Z+32	; 0x20
    2012:	b1 a1       	ldd	r27, Z+33	; 0x21
    2014:	89 2b       	or	r24, r25
    2016:	8a 2b       	or	r24, r26
    2018:	8b 2b       	or	r24, r27
    201a:	09 f4       	brne	.+2      	; 0x201e <_ZN10ACAN2517FD9availableEv+0x2a>
    201c:	c0 e0       	ldi	r28, 0x00	; 0
    201e:	78 94       	sei
    2020:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_ZN8SPIClass14endTransactionEv>
    2024:	8c 2f       	mov	r24, r28
    2026:	cf 91       	pop	r28
    2028:	1f 91       	pop	r17
    202a:	0f 91       	pop	r16
    202c:	08 95       	ret

0000202e <_ZN10ACAN2517FD7receiveER12CANFDMessage>:
    202e:	ef 92       	push	r14
    2030:	ff 92       	push	r15
    2032:	1f 93       	push	r17
    2034:	cf 93       	push	r28
    2036:	df 93       	push	r29
    2038:	ec 01       	movw	r28, r24
    203a:	7b 01       	movw	r14, r22
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	9b 81       	ldd	r25, Y+3	; 0x03
    2040:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2044:	f8 94       	cli
    2046:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2048:	9f 8d       	ldd	r25, Y+31	; 0x1f
    204a:	a8 a1       	ldd	r26, Y+32	; 0x20
    204c:	b9 a1       	ldd	r27, Y+33	; 0x21
    204e:	11 e0       	ldi	r17, 0x01	; 1
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	a1 05       	cpc	r26, r1
    2054:	b1 05       	cpc	r27, r1
    2056:	09 f4       	brne	.+2      	; 0x205a <_ZN10ACAN2517FD7receiveER12CANFDMessage+0x2c>
    2058:	10 e0       	ldi	r17, 0x00	; 0
    205a:	89 2b       	or	r24, r25
    205c:	8a 2b       	or	r24, r26
    205e:	8b 2b       	or	r24, r27
    2060:	29 f0       	breq	.+10     	; 0x206c <_ZN10ACAN2517FD7receiveER12CANFDMessage+0x3e>
    2062:	b7 01       	movw	r22, r14
    2064:	ce 01       	movw	r24, r28
    2066:	40 96       	adiw	r24, 0x10	; 16
    2068:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN12ACANFDBuffer6removeER12CANFDMessage.part.3>
    206c:	78 94       	sei
    206e:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_ZN8SPIClass14endTransactionEv>
    2072:	81 2f       	mov	r24, r17
    2074:	df 91       	pop	r29
    2076:	cf 91       	pop	r28
    2078:	1f 91       	pop	r17
    207a:	ff 90       	pop	r15
    207c:	ef 90       	pop	r14
    207e:	08 95       	ret

00002080 <_ZN10ACAN2517FD8assertCSEv>:
    2080:	60 e0       	ldi	r22, 0x00	; 0
    2082:	fc 01       	movw	r30, r24
    2084:	86 81       	ldd	r24, Z+6	; 0x06
    2086:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <digitalWrite>

0000208a <_ZN10ACAN2517FD10deassertCSEv>:
    208a:	61 e0       	ldi	r22, 0x01	; 1
    208c:	fc 01       	movw	r30, r24
    208e:	86 81       	ldd	r24, Z+6	; 0x06
    2090:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <digitalWrite>

00002094 <_ZN10ACAN2517FD37writeRegister32Assume_SPI_transactionEjm>:
    2094:	ef 92       	push	r14
    2096:	ff 92       	push	r15
    2098:	0f 93       	push	r16
    209a:	1f 93       	push	r17
    209c:	cf 93       	push	r28
    209e:	df 93       	push	r29
    20a0:	00 d0       	rcall	.+0      	; 0x20a2 <_ZN10ACAN2517FD37writeRegister32Assume_SPI_transactionEjm+0xe>
    20a2:	00 d0       	rcall	.+0      	; 0x20a4 <_ZN10ACAN2517FD37writeRegister32Assume_SPI_transactionEjm+0x10>
    20a4:	00 d0       	rcall	.+0      	; 0x20a6 <_ZN10ACAN2517FD37writeRegister32Assume_SPI_transactionEjm+0x12>
    20a6:	cd b7       	in	r28, 0x3d	; 61
    20a8:	de b7       	in	r29, 0x3e	; 62
    20aa:	7c 01       	movw	r14, r24
    20ac:	fb 01       	movw	r30, r22
    20ae:	ca 01       	movw	r24, r20
    20b0:	b9 01       	movw	r22, r18
    20b2:	8e 01       	movw	r16, r28
    20b4:	0f 5f       	subi	r16, 0xFF	; 255
    20b6:	1f 4f       	sbci	r17, 0xFF	; 255
    20b8:	26 e0       	ldi	r18, 0x06	; 6
    20ba:	d8 01       	movw	r26, r16
    20bc:	1d 92       	st	X+, r1
    20be:	2a 95       	dec	r18
    20c0:	e9 f7       	brne	.-6      	; 0x20bc <_ZN10ACAN2517FD37writeRegister32Assume_SPI_transactionEjm+0x28>
    20c2:	9f 01       	movw	r18, r30
    20c4:	3f 70       	andi	r19, 0x0F	; 15
    20c6:	30 62       	ori	r19, 0x20	; 32
    20c8:	39 83       	std	Y+1, r19	; 0x01
    20ca:	2a 83       	std	Y+2, r18	; 0x02
    20cc:	22 e0       	ldi	r18, 0x02	; 2
    20ce:	a8 01       	movw	r20, r16
    20d0:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <_ZL23enterU32InBufferAtIndexmPhh>
    20d4:	c7 01       	movw	r24, r14
    20d6:	0e 94 40 10 	call	0x2080	; 0x2080 <_ZN10ACAN2517FD8assertCSEv>
    20da:	66 e0       	ldi	r22, 0x06	; 6
    20dc:	70 e0       	ldi	r23, 0x00	; 0
    20de:	c8 01       	movw	r24, r16
    20e0:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <_ZN8SPIClass8transferEPvj.part.6>
    20e4:	c7 01       	movw	r24, r14
    20e6:	0e 94 45 10 	call	0x208a	; 0x208a <_ZN10ACAN2517FD10deassertCSEv>
    20ea:	26 96       	adiw	r28, 0x06	; 6
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	de bf       	out	0x3e, r29	; 62
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	cd bf       	out	0x3d, r28	; 61
    20f6:	df 91       	pop	r29
    20f8:	cf 91       	pop	r28
    20fa:	1f 91       	pop	r17
    20fc:	0f 91       	pop	r16
    20fe:	ff 90       	pop	r15
    2100:	ef 90       	pop	r14
    2102:	08 95       	ret

00002104 <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>:
    2104:	0f 93       	push	r16
    2106:	1f 93       	push	r17
    2108:	cf 93       	push	r28
    210a:	df 93       	push	r29
    210c:	00 d0       	rcall	.+0      	; 0x210e <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh+0xa>
    210e:	1f 92       	push	r1
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	8c 01       	movw	r16, r24
    2116:	7f 70       	andi	r23, 0x0F	; 15
    2118:	70 62       	ori	r23, 0x20	; 32
    211a:	79 83       	std	Y+1, r23	; 0x01
    211c:	6a 83       	std	Y+2, r22	; 0x02
    211e:	4b 83       	std	Y+3, r20	; 0x03
    2120:	0e 94 40 10 	call	0x2080	; 0x2080 <_ZN10ACAN2517FD8assertCSEv>
    2124:	63 e0       	ldi	r22, 0x03	; 3
    2126:	70 e0       	ldi	r23, 0x00	; 0
    2128:	ce 01       	movw	r24, r28
    212a:	01 96       	adiw	r24, 0x01	; 1
    212c:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <_ZN8SPIClass8transferEPvj.part.6>
    2130:	c8 01       	movw	r24, r16
    2132:	0e 94 45 10 	call	0x208a	; 0x208a <_ZN10ACAN2517FD10deassertCSEv>
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	df 91       	pop	r29
    213e:	cf 91       	pop	r28
    2140:	1f 91       	pop	r17
    2142:	0f 91       	pop	r16
    2144:	08 95       	ret

00002146 <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj>:
    2146:	ef 92       	push	r14
    2148:	ff 92       	push	r15
    214a:	0f 93       	push	r16
    214c:	1f 93       	push	r17
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29
    2152:	00 d0       	rcall	.+0      	; 0x2154 <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj+0xe>
    2154:	00 d0       	rcall	.+0      	; 0x2156 <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj+0x10>
    2156:	00 d0       	rcall	.+0      	; 0x2158 <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj+0x12>
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	7c 01       	movw	r14, r24
    215e:	8e 01       	movw	r16, r28
    2160:	0f 5f       	subi	r16, 0xFF	; 255
    2162:	1f 4f       	sbci	r17, 0xFF	; 255
    2164:	86 e0       	ldi	r24, 0x06	; 6
    2166:	f8 01       	movw	r30, r16
    2168:	11 92       	st	Z+, r1
    216a:	8a 95       	dec	r24
    216c:	e9 f7       	brne	.-6      	; 0x2168 <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj+0x22>
    216e:	7f 70       	andi	r23, 0x0F	; 15
    2170:	70 63       	ori	r23, 0x30	; 48
    2172:	79 83       	std	Y+1, r23	; 0x01
    2174:	6a 83       	std	Y+2, r22	; 0x02
    2176:	c7 01       	movw	r24, r14
    2178:	0e 94 40 10 	call	0x2080	; 0x2080 <_ZN10ACAN2517FD8assertCSEv>
    217c:	66 e0       	ldi	r22, 0x06	; 6
    217e:	70 e0       	ldi	r23, 0x00	; 0
    2180:	c8 01       	movw	r24, r16
    2182:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <_ZN8SPIClass8transferEPvj.part.6>
    2186:	c7 01       	movw	r24, r14
    2188:	0e 94 45 10 	call	0x208a	; 0x208a <_ZN10ACAN2517FD10deassertCSEv>
    218c:	62 e0       	ldi	r22, 0x02	; 2
    218e:	c8 01       	movw	r24, r16
    2190:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <_ZL20u32FromBufferAtIndexPhh>
    2194:	26 96       	adiw	r28, 0x06	; 6
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	de bf       	out	0x3e, r29	; 62
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	cd bf       	out	0x3d, r28	; 61
    21a0:	df 91       	pop	r29
    21a2:	cf 91       	pop	r28
    21a4:	1f 91       	pop	r17
    21a6:	0f 91       	pop	r16
    21a8:	ff 90       	pop	r15
    21aa:	ef 90       	pop	r14
    21ac:	08 95       	ret

000021ae <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage>:
    21ae:	2f 92       	push	r2
    21b0:	3f 92       	push	r3
    21b2:	4f 92       	push	r4
    21b4:	5f 92       	push	r5
    21b6:	6f 92       	push	r6
    21b8:	7f 92       	push	r7
    21ba:	8f 92       	push	r8
    21bc:	9f 92       	push	r9
    21be:	af 92       	push	r10
    21c0:	bf 92       	push	r11
    21c2:	cf 92       	push	r12
    21c4:	df 92       	push	r13
    21c6:	ef 92       	push	r14
    21c8:	ff 92       	push	r15
    21ca:	0f 93       	push	r16
    21cc:	1f 93       	push	r17
    21ce:	cf 93       	push	r28
    21d0:	df 93       	push	r29
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	c0 55       	subi	r28, 0x50	; 80
    21d8:	d1 09       	sbc	r29, r1
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
    21e4:	5c 01       	movw	r10, r24
    21e6:	8b 01       	movw	r16, r22
    21e8:	60 e7       	ldi	r22, 0x70	; 112
    21ea:	70 e0       	ldi	r23, 0x00	; 0
    21ec:	0e 94 a3 10 	call	0x2146	; 0x2146 <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj>
    21f0:	9b 01       	movw	r18, r22
    21f2:	3c 5f       	subi	r19, 0xFC	; 252
    21f4:	2d 96       	adiw	r28, 0x0d	; 13
    21f6:	3f af       	std	Y+63, r19	; 0x3f
    21f8:	2e af       	std	Y+62, r18	; 0x3e
    21fa:	2d 97       	sbiw	r28, 0x0d	; 13
    21fc:	d8 01       	movw	r26, r16
    21fe:	4d 90       	ld	r4, X+
    2200:	5d 90       	ld	r5, X+
    2202:	6d 90       	ld	r6, X+
    2204:	7c 90       	ld	r7, X
    2206:	13 97       	sbiw	r26, 0x03	; 3
    2208:	14 96       	adiw	r26, 0x04	; 4
    220a:	9c 90       	ld	r9, X
    220c:	99 20       	and	r9, r9
    220e:	d1 f0       	breq	.+52     	; 0x2244 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0x96>
    2210:	d3 01       	movw	r26, r6
    2212:	c2 01       	movw	r24, r4
    2214:	32 e1       	ldi	r19, 0x12	; 18
    2216:	b6 95       	lsr	r27
    2218:	a7 95       	ror	r26
    221a:	97 95       	ror	r25
    221c:	87 95       	ror	r24
    221e:	3a 95       	dec	r19
    2220:	d1 f7       	brne	.-12     	; 0x2216 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0x68>
    2222:	97 70       	andi	r25, 0x07	; 7
    2224:	aa 27       	eor	r26, r26
    2226:	bb 27       	eor	r27, r27
    2228:	e3 e0       	ldi	r30, 0x03	; 3
    222a:	6e 22       	and	r6, r30
    222c:	77 24       	eor	r7, r7
    222e:	4b e0       	ldi	r20, 0x0B	; 11
    2230:	44 0c       	add	r4, r4
    2232:	55 1c       	adc	r5, r5
    2234:	66 1c       	adc	r6, r6
    2236:	77 1c       	adc	r7, r7
    2238:	4a 95       	dec	r20
    223a:	d1 f7       	brne	.-12     	; 0x2230 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0x82>
    223c:	48 2a       	or	r4, r24
    223e:	59 2a       	or	r5, r25
    2240:	6a 2a       	or	r6, r26
    2242:	7b 2a       	or	r7, r27
    2244:	d8 01       	movw	r26, r16
    2246:	17 96       	adiw	r26, 0x07	; 7
    2248:	2c 90       	ld	r2, X
    224a:	82 2d       	mov	r24, r2
    224c:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <_ZL19lengthCodeForLengthh>
    2250:	6b 01       	movw	r12, r22
    2252:	7c 01       	movw	r14, r24
    2254:	99 20       	and	r9, r9
    2256:	11 f0       	breq	.+4      	; 0x225c <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xae>
    2258:	68 94       	set
    225a:	c4 f8       	bld	r12, 4
    225c:	f8 01       	movw	r30, r16
    225e:	85 81       	ldd	r24, Z+5	; 0x05
    2260:	82 30       	cpi	r24, 0x02	; 2
    2262:	61 f0       	breq	.+24     	; 0x227c <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xce>
    2264:	83 30       	cpi	r24, 0x03	; 3
    2266:	29 f0       	breq	.+10     	; 0x2272 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xc4>
    2268:	81 11       	cpse	r24, r1
    226a:	0d c0       	rjmp	.+26     	; 0x2286 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xd8>
    226c:	68 94       	set
    226e:	c5 f8       	bld	r12, 5
    2270:	0a c0       	rjmp	.+20     	; 0x2286 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xd8>
    2272:	d5 01       	movw	r26, r10
    2274:	1a 96       	adiw	r26, 0x0a	; 10
    2276:	8c 91       	ld	r24, X
    2278:	81 11       	cpse	r24, r1
    227a:	03 c0       	rjmp	.+6      	; 0x2282 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xd4>
    227c:	68 94       	set
    227e:	c7 f8       	bld	r12, 7
    2280:	02 c0       	rjmp	.+4      	; 0x2286 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xd8>
    2282:	b0 ec       	ldi	r27, 0xC0	; 192
    2284:	cb 2a       	or	r12, r27
    2286:	31 2c       	mov	r3, r1
    2288:	e3 e0       	ldi	r30, 0x03	; 3
    228a:	2e 0e       	add	r2, r30
    228c:	31 1c       	adc	r3, r1
    228e:	35 94       	asr	r3
    2290:	27 94       	ror	r2
    2292:	35 94       	asr	r3
    2294:	27 94       	ror	r2
    2296:	c1 01       	movw	r24, r2
    2298:	03 2c       	mov	r0, r3
    229a:	00 0c       	add	r0, r0
    229c:	aa 0b       	sbc	r26, r26
    229e:	bb 0b       	sbc	r27, r27
    22a0:	61 96       	adiw	r28, 0x11	; 17
    22a2:	8c af       	std	Y+60, r24	; 0x3c
    22a4:	9d af       	std	Y+61, r25	; 0x3d
    22a6:	ae af       	std	Y+62, r26	; 0x3e
    22a8:	bf af       	std	Y+63, r27	; 0x3f
    22aa:	61 97       	sbiw	r28, 0x11	; 17
    22ac:	de 01       	movw	r26, r28
    22ae:	11 96       	adiw	r26, 0x01	; 1
    22b0:	4d 01       	movw	r8, r26
    22b2:	8a e4       	ldi	r24, 0x4A	; 74
    22b4:	fd 01       	movw	r30, r26
    22b6:	11 92       	st	Z+, r1
    22b8:	8a 95       	dec	r24
    22ba:	e9 f7       	brne	.-6      	; 0x22b6 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0x108>
    22bc:	2d 96       	adiw	r28, 0x0d	; 13
    22be:	6e ad       	ldd	r22, Y+62	; 0x3e
    22c0:	7f ad       	ldd	r23, Y+63	; 0x3f
    22c2:	2d 97       	sbiw	r28, 0x0d	; 13
    22c4:	7f 70       	andi	r23, 0x0F	; 15
    22c6:	70 62       	ori	r23, 0x20	; 32
    22c8:	79 83       	std	Y+1, r23	; 0x01
    22ca:	6a 83       	std	Y+2, r22	; 0x02
    22cc:	22 e0       	ldi	r18, 0x02	; 2
    22ce:	ad 01       	movw	r20, r26
    22d0:	c3 01       	movw	r24, r6
    22d2:	b2 01       	movw	r22, r4
    22d4:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <_ZL23enterU32InBufferAtIndexmPhh>
    22d8:	26 e0       	ldi	r18, 0x06	; 6
    22da:	a4 01       	movw	r20, r8
    22dc:	c7 01       	movw	r24, r14
    22de:	b6 01       	movw	r22, r12
    22e0:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <_ZL23enterU32InBufferAtIndexmPhh>
    22e4:	08 5f       	subi	r16, 0xF8	; 248
    22e6:	1f 4f       	sbci	r17, 0xFF	; 255
    22e8:	2a e0       	ldi	r18, 0x0A	; 10
    22ea:	f2 2e       	mov	r15, r18
    22ec:	41 2c       	mov	r4, r1
    22ee:	51 2c       	mov	r5, r1
    22f0:	32 01       	movw	r6, r4
    22f2:	61 96       	adiw	r28, 0x11	; 17
    22f4:	8c ad       	ldd	r24, Y+60	; 0x3c
    22f6:	9d ad       	ldd	r25, Y+61	; 0x3d
    22f8:	ae ad       	ldd	r26, Y+62	; 0x3e
    22fa:	bf ad       	ldd	r27, Y+63	; 0x3f
    22fc:	61 97       	sbiw	r28, 0x11	; 17
    22fe:	48 16       	cp	r4, r24
    2300:	59 06       	cpc	r5, r25
    2302:	6a 06       	cpc	r6, r26
    2304:	7b 06       	cpc	r7, r27
    2306:	90 f4       	brcc	.+36     	; 0x232c <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0x17e>
    2308:	d8 01       	movw	r26, r16
    230a:	6d 91       	ld	r22, X+
    230c:	7d 91       	ld	r23, X+
    230e:	8d 91       	ld	r24, X+
    2310:	9d 91       	ld	r25, X+
    2312:	8d 01       	movw	r16, r26
    2314:	2f 2d       	mov	r18, r15
    2316:	a4 01       	movw	r20, r8
    2318:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <_ZL23enterU32InBufferAtIndexmPhh>
    231c:	bf ef       	ldi	r27, 0xFF	; 255
    231e:	4b 1a       	sub	r4, r27
    2320:	5b 0a       	sbc	r5, r27
    2322:	6b 0a       	sbc	r6, r27
    2324:	7b 0a       	sbc	r7, r27
    2326:	e4 e0       	ldi	r30, 0x04	; 4
    2328:	fe 0e       	add	r15, r30
    232a:	e3 cf       	rjmp	.-58     	; 0x22f2 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0x144>
    232c:	c5 01       	movw	r24, r10
    232e:	0e 94 40 10 	call	0x2080	; 0x2080 <_ZN10ACAN2517FD8assertCSEv>
    2332:	b1 01       	movw	r22, r2
    2334:	66 0f       	add	r22, r22
    2336:	77 1f       	adc	r23, r23
    2338:	66 0f       	add	r22, r22
    233a:	77 1f       	adc	r23, r23
    233c:	66 5f       	subi	r22, 0xF6	; 246
    233e:	7f 4f       	sbci	r23, 0xFF	; 255
    2340:	c4 01       	movw	r24, r8
    2342:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <_ZN8SPIClass8transferEPvj.part.6>
    2346:	c5 01       	movw	r24, r10
    2348:	0e 94 45 10 	call	0x208a	; 0x208a <_ZN10ACAN2517FD10deassertCSEv>
    234c:	43 e0       	ldi	r20, 0x03	; 3
    234e:	69 e6       	ldi	r22, 0x69	; 105
    2350:	70 e0       	ldi	r23, 0x00	; 0
    2352:	c5 01       	movw	r24, r10
    2354:	0e 94 82 10 	call	0x2104	; 0x2104 <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    2358:	c0 5b       	subi	r28, 0xB0	; 176
    235a:	df 4f       	sbci	r29, 0xFF	; 255
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	de bf       	out	0x3e, r29	; 62
    2362:	0f be       	out	0x3f, r0	; 63
    2364:	cd bf       	out	0x3d, r28	; 61
    2366:	df 91       	pop	r29
    2368:	cf 91       	pop	r28
    236a:	1f 91       	pop	r17
    236c:	0f 91       	pop	r16
    236e:	ff 90       	pop	r15
    2370:	ef 90       	pop	r14
    2372:	df 90       	pop	r13
    2374:	cf 90       	pop	r12
    2376:	bf 90       	pop	r11
    2378:	af 90       	pop	r10
    237a:	9f 90       	pop	r9
    237c:	8f 90       	pop	r8
    237e:	7f 90       	pop	r7
    2380:	6f 90       	pop	r6
    2382:	5f 90       	pop	r5
    2384:	4f 90       	pop	r4
    2386:	3f 90       	pop	r3
    2388:	2f 90       	pop	r2
    238a:	08 95       	ret

0000238c <_ZN10ACAN2517FD17transmitInterruptEv>:
    238c:	0f 93       	push	r16
    238e:	1f 93       	push	r17
    2390:	cf 93       	push	r28
    2392:	df 93       	push	r29
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    2398:	c8 54       	subi	r28, 0x48	; 72
    239a:	d1 09       	sbc	r29, r1
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	cd bf       	out	0x3d, r28	; 61
    23a6:	8c 01       	movw	r16, r24
    23a8:	ce 01       	movw	r24, r28
    23aa:	01 96       	adiw	r24, 0x01	; 1
    23ac:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN12CANFDMessageC1Ev>
    23b0:	f8 01       	movw	r30, r16
    23b2:	84 a9       	ldd	r24, Z+52	; 0x34
    23b4:	95 a9       	ldd	r25, Z+53	; 0x35
    23b6:	a6 a9       	ldd	r26, Z+54	; 0x36
    23b8:	b7 a9       	ldd	r27, Z+55	; 0x37
    23ba:	89 2b       	or	r24, r25
    23bc:	8a 2b       	or	r24, r26
    23be:	8b 2b       	or	r24, r27
    23c0:	71 f0       	breq	.+28     	; 0x23de <_ZN10ACAN2517FD17transmitInterruptEv+0x52>
    23c2:	be 01       	movw	r22, r28
    23c4:	6f 5f       	subi	r22, 0xFF	; 255
    23c6:	7f 4f       	sbci	r23, 0xFF	; 255
    23c8:	c8 01       	movw	r24, r16
    23ca:	86 96       	adiw	r24, 0x26	; 38
    23cc:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN12ACANFDBuffer6removeER12CANFDMessage.part.3>
    23d0:	be 01       	movw	r22, r28
    23d2:	6f 5f       	subi	r22, 0xFF	; 255
    23d4:	7f 4f       	sbci	r23, 0xFF	; 255
    23d6:	c8 01       	movw	r24, r16
    23d8:	0e 94 d7 10 	call	0x21ae	; 0x21ae <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage>
    23dc:	08 c0       	rjmp	.+16     	; 0x23ee <_ZN10ACAN2517FD17transmitInterruptEv+0x62>
    23de:	40 e9       	ldi	r20, 0x90	; 144
    23e0:	68 e6       	ldi	r22, 0x68	; 104
    23e2:	70 e0       	ldi	r23, 0x00	; 0
    23e4:	c8 01       	movw	r24, r16
    23e6:	0e 94 82 10 	call	0x2104	; 0x2104 <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    23ea:	f8 01       	movw	r30, r16
    23ec:	11 86       	std	Z+9, r1	; 0x09
    23ee:	c8 5b       	subi	r28, 0xB8	; 184
    23f0:	df 4f       	sbci	r29, 0xFF	; 255
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	cd bf       	out	0x3d, r28	; 61
    23fc:	df 91       	pop	r29
    23fe:	cf 91       	pop	r28
    2400:	1f 91       	pop	r17
    2402:	0f 91       	pop	r16
    2404:	08 95       	ret

00002406 <_ZN10ACAN2517FD16receiveInterruptEv>:
    2406:	2f 92       	push	r2
    2408:	3f 92       	push	r3
    240a:	4f 92       	push	r4
    240c:	5f 92       	push	r5
    240e:	6f 92       	push	r6
    2410:	7f 92       	push	r7
    2412:	8f 92       	push	r8
    2414:	9f 92       	push	r9
    2416:	af 92       	push	r10
    2418:	bf 92       	push	r11
    241a:	cf 92       	push	r12
    241c:	df 92       	push	r13
    241e:	ef 92       	push	r14
    2420:	ff 92       	push	r15
    2422:	0f 93       	push	r16
    2424:	1f 93       	push	r17
    2426:	cf 93       	push	r28
    2428:	df 93       	push	r29
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	c5 59       	subi	r28, 0x95	; 149
    2430:	d1 09       	sbc	r29, r1
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	f8 94       	cli
    2436:	de bf       	out	0x3e, r29	; 62
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	cd bf       	out	0x3d, r28	; 61
    243c:	3c 01       	movw	r6, r24
    243e:	64 e6       	ldi	r22, 0x64	; 100
    2440:	70 e0       	ldi	r23, 0x00	; 0
    2442:	0e 94 a3 10 	call	0x2146	; 0x2146 <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj>
    2446:	6b 01       	movw	r12, r22
    2448:	7c 01       	movw	r14, r24
    244a:	ce 01       	movw	r24, r28
    244c:	85 5b       	subi	r24, 0xB5	; 181
    244e:	9f 4f       	sbci	r25, 0xFF	; 255
    2450:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN12CANFDMessageC1Ev>
    2454:	8e 01       	movw	r16, r28
    2456:	0f 5f       	subi	r16, 0xFF	; 255
    2458:	1f 4f       	sbci	r17, 0xFF	; 255
    245a:	8a e4       	ldi	r24, 0x4A	; 74
    245c:	f8 01       	movw	r30, r16
    245e:	11 92       	st	Z+, r1
    2460:	8a 95       	dec	r24
    2462:	e9 f7       	brne	.-6      	; 0x245e <_ZN10ACAN2517FD16receiveInterruptEv+0x58>
    2464:	fc ef       	ldi	r31, 0xFC	; 252
    2466:	df 1a       	sub	r13, r31
    2468:	8f e0       	ldi	r24, 0x0F	; 15
    246a:	d8 22       	and	r13, r24
    246c:	90 e3       	ldi	r25, 0x30	; 48
    246e:	d9 2a       	or	r13, r25
    2470:	d9 82       	std	Y+1, r13	; 0x01
    2472:	ca 82       	std	Y+2, r12	; 0x02
    2474:	c3 01       	movw	r24, r6
    2476:	0e 94 40 10 	call	0x2080	; 0x2080 <_ZN10ACAN2517FD8assertCSEv>
    247a:	6a e4       	ldi	r22, 0x4A	; 74
    247c:	70 e0       	ldi	r23, 0x00	; 0
    247e:	c8 01       	movw	r24, r16
    2480:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <_ZN8SPIClass8transferEPvj.part.6>
    2484:	62 e0       	ldi	r22, 0x02	; 2
    2486:	c8 01       	movw	r24, r16
    2488:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <_ZL20u32FromBufferAtIndexPhh>
    248c:	2f 96       	adiw	r28, 0x0f	; 15
    248e:	6c af       	std	Y+60, r22	; 0x3c
    2490:	7d af       	std	Y+61, r23	; 0x3d
    2492:	8e af       	std	Y+62, r24	; 0x3e
    2494:	9f af       	std	Y+63, r25	; 0x3f
    2496:	2f 97       	sbiw	r28, 0x0f	; 15
    2498:	66 e0       	ldi	r22, 0x06	; 6
    249a:	c8 01       	movw	r24, r16
    249c:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <_ZL20u32FromBufferAtIndexPhh>
    24a0:	4b 01       	movw	r8, r22
    24a2:	5c 01       	movw	r10, r24
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	8f 70       	andi	r24, 0x0F	; 15
    24aa:	99 27       	eor	r25, r25
    24ac:	aa 27       	eor	r26, r26
    24ae:	bb 27       	eor	r27, r27
    24b0:	fc 01       	movw	r30, r24
    24b2:	e4 58       	subi	r30, 0x84	; 132
    24b4:	fd 4f       	sbci	r31, 0xFD	; 253
    24b6:	c0 80       	ld	r12, Z
    24b8:	63 96       	adiw	r28, 0x13	; 19
    24ba:	cf ae       	std	Y+63, r12	; 0x3f
    24bc:	63 97       	sbiw	r28, 0x13	; 19
    24be:	d1 2c       	mov	r13, r1
    24c0:	e3 e0       	ldi	r30, 0x03	; 3
    24c2:	ce 0e       	add	r12, r30
    24c4:	d1 1c       	adc	r13, r1
    24c6:	d5 94       	asr	r13
    24c8:	c7 94       	ror	r12
    24ca:	d5 94       	asr	r13
    24cc:	c7 94       	ror	r12
    24ce:	0d 2c       	mov	r0, r13
    24d0:	00 0c       	add	r0, r0
    24d2:	ee 08       	sbc	r14, r14
    24d4:	ff 08       	sbc	r15, r15
    24d6:	8b e4       	ldi	r24, 0x4B	; 75
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	8c 0f       	add	r24, r28
    24dc:	9d 1f       	adc	r25, r29
    24de:	08 96       	adiw	r24, 0x08	; 8
    24e0:	cc 56       	subi	r28, 0x6C	; 108
    24e2:	df 4f       	sbci	r29, 0xFF	; 255
    24e4:	99 83       	std	Y+1, r25	; 0x01
    24e6:	88 83       	st	Y, r24
    24e8:	c4 59       	subi	r28, 0x94	; 148
    24ea:	d0 40       	sbci	r29, 0x00	; 0
    24ec:	9a e0       	ldi	r25, 0x0A	; 10
    24ee:	cd 56       	subi	r28, 0x6D	; 109
    24f0:	df 4f       	sbci	r29, 0xFF	; 255
    24f2:	98 83       	st	Y, r25
    24f4:	c3 59       	subi	r28, 0x93	; 147
    24f6:	d0 40       	sbci	r29, 0x00	; 0
    24f8:	21 2c       	mov	r2, r1
    24fa:	31 2c       	mov	r3, r1
    24fc:	21 01       	movw	r4, r2
    24fe:	2c 14       	cp	r2, r12
    2500:	3d 04       	cpc	r3, r13
    2502:	4e 04       	cpc	r4, r14
    2504:	5f 04       	cpc	r5, r15
    2506:	48 f5       	brcc	.+82     	; 0x255a <_ZN10ACAN2517FD16receiveInterruptEv+0x154>
    2508:	cd 56       	subi	r28, 0x6D	; 109
    250a:	df 4f       	sbci	r29, 0xFF	; 255
    250c:	68 81       	ld	r22, Y
    250e:	c3 59       	subi	r28, 0x93	; 147
    2510:	d0 40       	sbci	r29, 0x00	; 0
    2512:	c8 01       	movw	r24, r16
    2514:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <_ZL20u32FromBufferAtIndexPhh>
    2518:	cc 56       	subi	r28, 0x6C	; 108
    251a:	df 4f       	sbci	r29, 0xFF	; 255
    251c:	e8 81       	ld	r30, Y
    251e:	f9 81       	ldd	r31, Y+1	; 0x01
    2520:	c4 59       	subi	r28, 0x94	; 148
    2522:	d0 40       	sbci	r29, 0x00	; 0
    2524:	61 93       	st	Z+, r22
    2526:	71 93       	st	Z+, r23
    2528:	81 93       	st	Z+, r24
    252a:	91 93       	st	Z+, r25
    252c:	cc 56       	subi	r28, 0x6C	; 108
    252e:	df 4f       	sbci	r29, 0xFF	; 255
    2530:	f9 83       	std	Y+1, r31	; 0x01
    2532:	e8 83       	st	Y, r30
    2534:	c4 59       	subi	r28, 0x94	; 148
    2536:	d0 40       	sbci	r29, 0x00	; 0
    2538:	ff ef       	ldi	r31, 0xFF	; 255
    253a:	2f 1a       	sub	r2, r31
    253c:	3f 0a       	sbc	r3, r31
    253e:	4f 0a       	sbc	r4, r31
    2540:	5f 0a       	sbc	r5, r31
    2542:	cd 56       	subi	r28, 0x6D	; 109
    2544:	df 4f       	sbci	r29, 0xFF	; 255
    2546:	88 81       	ld	r24, Y
    2548:	c3 59       	subi	r28, 0x93	; 147
    254a:	d0 40       	sbci	r29, 0x00	; 0
    254c:	8c 5f       	subi	r24, 0xFC	; 252
    254e:	cd 56       	subi	r28, 0x6D	; 109
    2550:	df 4f       	sbci	r29, 0xFF	; 255
    2552:	88 83       	st	Y, r24
    2554:	c3 59       	subi	r28, 0x93	; 147
    2556:	d0 40       	sbci	r29, 0x00	; 0
    2558:	d2 cf       	rjmp	.-92     	; 0x24fe <_ZN10ACAN2517FD16receiveInterruptEv+0xf8>
    255a:	c3 01       	movw	r24, r6
    255c:	0e 94 45 10 	call	0x208a	; 0x208a <_ZN10ACAN2517FD10deassertCSEv>
    2560:	41 e0       	ldi	r20, 0x01	; 1
    2562:	6d e5       	ldi	r22, 0x5D	; 93
    2564:	70 e0       	ldi	r23, 0x00	; 0
    2566:	c3 01       	movw	r24, r6
    2568:	0e 94 82 10 	call	0x2104	; 0x2104 <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    256c:	d5 01       	movw	r26, r10
    256e:	c4 01       	movw	r24, r8
    2570:	4b e0       	ldi	r20, 0x0B	; 11
    2572:	b6 95       	lsr	r27
    2574:	a7 95       	ror	r26
    2576:	97 95       	ror	r25
    2578:	87 95       	ror	r24
    257a:	4a 95       	dec	r20
    257c:	d1 f7       	brne	.-12     	; 0x2572 <_ZN10ACAN2517FD16receiveInterruptEv+0x16c>
    257e:	8f 71       	andi	r24, 0x1F	; 31
    2580:	62 96       	adiw	r28, 0x12	; 18
    2582:	8f af       	std	Y+63, r24	; 0x3f
    2584:	62 97       	sbiw	r28, 0x12	; 18
    2586:	85 fe       	sbrs	r8, 5
    2588:	04 c0       	rjmp	.+8      	; 0x2592 <_ZN10ACAN2517FD16receiveInterruptEv+0x18c>
    258a:	61 96       	adiw	r28, 0x11	; 17
    258c:	1f ae       	std	Y+63, r1	; 0x3f
    258e:	61 97       	sbiw	r28, 0x11	; 17
    2590:	0c c0       	rjmp	.+24     	; 0x25aa <_ZN10ACAN2517FD16receiveInterruptEv+0x1a4>
    2592:	87 fc       	sbrc	r8, 7
    2594:	02 c0       	rjmp	.+4      	; 0x259a <_ZN10ACAN2517FD16receiveInterruptEv+0x194>
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	05 c0       	rjmp	.+10     	; 0x25a4 <_ZN10ACAN2517FD16receiveInterruptEv+0x19e>
    259a:	86 fc       	sbrc	r8, 6
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <_ZN10ACAN2517FD16receiveInterruptEv+0x19c>
    259e:	82 e0       	ldi	r24, 0x02	; 2
    25a0:	01 c0       	rjmp	.+2      	; 0x25a4 <_ZN10ACAN2517FD16receiveInterruptEv+0x19e>
    25a2:	83 e0       	ldi	r24, 0x03	; 3
    25a4:	61 96       	adiw	r28, 0x11	; 17
    25a6:	8f af       	std	Y+63, r24	; 0x3f
    25a8:	61 97       	sbiw	r28, 0x11	; 17
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	b5 01       	movw	r22, r10
    25ae:	a4 01       	movw	r20, r8
    25b0:	40 71       	andi	r20, 0x10	; 16
    25b2:	55 27       	eor	r21, r21
    25b4:	66 27       	eor	r22, r22
    25b6:	77 27       	eor	r23, r23
    25b8:	84 fe       	sbrs	r8, 4
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	60 96       	adiw	r28, 0x10	; 16
    25be:	8f af       	std	Y+63, r24	; 0x3f
    25c0:	60 97       	sbiw	r28, 0x10	; 16
    25c2:	45 2b       	or	r20, r21
    25c4:	46 2b       	or	r20, r22
    25c6:	47 2b       	or	r20, r23
    25c8:	29 f1       	breq	.+74     	; 0x2614 <_ZN10ACAN2517FD16receiveInterruptEv+0x20e>
    25ca:	2f 96       	adiw	r28, 0x0f	; 15
    25cc:	8c ad       	ldd	r24, Y+60	; 0x3c
    25ce:	9d ad       	ldd	r25, Y+61	; 0x3d
    25d0:	ae ad       	ldd	r26, Y+62	; 0x3e
    25d2:	bf ad       	ldd	r27, Y+63	; 0x3f
    25d4:	2f 97       	sbiw	r28, 0x0f	; 15
    25d6:	ac 01       	movw	r20, r24
    25d8:	bd 01       	movw	r22, r26
    25da:	2b e0       	ldi	r18, 0x0B	; 11
    25dc:	76 95       	lsr	r23
    25de:	67 95       	ror	r22
    25e0:	57 95       	ror	r21
    25e2:	47 95       	ror	r20
    25e4:	2a 95       	dec	r18
    25e6:	d1 f7       	brne	.-12     	; 0x25dc <_ZN10ACAN2517FD16receiveInterruptEv+0x1d6>
    25e8:	63 70       	andi	r22, 0x03	; 3
    25ea:	77 27       	eor	r23, r23
    25ec:	97 70       	andi	r25, 0x07	; 7
    25ee:	aa 27       	eor	r26, r26
    25f0:	bb 27       	eor	r27, r27
    25f2:	32 e1       	ldi	r19, 0x12	; 18
    25f4:	88 0f       	add	r24, r24
    25f6:	99 1f       	adc	r25, r25
    25f8:	aa 1f       	adc	r26, r26
    25fa:	bb 1f       	adc	r27, r27
    25fc:	3a 95       	dec	r19
    25fe:	d1 f7       	brne	.-12     	; 0x25f4 <_ZN10ACAN2517FD16receiveInterruptEv+0x1ee>
    2600:	84 2b       	or	r24, r20
    2602:	95 2b       	or	r25, r21
    2604:	a6 2b       	or	r26, r22
    2606:	b7 2b       	or	r27, r23
    2608:	2f 96       	adiw	r28, 0x0f	; 15
    260a:	8c af       	std	Y+60, r24	; 0x3c
    260c:	9d af       	std	Y+61, r25	; 0x3d
    260e:	ae af       	std	Y+62, r26	; 0x3e
    2610:	bf af       	std	Y+63, r27	; 0x3f
    2612:	2f 97       	sbiw	r28, 0x0f	; 15
    2614:	f3 01       	movw	r30, r6
    2616:	82 89       	ldd	r24, Z+18	; 0x12
    2618:	93 89       	ldd	r25, Z+19	; 0x13
    261a:	a4 89       	ldd	r26, Z+20	; 0x14
    261c:	b5 89       	ldd	r27, Z+21	; 0x15
    261e:	46 8d       	ldd	r20, Z+30	; 0x1e
    2620:	57 8d       	ldd	r21, Z+31	; 0x1f
    2622:	60 a1       	ldd	r22, Z+32	; 0x20
    2624:	71 a1       	ldd	r23, Z+33	; 0x21
    2626:	48 17       	cp	r20, r24
    2628:	59 07       	cpc	r21, r25
    262a:	6a 07       	cpc	r22, r26
    262c:	7b 07       	cpc	r23, r27
    262e:	40 f4       	brcc	.+16     	; 0x2640 <_ZN10ACAN2517FD16receiveInterruptEv+0x23a>
    2630:	be 01       	movw	r22, r28
    2632:	65 5b       	subi	r22, 0xB5	; 181
    2634:	7f 4f       	sbci	r23, 0xFF	; 255
    2636:	c3 01       	movw	r24, r6
    2638:	40 96       	adiw	r24, 0x10	; 16
    263a:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <_ZN12ACANFDBuffer6appendERK12CANFDMessage.part.2>
    263e:	08 c0       	rjmp	.+16     	; 0x2650 <_ZN10ACAN2517FD16receiveInterruptEv+0x24a>
    2640:	01 96       	adiw	r24, 0x01	; 1
    2642:	a1 1d       	adc	r26, r1
    2644:	b1 1d       	adc	r27, r1
    2646:	f3 01       	movw	r30, r6
    2648:	82 a3       	std	Z+34, r24	; 0x22
    264a:	93 a3       	std	Z+35, r25	; 0x23
    264c:	a4 a3       	std	Z+36, r26	; 0x24
    264e:	b5 a3       	std	Z+37, r27	; 0x25
    2650:	cb 56       	subi	r28, 0x6B	; 107
    2652:	df 4f       	sbci	r29, 0xFF	; 255
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	f8 94       	cli
    2658:	de bf       	out	0x3e, r29	; 62
    265a:	0f be       	out	0x3f, r0	; 63
    265c:	cd bf       	out	0x3d, r28	; 61
    265e:	df 91       	pop	r29
    2660:	cf 91       	pop	r28
    2662:	1f 91       	pop	r17
    2664:	0f 91       	pop	r16
    2666:	ff 90       	pop	r15
    2668:	ef 90       	pop	r14
    266a:	df 90       	pop	r13
    266c:	cf 90       	pop	r12
    266e:	bf 90       	pop	r11
    2670:	af 90       	pop	r10
    2672:	9f 90       	pop	r9
    2674:	8f 90       	pop	r8
    2676:	7f 90       	pop	r7
    2678:	6f 90       	pop	r6
    267a:	5f 90       	pop	r5
    267c:	4f 90       	pop	r4
    267e:	3f 90       	pop	r3
    2680:	2f 90       	pop	r2
    2682:	08 95       	ret

00002684 <_ZN10ACAN2517FD36readRegister16Assume_SPI_transactionEj>:
    2684:	0f 93       	push	r16
    2686:	1f 93       	push	r17
    2688:	cf 93       	push	r28
    268a:	df 93       	push	r29
    268c:	00 d0       	rcall	.+0      	; 0x268e <_ZN10ACAN2517FD36readRegister16Assume_SPI_transactionEj+0xa>
    268e:	00 d0       	rcall	.+0      	; 0x2690 <_ZN10ACAN2517FD36readRegister16Assume_SPI_transactionEj+0xc>
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	8c 01       	movw	r16, r24
    2696:	19 82       	std	Y+1, r1	; 0x01
    2698:	1a 82       	std	Y+2, r1	; 0x02
    269a:	1b 82       	std	Y+3, r1	; 0x03
    269c:	1c 82       	std	Y+4, r1	; 0x04
    269e:	7f 70       	andi	r23, 0x0F	; 15
    26a0:	70 63       	ori	r23, 0x30	; 48
    26a2:	79 83       	std	Y+1, r23	; 0x01
    26a4:	6a 83       	std	Y+2, r22	; 0x02
    26a6:	0e 94 40 10 	call	0x2080	; 0x2080 <_ZN10ACAN2517FD8assertCSEv>
    26aa:	64 e0       	ldi	r22, 0x04	; 4
    26ac:	70 e0       	ldi	r23, 0x00	; 0
    26ae:	ce 01       	movw	r24, r28
    26b0:	01 96       	adiw	r24, 0x01	; 1
    26b2:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <_ZN8SPIClass8transferEPvj.part.6>
    26b6:	c8 01       	movw	r24, r16
    26b8:	0e 94 45 10 	call	0x208a	; 0x208a <_ZN10ACAN2517FD10deassertCSEv>
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	9c 81       	ldd	r25, Y+4	; 0x04
    26c0:	0f 90       	pop	r0
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	df 91       	pop	r29
    26ca:	cf 91       	pop	r28
    26cc:	1f 91       	pop	r17
    26ce:	0f 91       	pop	r16
    26d0:	08 95       	ret

000026d2 <_ZN10ACAN2517FD8isr_coreEv>:
    26d2:	ef 92       	push	r14
    26d4:	ff 92       	push	r15
    26d6:	1f 93       	push	r17
    26d8:	cf 93       	push	r28
    26da:	df 93       	push	r29
    26dc:	ec 01       	movw	r28, r24
    26de:	8a 81       	ldd	r24, Y+2	; 0x02
    26e0:	9b 81       	ldd	r25, Y+3	; 0x03
    26e2:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    26e6:	6c e1       	ldi	r22, 0x1C	; 28
    26e8:	70 e0       	ldi	r23, 0x00	; 0
    26ea:	ce 01       	movw	r24, r28
    26ec:	0e 94 42 13 	call	0x2684	; 0x2684 <_ZN10ACAN2517FD36readRegister16Assume_SPI_transactionEj>
    26f0:	7c 01       	movw	r14, r24
    26f2:	81 ff       	sbrs	r24, 1
    26f4:	05 c0       	rjmp	.+10     	; 0x2700 <_ZN10ACAN2517FD8isr_coreEv+0x2e>
    26f6:	ce 01       	movw	r24, r28
    26f8:	0e 94 03 12 	call	0x2406	; 0x2406 <_ZN10ACAN2517FD16receiveInterruptEv>
    26fc:	11 e0       	ldi	r17, 0x01	; 1
    26fe:	01 c0       	rjmp	.+2      	; 0x2702 <_ZN10ACAN2517FD8isr_coreEv+0x30>
    2700:	10 e0       	ldi	r17, 0x00	; 0
    2702:	f2 fe       	sbrs	r15, 2
    2704:	07 c0       	rjmp	.+14     	; 0x2714 <_ZN10ACAN2517FD8isr_coreEv+0x42>
    2706:	4f ee       	ldi	r20, 0xEF	; 239
    2708:	6c e6       	ldi	r22, 0x6C	; 108
    270a:	70 e0       	ldi	r23, 0x00	; 0
    270c:	ce 01       	movw	r24, r28
    270e:	0e 94 82 10 	call	0x2104	; 0x2104 <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    2712:	02 c0       	rjmp	.+4      	; 0x2718 <_ZN10ACAN2517FD8isr_coreEv+0x46>
    2714:	e0 fe       	sbrs	r14, 0
    2716:	04 c0       	rjmp	.+8      	; 0x2720 <_ZN10ACAN2517FD8isr_coreEv+0x4e>
    2718:	ce 01       	movw	r24, r28
    271a:	0e 94 c6 11 	call	0x238c	; 0x238c <_ZN10ACAN2517FD17transmitInterruptEv>
    271e:	11 e0       	ldi	r17, 0x01	; 1
    2720:	e2 fe       	sbrs	r14, 2
    2722:	07 c0       	rjmp	.+14     	; 0x2732 <_ZN10ACAN2517FD8isr_coreEv+0x60>
    2724:	4b ef       	ldi	r20, 0xFB	; 251
    2726:	6c e1       	ldi	r22, 0x1C	; 28
    2728:	70 e0       	ldi	r23, 0x00	; 0
    272a:	ce 01       	movw	r24, r28
    272c:	0e 94 82 10 	call	0x2104	; 0x2104 <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    2730:	11 e0       	ldi	r17, 0x01	; 1
    2732:	e3 fe       	sbrs	r14, 3
    2734:	07 c0       	rjmp	.+14     	; 0x2744 <_ZN10ACAN2517FD8isr_coreEv+0x72>
    2736:	47 ef       	ldi	r20, 0xF7	; 247
    2738:	6c e1       	ldi	r22, 0x1C	; 28
    273a:	70 e0       	ldi	r23, 0x00	; 0
    273c:	ce 01       	movw	r24, r28
    273e:	0e 94 82 10 	call	0x2104	; 0x2104 <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    2742:	11 e0       	ldi	r17, 0x01	; 1
    2744:	f4 fe       	sbrs	r15, 4
    2746:	07 c0       	rjmp	.+14     	; 0x2756 <_ZN10ACAN2517FD8isr_coreEv+0x84>
    2748:	4f ee       	ldi	r20, 0xEF	; 239
    274a:	6d e1       	ldi	r22, 0x1D	; 29
    274c:	70 e0       	ldi	r23, 0x00	; 0
    274e:	ce 01       	movw	r24, r28
    2750:	0e 94 82 10 	call	0x2104	; 0x2104 <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    2754:	11 e0       	ldi	r17, 0x01	; 1
    2756:	f3 fe       	sbrs	r15, 3
    2758:	0c c0       	rjmp	.+24     	; 0x2772 <_ZN10ACAN2517FD8isr_coreEv+0xa0>
    275a:	8f 85       	ldd	r24, Y+15	; 0x0f
    275c:	8f 3f       	cpi	r24, 0xFF	; 255
    275e:	11 f0       	breq	.+4      	; 0x2764 <_ZN10ACAN2517FD8isr_coreEv+0x92>
    2760:	8f 5f       	subi	r24, 0xFF	; 255
    2762:	8f 87       	std	Y+15, r24	; 0x0f
    2764:	47 ef       	ldi	r20, 0xF7	; 247
    2766:	60 e6       	ldi	r22, 0x60	; 96
    2768:	70 e0       	ldi	r23, 0x00	; 0
    276a:	ce 01       	movw	r24, r28
    276c:	0e 94 82 10 	call	0x2104	; 0x2104 <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    2770:	11 e0       	ldi	r17, 0x01	; 1
    2772:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_ZN8SPIClass14endTransactionEv>
    2776:	81 2f       	mov	r24, r17
    2778:	df 91       	pop	r29
    277a:	cf 91       	pop	r28
    277c:	1f 91       	pop	r17
    277e:	ff 90       	pop	r15
    2780:	ef 90       	pop	r14
    2782:	08 95       	ret

00002784 <_ZN10ACAN2517FD3isrEv>:
    2784:	cf 93       	push	r28
    2786:	df 93       	push	r29
    2788:	ec 01       	movw	r28, r24
    278a:	ce 01       	movw	r24, r28
    278c:	0e 94 69 13 	call	0x26d2	; 0x26d2 <_ZN10ACAN2517FD8isr_coreEv>
    2790:	81 11       	cpse	r24, r1
    2792:	fb cf       	rjmp	.-10     	; 0x278a <_ZN10ACAN2517FD3isrEv+0x6>
    2794:	df 91       	pop	r29
    2796:	cf 91       	pop	r28
    2798:	08 95       	ret

0000279a <_ZN10ACAN2517FD35readRegister8Assume_SPI_transactionEj>:
    279a:	0f 93       	push	r16
    279c:	1f 93       	push	r17
    279e:	cf 93       	push	r28
    27a0:	df 93       	push	r29
    27a2:	00 d0       	rcall	.+0      	; 0x27a4 <_ZN10ACAN2517FD35readRegister8Assume_SPI_transactionEj+0xa>
    27a4:	1f 92       	push	r1
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    27aa:	8c 01       	movw	r16, r24
    27ac:	19 82       	std	Y+1, r1	; 0x01
    27ae:	1a 82       	std	Y+2, r1	; 0x02
    27b0:	1b 82       	std	Y+3, r1	; 0x03
    27b2:	7f 70       	andi	r23, 0x0F	; 15
    27b4:	70 63       	ori	r23, 0x30	; 48
    27b6:	79 83       	std	Y+1, r23	; 0x01
    27b8:	6a 83       	std	Y+2, r22	; 0x02
    27ba:	0e 94 40 10 	call	0x2080	; 0x2080 <_ZN10ACAN2517FD8assertCSEv>
    27be:	63 e0       	ldi	r22, 0x03	; 3
    27c0:	70 e0       	ldi	r23, 0x00	; 0
    27c2:	ce 01       	movw	r24, r28
    27c4:	01 96       	adiw	r24, 0x01	; 1
    27c6:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <_ZN8SPIClass8transferEPvj.part.6>
    27ca:	c8 01       	movw	r24, r16
    27cc:	0e 94 45 10 	call	0x208a	; 0x208a <_ZN10ACAN2517FD10deassertCSEv>
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	df 91       	pop	r29
    27da:	cf 91       	pop	r28
    27dc:	1f 91       	pop	r17
    27de:	0f 91       	pop	r16
    27e0:	08 95       	ret

000027e2 <_ZN10ACAN2517FD14writeRegister8Ejh>:
    27e2:	ff 92       	push	r15
    27e4:	0f 93       	push	r16
    27e6:	1f 93       	push	r17
    27e8:	cf 93       	push	r28
    27ea:	df 93       	push	r29
    27ec:	ec 01       	movw	r28, r24
    27ee:	8b 01       	movw	r16, r22
    27f0:	f4 2e       	mov	r15, r20
    27f2:	8a 81       	ldd	r24, Y+2	; 0x02
    27f4:	9b 81       	ldd	r25, Y+3	; 0x03
    27f6:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    27fa:	f8 94       	cli
    27fc:	4f 2d       	mov	r20, r15
    27fe:	b8 01       	movw	r22, r16
    2800:	ce 01       	movw	r24, r28
    2802:	0e 94 82 10 	call	0x2104	; 0x2104 <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    2806:	78 94       	sei
    2808:	df 91       	pop	r29
    280a:	cf 91       	pop	r28
    280c:	1f 91       	pop	r17
    280e:	0f 91       	pop	r16
    2810:	ff 90       	pop	r15
    2812:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <_ZN8SPIClass14endTransactionEv>

00002816 <_ZN10ACAN2517FD13readRegister8Ej>:
    2816:	0f 93       	push	r16
    2818:	1f 93       	push	r17
    281a:	cf 93       	push	r28
    281c:	df 93       	push	r29
    281e:	ec 01       	movw	r28, r24
    2820:	8b 01       	movw	r16, r22
    2822:	8a 81       	ldd	r24, Y+2	; 0x02
    2824:	9b 81       	ldd	r25, Y+3	; 0x03
    2826:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    282a:	f8 94       	cli
    282c:	b8 01       	movw	r22, r16
    282e:	ce 01       	movw	r24, r28
    2830:	0e 94 cd 13 	call	0x279a	; 0x279a <_ZN10ACAN2517FD35readRegister8Assume_SPI_transactionEj>
    2834:	c8 2f       	mov	r28, r24
    2836:	78 94       	sei
    2838:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_ZN8SPIClass14endTransactionEv>
    283c:	8c 2f       	mov	r24, r28
    283e:	df 91       	pop	r29
    2840:	cf 91       	pop	r28
    2842:	1f 91       	pop	r17
    2844:	0f 91       	pop	r16
    2846:	08 95       	ret

00002848 <_ZN10ACAN2517FD15writeRegister32Ejm>:
    2848:	cf 92       	push	r12
    284a:	df 92       	push	r13
    284c:	ef 92       	push	r14
    284e:	ff 92       	push	r15
    2850:	0f 93       	push	r16
    2852:	1f 93       	push	r17
    2854:	cf 93       	push	r28
    2856:	df 93       	push	r29
    2858:	ec 01       	movw	r28, r24
    285a:	8b 01       	movw	r16, r22
    285c:	69 01       	movw	r12, r18
    285e:	7a 01       	movw	r14, r20
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	9b 81       	ldd	r25, Y+3	; 0x03
    2864:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2868:	f8 94       	cli
    286a:	a7 01       	movw	r20, r14
    286c:	96 01       	movw	r18, r12
    286e:	b8 01       	movw	r22, r16
    2870:	ce 01       	movw	r24, r28
    2872:	0e 94 4a 10 	call	0x2094	; 0x2094 <_ZN10ACAN2517FD37writeRegister32Assume_SPI_transactionEjm>
    2876:	78 94       	sei
    2878:	df 91       	pop	r29
    287a:	cf 91       	pop	r28
    287c:	1f 91       	pop	r17
    287e:	0f 91       	pop	r16
    2880:	ff 90       	pop	r15
    2882:	ef 90       	pop	r14
    2884:	df 90       	pop	r13
    2886:	cf 90       	pop	r12
    2888:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <_ZN8SPIClass14endTransactionEv>

0000288c <_ZN10ACAN2517FD14readRegister32Ej>:
    288c:	cf 92       	push	r12
    288e:	df 92       	push	r13
    2890:	ef 92       	push	r14
    2892:	ff 92       	push	r15
    2894:	cf 93       	push	r28
    2896:	df 93       	push	r29
    2898:	ec 01       	movw	r28, r24
    289a:	7b 01       	movw	r14, r22
    289c:	8a 81       	ldd	r24, Y+2	; 0x02
    289e:	9b 81       	ldd	r25, Y+3	; 0x03
    28a0:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    28a4:	f8 94       	cli
    28a6:	b7 01       	movw	r22, r14
    28a8:	ce 01       	movw	r24, r28
    28aa:	0e 94 a3 10 	call	0x2146	; 0x2146 <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj>
    28ae:	6b 01       	movw	r12, r22
    28b0:	7c 01       	movw	r14, r24
    28b2:	78 94       	sei
    28b4:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <_ZN8SPIClass14endTransactionEv>
    28b8:	c7 01       	movw	r24, r14
    28ba:	b6 01       	movw	r22, r12
    28bc:	df 91       	pop	r29
    28be:	cf 91       	pop	r28
    28c0:	ff 90       	pop	r15
    28c2:	ef 90       	pop	r14
    28c4:	df 90       	pop	r13
    28c6:	cf 90       	pop	r12
    28c8:	08 95       	ret

000028ca <_ZN10ACAN2517FD11reset2517FDEv>:

//----------------------------------------------------------------------------------------------------------------------

void ACAN2517FD::reset2517FD (void) {
    28ca:	cf 93       	push	r28
    28cc:	df 93       	push	r29
    28ce:	ec 01       	movw	r28, r24
  mSPI.beginTransaction (mSPISettings) ; // Check RESET is performed with 1 MHz clock
    28d0:	8a 81       	ldd	r24, Y+2	; 0x02
    28d2:	9b 81       	ldd	r25, Y+3	; 0x03
    28d4:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    #ifdef ARDUINO_ARCH_ESP32
      taskDISABLE_INTERRUPTS () ;
    #else
      noInterrupts () ;
    28d8:	f8 94       	cli
    #endif
      assertCS () ;
    28da:	ce 01       	movw	r24, r28
    28dc:	0e 94 40 10 	call	0x2080	; 0x2080 <_ZN10ACAN2517FD8assertCSEv>
        mSPI.transfer16 (0x00) ; // Reset instruction: 0x0000
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <_ZN8SPIClass10transfer16Ej>
      deassertCS () ;
    28e8:	ce 01       	movw	r24, r28
    28ea:	0e 94 45 10 	call	0x208a	; 0x208a <_ZN10ACAN2517FD10deassertCSEv>
    #ifdef ARDUINO_ARCH_ESP32
      taskENABLE_INTERRUPTS () ;
    #else
      interrupts () ;
    28ee:	78 94       	sei
    #endif
  mSPI.endTransaction () ;
}
    28f0:	df 91       	pop	r29
    28f2:	cf 91       	pop	r28
    #ifdef ARDUINO_ARCH_ESP32
      taskENABLE_INTERRUPTS () ;
    #else
      interrupts () ;
    #endif
  mSPI.endTransaction () ;
    28f4:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <_ZN8SPIClass14endTransactionEv>

000028f8 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters>:

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FD::begin (const ACAN2517FDSettings & inSettings,
                            void (* inInterruptServiceRoutine) (void),
                            const ACAN2517FDFilters & inFilters) {
    28f8:	2f 92       	push	r2
    28fa:	3f 92       	push	r3
    28fc:	4f 92       	push	r4
    28fe:	5f 92       	push	r5
    2900:	6f 92       	push	r6
    2902:	7f 92       	push	r7
    2904:	8f 92       	push	r8
    2906:	9f 92       	push	r9
    2908:	af 92       	push	r10
    290a:	bf 92       	push	r11
    290c:	cf 92       	push	r12
    290e:	df 92       	push	r13
    2910:	ef 92       	push	r14
    2912:	ff 92       	push	r15
    2914:	0f 93       	push	r16
    2916:	1f 93       	push	r17
    2918:	cf 93       	push	r28
    291a:	df 93       	push	r29
    291c:	00 d0       	rcall	.+0      	; 0x291e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x26>
    291e:	1f 92       	push	r1
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	9b 83       	std	Y+3, r25	; 0x03
    2926:	8a 83       	std	Y+2, r24	; 0x02
    2928:	8b 01       	movw	r16, r22
    292a:	1a 01       	movw	r2, r20
    292c:	69 01       	movw	r12, r18
  uint32_t errorCode = 0 ; // Means no error
//----------------------------------- If ok, check if settings are correct
  if (!inSettings.mArbitrationBitRateClosedToDesiredRate) {
    292e:	fb 01       	movw	r30, r22
    2930:	83 89       	ldd	r24, Z+19	; 0x13
    2932:	81 11       	cpse	r24, r1
    2934:	06 c0       	rjmp	.+12     	; 0x2942 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x4a>
    errorCode |= kTooFarFromDesiredBitRate ;
    2936:	44 e0       	ldi	r20, 0x04	; 4
    2938:	84 2e       	mov	r8, r20
    293a:	91 2c       	mov	r9, r1
    293c:	a1 2c       	mov	r10, r1
    293e:	b1 2c       	mov	r11, r1
    2940:	03 c0       	rjmp	.+6      	; 0x2948 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x50>
//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FD::begin (const ACAN2517FDSettings & inSettings,
                            void (* inInterruptServiceRoutine) (void),
                            const ACAN2517FDFilters & inFilters) {
  uint32_t errorCode = 0 ; // Means no error
    2942:	81 2c       	mov	r8, r1
    2944:	91 2c       	mov	r9, r1
    2946:	54 01       	movw	r10, r8
//----------------------------------- If ok, check if settings are correct
  if (!inSettings.mArbitrationBitRateClosedToDesiredRate) {
    errorCode |= kTooFarFromDesiredBitRate ;
  }
  if (inSettings.CANBitSettingConsistency () != 0) {
    2948:	c8 01       	movw	r24, r16
    294a:	0e 94 9b 1c 	call	0x3936	; 0x3936 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv>
    294e:	67 2b       	or	r22, r23
    2950:	68 2b       	or	r22, r24
    2952:	69 2b       	or	r22, r25
    2954:	11 f0       	breq	.+4      	; 0x295a <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x62>
    errorCode |= kInconsistentBitRateSettings ;
    2956:	68 94       	set
    2958:	83 f8       	bld	r8, 3
  }
//----------------------------------- Check mINT has interrupt capability
  const int8_t itPin = digitalPinToInterrupt (mINT) ;
    295a:	ea 81       	ldd	r30, Y+2	; 0x02
    295c:	fb 81       	ldd	r31, Y+3	; 0x03
    295e:	87 81       	ldd	r24, Z+7	; 0x07
    2960:	82 30       	cpi	r24, 0x02	; 2
    2962:	29 f0       	breq	.+10     	; 0x296e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x76>
    2964:	83 30       	cpi	r24, 0x03	; 3
    2966:	29 f4       	brne	.+10     	; 0x2972 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x7a>
    2968:	f1 e0       	ldi	r31, 0x01	; 1
    296a:	f9 83       	std	Y+1, r31	; 0x01
    296c:	74 c3       	rjmp	.+1768   	; 0x3056 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x75e>
    296e:	19 82       	std	Y+1, r1	; 0x01
    2970:	72 c3       	rjmp	.+1764   	; 0x3056 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x75e>
  if ((mINT != 255) && (itPin == NOT_AN_INTERRUPT)) {
    2972:	8f 3f       	cpi	r24, 0xFF	; 255
    2974:	09 f0       	breq	.+2      	; 0x2978 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x80>
    2976:	68 c3       	rjmp	.+1744   	; 0x3048 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x750>
//----------------------------------- Check interrupt service routine is not null
  if ((mINT != 255) && (inInterruptServiceRoutine == NULL)) {
    errorCode |= kISRIsNull ;
  }
//----------------------------------- Check consistency between ISR and INT pin
  if ((mINT == 255) && (inInterruptServiceRoutine != NULL)) {
    2978:	21 14       	cp	r2, r1
    297a:	31 04       	cpc	r3, r1
    297c:	09 f4       	brne	.+2      	; 0x2980 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x88>
    297e:	61 c3       	rjmp	.+1730   	; 0x3042 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x74a>
    errorCode |= kISRNotNullAndNoIntPin ;
    2980:	68 94       	set
    2982:	a3 f8       	bld	r10, 3
    2984:	2f ef       	ldi	r18, 0xFF	; 255
    2986:	29 83       	std	Y+1, r18	; 0x01
  }
//----------------------------------- Check TXQ size is <= 32
  if (inSettings.mControllerTXQSize > 32) {
    2988:	f8 01       	movw	r30, r16
    298a:	80 a1       	ldd	r24, Z+32	; 0x20
    298c:	81 32       	cpi	r24, 0x21	; 33
    298e:	10 f0       	brcs	.+4      	; 0x2994 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x9c>
    errorCode |= kControllerTXQSizeGreaterThan32 ;
    2990:	68 94       	set
    2992:	97 f8       	bld	r9, 7
  }
//----------------------------------- Check TXQ priority is <= 31
  if (inSettings.mControllerTXQBufferPriority > 31) {
    2994:	f8 01       	movw	r30, r16
    2996:	82 a1       	ldd	r24, Z+34	; 0x22
    2998:	80 32       	cpi	r24, 0x20	; 32
    299a:	10 f0       	brcs	.+4      	; 0x29a0 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xa8>
    errorCode |= kControllerTXQPriorityGreaterThan31 ;
    299c:	68 94       	set
    299e:	95 f8       	bld	r9, 5
  }
//----------------------------------- Check controller receive FIFO size is 1 ... 32
  if (inSettings.mControllerReceiveFIFOSize == 0) {
    29a0:	f8 01       	movw	r30, r16
    29a2:	87 a1       	ldd	r24, Z+39	; 0x27
    29a4:	81 11       	cpse	r24, r1
    29a6:	03 c0       	rjmp	.+6      	; 0x29ae <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xb6>
    errorCode |= kControllerReceiveFIFOSizeIsZero ;
    29a8:	68 94       	set
    29aa:	90 f8       	bld	r9, 0
    29ac:	04 c0       	rjmp	.+8      	; 0x29b6 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xbe>
  }else if (inSettings.mControllerReceiveFIFOSize > 32) {
    29ae:	81 32       	cpi	r24, 0x21	; 33
    29b0:	10 f0       	brcs	.+4      	; 0x29b6 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xbe>
    errorCode |= kControllerReceiveFIFOSizeGreaterThan32 ;
    29b2:	68 94       	set
    29b4:	91 f8       	bld	r9, 1
  }
//----------------------------------- Check controller transmit FIFO size is 1 ... 32
  if (inSettings.mControllerTransmitFIFOSize == 0) {
    29b6:	f8 01       	movw	r30, r16
    29b8:	84 8d       	ldd	r24, Z+28	; 0x1c
    29ba:	81 11       	cpse	r24, r1
    29bc:	03 c0       	rjmp	.+6      	; 0x29c4 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xcc>
    errorCode |= kControllerTransmitFIFOSizeIsZero ;
    29be:	68 94       	set
    29c0:	92 f8       	bld	r9, 2
    29c2:	04 c0       	rjmp	.+8      	; 0x29cc <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xd4>
  }else if (inSettings.mControllerTransmitFIFOSize > 32) {
    29c4:	81 32       	cpi	r24, 0x21	; 33
    29c6:	10 f0       	brcs	.+4      	; 0x29cc <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xd4>
    errorCode |= kControllerTransmitFIFOSizeGreaterThan32 ;
    29c8:	68 94       	set
    29ca:	93 f8       	bld	r9, 3
  }
//----------------------------------- Check Transmit FIFO priority is <= 31
  if (inSettings.mControllerTransmitFIFOPriority > 31) {
    29cc:	f8 01       	movw	r30, r16
    29ce:	86 8d       	ldd	r24, Z+30	; 0x1e
    29d0:	80 32       	cpi	r24, 0x20	; 32
    29d2:	10 f0       	brcs	.+4      	; 0x29d8 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xe0>
    errorCode |= kControllerTransmitFIFOPriorityGreaterThan31 ;
    29d4:	68 94       	set
    29d6:	96 f8       	bld	r9, 6
  }
//----------------------------------- Check MCP2517FD controller RAM usage is <= 2048 bytes
  if (inSettings.ramUsage () > 2048) {
    29d8:	c8 01       	movw	r24, r16
    29da:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <_ZNK18ACAN2517FDSettings8ramUsageEv>
    29de:	61 30       	cpi	r22, 0x01	; 1
    29e0:	78 40       	sbci	r23, 0x08	; 8
    29e2:	81 05       	cpc	r24, r1
    29e4:	91 05       	cpc	r25, r1
    29e6:	10 f0       	brcs	.+4      	; 0x29ec <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xf4>
    errorCode |= kControllerRamUsageGreaterThan2048 ;
    29e8:	68 94       	set
    29ea:	94 f8       	bld	r9, 4
  }
//----------------------------------- Check Filter definition
  if (inFilters.filterCount () > 32) {
    29ec:	f6 01       	movw	r30, r12
    29ee:	80 81       	ld	r24, Z
    29f0:	81 32       	cpi	r24, 0x21	; 33
    29f2:	10 f0       	brcs	.+4      	; 0x29f8 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x100>
    errorCode |= kMoreThan32Filters ;
    29f4:	68 94       	set
    29f6:	87 f8       	bld	r8, 7
  }
  if (inFilters.filterStatus () != ACAN2517FDFilters::kFiltersOk) {
    29f8:	f6 01       	movw	r30, r12
    29fa:	85 81       	ldd	r24, Z+5	; 0x05
    29fc:	88 23       	and	r24, r24
    29fe:	11 f0       	breq	.+4      	; 0x2a04 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x10c>
    errorCode |= kFilterDefinitionError ;
    2a00:	68 94       	set
    2a02:	86 f8       	bld	r8, 6
  }
//----------------------------------- Check TDCO value
  if ((inSettings.mTDCO > 63) || (inSettings.mTDCO < -64)) {
    2a04:	f8 01       	movw	r30, r16
    2a06:	84 89       	ldd	r24, Z+20	; 0x14
    2a08:	80 5c       	subi	r24, 0xC0	; 192
    2a0a:	87 ff       	sbrs	r24, 7
    2a0c:	03 c0       	rjmp	.+6      	; 0x2a14 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x11c>
    errorCode |= kInvalidTDCO ;
    2a0e:	68 94       	set
    2a10:	a4 f8       	bld	r10, 4
    2a12:	bc c0       	rjmp	.+376    	; 0x2b8c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x294>
  }
//----------------------------------- INT, CS pins, reset MCP2517FD
  if (errorCode == 0) {
    2a14:	81 14       	cp	r8, r1
    2a16:	91 04       	cpc	r9, r1
    2a18:	a1 04       	cpc	r10, r1
    2a1a:	b1 04       	cpc	r11, r1
    2a1c:	09 f0       	breq	.+2      	; 0x2a20 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x128>
    2a1e:	b6 c0       	rjmp	.+364    	; 0x2b8c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x294>
    if (mINT != 255) { // 255 means interrupt is not used (thanks to Tyler Lewis)
    2a20:	ea 81       	ldd	r30, Y+2	; 0x02
    2a22:	fb 81       	ldd	r31, Y+3	; 0x03
    2a24:	87 81       	ldd	r24, Z+7	; 0x07
    2a26:	8f 3f       	cpi	r24, 0xFF	; 255
    2a28:	19 f0       	breq	.+6      	; 0x2a30 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x138>
      pinMode (mINT, INPUT_PULLUP) ;
    2a2a:	62 e0       	ldi	r22, 0x02	; 2
    2a2c:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <pinMode>
    }
    deassertCS () ;
    2a30:	8a 81       	ldd	r24, Y+2	; 0x02
    2a32:	9b 81       	ldd	r25, Y+3	; 0x03
    2a34:	0e 94 45 10 	call	0x208a	; 0x208a <_ZN10ACAN2517FD10deassertCSEv>
    pinMode (mCS, OUTPUT) ;
    2a38:	61 e0       	ldi	r22, 0x01	; 1
    2a3a:	ea 81       	ldd	r30, Y+2	; 0x02
    2a3c:	fb 81       	ldd	r31, Y+3	; 0x03
    2a3e:	86 81       	ldd	r24, Z+6	; 0x06
    2a40:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <pinMode>
  //----------------------------------- Set SPI clock to 1 MHz
    mSPISettings = SPISettings (1000UL * 1000, MSBFIRST, SPI_MODE0) ;
    2a44:	81 e5       	ldi	r24, 0x51	; 81
    2a46:	ea 81       	ldd	r30, Y+2	; 0x02
    2a48:	fb 81       	ldd	r31, Y+3	; 0x03
    2a4a:	82 83       	std	Z+2, r24	; 0x02
    2a4c:	13 82       	std	Z+3, r1	; 0x03
  //----------------------------------- Request configuration mode
    bool wait = true ;
    const uint32_t deadline = millis () + 2 ; // Wait (2 ms max) until the configuration mode is reached
    2a4e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <millis>
    2a52:	2b 01       	movw	r4, r22
    2a54:	3c 01       	movw	r6, r24
    2a56:	f2 e0       	ldi	r31, 0x02	; 2
    2a58:	4f 0e       	add	r4, r31
    2a5a:	51 1c       	adc	r5, r1
    2a5c:	61 1c       	adc	r6, r1
    2a5e:	71 1c       	adc	r7, r1
    while (wait) {
      writeRegister8 (CON_REGISTER + 3, 0x04 | (1 << 3)) ; // Request configuration mode, abort all transmissions
    2a60:	4c e0       	ldi	r20, 0x0C	; 12
    2a62:	63 e0       	ldi	r22, 0x03	; 3
    2a64:	70 e0       	ldi	r23, 0x00	; 0
    2a66:	8a 81       	ldd	r24, Y+2	; 0x02
    2a68:	9b 81       	ldd	r25, Y+3	; 0x03
    2a6a:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <_ZN10ACAN2517FD14writeRegister8Ejh>
      const uint8_t actualMode = (readRegister8 (CON_REGISTER + 2) >> 5) & 0x07 ;
    2a6e:	62 e0       	ldi	r22, 0x02	; 2
    2a70:	70 e0       	ldi	r23, 0x00	; 0
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	9b 81       	ldd	r25, Y+3	; 0x03
    2a76:	0e 94 0b 14 	call	0x2816	; 0x2816 <_ZN10ACAN2517FD13readRegister8Ej>
      wait = actualMode != 0x04 ;
      if (wait && (millis () >= deadline)) {
    2a7a:	82 95       	swap	r24
    2a7c:	86 95       	lsr	r24
    2a7e:	87 70       	andi	r24, 0x07	; 7
    2a80:	84 30       	cpi	r24, 0x04	; 4
    2a82:	59 f0       	breq	.+22     	; 0x2a9a <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x1a2>
    2a84:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <millis>
    2a88:	64 15       	cp	r22, r4
    2a8a:	75 05       	cpc	r23, r5
    2a8c:	86 05       	cpc	r24, r6
    2a8e:	97 05       	cpc	r25, r7
    2a90:	38 f3       	brcs	.-50     	; 0x2a60 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x168>
        errorCode |= kRequestedConfigurationModeTimeOut ;
    2a92:	81 2c       	mov	r8, r1
    2a94:	91 2c       	mov	r9, r1
    2a96:	54 01       	movw	r10, r8
    2a98:	83 94       	inc	r8
        wait = false ;
      }
    }
  //----------------------------------- Reset MCP2517FD (always use a 1 MHz clock)
    reset2517FD () ;
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a9e:	0e 94 65 14 	call	0x28ca	; 0x28ca <_ZN10ACAN2517FD11reset2517FDEv>
    2aa2:	90 e2       	ldi	r25, 0x20	; 32
    2aa4:	e9 2e       	mov	r14, r25
    2aa6:	f1 2c       	mov	r15, r1
    2aa8:	41 2c       	mov	r4, r1
    2aaa:	51 2c       	mov	r5, r1
    2aac:	32 01       	movw	r6, r4
    2aae:	43 94       	inc	r4
  }
//----------------------------------- Check SPI connection is on (with a 1 MHz clock)
// We write and the read back MCP2517FD RAM at address 0x400
  for (uint32_t i=1 ; (i != 0) && (errorCode == 0) ; i <<= 1) {
    2ab0:	81 14       	cp	r8, r1
    2ab2:	91 04       	cpc	r9, r1
    2ab4:	a1 04       	cpc	r10, r1
    2ab6:	b1 04       	cpc	r11, r1
    2ab8:	09 f0       	breq	.+2      	; 0x2abc <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x1c4>
    2aba:	68 c0       	rjmp	.+208    	; 0x2b8c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x294>
    const uint16_t RAM_WORD_ADDRESS = 0x400 ;
    writeRegister32 (RAM_WORD_ADDRESS, i) ;
    2abc:	a3 01       	movw	r20, r6
    2abe:	92 01       	movw	r18, r4
    2ac0:	60 e0       	ldi	r22, 0x00	; 0
    2ac2:	74 e0       	ldi	r23, 0x04	; 4
    2ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ac8:	0e 94 24 14 	call	0x2848	; 0x2848 <_ZN10ACAN2517FD15writeRegister32Ejm>
    const uint32_t readBackValue = readRegister32 (RAM_WORD_ADDRESS) ;
    2acc:	60 e0       	ldi	r22, 0x00	; 0
    2ace:	74 e0       	ldi	r23, 0x04	; 4
    2ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad4:	0e 94 46 14 	call	0x288c	; 0x288c <_ZN10ACAN2517FD14readRegister32Ej>
    if (readBackValue != i) {
    2ad8:	64 15       	cp	r22, r4
    2ada:	75 05       	cpc	r23, r5
    2adc:	86 05       	cpc	r24, r6
    2ade:	97 05       	cpc	r25, r7
    2ae0:	29 f0       	breq	.+10     	; 0x2aec <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x1f4>
      errorCode = kReadBackErrorWith1MHzSPIClock ;
    2ae2:	82 e0       	ldi	r24, 0x02	; 2
    2ae4:	88 2e       	mov	r8, r24
    2ae6:	91 2c       	mov	r9, r1
    2ae8:	a1 2c       	mov	r10, r1
    2aea:	b1 2c       	mov	r11, r1
  //----------------------------------- Reset MCP2517FD (always use a 1 MHz clock)
    reset2517FD () ;
  }
//----------------------------------- Check SPI connection is on (with a 1 MHz clock)
// We write and the read back MCP2517FD RAM at address 0x400
  for (uint32_t i=1 ; (i != 0) && (errorCode == 0) ; i <<= 1) {
    2aec:	44 0c       	add	r4, r4
    2aee:	55 1c       	adc	r5, r5
    2af0:	66 1c       	adc	r6, r6
    2af2:	77 1c       	adc	r7, r7
    2af4:	21 e0       	ldi	r18, 0x01	; 1
    2af6:	e2 1a       	sub	r14, r18
    2af8:	f1 08       	sbc	r15, r1
    2afa:	d1 f6       	brne	.-76     	; 0x2ab0 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x1b8>
  }
//----------------------------------- Now, set internal clock with OSC register
//     Bit 0: (rw) 1 --> 10xPLL
//     Bit 4: (rw) 0 --> SCLK is divided by 1, 1 --> SCLK is divided by 2
//     Bits 5-6: Clock Output Divisor
  if (errorCode == 0) {
    2afc:	81 14       	cp	r8, r1
    2afe:	91 04       	cpc	r9, r1
    2b00:	a1 04       	cpc	r10, r1
    2b02:	b1 04       	cpc	r11, r1
    2b04:	09 f0       	breq	.+2      	; 0x2b08 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x210>
    2b06:	42 c0       	rjmp	.+132    	; 0x2b8c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x294>
    2b08:	f8 01       	movw	r30, r16
    2b0a:	80 81       	ld	r24, Z
    2b0c:	81 50       	subi	r24, 0x01	; 1
    2b0e:	87 30       	cpi	r24, 0x07	; 7
    2b10:	50 f4       	brcc	.+20     	; 0x2b26 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x22e>
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	fc 01       	movw	r30, r24
    2b16:	eb 58       	subi	r30, 0x8B	; 139
    2b18:	fd 4f       	sbci	r31, 0xFD	; 253
    2b1a:	f0 80       	ld	r15, Z
    2b1c:	fc 01       	movw	r30, r24
    2b1e:	e2 59       	subi	r30, 0x92	; 146
    2b20:	fd 4f       	sbci	r31, 0xFD	; 253
    2b22:	40 81       	ld	r20, Z
    2b24:	02 c0       	rjmp	.+4      	; 0x2b2a <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x232>
    2b26:	40 e0       	ldi	r20, 0x00	; 0
    2b28:	f1 2c       	mov	r15, r1
      break ;
    case ACAN2517FDSettings::OSC_4MHz10xPLL :
      pll = 1 ; // Enable 10x PLL
      break ;
    }
    osc |= pll ;
    2b2a:	4f 29       	or	r20, r15
    if (inSettings.mCLKOPin != ACAN2517FDSettings::SOF) {
    2b2c:	f8 01       	movw	r30, r16
    2b2e:	80 8d       	ldd	r24, Z+24	; 0x18
    2b30:	84 30       	cpi	r24, 0x04	; 4
    2b32:	29 f0       	breq	.+10     	; 0x2b3e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x246>
      osc |= ((uint8_t) inSettings.mCLKOPin) << 5 ;
    2b34:	f0 e2       	ldi	r31, 0x20	; 32
    2b36:	8f 9f       	mul	r24, r31
    2b38:	c0 01       	movw	r24, r0
    2b3a:	11 24       	eor	r1, r1
    2b3c:	48 2b       	or	r20, r24
    }
    writeRegister8 (OSC_REGISTER, osc) ; // DS20005688B, page 16
    2b3e:	60 e0       	ldi	r22, 0x00	; 0
    2b40:	7e e0       	ldi	r23, 0x0E	; 14
    2b42:	8a 81       	ldd	r24, Y+2	; 0x02
    2b44:	9b 81       	ldd	r25, Y+3	; 0x03
    2b46:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <_ZN10ACAN2517FD14writeRegister8Ejh>
  //--- Wait for PLL is ready (wait max 2 ms)
    if (pll != 0) {
    2b4a:	ff 20       	and	r15, r15
    2b4c:	f9 f0       	breq	.+62     	; 0x2b8c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x294>
      bool wait = true ;
      const uint32_t deadline = millis () + 2 ;
    2b4e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <millis>
    2b52:	2b 01       	movw	r4, r22
    2b54:	3c 01       	movw	r6, r24
    2b56:	22 e0       	ldi	r18, 0x02	; 2
    2b58:	42 0e       	add	r4, r18
    2b5a:	51 1c       	adc	r5, r1
    2b5c:	61 1c       	adc	r6, r1
    2b5e:	71 1c       	adc	r7, r1
      while (wait) {
        wait = (readRegister8 (OSC_REGISTER + 1) & 0x1) == 0 ;  // DS20005688B, page 16
    2b60:	61 e0       	ldi	r22, 0x01	; 1
    2b62:	7e e0       	ldi	r23, 0x0E	; 14
    2b64:	8a 81       	ldd	r24, Y+2	; 0x02
    2b66:	9b 81       	ldd	r25, Y+3	; 0x03
    2b68:	0e 94 0b 14 	call	0x2816	; 0x2816 <_ZN10ACAN2517FD13readRegister8Ej>
        if (wait && (millis () >= deadline)) {
    2b6c:	98 2f       	mov	r25, r24
    2b6e:	91 70       	andi	r25, 0x01	; 1
    2b70:	80 fd       	sbrc	r24, 0
    2b72:	78 c2       	rjmp	.+1264   	; 0x3064 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x76c>
    2b74:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <millis>
    2b78:	64 15       	cp	r22, r4
    2b7a:	75 05       	cpc	r23, r5
    2b7c:	86 05       	cpc	r24, r6
    2b7e:	97 05       	cpc	r25, r7
    2b80:	78 f3       	brcs	.-34     	; 0x2b60 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x268>
          errorCode = kX10PLLNotReadyWithin1MS ;
    2b82:	81 2c       	mov	r8, r1
    2b84:	91 2c       	mov	r9, r1
    2b86:	a2 e0       	ldi	r26, 0x02	; 2
    2b88:	aa 2e       	mov	r10, r26
    2b8a:	b1 2c       	mov	r11, r1
        }
      }
    }
  }
//----------------------------------- Set full speed clock
  mSPISettings = SPISettings (inSettings.sysClock () / 2, MSBFIRST, SPI_MODE0) ;
    2b8c:	f8 01       	movw	r30, r16
    2b8e:	41 80       	ldd	r4, Z+1	; 0x01
    2b90:	52 80       	ldd	r5, Z+2	; 0x02
    2b92:	63 80       	ldd	r6, Z+3	; 0x03
    2b94:	74 80       	ldd	r7, Z+4	; 0x04
    2b96:	76 94       	lsr	r7
    2b98:	67 94       	ror	r6
    2b9a:	57 94       	ror	r5
    2b9c:	47 94       	ror	r4
    2b9e:	40 e0       	ldi	r20, 0x00	; 0
    2ba0:	52 e1       	ldi	r21, 0x12	; 18
    2ba2:	6a e7       	ldi	r22, 0x7A	; 122
    2ba4:	70 e0       	ldi	r23, 0x00	; 0
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
    2ba8:	44 16       	cp	r4, r20
    2baa:	55 06       	cpc	r5, r21
    2bac:	66 06       	cpc	r6, r22
    2bae:	77 06       	cpc	r7, r23
    2bb0:	40 f4       	brcc	.+16     	; 0x2bc2 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x2ca>
        clockSetting /= 2;
    2bb2:	76 95       	lsr	r23
    2bb4:	67 95       	ror	r22
    2bb6:	57 95       	ror	r21
    2bb8:	47 95       	ror	r20
        clockDiv++;
    2bba:	9f 5f       	subi	r25, 0xFF	; 255
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
    2bbc:	96 30       	cpi	r25, 0x06	; 6
    2bbe:	a1 f7       	brne	.-24     	; 0x2ba8 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x2b0>
      }
    }

    // Compensate for the duplicate fosc/64
    if (clockDiv == 6)
    clockDiv = 7;
    2bc0:	97 e0       	ldi	r25, 0x07	; 7

    // Invert the SPI2X bit
    clockDiv ^= 0x1;
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	89 27       	eor	r24, r25
    2bc6:	98 2f       	mov	r25, r24
    2bc8:	90 6a       	ori	r25, 0xA0	; 160
    2bca:	96 95       	lsr	r25
    2bcc:	ea 81       	ldd	r30, Y+2	; 0x02
    2bce:	fb 81       	ldd	r31, Y+3	; 0x03
    2bd0:	92 83       	std	Z+2, r25	; 0x02
    2bd2:	81 70       	andi	r24, 0x01	; 1
    2bd4:	83 83       	std	Z+3, r24	; 0x03
    2bd6:	60 e2       	ldi	r22, 0x20	; 32
    2bd8:	e6 2e       	mov	r14, r22
    2bda:	f1 2c       	mov	r15, r1
//----------------------------------- Checking SPI connection is on (with a full speed clock)
//    We write and read back 2517 RAM at address 0x400
  for (uint32_t i=1 ; (i != 0) && (errorCode == 0) ; i <<= 1) {
    2bdc:	41 2c       	mov	r4, r1
    2bde:	51 2c       	mov	r5, r1
    2be0:	32 01       	movw	r6, r4
    2be2:	43 94       	inc	r4
    2be4:	81 14       	cp	r8, r1
    2be6:	91 04       	cpc	r9, r1
    2be8:	a1 04       	cpc	r10, r1
    2bea:	b1 04       	cpc	r11, r1
    2bec:	09 f0       	breq	.+2      	; 0x2bf0 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x2f8>
    2bee:	3e c2       	rjmp	.+1148   	; 0x306c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x774>
    writeRegister32 (0x400, i) ;
    2bf0:	a3 01       	movw	r20, r6
    2bf2:	92 01       	movw	r18, r4
    2bf4:	60 e0       	ldi	r22, 0x00	; 0
    2bf6:	74 e0       	ldi	r23, 0x04	; 4
    2bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    2bfc:	0e 94 24 14 	call	0x2848	; 0x2848 <_ZN10ACAN2517FD15writeRegister32Ejm>
    const uint32_t readBackValue = readRegister32 (0x400) ;
    2c00:	60 e0       	ldi	r22, 0x00	; 0
    2c02:	74 e0       	ldi	r23, 0x04	; 4
    2c04:	8a 81       	ldd	r24, Y+2	; 0x02
    2c06:	9b 81       	ldd	r25, Y+3	; 0x03
    2c08:	0e 94 46 14 	call	0x288c	; 0x288c <_ZN10ACAN2517FD14readRegister32Ej>
    if (readBackValue != i) {
    2c0c:	64 15       	cp	r22, r4
    2c0e:	75 05       	cpc	r23, r5
    2c10:	86 05       	cpc	r24, r6
    2c12:	97 05       	cpc	r25, r7
    2c14:	29 f0       	breq	.+10     	; 0x2c20 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x328>
      errorCode = kReadBackErrorWithFullSpeedSPIClock ;
    2c16:	81 2c       	mov	r8, r1
    2c18:	91 2c       	mov	r9, r1
    2c1a:	54 e0       	ldi	r21, 0x04	; 4
    2c1c:	a5 2e       	mov	r10, r21
    2c1e:	b1 2c       	mov	r11, r1
  }
//----------------------------------- Set full speed clock
  mSPISettings = SPISettings (inSettings.sysClock () / 2, MSBFIRST, SPI_MODE0) ;
//----------------------------------- Checking SPI connection is on (with a full speed clock)
//    We write and read back 2517 RAM at address 0x400
  for (uint32_t i=1 ; (i != 0) && (errorCode == 0) ; i <<= 1) {
    2c20:	44 0c       	add	r4, r4
    2c22:	55 1c       	adc	r5, r5
    2c24:	66 1c       	adc	r6, r6
    2c26:	77 1c       	adc	r7, r7
    2c28:	f1 e0       	ldi	r31, 0x01	; 1
    2c2a:	ef 1a       	sub	r14, r31
    2c2c:	f1 08       	sbc	r15, r1
    2c2e:	d1 f6       	brne	.-76     	; 0x2be4 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x2ec>
    if (readBackValue != i) {
      errorCode = kReadBackErrorWithFullSpeedSPIClock ;
    }
  }
//----------------------------------- Install interrupt, configure external interrupt
  if (errorCode == 0) {
    2c30:	81 14       	cp	r8, r1
    2c32:	91 04       	cpc	r9, r1
    2c34:	a1 04       	cpc	r10, r1
    2c36:	b1 04       	cpc	r11, r1
    2c38:	09 f0       	breq	.+2      	; 0x2c3c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x344>
    2c3a:	18 c2       	rjmp	.+1072   	; 0x306c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x774>
  //----------------------------------- Configure transmit and receive buffers
    mDriverTransmitBuffer.initWithSize (inSettings.mDriverTransmitFIFOSize) ;
    2c3c:	f8 01       	movw	r30, r16
    2c3e:	42 8d       	ldd	r20, Z+26	; 0x1a
    2c40:	53 8d       	ldd	r21, Z+27	; 0x1b
    2c42:	60 e0       	ldi	r22, 0x00	; 0
    2c44:	70 e0       	ldi	r23, 0x00	; 0
    2c46:	8a 81       	ldd	r24, Y+2	; 0x02
    2c48:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4a:	86 96       	adiw	r24, 0x26	; 38
    2c4c:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_ZN12ACANFDBuffer12initWithSizeEm>
    mDriverReceiveBuffer.initWithSize (inSettings.mDriverReceiveFIFOSize) ;
    2c50:	f8 01       	movw	r30, r16
    2c52:	44 a1       	ldd	r20, Z+36	; 0x24
    2c54:	55 a1       	ldd	r21, Z+37	; 0x25
    2c56:	60 e0       	ldi	r22, 0x00	; 0
    2c58:	70 e0       	ldi	r23, 0x00	; 0
    2c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c5e:	40 96       	adiw	r24, 0x10	; 16
    2c60:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_ZN12ACANFDBuffer12initWithSizeEm>
  //----------------------------------- Reset RAM
    for (uint16_t address = 0x400 ; address < 0xC00 ; address += 4) {
    2c64:	e1 2c       	mov	r14, r1
    2c66:	34 e0       	ldi	r19, 0x04	; 4
    2c68:	f3 2e       	mov	r15, r19
      writeRegister32 (address, 0) ;
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	a9 01       	movw	r20, r18
    2c70:	b7 01       	movw	r22, r14
    2c72:	8a 81       	ldd	r24, Y+2	; 0x02
    2c74:	9b 81       	ldd	r25, Y+3	; 0x03
    2c76:	0e 94 24 14 	call	0x2848	; 0x2848 <_ZN10ACAN2517FD15writeRegister32Ejm>
  if (errorCode == 0) {
  //----------------------------------- Configure transmit and receive buffers
    mDriverTransmitBuffer.initWithSize (inSettings.mDriverTransmitFIFOSize) ;
    mDriverReceiveBuffer.initWithSize (inSettings.mDriverReceiveFIFOSize) ;
  //----------------------------------- Reset RAM
    for (uint16_t address = 0x400 ; address < 0xC00 ; address += 4) {
    2c7a:	f4 e0       	ldi	r31, 0x04	; 4
    2c7c:	ef 0e       	add	r14, r31
    2c7e:	f1 1c       	adc	r15, r1
    2c80:	e1 14       	cp	r14, r1
    2c82:	2c e0       	ldi	r18, 0x0C	; 12
    2c84:	f2 06       	cpc	r15, r18
    2c86:	89 f7       	brne	.-30     	; 0x2c6a <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x372>
      writeRegister32 (address, 0) ;
    }
  //----------------------------------- Configure CLKO pin
    uint8_t data8 = 0x03 ; // Respect PM1-PM0 default values
    if (inSettings.mCLKOPin == ACAN2517FDSettings::SOF) {
    2c88:	f8 01       	movw	r30, r16
    2c8a:	80 8d       	ldd	r24, Z+24	; 0x18
    2c8c:	84 30       	cpi	r24, 0x04	; 4
    2c8e:	11 f4       	brne	.+4      	; 0x2c94 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x39c>
      data8 |= 1 << 5 ; // SOF
    2c90:	43 e2       	ldi	r20, 0x23	; 35
    2c92:	01 c0       	rjmp	.+2      	; 0x2c96 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x39e>
  //----------------------------------- Reset RAM
    for (uint16_t address = 0x400 ; address < 0xC00 ; address += 4) {
      writeRegister32 (address, 0) ;
    }
  //----------------------------------- Configure CLKO pin
    uint8_t data8 = 0x03 ; // Respect PM1-PM0 default values
    2c94:	43 e0       	ldi	r20, 0x03	; 3
    if (inSettings.mCLKOPin == ACAN2517FDSettings::SOF) {
      data8 |= 1 << 5 ; // SOF
    }
    if (inSettings.mTXCANIsOpenDrain) {
    2c96:	f8 01       	movw	r30, r16
    2c98:	85 89       	ldd	r24, Z+21	; 0x15
    2c9a:	81 11       	cpse	r24, r1
      data8 |= 1 << 4 ; // TXCANOD
    2c9c:	40 61       	ori	r20, 0x10	; 16
    }
    if (inSettings.mINTIsOpenDrain) {
    2c9e:	f8 01       	movw	r30, r16
    2ca0:	86 89       	ldd	r24, Z+22	; 0x16
    2ca2:	81 11       	cpse	r24, r1
      data8 |= 1 << 6 ; // INTOD
    2ca4:	40 64       	ori	r20, 0x40	; 64
    }
    writeRegister8 (IOCON_REGISTER + 3, data8) ; // DS20005688B, page 24
    2ca6:	67 e0       	ldi	r22, 0x07	; 7
    2ca8:	7e e0       	ldi	r23, 0x0E	; 14
    2caa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cac:	9b 81       	ldd	r25, Y+3	; 0x03
    2cae:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <_ZN10ACAN2517FD14writeRegister8Ejh>
  //----------------------------------- Configure ISO CRC Enable bit
    data8 = 1 << 6 ; // PXEDIS <-- 1
    if (inSettings.mISOCRCEnabled) {
    2cb2:	f8 01       	movw	r30, r16
    2cb4:	87 89       	ldd	r24, Z+23	; 0x17
    2cb6:	88 23       	and	r24, r24
    2cb8:	11 f0       	breq	.+4      	; 0x2cbe <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x3c6>
      data8 |= 1 << 5 ; //  Enable ISO CRC in CAN FD Frames bit
    2cba:	40 e6       	ldi	r20, 0x60	; 96
    2cbc:	01 c0       	rjmp	.+2      	; 0x2cc0 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x3c8>
    if (inSettings.mINTIsOpenDrain) {
      data8 |= 1 << 6 ; // INTOD
    }
    writeRegister8 (IOCON_REGISTER + 3, data8) ; // DS20005688B, page 24
  //----------------------------------- Configure ISO CRC Enable bit
    data8 = 1 << 6 ; // PXEDIS <-- 1
    2cbe:	40 e4       	ldi	r20, 0x40	; 64
    if (inSettings.mISOCRCEnabled) {
      data8 |= 1 << 5 ; //  Enable ISO CRC in CAN FD Frames bit
    }
    writeRegister8 (CON_REGISTER, data8) ; // DS20005688B, page 24
    2cc0:	60 e0       	ldi	r22, 0x00	; 0
    2cc2:	70 e0       	ldi	r23, 0x00	; 0
    2cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc8:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <_ZN10ACAN2517FD14writeRegister8Ejh>
  //----------------------------------- Configure DTC (DS20005688B, page 29)
    uint32_t data32 = 1UL << 25 ; // Enable Edge Filtering during Bus Integration state bit (added in 1.1.4)
    data32 |= 1UL << 17 ; // Auto TDC
    const uint32_t TCDO = uint32_t (inSettings.mTDCO) & 0x7F ;
    data32 |= TCDO << 8 ;
    writeRegister32 (TDC_REGISTER, data32) ;
    2ccc:	f8 01       	movw	r30, r16
    2cce:	24 89       	ldd	r18, Z+20	; 0x14
    2cd0:	2f 77       	andi	r18, 0x7F	; 127
    2cd2:	82 2f       	mov	r24, r18
    2cd4:	22 0f       	add	r18, r18
    2cd6:	99 0b       	sbc	r25, r25
    2cd8:	aa 0b       	sbc	r26, r26
    2cda:	bb 0b       	sbc	r27, r27
    2cdc:	ba 2f       	mov	r27, r26
    2cde:	a9 2f       	mov	r26, r25
    2ce0:	98 2f       	mov	r25, r24
    2ce2:	88 27       	eor	r24, r24
    2ce4:	9c 01       	movw	r18, r24
    2ce6:	ad 01       	movw	r20, r26
    2ce8:	42 60       	ori	r20, 0x02	; 2
    2cea:	52 60       	ori	r21, 0x02	; 2
    2cec:	6c e0       	ldi	r22, 0x0C	; 12
    2cee:	70 e0       	ldi	r23, 0x00	; 0
    2cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf4:	0e 94 24 14 	call	0x2848	; 0x2848 <_ZN10ACAN2517FD15writeRegister32Ejm>
  //----------------------------------- Configure TXQ
    data8 = inSettings.mControllerTXQBufferRetransmissionAttempts ;
    2cf8:	f8 01       	movw	r30, r16
    2cfa:	43 a1       	ldd	r20, Z+35	; 0x23
    data8 <<= 5 ;
    2cfc:	42 95       	swap	r20
    2cfe:	44 0f       	add	r20, r20
    2d00:	40 7e       	andi	r20, 0xE0	; 224
    data8 |= inSettings.mControllerTXQBufferPriority ;
    writeRegister8 (TXQCON_REGISTER + 2, data8) ; // DS20005688B, page 48
    2d02:	82 a1       	ldd	r24, Z+34	; 0x22
    2d04:	48 2b       	or	r20, r24
    2d06:	62 e5       	ldi	r22, 0x52	; 82
    2d08:	70 e0       	ldi	r23, 0x00	; 0
    2d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d0e:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <_ZN10ACAN2517FD14writeRegister8Ejh>
  // Bit 5-7: Payload Size bits
  // Bit 4-0: TXQ size
    mUsesTXQ = inSettings.mControllerTXQSize > 0 ;
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	f8 01       	movw	r30, r16
    2d16:	90 a1       	ldd	r25, Z+32	; 0x20
    2d18:	91 11       	cpse	r25, r1
    2d1a:	01 c0       	rjmp	.+2      	; 0x2d1e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x426>
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	ea 81       	ldd	r30, Y+2	; 0x02
    2d20:	fb 81       	ldd	r31, Y+3	; 0x03
    2d22:	80 87       	std	Z+8, r24	; 0x08
    data8 = inSettings.mControllerTXQSize - 1 ;
    data8 |= inSettings.mControllerTXQBufferPayload << 5 ; // Payload
    2d24:	f8 01       	movw	r30, r16
    2d26:	81 a1       	ldd	r24, Z+33	; 0x21
    2d28:	f0 e2       	ldi	r31, 0x20	; 32
    2d2a:	8f 9f       	mul	r24, r31
    2d2c:	c0 01       	movw	r24, r0
    2d2e:	11 24       	eor	r1, r1
    2d30:	f8 01       	movw	r30, r16
    2d32:	40 a1       	ldd	r20, Z+32	; 0x20
    2d34:	41 50       	subi	r20, 0x01	; 1
    2d36:	48 2b       	or	r20, r24
    writeRegister8 (TXQCON_REGISTER + 3, data8) ; // DS20005688B, page 48
    2d38:	63 e5       	ldi	r22, 0x53	; 83
    2d3a:	70 e0       	ldi	r23, 0x00	; 0
    2d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d40:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <_ZN10ACAN2517FD14writeRegister8Ejh>
    mTXQBufferPayload = ACAN2517FDSettings::objectSizeForPayload (inSettings.mControllerTXQBufferPayload) ;
    2d44:	f8 01       	movw	r30, r16
    2d46:	81 a1       	ldd	r24, Z+33	; 0x21
    2d48:	0e 94 56 1d 	call	0x3aac	; 0x3aac <_ZN18ACAN2517FDSettings20objectSizeForPayloadENS_11PayloadSizeE>
    2d4c:	ea 81       	ldd	r30, Y+2	; 0x02
    2d4e:	fb 81       	ldd	r31, Y+3	; 0x03
    2d50:	64 87       	std	Z+12, r22	; 0x0c
  //----------------------------------- Configure TXQ and TEF
  // Bit 4: Enable Transmit Queue bit ---> 1: Enable TXQ and reserves space in RAM
  // Bit 3: Store in Transmit Event FIFO bit ---> 0: Don’t save transmitted messages in TEF
  // Bit 0: RTXAT ---> 1: Enable CiFIFOCONm.TXAT to control retransmission attempts
    data8 = 0x01 ; // Enable RTXAT to limit retransmissions (Flole)
    data8 |= mUsesTXQ ? (1 << 4) : 0x00 ; // Bug fix in 1.1.4 (thanks to danielhenz)
    2d52:	80 85       	ldd	r24, Z+8	; 0x08
    2d54:	81 11       	cpse	r24, r1
    2d56:	02 c0       	rjmp	.+4      	; 0x2d5c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x464>
    2d58:	40 e0       	ldi	r20, 0x00	; 0
    2d5a:	01 c0       	rjmp	.+2      	; 0x2d5e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x466>
    2d5c:	40 e1       	ldi	r20, 0x10	; 16
    writeRegister8 (CON_REGISTER + 2, data8) ; // DS20005688B, page 24
    2d5e:	41 60       	ori	r20, 0x01	; 1
    2d60:	62 e0       	ldi	r22, 0x02	; 2
    2d62:	70 e0       	ldi	r23, 0x00	; 0
    2d64:	8a 81       	ldd	r24, Y+2	; 0x02
    2d66:	9b 81       	ldd	r25, Y+3	; 0x03
    2d68:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <_ZN10ACAN2517FD14writeRegister8Ejh>
  //----------------------------------- Configure RX FIFO (FIFOCON, DS20005688B, page 52)
    data8 = inSettings.mControllerReceiveFIFOSize - 1 ; // Set receive FIFO size
    data8 |= inSettings.mControllerReceiveFIFOPayload << 5 ; // Payload
    2d6c:	f8 01       	movw	r30, r16
    2d6e:	86 a1       	ldd	r24, Z+38	; 0x26
    2d70:	f0 e2       	ldi	r31, 0x20	; 32
    2d72:	8f 9f       	mul	r24, r31
    2d74:	c0 01       	movw	r24, r0
    2d76:	11 24       	eor	r1, r1
    2d78:	f8 01       	movw	r30, r16
    2d7a:	47 a1       	ldd	r20, Z+39	; 0x27
    2d7c:	41 50       	subi	r20, 0x01	; 1
    2d7e:	48 2b       	or	r20, r24
    writeRegister8 (FIFOCON_REGISTER (RECEIVE_FIFO_INDEX) + 3, data8) ;
    2d80:	6f e5       	ldi	r22, 0x5F	; 95
    2d82:	70 e0       	ldi	r23, 0x00	; 0
    2d84:	8a 81       	ldd	r24, Y+2	; 0x02
    2d86:	9b 81       	ldd	r25, Y+3	; 0x03
    2d88:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <_ZN10ACAN2517FD14writeRegister8Ejh>
    data8  = 1 << 0 ; // Interrupt Enabled for FIFO not Empty (TFNRFNIE)
    data8 |= 1 << 3 ; // Interrupt Enabled for FIFO Overflow (RXOVIE)
    writeRegister8 (FIFOCON_REGISTER (RECEIVE_FIFO_INDEX), data8) ;
    2d8c:	49 e0       	ldi	r20, 0x09	; 9
    2d8e:	6c e5       	ldi	r22, 0x5C	; 92
    2d90:	70 e0       	ldi	r23, 0x00	; 0
    2d92:	8a 81       	ldd	r24, Y+2	; 0x02
    2d94:	9b 81       	ldd	r25, Y+3	; 0x03
    2d96:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <_ZN10ACAN2517FD14writeRegister8Ejh>
    mReceiveFIFOPayload = ACAN2517FDSettings::objectSizeForPayload (inSettings.mControllerReceiveFIFOPayload) ;
    2d9a:	f8 01       	movw	r30, r16
    2d9c:	86 a1       	ldd	r24, Z+38	; 0x26
    2d9e:	0e 94 56 1d 	call	0x3aac	; 0x3aac <_ZN18ACAN2517FDSettings20objectSizeForPayloadENS_11PayloadSizeE>
    2da2:	ea 81       	ldd	r30, Y+2	; 0x02
    2da4:	fb 81       	ldd	r31, Y+3	; 0x03
    2da6:	65 87       	std	Z+13, r22	; 0x0d
  //----------------------------------- Configure TX FIFO (FIFOCON, DS20005688B, page 52)
    data8 = inSettings.mControllerTransmitFIFORetransmissionAttempts ;
    2da8:	f8 01       	movw	r30, r16
    2daa:	47 8d       	ldd	r20, Z+31	; 0x1f
    data8 <<= 5 ;
    2dac:	42 95       	swap	r20
    2dae:	44 0f       	add	r20, r20
    2db0:	40 7e       	andi	r20, 0xE0	; 224
    data8 |= inSettings.mControllerTransmitFIFOPriority ;
    writeRegister8 (FIFOCON_REGISTER (TRANSMIT_FIFO_INDEX) + 2, data8) ;
    2db2:	86 8d       	ldd	r24, Z+30	; 0x1e
    2db4:	48 2b       	or	r20, r24
    2db6:	6a e6       	ldi	r22, 0x6A	; 106
    2db8:	70 e0       	ldi	r23, 0x00	; 0
    2dba:	8a 81       	ldd	r24, Y+2	; 0x02
    2dbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2dbe:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <_ZN10ACAN2517FD14writeRegister8Ejh>
    data8 = inSettings.mControllerTransmitFIFOSize - 1 ; // Set transmit FIFO size
    data8 |= inSettings.mControllerTransmitFIFOPayload << 5 ; // Payload
    2dc2:	f8 01       	movw	r30, r16
    2dc4:	85 8d       	ldd	r24, Z+29	; 0x1d
    2dc6:	f0 e2       	ldi	r31, 0x20	; 32
    2dc8:	8f 9f       	mul	r24, r31
    2dca:	c0 01       	movw	r24, r0
    2dcc:	11 24       	eor	r1, r1
    2dce:	f8 01       	movw	r30, r16
    2dd0:	44 8d       	ldd	r20, Z+28	; 0x1c
    2dd2:	41 50       	subi	r20, 0x01	; 1
    2dd4:	48 2b       	or	r20, r24
    writeRegister8 (FIFOCON_REGISTER (TRANSMIT_FIFO_INDEX) + 3, data8) ;
    2dd6:	6b e6       	ldi	r22, 0x6B	; 107
    2dd8:	70 e0       	ldi	r23, 0x00	; 0
    2dda:	8a 81       	ldd	r24, Y+2	; 0x02
    2ddc:	9b 81       	ldd	r25, Y+3	; 0x03
    2dde:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <_ZN10ACAN2517FD14writeRegister8Ejh>
    data8 = 1 << 7 ; // FIFO is a Tx FIFO
    data8 |= 1 << 4 ; // TXATIE ---> 1: Enable Transmit Attempts Exhausted Interrupt
    writeRegister8 (FIFOCON_REGISTER (TRANSMIT_FIFO_INDEX), data8) ;
    2de2:	40 e9       	ldi	r20, 0x90	; 144
    2de4:	68 e6       	ldi	r22, 0x68	; 104
    2de6:	70 e0       	ldi	r23, 0x00	; 0
    2de8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dea:	9b 81       	ldd	r25, Y+3	; 0x03
    2dec:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <_ZN10ACAN2517FD14writeRegister8Ejh>
    mTransmitFIFOPayload = ACAN2517FDSettings::objectSizeForPayload (inSettings.mControllerTransmitFIFOPayload) ;
    2df0:	f8 01       	movw	r30, r16
    2df2:	85 8d       	ldd	r24, Z+29	; 0x1d
    2df4:	0e 94 56 1d 	call	0x3aac	; 0x3aac <_ZN18ACAN2517FDSettings20objectSizeForPayloadENS_11PayloadSizeE>
    2df8:	ea 81       	ldd	r30, Y+2	; 0x02
    2dfa:	fb 81       	ldd	r31, Y+3	; 0x03
    2dfc:	63 87       	std	Z+11, r22	; 0x0b
  //----------------------------------- Configure receive filters
    uint8_t filterIndex = 0 ;
    ACAN2517FDFilters::Filter * filter = inFilters.mFirstFilter ;
    2dfe:	f6 01       	movw	r30, r12
    2e00:	e1 80       	ldd	r14, Z+1	; 0x01
    2e02:	f2 80       	ldd	r15, Z+2	; 0x02
    2e04:	80 81       	ld	r24, Z
    mCallBackFunctionArray = new ACANFDCallBackRoutine [inFilters.filterCount ()] ;
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	88 0f       	add	r24, r24
    2e0a:	99 1f       	adc	r25, r25
    2e0c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_Znaj>
    2e10:	ea 81       	ldd	r30, Y+2	; 0x02
    2e12:	fb 81       	ldd	r31, Y+3	; 0x03
    2e14:	91 83       	std	Z+1, r25	; 0x01
    2e16:	80 83       	st	Z, r24
    data8 = 1 << 7 ; // FIFO is a Tx FIFO
    data8 |= 1 << 4 ; // TXATIE ---> 1: Enable Transmit Attempts Exhausted Interrupt
    writeRegister8 (FIFOCON_REGISTER (TRANSMIT_FIFO_INDEX), data8) ;
    mTransmitFIFOPayload = ACAN2517FDSettings::objectSizeForPayload (inSettings.mControllerTransmitFIFOPayload) ;
  //----------------------------------- Configure receive filters
    uint8_t filterIndex = 0 ;
    2e18:	51 2c       	mov	r5, r1
    ACAN2517FDFilters::Filter * filter = inFilters.mFirstFilter ;
    mCallBackFunctionArray = new ACANFDCallBackRoutine [inFilters.filterCount ()] ;
    while (NULL != filter) {
    2e1a:	e1 14       	cp	r14, r1
    2e1c:	f1 04       	cpc	r15, r1
    2e1e:	e1 f1       	breq	.+120    	; 0x2e98 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x5a0>
      mCallBackFunctionArray [filterIndex] = filter->mCallBackRoutine ;
    2e20:	f7 01       	movw	r30, r14
    2e22:	42 85       	ldd	r20, Z+10	; 0x0a
    2e24:	53 85       	ldd	r21, Z+11	; 0x0b
    2e26:	c5 2c       	mov	r12, r5
    2e28:	d1 2c       	mov	r13, r1
    2e2a:	c6 01       	movw	r24, r12
    2e2c:	88 0f       	add	r24, r24
    2e2e:	99 1f       	adc	r25, r25
    2e30:	ea 81       	ldd	r30, Y+2	; 0x02
    2e32:	fb 81       	ldd	r31, Y+3	; 0x03
    2e34:	20 81       	ld	r18, Z
    2e36:	31 81       	ldd	r19, Z+1	; 0x01
    2e38:	f9 01       	movw	r30, r18
    2e3a:	e8 0f       	add	r30, r24
    2e3c:	f9 1f       	adc	r31, r25
    2e3e:	51 83       	std	Z+1, r21	; 0x01
    2e40:	40 83       	st	Z, r20
}

//······················································································································

static uint16_t MASK_REGISTER (const uint16_t inFilterIndex) { // 0 ... 31 (DS20005688B, page 61)
  return 0x1F4 + 8 * inFilterIndex ;
    2e42:	36 01       	movw	r6, r12
    2e44:	f3 e0       	ldi	r31, 0x03	; 3
    2e46:	66 0c       	add	r6, r6
    2e48:	77 1c       	adc	r7, r7
    2e4a:	fa 95       	dec	r31
    2e4c:	e1 f7       	brne	.-8      	; 0x2e46 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x54e>
    uint8_t filterIndex = 0 ;
    ACAN2517FDFilters::Filter * filter = inFilters.mFirstFilter ;
    mCallBackFunctionArray = new ACANFDCallBackRoutine [inFilters.filterCount ()] ;
    while (NULL != filter) {
      mCallBackFunctionArray [filterIndex] = filter->mCallBackRoutine ;
      writeRegister32 (MASK_REGISTER (filterIndex), filter->mFilterMask) ; // DS20005688B, page 61
    2e4e:	f7 01       	movw	r30, r14
    2e50:	22 81       	ldd	r18, Z+2	; 0x02
    2e52:	33 81       	ldd	r19, Z+3	; 0x03
    2e54:	44 81       	ldd	r20, Z+4	; 0x04
    2e56:	55 81       	ldd	r21, Z+5	; 0x05
    2e58:	b3 01       	movw	r22, r6
    2e5a:	6c 50       	subi	r22, 0x0C	; 12
    2e5c:	7e 4f       	sbci	r23, 0xFE	; 254
    2e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e60:	9b 81       	ldd	r25, Y+3	; 0x03
    2e62:	0e 94 24 14 	call	0x2848	; 0x2848 <_ZN10ACAN2517FD15writeRegister32Ejm>
      writeRegister32 (FLTOBJ_REGISTER (filterIndex), filter->mAcceptanceFilter) ; // DS20005688B, page 60
    2e66:	f7 01       	movw	r30, r14
    2e68:	26 81       	ldd	r18, Z+6	; 0x06
    2e6a:	37 81       	ldd	r19, Z+7	; 0x07
    2e6c:	40 85       	ldd	r20, Z+8	; 0x08
    2e6e:	51 85       	ldd	r21, Z+9	; 0x09
    2e70:	b3 01       	movw	r22, r6
    2e72:	60 51       	subi	r22, 0x10	; 16
    2e74:	7e 4f       	sbci	r23, 0xFE	; 254
    2e76:	8a 81       	ldd	r24, Y+2	; 0x02
    2e78:	9b 81       	ldd	r25, Y+3	; 0x03
    2e7a:	0e 94 24 14 	call	0x2848	; 0x2848 <_ZN10ACAN2517FD15writeRegister32Ejm>
      data8 = 1 << 7 ; // Filter is enabled
      data8 |= 1 ; // Message matching filter is stored in FIFO1
      writeRegister8 (FLTCON_REGISTER (filterIndex), data8) ; // DS20005688B, page 58
    2e7e:	b6 01       	movw	r22, r12
    2e80:	60 53       	subi	r22, 0x30	; 48
    2e82:	7e 4f       	sbci	r23, 0xFE	; 254
    2e84:	41 e8       	ldi	r20, 0x81	; 129
    2e86:	8a 81       	ldd	r24, Y+2	; 0x02
    2e88:	9b 81       	ldd	r25, Y+3	; 0x03
    2e8a:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <_ZN10ACAN2517FD14writeRegister8Ejh>
      filter = filter->mNextFilter ;
    2e8e:	f7 01       	movw	r30, r14
    2e90:	e0 80       	ld	r14, Z
    2e92:	f1 80       	ldd	r15, Z+1	; 0x01
      filterIndex += 1 ;
    2e94:	53 94       	inc	r5
    mTransmitFIFOPayload = ACAN2517FDSettings::objectSizeForPayload (inSettings.mControllerTransmitFIFOPayload) ;
  //----------------------------------- Configure receive filters
    uint8_t filterIndex = 0 ;
    ACAN2517FDFilters::Filter * filter = inFilters.mFirstFilter ;
    mCallBackFunctionArray = new ACANFDCallBackRoutine [inFilters.filterCount ()] ;
    while (NULL != filter) {
    2e96:	c1 cf       	rjmp	.-126    	; 0x2e1a <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x522>
      filterIndex += 1 ;
    }
  //----------------------------------- Activate interrupts (INT, DS20005688B page 34)
    data8  = (1 << 1) ; // Receive FIFO Interrupt Enable
    data8 |= (1 << 0) ; // Transmit FIFO Interrupt Enable
    writeRegister8 (INT_REGISTER + 2, data8) ;
    2e98:	43 e0       	ldi	r20, 0x03	; 3
    2e9a:	6e e1       	ldi	r22, 0x1E	; 30
    2e9c:	70 e0       	ldi	r23, 0x00	; 0
    2e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ea2:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <_ZN10ACAN2517FD14writeRegister8Ejh>
    data8  = (1 << 2) ; // TXATIE ---> 1: Transmit Attempt Interrupt Enable bit
    writeRegister8 (INT_REGISTER + 3, data8) ;
    2ea6:	44 e0       	ldi	r20, 0x04	; 4
    2ea8:	6f e1       	ldi	r22, 0x1F	; 31
    2eaa:	70 e0       	ldi	r23, 0x00	; 0
    2eac:	8a 81       	ldd	r24, Y+2	; 0x02
    2eae:	9b 81       	ldd	r25, Y+3	; 0x03
    2eb0:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <_ZN10ACAN2517FD14writeRegister8Ejh>
  //  bits 23-16: TSEG1 - 1
  //  bit 15: unused
  //  bits 14-8: TSEG2 - 1
  //  bit 7: unused
  //  bits 6-0: SJW - 1
    uint32_t data = inSettings.mBitRatePrescaler - 1 ;
    2eb4:	f8 01       	movw	r30, r16
    2eb6:	25 85       	ldd	r18, Z+13	; 0x0d
    2eb8:	36 85       	ldd	r19, Z+14	; 0x0e
    2eba:	21 50       	subi	r18, 0x01	; 1
    2ebc:	31 09       	sbc	r19, r1
    2ebe:	c9 01       	movw	r24, r18
    2ec0:	a0 e0       	ldi	r26, 0x00	; 0
    2ec2:	b0 e0       	ldi	r27, 0x00	; 0
    data <<= 8 ;
    2ec4:	cc 24       	eor	r12, r12
    2ec6:	d8 2e       	mov	r13, r24
    2ec8:	e9 2e       	mov	r14, r25
    2eca:	fa 2e       	mov	r15, r26
    data |= inSettings.mArbitrationPhaseSegment1 - 1 ;
    2ecc:	27 85       	ldd	r18, Z+15	; 0x0f
    2ece:	30 89       	ldd	r19, Z+16	; 0x10
    2ed0:	21 50       	subi	r18, 0x01	; 1
    2ed2:	31 09       	sbc	r19, r1
    2ed4:	c9 01       	movw	r24, r18
    2ed6:	a0 e0       	ldi	r26, 0x00	; 0
    2ed8:	b0 e0       	ldi	r27, 0x00	; 0
    2eda:	8c 29       	or	r24, r12
    2edc:	9d 29       	or	r25, r13
    2ede:	ae 29       	or	r26, r14
    2ee0:	bf 29       	or	r27, r15
    data <<= 8 ;
    2ee2:	44 27       	eor	r20, r20
    2ee4:	58 2f       	mov	r21, r24
    2ee6:	69 2f       	mov	r22, r25
    2ee8:	7a 2f       	mov	r23, r26
    data |= inSettings.mArbitrationPhaseSegment2 - 1 ;
    2eea:	81 89       	ldd	r24, Z+17	; 0x11
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	01 97       	sbiw	r24, 0x01	; 1
    2ef0:	09 2e       	mov	r0, r25
    2ef2:	00 0c       	add	r0, r0
    2ef4:	aa 0b       	sbc	r26, r26
    2ef6:	bb 0b       	sbc	r27, r27
    2ef8:	84 2b       	or	r24, r20
    2efa:	95 2b       	or	r25, r21
    2efc:	a6 2b       	or	r26, r22
    2efe:	b7 2b       	or	r27, r23
    data <<= 8 ;
    2f00:	ba 2f       	mov	r27, r26
    2f02:	a9 2f       	mov	r26, r25
    2f04:	98 2f       	mov	r25, r24
    2f06:	88 27       	eor	r24, r24
    data |= inSettings.mArbitrationSJW - 1 ;
    writeRegister32 (NBTCFG_REGISTER, data);
    2f08:	22 89       	ldd	r18, Z+18	; 0x12
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	21 50       	subi	r18, 0x01	; 1
    2f0e:	31 09       	sbc	r19, r1
    2f10:	a9 01       	movw	r20, r18
    2f12:	33 0f       	add	r19, r19
    2f14:	66 0b       	sbc	r22, r22
    2f16:	77 0b       	sbc	r23, r23
    2f18:	9a 01       	movw	r18, r20
    2f1a:	ab 01       	movw	r20, r22
    2f1c:	28 2b       	or	r18, r24
    2f1e:	39 2b       	or	r19, r25
    2f20:	4a 2b       	or	r20, r26
    2f22:	5b 2b       	or	r21, r27
    2f24:	64 e0       	ldi	r22, 0x04	; 4
    2f26:	70 e0       	ldi	r23, 0x00	; 0
    2f28:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f2c:	0e 94 24 14 	call	0x2848	; 0x2848 <_ZN10ACAN2517FD15writeRegister32Ejm>
  //  bits 20-16: TSEG1 - 1
  //  bits 15-12: unused
  //  bits 11-8: TSEG2 - 1
  //  bits 7-4: unused
  //  bits 3-0: SJW - 1
    mHasDataBitRate = inSettings.mDataBitRateFactor != ::DataBitRateFactor::x1 ;
    2f30:	f8 01       	movw	r30, r16
    2f32:	81 85       	ldd	r24, Z+9	; 0x09
    2f34:	91 e0       	ldi	r25, 0x01	; 1
    2f36:	81 30       	cpi	r24, 0x01	; 1
    2f38:	09 f4       	brne	.+2      	; 0x2f3c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x644>
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	ea 81       	ldd	r30, Y+2	; 0x02
    2f3e:	fb 81       	ldd	r31, Y+3	; 0x03
    2f40:	92 87       	std	Z+10, r25	; 0x0a
    if (mHasDataBitRate) {
    2f42:	81 30       	cpi	r24, 0x01	; 1
    2f44:	09 f4       	brne	.+2      	; 0x2f48 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x650>
    2f46:	3f c0       	rjmp	.+126    	; 0x2fc6 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x6ce>
      data = inSettings.mBitRatePrescaler - 1 ;
    2f48:	f8 01       	movw	r30, r16
    2f4a:	25 85       	ldd	r18, Z+13	; 0x0d
    2f4c:	36 85       	ldd	r19, Z+14	; 0x0e
    2f4e:	21 50       	subi	r18, 0x01	; 1
    2f50:	31 09       	sbc	r19, r1
    2f52:	c9 01       	movw	r24, r18
    2f54:	a0 e0       	ldi	r26, 0x00	; 0
    2f56:	b0 e0       	ldi	r27, 0x00	; 0
      data <<= 8 ;
    2f58:	cc 24       	eor	r12, r12
    2f5a:	d8 2e       	mov	r13, r24
    2f5c:	e9 2e       	mov	r14, r25
    2f5e:	fa 2e       	mov	r15, r26
      data |= inSettings.mDataPhaseSegment1 - 1 ;
    2f60:	22 85       	ldd	r18, Z+10	; 0x0a
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	21 50       	subi	r18, 0x01	; 1
    2f66:	31 09       	sbc	r19, r1
    2f68:	c9 01       	movw	r24, r18
    2f6a:	33 0f       	add	r19, r19
    2f6c:	aa 0b       	sbc	r26, r26
    2f6e:	bb 0b       	sbc	r27, r27
    2f70:	8c 29       	or	r24, r12
    2f72:	9d 29       	or	r25, r13
    2f74:	ae 29       	or	r26, r14
    2f76:	bf 29       	or	r27, r15
      data <<= 8 ;
    2f78:	44 27       	eor	r20, r20
    2f7a:	58 2f       	mov	r21, r24
    2f7c:	69 2f       	mov	r22, r25
    2f7e:	7a 2f       	mov	r23, r26
      data |= inSettings.mDataPhaseSegment2 - 1 ;
    2f80:	83 85       	ldd	r24, Z+11	; 0x0b
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	01 97       	sbiw	r24, 0x01	; 1
    2f86:	09 2e       	mov	r0, r25
    2f88:	00 0c       	add	r0, r0
    2f8a:	aa 0b       	sbc	r26, r26
    2f8c:	bb 0b       	sbc	r27, r27
    2f8e:	84 2b       	or	r24, r20
    2f90:	95 2b       	or	r25, r21
    2f92:	a6 2b       	or	r26, r22
    2f94:	b7 2b       	or	r27, r23
      data <<= 8 ;
    2f96:	ba 2f       	mov	r27, r26
    2f98:	a9 2f       	mov	r26, r25
    2f9a:	98 2f       	mov	r25, r24
    2f9c:	88 27       	eor	r24, r24
      data |= inSettings.mDataSJW - 1 ;
      writeRegister32 (DBTCFG_REGISTER, data) ;
    2f9e:	24 85       	ldd	r18, Z+12	; 0x0c
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	21 50       	subi	r18, 0x01	; 1
    2fa4:	31 09       	sbc	r19, r1
    2fa6:	a9 01       	movw	r20, r18
    2fa8:	33 0f       	add	r19, r19
    2faa:	66 0b       	sbc	r22, r22
    2fac:	77 0b       	sbc	r23, r23
    2fae:	9a 01       	movw	r18, r20
    2fb0:	ab 01       	movw	r20, r22
    2fb2:	28 2b       	or	r18, r24
    2fb4:	39 2b       	or	r19, r25
    2fb6:	4a 2b       	or	r20, r26
    2fb8:	5b 2b       	or	r21, r27
    2fba:	68 e0       	ldi	r22, 0x08	; 8
    2fbc:	70 e0       	ldi	r23, 0x00	; 0
    2fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc2:	0e 94 24 14 	call	0x2848	; 0x2848 <_ZN10ACAN2517FD15writeRegister32Ejm>
    }
  //----------------------------------- Request mode (CON_REGISTER + 3, DS20005688B, page 24)
  //  bits 7-4: Transmit Bandwith Sharing Bits ---> 0
  //  bit 3: Abort All Pending Transmissions bit --> 0
    mTXBWS_RequestedMode = inSettings.mRequestedMode | (TXBWS << 4) ;
    2fc6:	f8 01       	movw	r30, r16
    2fc8:	41 8d       	ldd	r20, Z+25	; 0x19
    2fca:	ea 81       	ldd	r30, Y+2	; 0x02
    2fcc:	fb 81       	ldd	r31, Y+3	; 0x03
    2fce:	46 87       	std	Z+14, r20	; 0x0e
    writeRegister8 (CON_REGISTER + 3, mTXBWS_RequestedMode);
    2fd0:	63 e0       	ldi	r22, 0x03	; 3
    2fd2:	70 e0       	ldi	r23, 0x00	; 0
    2fd4:	cf 01       	movw	r24, r30
    2fd6:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <_ZN10ACAN2517FD14writeRegister8Ejh>
  //----------------------------------- Wait (10 ms max) until requested mode is reached
    bool wait = true ;
    const uint32_t deadline = millis () + 10 ;
    2fda:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <millis>
    2fde:	6b 01       	movw	r12, r22
    2fe0:	7c 01       	movw	r14, r24
    2fe2:	fa e0       	ldi	r31, 0x0A	; 10
    2fe4:	cf 0e       	add	r12, r31
    2fe6:	d1 1c       	adc	r13, r1
    2fe8:	e1 1c       	adc	r14, r1
    2fea:	f1 1c       	adc	r15, r1
    while (wait) {
     const uint8_t actualMode = (readRegister8 (CON_REGISTER + 2) >> 5) & 0x07 ;
    2fec:	62 e0       	ldi	r22, 0x02	; 2
    2fee:	70 e0       	ldi	r23, 0x00	; 0
    2ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff4:	0e 94 0b 14 	call	0x2816	; 0x2816 <_ZN10ACAN2517FD13readRegister8Ej>
      wait = actualMode != inSettings.mRequestedMode ;
      if (wait && (millis () >= deadline)) {
    2ff8:	82 95       	swap	r24
    2ffa:	86 95       	lsr	r24
    2ffc:	87 70       	andi	r24, 0x07	; 7
    2ffe:	f8 01       	movw	r30, r16
    3000:	91 8d       	ldd	r25, Z+25	; 0x19
    3002:	89 17       	cp	r24, r25
    3004:	59 f0       	breq	.+22     	; 0x301c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x724>
    3006:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <millis>
    300a:	6c 15       	cp	r22, r12
    300c:	7d 05       	cpc	r23, r13
    300e:	8e 05       	cpc	r24, r14
    3010:	9f 05       	cpc	r25, r15
    3012:	60 f3       	brcs	.-40     	; 0x2fec <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x6f4>
        errorCode |= kRequestedModeTimeOut ;
    3014:	81 2c       	mov	r8, r1
    3016:	91 2c       	mov	r9, r1
    3018:	54 01       	movw	r10, r8
    301a:	a3 94       	inc	r10
      }
    }
    #ifdef ARDUINO_ARCH_ESP32
      xTaskCreate (myESP32Task, "ACAN2517Handler", 1024, this, 256, NULL) ;
    #endif
    if (mINT != 255) { // 255 means interrupt is not used
    301c:	ea 81       	ldd	r30, Y+2	; 0x02
    301e:	fb 81       	ldd	r31, Y+3	; 0x03
    3020:	87 81       	ldd	r24, Z+7	; 0x07
    3022:	8f 3f       	cpi	r24, 0xFF	; 255
    3024:	49 f0       	breq	.+18     	; 0x3038 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x740>
      #ifdef ARDUINO_ARCH_ESP32
        attachInterrupt (itPin, inInterruptServiceRoutine, FALLING) ;
      #else
        attachInterrupt (itPin, inInterruptServiceRoutine, LOW) ; // Thank to Flole998
    3026:	40 e0       	ldi	r20, 0x00	; 0
    3028:	50 e0       	ldi	r21, 0x00	; 0
    302a:	b1 01       	movw	r22, r2
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <attachInterrupt>
        mSPI.usingInterrupt (itPin) ; // usingInterrupt is not implemented in Arduino ESP32
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <_ZN8SPIClass14usingInterruptEh>

    /*
     * If you begin() multiple times without constructor,
     * mHardwareTxFIFOFull = true will block the transmitter.
     */
    mHardwareTxFIFOFull = false;
    3038:	ea 81       	ldd	r30, Y+2	; 0x02
    303a:	fb 81       	ldd	r31, Y+3	; 0x03
    303c:	11 86       	std	Z+9, r1	; 0x09
    mHardwareReceiveBufferOverflowCount = 0;
    303e:	17 86       	std	Z+15, r1	; 0x0f
  }
//---
  return errorCode ;
    3040:	15 c0       	rjmp	.+42     	; 0x306c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x774>
    3042:	ff ef       	ldi	r31, 0xFF	; 255
    3044:	f9 83       	std	Y+1, r31	; 0x01
    3046:	a0 cc       	rjmp	.-1728   	; 0x2988 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x90>
  }
  if (inSettings.CANBitSettingConsistency () != 0) {
    errorCode |= kInconsistentBitRateSettings ;
  }
//----------------------------------- Check mINT has interrupt capability
  const int8_t itPin = digitalPinToInterrupt (mINT) ;
    3048:	2f ef       	ldi	r18, 0xFF	; 255
    304a:	29 83       	std	Y+1, r18	; 0x01
  if ((mINT != 255) && (itPin == NOT_AN_INTERRUPT)) {
    errorCode = kINTPinIsNotAnInterrupt ;
    304c:	80 e1       	ldi	r24, 0x10	; 16
    304e:	88 2e       	mov	r8, r24
    3050:	91 2c       	mov	r9, r1
    3052:	a1 2c       	mov	r10, r1
    3054:	b1 2c       	mov	r11, r1
  }
//----------------------------------- Check interrupt service routine is not null
  if ((mINT != 255) && (inInterruptServiceRoutine == NULL)) {
    3056:	21 14       	cp	r2, r1
    3058:	31 04       	cpc	r3, r1
    305a:	09 f0       	breq	.+2      	; 0x305e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x766>
    305c:	95 cc       	rjmp	.-1750   	; 0x2988 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x90>
    errorCode |= kISRIsNull ;
    305e:	68 94       	set
    3060:	85 f8       	bld	r8, 5
    3062:	92 cc       	rjmp	.-1756   	; 0x2988 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x90>
    writeRegister8 (OSC_REGISTER, osc) ; // DS20005688B, page 16
  //--- Wait for PLL is ready (wait max 2 ms)
    if (pll != 0) {
      bool wait = true ;
      const uint32_t deadline = millis () + 2 ;
      while (wait) {
    3064:	91 30       	cpi	r25, 0x01	; 1
    3066:	09 f0       	breq	.+2      	; 0x306a <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x772>
    3068:	7b cd       	rjmp	.-1290   	; 0x2b60 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x268>
    306a:	90 cd       	rjmp	.-1248   	; 0x2b8c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x294>
    mHardwareTxFIFOFull = false;
    mHardwareReceiveBufferOverflowCount = 0;
  }
//---
  return errorCode ;
}
    306c:	c5 01       	movw	r24, r10
    306e:	b4 01       	movw	r22, r8
    3070:	0f 90       	pop	r0
    3072:	0f 90       	pop	r0
    3074:	0f 90       	pop	r0
    3076:	df 91       	pop	r29
    3078:	cf 91       	pop	r28
    307a:	1f 91       	pop	r17
    307c:	0f 91       	pop	r16
    307e:	ff 90       	pop	r15
    3080:	ef 90       	pop	r14
    3082:	df 90       	pop	r13
    3084:	cf 90       	pop	r12
    3086:	bf 90       	pop	r11
    3088:	af 90       	pop	r10
    308a:	9f 90       	pop	r9
    308c:	8f 90       	pop	r8
    308e:	7f 90       	pop	r7
    3090:	6f 90       	pop	r6
    3092:	5f 90       	pop	r5
    3094:	4f 90       	pop	r4
    3096:	3f 90       	pop	r3
    3098:	2f 90       	pop	r2
    309a:	08 95       	ret

0000309c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvE>:
}

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FD::begin (const ACAN2517FDSettings & inSettings,
                            void (* inInterruptServiceRoutine) (void)) {
    309c:	cf 92       	push	r12
    309e:	df 92       	push	r13
    30a0:	ef 92       	push	r14
    30a2:	ff 92       	push	r15
    30a4:	0f 93       	push	r16
    30a6:	1f 93       	push	r17
    30a8:	cf 93       	push	r28
    30aa:	df 93       	push	r29
    30ac:	cd b7       	in	r28, 0x3d	; 61
    30ae:	de b7       	in	r29, 0x3e	; 62
    30b0:	27 97       	sbiw	r28, 0x07	; 7
    30b2:	0f b6       	in	r0, 0x3f	; 63
    30b4:	f8 94       	cli
    30b6:	de bf       	out	0x3e, r29	; 62
    30b8:	0f be       	out	0x3f, r0	; 63
    30ba:	cd bf       	out	0x3d, r28	; 61
    30bc:	8c 01       	movw	r16, r24
    30be:	7b 01       	movw	r14, r22
    30c0:	6a 01       	movw	r12, r20

//······················································································································
//   CONSTRUCTOR
//······················································································································

  public: ACAN2517FDFilters (void) {}
    30c2:	19 82       	std	Y+1, r1	; 0x01
    30c4:	1b 82       	std	Y+3, r1	; 0x03
    30c6:	1a 82       	std	Y+2, r1	; 0x02
    30c8:	1d 82       	std	Y+5, r1	; 0x05
    30ca:	1c 82       	std	Y+4, r1	; 0x04
    30cc:	1e 82       	std	Y+6, r1	; 0x06
    30ce:	1f 82       	std	Y+7, r1	; 0x07
//······················································································································
//   RECEIVE FILTERS
//······················································································································

  public: void appendPassAllFilter (const ACANFDCallBackRoutine inCallBackRoutine) {  // Accept any frame
    Filter * f = new Filter (0, 0, inCallBackRoutine) ;
    30d0:	8c e0       	ldi	r24, 0x0C	; 12
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <_Znwj>
    30d8:	fc 01       	movw	r30, r24
                    const uint32_t inAcceptanceFilter,
                    const ACANFDCallBackRoutine inCallBackRoutine) :
    mNextFilter (NULL),
    mFilterMask (inFilterMask),
    mAcceptanceFilter (inAcceptanceFilter),
    mCallBackRoutine (inCallBackRoutine) {
    30da:	11 82       	std	Z+1, r1	; 0x01
    30dc:	10 82       	st	Z, r1
    30de:	12 82       	std	Z+2, r1	; 0x02
    30e0:	13 82       	std	Z+3, r1	; 0x03
    30e2:	14 82       	std	Z+4, r1	; 0x04
    30e4:	15 82       	std	Z+5, r1	; 0x05
    30e6:	16 82       	std	Z+6, r1	; 0x06
    30e8:	17 82       	std	Z+7, r1	; 0x07
    30ea:	10 86       	std	Z+8, r1	; 0x08
    30ec:	11 86       	std	Z+9, r1	; 0x09
    30ee:	13 86       	std	Z+11, r1	; 0x0b
    30f0:	12 86       	std	Z+10, r1	; 0x0a
//   RECEIVE FILTERS
//······················································································································

  public: void appendPassAllFilter (const ACANFDCallBackRoutine inCallBackRoutine) {  // Accept any frame
    Filter * f = new Filter (0, 0, inCallBackRoutine) ;
    if (mFirstFilter == NULL) {
    30f2:	8a 81       	ldd	r24, Y+2	; 0x02
    30f4:	9b 81       	ldd	r25, Y+3	; 0x03
    30f6:	89 2b       	or	r24, r25
    30f8:	19 f4       	brne	.+6      	; 0x3100 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvE+0x64>
      mFirstFilter = f ;
    30fa:	fb 83       	std	Y+3, r31	; 0x03
    30fc:	ea 83       	std	Y+2, r30	; 0x02
    30fe:	04 c0       	rjmp	.+8      	; 0x3108 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvE+0x6c>
    }else{
      mLastFilter->mNextFilter  = f ;
    3100:	ac 81       	ldd	r26, Y+4	; 0x04
    3102:	bd 81       	ldd	r27, Y+5	; 0x05
    3104:	ed 93       	st	X+, r30
    3106:	fc 93       	st	X, r31
    }
    mLastFilter = f ;
    3108:	fd 83       	std	Y+5, r31	; 0x05
    310a:	ec 83       	std	Y+4, r30	; 0x04
    mFilterCount += 1 ;
    310c:	89 81       	ldd	r24, Y+1	; 0x01
    310e:	8f 5f       	subi	r24, 0xFF	; 255
    3110:	89 83       	std	Y+1, r24	; 0x01
//--- Add pass-all filter
  ACAN2517FDFilters filters ;
  filters.appendPassAllFilter (NULL) ;
//---
  return begin (inSettings, inInterruptServiceRoutine, filters) ;
    3112:	9e 01       	movw	r18, r28
    3114:	2f 5f       	subi	r18, 0xFF	; 255
    3116:	3f 4f       	sbci	r19, 0xFF	; 255
    3118:	a6 01       	movw	r20, r12
    311a:	b7 01       	movw	r22, r14
    311c:	c8 01       	movw	r24, r16
    311e:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters>
    3122:	6b 01       	movw	r12, r22
    3124:	7c 01       	movw	r14, r24
//······················································································································
//   DESTRUCTOR
//······················································································································

  public: ~ ACAN2517FDFilters (void) {
    while (mFirstFilter != NULL) {
    3126:	8a 81       	ldd	r24, Y+2	; 0x02
    3128:	9b 81       	ldd	r25, Y+3	; 0x03
    312a:	00 97       	sbiw	r24, 0x00	; 0
    312c:	41 f0       	breq	.+16     	; 0x313e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvE+0xa2>
      Filter * next = mFirstFilter->mNextFilter ;
    312e:	fc 01       	movw	r30, r24
    3130:	00 81       	ld	r16, Z
    3132:	11 81       	ldd	r17, Z+1	; 0x01
      delete mFirstFilter ;
    3134:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <_ZdlPv>
      mFirstFilter = next ;
    3138:	1b 83       	std	Y+3, r17	; 0x03
    313a:	0a 83       	std	Y+2, r16	; 0x02
    313c:	f4 cf       	rjmp	.-24     	; 0x3126 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvE+0x8a>
}
    313e:	c7 01       	movw	r24, r14
    3140:	b6 01       	movw	r22, r12
    3142:	27 96       	adiw	r28, 0x07	; 7
    3144:	0f b6       	in	r0, 0x3f	; 63
    3146:	f8 94       	cli
    3148:	de bf       	out	0x3e, r29	; 62
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	cd bf       	out	0x3d, r28	; 61
    314e:	df 91       	pop	r29
    3150:	cf 91       	pop	r28
    3152:	1f 91       	pop	r17
    3154:	0f 91       	pop	r16
    3156:	ff 90       	pop	r15
    3158:	ef 90       	pop	r14
    315a:	df 90       	pop	r13
    315c:	cf 90       	pop	r12
    315e:	08 95       	ret

00003160 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm>:
uint32_t ACAN2517FDSettings::dataSamplePointFromBitStart (void) const {
  const uint32_t nominalTQCount = 1 /* Sync Seg */ + mDataPhaseSegment1 + mDataPhaseSegment2 ;
  const uint32_t samplePoint = 1 /* Sync Seg */ + mDataPhaseSegment1 ;
  const uint32_t partPerCent = 100 ;
  return (samplePoint * partPerCent) / nominalTQCount ;
}
    3160:	2f 92       	push	r2
    3162:	3f 92       	push	r3
    3164:	4f 92       	push	r4
    3166:	5f 92       	push	r5
    3168:	6f 92       	push	r6
    316a:	7f 92       	push	r7
    316c:	8f 92       	push	r8
    316e:	9f 92       	push	r9
    3170:	af 92       	push	r10
    3172:	bf 92       	push	r11
    3174:	cf 92       	push	r12
    3176:	df 92       	push	r13
    3178:	ef 92       	push	r14
    317a:	ff 92       	push	r15
    317c:	0f 93       	push	r16
    317e:	1f 93       	push	r17
    3180:	cf 93       	push	r28
    3182:	df 93       	push	r29
    3184:	cd b7       	in	r28, 0x3d	; 61
    3186:	de b7       	in	r29, 0x3e	; 62
    3188:	e2 97       	sbiw	r28, 0x32	; 50
    318a:	0f b6       	in	r0, 0x3f	; 63
    318c:	f8 94       	cli
    318e:	de bf       	out	0x3e, r29	; 62
    3190:	0f be       	out	0x3f, r0	; 63
    3192:	cd bf       	out	0x3d, r28	; 61
    3194:	9a a7       	std	Y+42, r25	; 0x2a
    3196:	89 a7       	std	Y+41, r24	; 0x29
    3198:	2d 87       	std	Y+13, r18	; 0x0d
    319a:	3e 87       	std	Y+14, r19	; 0x0e
    319c:	4f 87       	std	Y+15, r20	; 0x0f
    319e:	58 8b       	std	Y+16, r21	; 0x10
    31a0:	c9 a2       	std	Y+33, r12	; 0x21
    31a2:	da a2       	std	Y+34, r13	; 0x22
    31a4:	eb a2       	std	Y+35, r14	; 0x23
    31a6:	fc a2       	std	Y+36, r15	; 0x24
    31a8:	dc 01       	movw	r26, r24
    31aa:	6c 93       	st	X, r22
    31ac:	68 30       	cpi	r22, 0x08	; 8
    31ae:	78 f4       	brcc	.+30     	; 0x31ce <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x6e>
    31b0:	b4 e0       	ldi	r27, 0x04	; 4
    31b2:	6b 9f       	mul	r22, r27
    31b4:	f0 01       	movw	r30, r0
    31b6:	11 24       	eor	r1, r1
    31b8:	e4 57       	subi	r30, 0x74	; 116
    31ba:	fd 4f       	sbci	r31, 0xFD	; 253
    31bc:	20 81       	ld	r18, Z
    31be:	31 81       	ldd	r19, Z+1	; 0x01
    31c0:	42 81       	ldd	r20, Z+2	; 0x02
    31c2:	53 81       	ldd	r21, Z+3	; 0x03
    31c4:	29 83       	std	Y+1, r18	; 0x01
    31c6:	3a 83       	std	Y+2, r19	; 0x02
    31c8:	4b 83       	std	Y+3, r20	; 0x03
    31ca:	5c 83       	std	Y+4, r21	; 0x04
    31cc:	08 c0       	rjmp	.+16     	; 0x31de <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x7e>
    31ce:	40 e0       	ldi	r20, 0x00	; 0
    31d0:	5a e5       	ldi	r21, 0x5A	; 90
    31d2:	62 e6       	ldi	r22, 0x62	; 98
    31d4:	72 e0       	ldi	r23, 0x02	; 2
    31d6:	49 83       	std	Y+1, r20	; 0x01
    31d8:	5a 83       	std	Y+2, r21	; 0x02
    31da:	6b 83       	std	Y+3, r22	; 0x03
    31dc:	7c 83       	std	Y+4, r23	; 0x04
    31de:	69 81       	ldd	r22, Y+1	; 0x01
    31e0:	7a 81       	ldd	r23, Y+2	; 0x02
    31e2:	8b 81       	ldd	r24, Y+3	; 0x03
    31e4:	9c 81       	ldd	r25, Y+4	; 0x04
    31e6:	a9 a5       	ldd	r26, Y+41	; 0x29
    31e8:	ba a5       	ldd	r27, Y+42	; 0x2a
    31ea:	11 96       	adiw	r26, 0x01	; 1
    31ec:	6d 93       	st	X+, r22
    31ee:	7d 93       	st	X+, r23
    31f0:	8d 93       	st	X+, r24
    31f2:	9c 93       	st	X, r25
    31f4:	14 97       	sbiw	r26, 0x04	; 4
    31f6:	2d 85       	ldd	r18, Y+13	; 0x0d
    31f8:	3e 85       	ldd	r19, Y+14	; 0x0e
    31fa:	4f 85       	ldd	r20, Y+15	; 0x0f
    31fc:	58 89       	ldd	r21, Y+16	; 0x10
    31fe:	15 96       	adiw	r26, 0x05	; 5
    3200:	2d 93       	st	X+, r18
    3202:	3d 93       	st	X+, r19
    3204:	4d 93       	st	X+, r20
    3206:	5c 93       	st	X, r21
    3208:	18 97       	sbiw	r26, 0x08	; 8
    320a:	19 96       	adiw	r26, 0x09	; 9
    320c:	0c 93       	st	X, r16
    320e:	19 97       	sbiw	r26, 0x09	; 9
    3210:	1a 96       	adiw	r26, 0x0a	; 10
    3212:	1c 92       	st	X, r1
    3214:	1a 97       	sbiw	r26, 0x0a	; 10
    3216:	1b 96       	adiw	r26, 0x0b	; 11
    3218:	1c 92       	st	X, r1
    321a:	1b 97       	sbiw	r26, 0x0b	; 11
    321c:	1c 96       	adiw	r26, 0x0c	; 12
    321e:	1c 92       	st	X, r1
    3220:	1c 97       	sbiw	r26, 0x0c	; 12
    3222:	1e 96       	adiw	r26, 0x0e	; 14
    3224:	1c 92       	st	X, r1
    3226:	1e 92       	st	-X, r1
    3228:	1d 97       	sbiw	r26, 0x0d	; 13
    322a:	50 96       	adiw	r26, 0x10	; 16
    322c:	1c 92       	st	X, r1
    322e:	1e 92       	st	-X, r1
    3230:	1f 97       	sbiw	r26, 0x0f	; 15
    3232:	51 96       	adiw	r26, 0x11	; 17
    3234:	1c 92       	st	X, r1
    3236:	51 97       	sbiw	r26, 0x11	; 17
    3238:	52 96       	adiw	r26, 0x12	; 18
    323a:	1c 92       	st	X, r1
    323c:	52 97       	sbiw	r26, 0x12	; 18
    323e:	53 96       	adiw	r26, 0x13	; 19
    3240:	1c 92       	st	X, r1
    3242:	53 97       	sbiw	r26, 0x13	; 19
    3244:	54 96       	adiw	r26, 0x14	; 20
    3246:	1c 92       	st	X, r1
    3248:	54 97       	sbiw	r26, 0x14	; 20
    324a:	55 96       	adiw	r26, 0x15	; 21
    324c:	1c 92       	st	X, r1
    324e:	55 97       	sbiw	r26, 0x15	; 21
    3250:	56 96       	adiw	r26, 0x16	; 22
    3252:	1c 92       	st	X, r1
    3254:	56 97       	sbiw	r26, 0x16	; 22
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	57 96       	adiw	r26, 0x17	; 23
    325a:	8c 93       	st	X, r24
    325c:	57 97       	sbiw	r26, 0x17	; 23
    325e:	93 e0       	ldi	r25, 0x03	; 3
    3260:	58 96       	adiw	r26, 0x18	; 24
    3262:	9c 93       	st	X, r25
    3264:	58 97       	sbiw	r26, 0x18	; 24
    3266:	59 96       	adiw	r26, 0x19	; 25
    3268:	1c 92       	st	X, r1
    326a:	59 97       	sbiw	r26, 0x19	; 25
    326c:	20 e1       	ldi	r18, 0x10	; 16
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	5b 96       	adiw	r26, 0x1b	; 27
    3272:	3c 93       	st	X, r19
    3274:	2e 93       	st	-X, r18
    3276:	5a 97       	sbiw	r26, 0x1a	; 26
    3278:	5c 96       	adiw	r26, 0x1c	; 28
    327a:	8c 93       	st	X, r24
    327c:	5c 97       	sbiw	r26, 0x1c	; 28
    327e:	87 e0       	ldi	r24, 0x07	; 7
    3280:	5d 96       	adiw	r26, 0x1d	; 29
    3282:	8c 93       	st	X, r24
    3284:	5d 97       	sbiw	r26, 0x1d	; 29
    3286:	5e 96       	adiw	r26, 0x1e	; 30
    3288:	1c 92       	st	X, r1
    328a:	5e 97       	sbiw	r26, 0x1e	; 30
    328c:	92 e0       	ldi	r25, 0x02	; 2
    328e:	5f 96       	adiw	r26, 0x1f	; 31
    3290:	9c 93       	st	X, r25
    3292:	5f 97       	sbiw	r26, 0x1f	; 31
    3294:	90 96       	adiw	r26, 0x20	; 32
    3296:	1c 92       	st	X, r1
    3298:	90 97       	sbiw	r26, 0x20	; 32
    329a:	91 96       	adiw	r26, 0x21	; 33
    329c:	8c 93       	st	X, r24
    329e:	91 97       	sbiw	r26, 0x21	; 33
    32a0:	2f e1       	ldi	r18, 0x1F	; 31
    32a2:	92 96       	adiw	r26, 0x22	; 34
    32a4:	2c 93       	st	X, r18
    32a6:	92 97       	sbiw	r26, 0x22	; 34
    32a8:	93 96       	adiw	r26, 0x23	; 35
    32aa:	9c 93       	st	X, r25
    32ac:	93 97       	sbiw	r26, 0x23	; 35
    32ae:	20 e2       	ldi	r18, 0x20	; 32
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	95 96       	adiw	r26, 0x25	; 37
    32b4:	3c 93       	st	X, r19
    32b6:	2e 93       	st	-X, r18
    32b8:	94 97       	sbiw	r26, 0x24	; 36
    32ba:	96 96       	adiw	r26, 0x26	; 38
    32bc:	8c 93       	st	X, r24
    32be:	96 97       	sbiw	r26, 0x26	; 38
    32c0:	8b e1       	ldi	r24, 0x1B	; 27
    32c2:	97 96       	adiw	r26, 0x27	; 39
    32c4:	8c 93       	st	X, r24
    32c6:	01 30       	cpi	r16, 0x01	; 1
    32c8:	09 f0       	breq	.+2      	; 0x32cc <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x16c>
    32ca:	1a c1       	rjmp	.+564    	; 0x3500 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x3a0>
    32cc:	69 81       	ldd	r22, Y+1	; 0x01
    32ce:	7a 81       	ldd	r23, Y+2	; 0x02
    32d0:	8b 81       	ldd	r24, Y+3	; 0x03
    32d2:	9c 81       	ldd	r25, Y+4	; 0x04
    32d4:	2d 85       	ldd	r18, Y+13	; 0x0d
    32d6:	3e 85       	ldd	r19, Y+14	; 0x0e
    32d8:	4f 85       	ldd	r20, Y+15	; 0x0f
    32da:	58 89       	ldd	r21, Y+16	; 0x10
    32dc:	0e 94 50 24 	call	0x48a0	; 0x48a0 <__udivmodsi4>
    32e0:	2d 8b       	std	Y+21, r18	; 0x15
    32e2:	3e 8b       	std	Y+22, r19	; 0x16
    32e4:	4f 8b       	std	Y+23, r20	; 0x17
    32e6:	58 8f       	std	Y+24, r21	; 0x18
    32e8:	83 2e       	mov	r8, r19
    32ea:	94 2e       	mov	r9, r20
    32ec:	a5 2e       	mov	r10, r21
    32ee:	bb 24       	eor	r11, r11
    32f0:	2d 85       	ldd	r18, Y+13	; 0x0d
    32f2:	3e 85       	ldd	r19, Y+14	; 0x0e
    32f4:	4f 85       	ldd	r20, Y+15	; 0x0f
    32f6:	58 89       	ldd	r21, Y+16	; 0x10
    32f8:	00 27       	eor	r16, r16
    32fa:	12 2f       	mov	r17, r18
    32fc:	23 2f       	mov	r18, r19
    32fe:	34 2f       	mov	r19, r20
    3300:	09 8b       	std	Y+17, r16	; 0x11
    3302:	1a 8b       	std	Y+18, r17	; 0x12
    3304:	2b 8b       	std	Y+19, r18	; 0x13
    3306:	3c 8b       	std	Y+20, r19	; 0x14
    3308:	b4 e0       	ldi	r27, 0x04	; 4
    330a:	4b 2e       	mov	r4, r27
    330c:	51 2c       	mov	r5, r1
    330e:	61 2c       	mov	r6, r1
    3310:	71 2c       	mov	r7, r1
    3312:	01 e0       	ldi	r16, 0x01	; 1
    3314:	10 e0       	ldi	r17, 0x00	; 0
    3316:	21 2c       	mov	r2, r1
    3318:	31 2c       	mov	r3, r1
    331a:	4f ef       	ldi	r20, 0xFF	; 255
    331c:	5f ef       	ldi	r21, 0xFF	; 255
    331e:	ba 01       	movw	r22, r20
    3320:	49 87       	std	Y+9, r20	; 0x09
    3322:	5a 87       	std	Y+10, r21	; 0x0a
    3324:	6b 87       	std	Y+11, r22	; 0x0b
    3326:	7c 87       	std	Y+12, r23	; 0x0c
    3328:	c1 2c       	mov	r12, r1
    332a:	d1 2c       	mov	r13, r1
    332c:	76 01       	movw	r14, r12
    332e:	d3 94       	inc	r13
    3330:	32 e8       	ldi	r19, 0x82	; 130
    3332:	83 16       	cp	r8, r19
    3334:	31 e0       	ldi	r19, 0x01	; 1
    3336:	93 06       	cpc	r9, r19
    3338:	a1 04       	cpc	r10, r1
    333a:	b1 04       	cpc	r11, r1
    333c:	08 f0       	brcs	.+2      	; 0x3340 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x1e0>
    333e:	93 c0       	rjmp	.+294    	; 0x3466 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x306>
    3340:	c1 14       	cp	r12, r1
    3342:	d1 04       	cpc	r13, r1
    3344:	e1 04       	cpc	r14, r1
    3346:	f1 04       	cpc	r15, r1
    3348:	09 f4       	brne	.+2      	; 0x334c <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x1ec>
    334a:	8d c0       	rjmp	.+282    	; 0x3466 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x306>
    334c:	d5 01       	movw	r26, r10
    334e:	c4 01       	movw	r24, r8
    3350:	04 97       	sbiw	r24, 0x04	; 4
    3352:	a1 09       	sbc	r26, r1
    3354:	b1 09       	sbc	r27, r1
    3356:	8e 37       	cpi	r24, 0x7E	; 126
    3358:	91 40       	sbci	r25, 0x01	; 1
    335a:	a1 05       	cpc	r26, r1
    335c:	b1 05       	cpc	r27, r1
    335e:	48 f5       	brcc	.+82     	; 0x33b2 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x252>
    3360:	a7 01       	movw	r20, r14
    3362:	96 01       	movw	r18, r12
    3364:	c5 01       	movw	r24, r10
    3366:	b4 01       	movw	r22, r8
    3368:	0e 94 40 24 	call	0x4880	; 0x4880 <__mulsi3>
    336c:	9b 01       	movw	r18, r22
    336e:	ac 01       	movw	r20, r24
    3370:	6d 85       	ldd	r22, Y+13	; 0x0d
    3372:	7e 85       	ldd	r23, Y+14	; 0x0e
    3374:	8f 85       	ldd	r24, Y+15	; 0x0f
    3376:	98 89       	ldd	r25, Y+16	; 0x10
    3378:	0e 94 40 24 	call	0x4880	; 0x4880 <__mulsi3>
    337c:	29 81       	ldd	r18, Y+1	; 0x01
    337e:	3a 81       	ldd	r19, Y+2	; 0x02
    3380:	4b 81       	ldd	r20, Y+3	; 0x03
    3382:	5c 81       	ldd	r21, Y+4	; 0x04
    3384:	26 1b       	sub	r18, r22
    3386:	37 0b       	sbc	r19, r23
    3388:	48 0b       	sbc	r20, r24
    338a:	59 0b       	sbc	r21, r25
    338c:	da 01       	movw	r26, r20
    338e:	c9 01       	movw	r24, r18
    3390:	49 85       	ldd	r20, Y+9	; 0x09
    3392:	5a 85       	ldd	r21, Y+10	; 0x0a
    3394:	6b 85       	ldd	r22, Y+11	; 0x0b
    3396:	7c 85       	ldd	r23, Y+12	; 0x0c
    3398:	48 17       	cp	r20, r24
    339a:	59 07       	cpc	r21, r25
    339c:	6a 07       	cpc	r22, r26
    339e:	7b 07       	cpc	r23, r27
    33a0:	40 f0       	brcs	.+16     	; 0x33b2 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x252>
    33a2:	24 01       	movw	r4, r8
    33a4:	35 01       	movw	r6, r10
    33a6:	86 01       	movw	r16, r12
    33a8:	17 01       	movw	r2, r14
    33aa:	89 87       	std	Y+9, r24	; 0x09
    33ac:	9a 87       	std	Y+10, r25	; 0x0a
    33ae:	ab 87       	std	Y+11, r26	; 0x0b
    33b0:	bc 87       	std	Y+12, r27	; 0x0c
    33b2:	d5 01       	movw	r26, r10
    33b4:	c4 01       	movw	r24, r8
    33b6:	03 97       	sbiw	r24, 0x03	; 3
    33b8:	a1 09       	sbc	r26, r1
    33ba:	b1 09       	sbc	r27, r1
    33bc:	8e 37       	cpi	r24, 0x7E	; 126
    33be:	91 40       	sbci	r25, 0x01	; 1
    33c0:	a1 05       	cpc	r26, r1
    33c2:	b1 05       	cpc	r27, r1
    33c4:	40 f5       	brcc	.+80     	; 0x3416 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x2b6>
    33c6:	6f ef       	ldi	r22, 0xFF	; 255
    33c8:	86 1a       	sub	r8, r22
    33ca:	96 0a       	sbc	r9, r22
    33cc:	a6 0a       	sbc	r10, r22
    33ce:	b6 0a       	sbc	r11, r22
    33d0:	a5 01       	movw	r20, r10
    33d2:	94 01       	movw	r18, r8
    33d4:	69 89       	ldd	r22, Y+17	; 0x11
    33d6:	7a 89       	ldd	r23, Y+18	; 0x12
    33d8:	8b 89       	ldd	r24, Y+19	; 0x13
    33da:	9c 89       	ldd	r25, Y+20	; 0x14
    33dc:	0e 94 40 24 	call	0x4880	; 0x4880 <__mulsi3>
    33e0:	dc 01       	movw	r26, r24
    33e2:	cb 01       	movw	r24, r22
    33e4:	29 81       	ldd	r18, Y+1	; 0x01
    33e6:	3a 81       	ldd	r19, Y+2	; 0x02
    33e8:	4b 81       	ldd	r20, Y+3	; 0x03
    33ea:	5c 81       	ldd	r21, Y+4	; 0x04
    33ec:	82 1b       	sub	r24, r18
    33ee:	93 0b       	sbc	r25, r19
    33f0:	a4 0b       	sbc	r26, r20
    33f2:	b5 0b       	sbc	r27, r21
    33f4:	49 85       	ldd	r20, Y+9	; 0x09
    33f6:	5a 85       	ldd	r21, Y+10	; 0x0a
    33f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    33fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    33fc:	48 17       	cp	r20, r24
    33fe:	59 07       	cpc	r21, r25
    3400:	6a 07       	cpc	r22, r26
    3402:	7b 07       	cpc	r23, r27
    3404:	40 f0       	brcs	.+16     	; 0x3416 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x2b6>
    3406:	24 01       	movw	r4, r8
    3408:	35 01       	movw	r6, r10
    340a:	86 01       	movw	r16, r12
    340c:	17 01       	movw	r2, r14
    340e:	89 87       	std	Y+9, r24	; 0x09
    3410:	9a 87       	std	Y+10, r25	; 0x0a
    3412:	ab 87       	std	Y+11, r26	; 0x0b
    3414:	bc 87       	std	Y+12, r27	; 0x0c
    3416:	51 e0       	ldi	r21, 0x01	; 1
    3418:	c5 1a       	sub	r12, r21
    341a:	d1 08       	sbc	r13, r1
    341c:	e1 08       	sbc	r14, r1
    341e:	f1 08       	sbc	r15, r1
    3420:	b9 f4       	brne	.+46     	; 0x3450 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x2f0>
    3422:	e2 e8       	ldi	r30, 0x82	; 130
    3424:	8e 2e       	mov	r8, r30
    3426:	99 24       	eor	r9, r9
    3428:	93 94       	inc	r9
    342a:	a1 2c       	mov	r10, r1
    342c:	b1 2c       	mov	r11, r1
    342e:	69 89       	ldd	r22, Y+17	; 0x11
    3430:	7a 89       	ldd	r23, Y+18	; 0x12
    3432:	8b 89       	ldd	r24, Y+19	; 0x13
    3434:	9c 89       	ldd	r25, Y+20	; 0x14
    3436:	2d 85       	ldd	r18, Y+13	; 0x0d
    3438:	3e 85       	ldd	r19, Y+14	; 0x0e
    343a:	4f 85       	ldd	r20, Y+15	; 0x0f
    343c:	58 89       	ldd	r21, Y+16	; 0x10
    343e:	62 1b       	sub	r22, r18
    3440:	73 0b       	sbc	r23, r19
    3442:	84 0b       	sbc	r24, r20
    3444:	95 0b       	sbc	r25, r21
    3446:	69 8b       	std	Y+17, r22	; 0x11
    3448:	7a 8b       	std	Y+18, r23	; 0x12
    344a:	8b 8b       	std	Y+19, r24	; 0x13
    344c:	9c 8b       	std	Y+20, r25	; 0x14
    344e:	70 cf       	rjmp	.-288    	; 0x3330 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x1d0>
    3450:	6d 89       	ldd	r22, Y+21	; 0x15
    3452:	7e 89       	ldd	r23, Y+22	; 0x16
    3454:	8f 89       	ldd	r24, Y+23	; 0x17
    3456:	98 8d       	ldd	r25, Y+24	; 0x18
    3458:	a7 01       	movw	r20, r14
    345a:	96 01       	movw	r18, r12
    345c:	0e 94 50 24 	call	0x48a0	; 0x48a0 <__udivmodsi4>
    3460:	49 01       	movw	r8, r18
    3462:	5a 01       	movw	r10, r20
    3464:	e4 cf       	rjmp	.-56     	; 0x342e <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x2ce>
    3466:	c3 01       	movw	r24, r6
    3468:	b2 01       	movw	r22, r4
    346a:	25 e0       	ldi	r18, 0x05	; 5
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	40 e0       	ldi	r20, 0x00	; 0
    3470:	50 e0       	ldi	r21, 0x00	; 0
    3472:	0e 94 50 24 	call	0x48a0	; 0x48a0 <__udivmodsi4>
    3476:	21 15       	cp	r18, r1
    3478:	31 05       	cpc	r19, r1
    347a:	41 05       	cpc	r20, r1
    347c:	51 05       	cpc	r21, r1
    347e:	21 f4       	brne	.+8      	; 0x3488 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x328>
    3480:	21 e0       	ldi	r18, 0x01	; 1
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	40 e0       	ldi	r20, 0x00	; 0
    3486:	50 e0       	ldi	r21, 0x00	; 0
    3488:	73 01       	movw	r14, r6
    348a:	62 01       	movw	r12, r4
    348c:	61 e0       	ldi	r22, 0x01	; 1
    348e:	c6 1a       	sub	r12, r22
    3490:	d1 08       	sbc	r13, r1
    3492:	e1 08       	sbc	r14, r1
    3494:	f1 08       	sbc	r15, r1
    3496:	c2 1a       	sub	r12, r18
    3498:	d3 0a       	sbc	r13, r19
    349a:	e4 0a       	sbc	r14, r20
    349c:	f5 0a       	sbc	r15, r21
    349e:	71 e0       	ldi	r23, 0x01	; 1
    34a0:	c7 16       	cp	r12, r23
    34a2:	d7 06       	cpc	r13, r23
    34a4:	e1 04       	cpc	r14, r1
    34a6:	f1 04       	cpc	r15, r1
    34a8:	78 f0       	brcs	.+30     	; 0x34c8 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x368>
    34aa:	da 01       	movw	r26, r20
    34ac:	c9 01       	movw	r24, r18
    34ae:	91 50       	subi	r25, 0x01	; 1
    34b0:	a1 09       	sbc	r26, r1
    34b2:	b1 09       	sbc	r27, r1
    34b4:	a7 01       	movw	r20, r14
    34b6:	96 01       	movw	r18, r12
    34b8:	28 0f       	add	r18, r24
    34ba:	39 1f       	adc	r19, r25
    34bc:	4a 1f       	adc	r20, r26
    34be:	5b 1f       	adc	r21, r27
    34c0:	c1 2c       	mov	r12, r1
    34c2:	d1 2c       	mov	r13, r1
    34c4:	76 01       	movw	r14, r12
    34c6:	d3 94       	inc	r13
    34c8:	a9 a5       	ldd	r26, Y+41	; 0x29
    34ca:	ba a5       	ldd	r27, Y+42	; 0x2a
    34cc:	1e 96       	adiw	r26, 0x0e	; 14
    34ce:	1c 93       	st	X, r17
    34d0:	0e 93       	st	-X, r16
    34d2:	1d 97       	sbiw	r26, 0x0d	; 13
    34d4:	50 96       	adiw	r26, 0x10	; 16
    34d6:	dc 92       	st	X, r13
    34d8:	ce 92       	st	-X, r12
    34da:	1f 97       	sbiw	r26, 0x0f	; 15
    34dc:	51 96       	adiw	r26, 0x11	; 17
    34de:	2c 93       	st	X, r18
    34e0:	51 97       	sbiw	r26, 0x11	; 17
    34e2:	52 96       	adiw	r26, 0x12	; 18
    34e4:	2c 93       	st	X, r18
    34e6:	98 01       	movw	r18, r16
    34e8:	a1 01       	movw	r20, r2
    34ea:	c3 01       	movw	r24, r6
    34ec:	b2 01       	movw	r22, r4
    34ee:	0e 94 40 24 	call	0x4880	; 0x4880 <__mulsi3>
    34f2:	9b 01       	movw	r18, r22
    34f4:	ac 01       	movw	r20, r24
    34f6:	6d 85       	ldd	r22, Y+13	; 0x0d
    34f8:	7e 85       	ldd	r23, Y+14	; 0x0e
    34fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    34fc:	98 89       	ldd	r25, Y+16	; 0x10
    34fe:	74 c1       	rjmp	.+744    	; 0x37e8 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x688>
    3500:	20 2f       	mov	r18, r16
    3502:	30 e0       	ldi	r19, 0x00	; 0
    3504:	40 e0       	ldi	r20, 0x00	; 0
    3506:	50 e0       	ldi	r21, 0x00	; 0
    3508:	2d 8f       	std	Y+29, r18	; 0x1d
    350a:	3e 8f       	std	Y+30, r19	; 0x1e
    350c:	4f 8f       	std	Y+31, r20	; 0x1f
    350e:	58 a3       	std	Y+32, r21	; 0x20
    3510:	2d 85       	ldd	r18, Y+13	; 0x0d
    3512:	3e 85       	ldd	r19, Y+14	; 0x0e
    3514:	4f 85       	ldd	r20, Y+15	; 0x0f
    3516:	58 89       	ldd	r21, Y+16	; 0x10
    3518:	6d 8d       	ldd	r22, Y+29	; 0x1d
    351a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    351c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    351e:	98 a1       	ldd	r25, Y+32	; 0x20
    3520:	0e 94 40 24 	call	0x4880	; 0x4880 <__mulsi3>
    3524:	69 8f       	std	Y+25, r22	; 0x19
    3526:	7a 8f       	std	Y+26, r23	; 0x1a
    3528:	8b 8f       	std	Y+27, r24	; 0x1b
    352a:	9c 8f       	std	Y+28, r25	; 0x1c
    352c:	69 81       	ldd	r22, Y+1	; 0x01
    352e:	7a 81       	ldd	r23, Y+2	; 0x02
    3530:	8b 81       	ldd	r24, Y+3	; 0x03
    3532:	9c 81       	ldd	r25, Y+4	; 0x04
    3534:	29 8d       	ldd	r18, Y+25	; 0x19
    3536:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3538:	4b 8d       	ldd	r20, Y+27	; 0x1b
    353a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    353c:	0e 94 50 24 	call	0x48a0	; 0x48a0 <__udivmodsi4>
    3540:	2d a3       	std	Y+37, r18	; 0x25
    3542:	3e a3       	std	Y+38, r19	; 0x26
    3544:	4f a3       	std	Y+39, r20	; 0x27
    3546:	58 a7       	std	Y+40, r21	; 0x28
    3548:	69 01       	movw	r12, r18
    354a:	7a 01       	movw	r14, r20
    354c:	32 e0       	ldi	r19, 0x02	; 2
    354e:	f6 94       	lsr	r15
    3550:	e7 94       	ror	r14
    3552:	d7 94       	ror	r13
    3554:	c7 94       	ror	r12
    3556:	3a 95       	dec	r19
    3558:	d1 f7       	brne	.-12     	; 0x354e <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x3ee>
    355a:	09 8d       	ldd	r16, Y+25	; 0x19
    355c:	1a 8d       	ldd	r17, Y+26	; 0x1a
    355e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3560:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3562:	42 e0       	ldi	r20, 0x02	; 2
    3564:	00 0f       	add	r16, r16
    3566:	11 1f       	adc	r17, r17
    3568:	22 1f       	adc	r18, r18
    356a:	33 1f       	adc	r19, r19
    356c:	4a 95       	dec	r20
    356e:	d1 f7       	brne	.-12     	; 0x3564 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x404>
    3570:	0d 8b       	std	Y+21, r16	; 0x15
    3572:	1e 8b       	std	Y+22, r17	; 0x16
    3574:	2f 8b       	std	Y+23, r18	; 0x17
    3576:	38 8f       	std	Y+24, r19	; 0x18
    3578:	54 e0       	ldi	r21, 0x04	; 4
    357a:	45 2e       	mov	r4, r21
    357c:	51 2c       	mov	r5, r1
    357e:	61 2c       	mov	r6, r1
    3580:	71 2c       	mov	r7, r1
    3582:	60 e3       	ldi	r22, 0x30	; 48
    3584:	86 2e       	mov	r8, r22
    3586:	91 2c       	mov	r9, r1
    3588:	a1 2c       	mov	r10, r1
    358a:	b1 2c       	mov	r11, r1
    358c:	00 e0       	ldi	r16, 0x00	; 0
    358e:	11 e0       	ldi	r17, 0x01	; 1
    3590:	20 e0       	ldi	r18, 0x00	; 0
    3592:	30 e0       	ldi	r19, 0x00	; 0
    3594:	09 87       	std	Y+9, r16	; 0x09
    3596:	1a 87       	std	Y+10, r17	; 0x0a
    3598:	2b 87       	std	Y+11, r18	; 0x0b
    359a:	3c 87       	std	Y+12, r19	; 0x0c
    359c:	0f ef       	ldi	r16, 0xFF	; 255
    359e:	1f ef       	ldi	r17, 0xFF	; 255
    35a0:	98 01       	movw	r18, r16
    35a2:	09 8b       	std	Y+17, r16	; 0x11
    35a4:	1a 8b       	std	Y+18, r17	; 0x12
    35a6:	2b 8b       	std	Y+19, r18	; 0x13
    35a8:	3c 8b       	std	Y+20, r19	; 0x14
    35aa:	c1 14       	cp	r12, r1
    35ac:	d1 04       	cpc	r13, r1
    35ae:	e1 04       	cpc	r14, r1
    35b0:	f1 04       	cpc	r15, r1
    35b2:	09 f4       	brne	.+2      	; 0x35b6 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x456>
    35b4:	8a c0       	rjmp	.+276    	; 0x36ca <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x56a>
    35b6:	11 e0       	ldi	r17, 0x01	; 1
    35b8:	c1 16       	cp	r12, r17
    35ba:	d1 06       	cpc	r13, r17
    35bc:	e1 04       	cpc	r14, r1
    35be:	f1 04       	cpc	r15, r1
    35c0:	08 f0       	brcs	.+2      	; 0x35c4 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x464>
    35c2:	5d c0       	rjmp	.+186    	; 0x367e <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x51e>
    35c4:	2d 89       	ldd	r18, Y+21	; 0x15
    35c6:	3e 89       	ldd	r19, Y+22	; 0x16
    35c8:	4f 89       	ldd	r20, Y+23	; 0x17
    35ca:	58 8d       	ldd	r21, Y+24	; 0x18
    35cc:	c7 01       	movw	r24, r14
    35ce:	b6 01       	movw	r22, r12
    35d0:	0e 94 40 24 	call	0x4880	; 0x4880 <__mulsi3>
    35d4:	6f a7       	std	Y+47, r22	; 0x2f
    35d6:	78 ab       	std	Y+48, r23	; 0x30
    35d8:	89 ab       	std	Y+49, r24	; 0x31
    35da:	9a ab       	std	Y+50, r25	; 0x32
    35dc:	09 81       	ldd	r16, Y+1	; 0x01
    35de:	1a 81       	ldd	r17, Y+2	; 0x02
    35e0:	2b 81       	ldd	r18, Y+3	; 0x03
    35e2:	3c 81       	ldd	r19, Y+4	; 0x04
    35e4:	06 1b       	sub	r16, r22
    35e6:	17 0b       	sbc	r17, r23
    35e8:	28 0b       	sbc	r18, r24
    35ea:	39 0b       	sbc	r19, r25
    35ec:	0b a7       	std	Y+43, r16	; 0x2b
    35ee:	1c a7       	std	Y+44, r17	; 0x2c
    35f0:	2d a7       	std	Y+45, r18	; 0x2d
    35f2:	3e a7       	std	Y+46, r19	; 0x2e
    35f4:	49 89       	ldd	r20, Y+17	; 0x11
    35f6:	5a 89       	ldd	r21, Y+18	; 0x12
    35f8:	6b 89       	ldd	r22, Y+19	; 0x13
    35fa:	7c 89       	ldd	r23, Y+20	; 0x14
    35fc:	40 17       	cp	r20, r16
    35fe:	51 07       	cpc	r21, r17
    3600:	62 07       	cpc	r22, r18
    3602:	73 07       	cpc	r23, r19
    3604:	50 f0       	brcs	.+20     	; 0x361a <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x4ba>
    3606:	53 01       	movw	r10, r6
    3608:	42 01       	movw	r8, r4
    360a:	c9 86       	std	Y+9, r12	; 0x09
    360c:	da 86       	std	Y+10, r13	; 0x0a
    360e:	eb 86       	std	Y+11, r14	; 0x0b
    3610:	fc 86       	std	Y+12, r15	; 0x0c
    3612:	09 8b       	std	Y+17, r16	; 0x11
    3614:	1a 8b       	std	Y+18, r17	; 0x12
    3616:	2b 8b       	std	Y+19, r18	; 0x13
    3618:	3c 8b       	std	Y+20, r19	; 0x14
    361a:	c1 14       	cp	r12, r1
    361c:	51 e0       	ldi	r21, 0x01	; 1
    361e:	d5 06       	cpc	r13, r21
    3620:	e1 04       	cpc	r14, r1
    3622:	f1 04       	cpc	r15, r1
    3624:	61 f1       	breq	.+88     	; 0x367e <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x51e>
    3626:	6f ef       	ldi	r22, 0xFF	; 255
    3628:	c6 1a       	sub	r12, r22
    362a:	d6 0a       	sbc	r13, r22
    362c:	e6 0a       	sbc	r14, r22
    362e:	f6 0a       	sbc	r15, r22
    3630:	8d 89       	ldd	r24, Y+21	; 0x15
    3632:	9e 89       	ldd	r25, Y+22	; 0x16
    3634:	af 89       	ldd	r26, Y+23	; 0x17
    3636:	b8 8d       	ldd	r27, Y+24	; 0x18
    3638:	0f a5       	ldd	r16, Y+47	; 0x2f
    363a:	18 a9       	ldd	r17, Y+48	; 0x30
    363c:	29 a9       	ldd	r18, Y+49	; 0x31
    363e:	3a a9       	ldd	r19, Y+50	; 0x32
    3640:	80 0f       	add	r24, r16
    3642:	91 1f       	adc	r25, r17
    3644:	a2 1f       	adc	r26, r18
    3646:	b3 1f       	adc	r27, r19
    3648:	09 81       	ldd	r16, Y+1	; 0x01
    364a:	1a 81       	ldd	r17, Y+2	; 0x02
    364c:	2b 81       	ldd	r18, Y+3	; 0x03
    364e:	3c 81       	ldd	r19, Y+4	; 0x04
    3650:	80 1b       	sub	r24, r16
    3652:	91 0b       	sbc	r25, r17
    3654:	a2 0b       	sbc	r26, r18
    3656:	b3 0b       	sbc	r27, r19
    3658:	09 89       	ldd	r16, Y+17	; 0x11
    365a:	1a 89       	ldd	r17, Y+18	; 0x12
    365c:	2b 89       	ldd	r18, Y+19	; 0x13
    365e:	3c 89       	ldd	r19, Y+20	; 0x14
    3660:	08 17       	cp	r16, r24
    3662:	19 07       	cpc	r17, r25
    3664:	2a 07       	cpc	r18, r26
    3666:	3b 07       	cpc	r19, r27
    3668:	50 f0       	brcs	.+20     	; 0x367e <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x51e>
    366a:	53 01       	movw	r10, r6
    366c:	42 01       	movw	r8, r4
    366e:	c9 86       	std	Y+9, r12	; 0x09
    3670:	da 86       	std	Y+10, r13	; 0x0a
    3672:	eb 86       	std	Y+11, r14	; 0x0b
    3674:	fc 86       	std	Y+12, r15	; 0x0c
    3676:	89 8b       	std	Y+17, r24	; 0x11
    3678:	9a 8b       	std	Y+18, r25	; 0x12
    367a:	ab 8b       	std	Y+19, r26	; 0x13
    367c:	bc 8b       	std	Y+20, r27	; 0x14
    367e:	1f ef       	ldi	r17, 0xFF	; 255
    3680:	41 1a       	sub	r4, r17
    3682:	51 0a       	sbc	r5, r17
    3684:	61 0a       	sbc	r6, r17
    3686:	71 0a       	sbc	r7, r17
    3688:	6d a1       	ldd	r22, Y+37	; 0x25
    368a:	7e a1       	ldd	r23, Y+38	; 0x26
    368c:	8f a1       	ldd	r24, Y+39	; 0x27
    368e:	98 a5       	ldd	r25, Y+40	; 0x28
    3690:	a3 01       	movw	r20, r6
    3692:	92 01       	movw	r18, r4
    3694:	0e 94 50 24 	call	0x48a0	; 0x48a0 <__udivmodsi4>
    3698:	69 01       	movw	r12, r18
    369a:	7a 01       	movw	r14, r20
    369c:	0d 89       	ldd	r16, Y+21	; 0x15
    369e:	1e 89       	ldd	r17, Y+22	; 0x16
    36a0:	2f 89       	ldd	r18, Y+23	; 0x17
    36a2:	38 8d       	ldd	r19, Y+24	; 0x18
    36a4:	49 8d       	ldd	r20, Y+25	; 0x19
    36a6:	5a 8d       	ldd	r21, Y+26	; 0x1a
    36a8:	6b 8d       	ldd	r22, Y+27	; 0x1b
    36aa:	7c 8d       	ldd	r23, Y+28	; 0x1c
    36ac:	04 0f       	add	r16, r20
    36ae:	15 1f       	adc	r17, r21
    36b0:	26 1f       	adc	r18, r22
    36b2:	37 1f       	adc	r19, r23
    36b4:	0d 8b       	std	Y+21, r16	; 0x15
    36b6:	1e 8b       	std	Y+22, r17	; 0x16
    36b8:	2f 8b       	std	Y+23, r18	; 0x17
    36ba:	38 8f       	std	Y+24, r19	; 0x18
    36bc:	51 e3       	ldi	r21, 0x31	; 49
    36be:	45 16       	cp	r4, r21
    36c0:	51 04       	cpc	r5, r1
    36c2:	61 04       	cpc	r6, r1
    36c4:	71 04       	cpc	r7, r1
    36c6:	09 f0       	breq	.+2      	; 0x36ca <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x56a>
    36c8:	70 cf       	rjmp	.-288    	; 0x35aa <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x44a>
    36ca:	c5 01       	movw	r24, r10
    36cc:	b4 01       	movw	r22, r8
    36ce:	25 e0       	ldi	r18, 0x05	; 5
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	40 e0       	ldi	r20, 0x00	; 0
    36d4:	50 e0       	ldi	r21, 0x00	; 0
    36d6:	0e 94 50 24 	call	0x48a0	; 0x48a0 <__udivmodsi4>
    36da:	21 15       	cp	r18, r1
    36dc:	31 05       	cpc	r19, r1
    36de:	41 05       	cpc	r20, r1
    36e0:	51 05       	cpc	r21, r1
    36e2:	21 f4       	brne	.+8      	; 0x36ec <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x58c>
    36e4:	21 e0       	ldi	r18, 0x01	; 1
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	40 e0       	ldi	r20, 0x00	; 0
    36ea:	50 e0       	ldi	r21, 0x00	; 0
    36ec:	d5 01       	movw	r26, r10
    36ee:	c4 01       	movw	r24, r8
    36f0:	01 97       	sbiw	r24, 0x01	; 1
    36f2:	a1 09       	sbc	r26, r1
    36f4:	b1 09       	sbc	r27, r1
    36f6:	82 1b       	sub	r24, r18
    36f8:	93 0b       	sbc	r25, r19
    36fa:	a4 0b       	sbc	r26, r20
    36fc:	b5 0b       	sbc	r27, r21
    36fe:	81 32       	cpi	r24, 0x21	; 33
    3700:	91 05       	cpc	r25, r1
    3702:	a1 05       	cpc	r26, r1
    3704:	b1 05       	cpc	r27, r1
    3706:	80 f0       	brcs	.+32     	; 0x3728 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x5c8>
    3708:	ba 01       	movw	r22, r20
    370a:	a9 01       	movw	r20, r18
    370c:	40 52       	subi	r20, 0x20	; 32
    370e:	51 09       	sbc	r21, r1
    3710:	61 09       	sbc	r22, r1
    3712:	71 09       	sbc	r23, r1
    3714:	9a 01       	movw	r18, r20
    3716:	ab 01       	movw	r20, r22
    3718:	28 0f       	add	r18, r24
    371a:	39 1f       	adc	r19, r25
    371c:	4a 1f       	adc	r20, r26
    371e:	5b 1f       	adc	r21, r27
    3720:	80 e2       	ldi	r24, 0x20	; 32
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	a0 e0       	ldi	r26, 0x00	; 0
    3726:	b0 e0       	ldi	r27, 0x00	; 0
    3728:	09 85       	ldd	r16, Y+9	; 0x09
    372a:	1a 85       	ldd	r17, Y+10	; 0x0a
    372c:	08 9f       	mul	r16, r24
    372e:	b0 01       	movw	r22, r0
    3730:	09 9f       	mul	r16, r25
    3732:	70 0d       	add	r23, r0
    3734:	18 9f       	mul	r17, r24
    3736:	70 0d       	add	r23, r0
    3738:	11 24       	eor	r1, r1
    373a:	60 34       	cpi	r22, 0x40	; 64
    373c:	71 05       	cpc	r23, r1
    373e:	08 f0       	brcs	.+2      	; 0x3742 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x5e2>
    3740:	6f e3       	ldi	r22, 0x3F	; 63
    3742:	e9 a5       	ldd	r30, Y+41	; 0x29
    3744:	fa a5       	ldd	r31, Y+42	; 0x2a
    3746:	64 8b       	std	Z+20, r22	; 0x14
    3748:	82 87       	std	Z+10, r24	; 0x0a
    374a:	23 87       	std	Z+11, r18	; 0x0b
    374c:	24 87       	std	Z+12, r18	; 0x0c
    374e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3750:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3752:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3754:	58 a1       	ldd	r21, Y+32	; 0x20
    3756:	c5 01       	movw	r24, r10
    3758:	b4 01       	movw	r22, r8
    375a:	0e 94 40 24 	call	0x4880	; 0x4880 <__mulsi3>
    375e:	6b 01       	movw	r12, r22
    3760:	7c 01       	movw	r14, r24
    3762:	25 e0       	ldi	r18, 0x05	; 5
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	40 e0       	ldi	r20, 0x00	; 0
    3768:	50 e0       	ldi	r21, 0x00	; 0
    376a:	0e 94 50 24 	call	0x48a0	; 0x48a0 <__udivmodsi4>
    376e:	21 15       	cp	r18, r1
    3770:	31 05       	cpc	r19, r1
    3772:	41 05       	cpc	r20, r1
    3774:	51 05       	cpc	r21, r1
    3776:	21 f4       	brne	.+8      	; 0x3780 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x620>
    3778:	21 e0       	ldi	r18, 0x01	; 1
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	40 e0       	ldi	r20, 0x00	; 0
    377e:	50 e0       	ldi	r21, 0x00	; 0
    3780:	d7 01       	movw	r26, r14
    3782:	c6 01       	movw	r24, r12
    3784:	01 97       	sbiw	r24, 0x01	; 1
    3786:	a1 09       	sbc	r26, r1
    3788:	b1 09       	sbc	r27, r1
    378a:	82 1b       	sub	r24, r18
    378c:	93 0b       	sbc	r25, r19
    378e:	a4 0b       	sbc	r26, r20
    3790:	b5 0b       	sbc	r27, r21
    3792:	81 30       	cpi	r24, 0x01	; 1
    3794:	f1 e0       	ldi	r31, 0x01	; 1
    3796:	9f 07       	cpc	r25, r31
    3798:	a1 05       	cpc	r26, r1
    379a:	b1 05       	cpc	r27, r1
    379c:	78 f0       	brcs	.+30     	; 0x37bc <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x65c>
    379e:	ba 01       	movw	r22, r20
    37a0:	a9 01       	movw	r20, r18
    37a2:	51 50       	subi	r21, 0x01	; 1
    37a4:	61 09       	sbc	r22, r1
    37a6:	71 09       	sbc	r23, r1
    37a8:	9a 01       	movw	r18, r20
    37aa:	ab 01       	movw	r20, r22
    37ac:	28 0f       	add	r18, r24
    37ae:	39 1f       	adc	r19, r25
    37b0:	4a 1f       	adc	r20, r26
    37b2:	5b 1f       	adc	r21, r27
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	91 e0       	ldi	r25, 0x01	; 1
    37b8:	a0 e0       	ldi	r26, 0x00	; 0
    37ba:	b0 e0       	ldi	r27, 0x00	; 0
    37bc:	e9 a5       	ldd	r30, Y+41	; 0x29
    37be:	fa a5       	ldd	r31, Y+42	; 0x2a
    37c0:	16 87       	std	Z+14, r17	; 0x0e
    37c2:	05 87       	std	Z+13, r16	; 0x0d
    37c4:	90 8b       	std	Z+16, r25	; 0x10
    37c6:	87 87       	std	Z+15, r24	; 0x0f
    37c8:	21 8b       	std	Z+17, r18	; 0x11
    37ca:	22 8b       	std	Z+18, r18	; 0x12
    37cc:	2d 85       	ldd	r18, Y+13	; 0x0d
    37ce:	3e 85       	ldd	r19, Y+14	; 0x0e
    37d0:	4f 85       	ldd	r20, Y+15	; 0x0f
    37d2:	58 89       	ldd	r21, Y+16	; 0x10
    37d4:	69 85       	ldd	r22, Y+9	; 0x09
    37d6:	7a 85       	ldd	r23, Y+10	; 0x0a
    37d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    37da:	9c 85       	ldd	r25, Y+12	; 0x0c
    37dc:	0e 94 40 24 	call	0x4880	; 0x4880 <__mulsi3>
    37e0:	9b 01       	movw	r18, r22
    37e2:	ac 01       	movw	r20, r24
    37e4:	c7 01       	movw	r24, r14
    37e6:	b6 01       	movw	r22, r12
    37e8:	0e 94 40 24 	call	0x4880	; 0x4880 <__mulsi3>
    37ec:	2b 01       	movw	r4, r22
    37ee:	3c 01       	movw	r6, r24
    37f0:	09 81       	ldd	r16, Y+1	; 0x01
    37f2:	1a 81       	ldd	r17, Y+2	; 0x02
    37f4:	2b 81       	ldd	r18, Y+3	; 0x03
    37f6:	3c 81       	ldd	r19, Y+4	; 0x04
    37f8:	60 17       	cp	r22, r16
    37fa:	71 07       	cpc	r23, r17
    37fc:	82 07       	cpc	r24, r18
    37fe:	93 07       	cpc	r25, r19
    3800:	38 f4       	brcc	.+14     	; 0x3810 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x6b0>
    3802:	d9 01       	movw	r26, r18
    3804:	c8 01       	movw	r24, r16
    3806:	84 19       	sub	r24, r4
    3808:	95 09       	sbc	r25, r5
    380a:	a6 09       	sbc	r26, r6
    380c:	b7 09       	sbc	r27, r7
    380e:	0a c0       	rjmp	.+20     	; 0x3824 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x6c4>
    3810:	dc 01       	movw	r26, r24
    3812:	cb 01       	movw	r24, r22
    3814:	09 81       	ldd	r16, Y+1	; 0x01
    3816:	1a 81       	ldd	r17, Y+2	; 0x02
    3818:	2b 81       	ldd	r18, Y+3	; 0x03
    381a:	3c 81       	ldd	r19, Y+4	; 0x04
    381c:	80 1b       	sub	r24, r16
    381e:	91 0b       	sbc	r25, r17
    3820:	a2 0b       	sbc	r26, r18
    3822:	b3 0b       	sbc	r27, r19
    3824:	8c 01       	movw	r16, r24
    3826:	9d 01       	movw	r18, r26
    3828:	40 e0       	ldi	r20, 0x00	; 0
    382a:	50 e0       	ldi	r21, 0x00	; 0
    382c:	ba 01       	movw	r22, r20
    382e:	89 83       	std	Y+1, r24	; 0x01
    3830:	1a 83       	std	Y+2, r17	; 0x02
    3832:	2b 83       	std	Y+3, r18	; 0x03
    3834:	3c 83       	std	Y+4, r19	; 0x04
    3836:	4d 83       	std	Y+5, r20	; 0x05
    3838:	5e 83       	std	Y+6, r21	; 0x06
    383a:	6f 83       	std	Y+7, r22	; 0x07
    383c:	78 87       	std	Y+8, r23	; 0x08
    383e:	80 e4       	ldi	r24, 0x40	; 64
    3840:	a8 2e       	mov	r10, r24
    3842:	92 e4       	ldi	r25, 0x42	; 66
    3844:	b9 2e       	mov	r11, r25
    3846:	2f e0       	ldi	r18, 0x0F	; 15
    3848:	c2 2e       	mov	r12, r18
    384a:	d1 2c       	mov	r13, r1
    384c:	e1 2c       	mov	r14, r1
    384e:	f1 2c       	mov	r15, r1
    3850:	00 e0       	ldi	r16, 0x00	; 0
    3852:	10 e0       	ldi	r17, 0x00	; 0
    3854:	29 81       	ldd	r18, Y+1	; 0x01
    3856:	3a 81       	ldd	r19, Y+2	; 0x02
    3858:	4b 81       	ldd	r20, Y+3	; 0x03
    385a:	5c 81       	ldd	r21, Y+4	; 0x04
    385c:	6d 81       	ldd	r22, Y+5	; 0x05
    385e:	7e 81       	ldd	r23, Y+6	; 0x06
    3860:	8f 81       	ldd	r24, Y+7	; 0x07
    3862:	98 85       	ldd	r25, Y+8	; 0x08
    3864:	0e 94 93 24 	call	0x4926	; 0x4926 <__muldi3>
    3868:	79 01       	movw	r14, r18
    386a:	8a 01       	movw	r16, r20
    386c:	1b 01       	movw	r2, r22
    386e:	4c 01       	movw	r8, r24
    3870:	c3 01       	movw	r24, r6
    3872:	b2 01       	movw	r22, r4
    3874:	29 a1       	ldd	r18, Y+33	; 0x21
    3876:	3a a1       	ldd	r19, Y+34	; 0x22
    3878:	4b a1       	ldd	r20, Y+35	; 0x23
    387a:	5c a1       	ldd	r21, Y+36	; 0x24
    387c:	0e 94 ec 24 	call	0x49d8	; 0x49d8 <__umulsidi3>
    3880:	59 01       	movw	r10, r18
    3882:	6a 01       	movw	r12, r20
    3884:	76 2e       	mov	r7, r22
    3886:	b7 2f       	mov	r27, r23
    3888:	a8 2f       	mov	r26, r24
    388a:	f9 2f       	mov	r31, r25
    388c:	e1 e0       	ldi	r30, 0x01	; 1
    388e:	97 01       	movw	r18, r14
    3890:	a8 01       	movw	r20, r16
    3892:	b1 01       	movw	r22, r2
    3894:	c4 01       	movw	r24, r8
    3896:	e7 2c       	mov	r14, r7
    3898:	fb 2e       	mov	r15, r27
    389a:	0a 2f       	mov	r16, r26
    389c:	1f 2f       	mov	r17, r31
    389e:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <__cmpdi2>
    38a2:	11 f0       	breq	.+4      	; 0x38a8 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x748>
    38a4:	08 f0       	brcs	.+2      	; 0x38a8 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x748>
    38a6:	e0 e0       	ldi	r30, 0x00	; 0
    38a8:	a9 a5       	ldd	r26, Y+41	; 0x29
    38aa:	ba a5       	ldd	r27, Y+42	; 0x2a
    38ac:	53 96       	adiw	r26, 0x13	; 19
    38ae:	ec 93       	st	X, r30
    38b0:	e2 96       	adiw	r28, 0x32	; 50
    38b2:	0f b6       	in	r0, 0x3f	; 63
    38b4:	f8 94       	cli
    38b6:	de bf       	out	0x3e, r29	; 62
    38b8:	0f be       	out	0x3f, r0	; 63
    38ba:	cd bf       	out	0x3d, r28	; 61
    38bc:	df 91       	pop	r29
    38be:	cf 91       	pop	r28
    38c0:	1f 91       	pop	r17
    38c2:	0f 91       	pop	r16
    38c4:	ff 90       	pop	r15
    38c6:	ef 90       	pop	r14
    38c8:	df 90       	pop	r13
    38ca:	cf 90       	pop	r12
    38cc:	bf 90       	pop	r11
    38ce:	af 90       	pop	r10
    38d0:	9f 90       	pop	r9
    38d2:	8f 90       	pop	r8
    38d4:	7f 90       	pop	r7
    38d6:	6f 90       	pop	r6
    38d8:	5f 90       	pop	r5
    38da:	4f 90       	pop	r4
    38dc:	3f 90       	pop	r3
    38de:	2f 90       	pop	r2
    38e0:	08 95       	ret

000038e2 <_ZNK18ACAN2517FDSettings42dataBitRateIsAMultipleOfArbitrationBitRateEv>:
    38e2:	cf 92       	push	r12
    38e4:	df 92       	push	r13
    38e6:	ef 92       	push	r14
    38e8:	ff 92       	push	r15
    38ea:	fc 01       	movw	r30, r24
    38ec:	21 85       	ldd	r18, Z+9	; 0x09
    38ee:	21 30       	cpi	r18, 0x01	; 1
    38f0:	d9 f0       	breq	.+54     	; 0x3928 <_ZNK18ACAN2517FDSettings42dataBitRateIsAMultipleOfArbitrationBitRateEv+0x46>
    38f2:	a2 85       	ldd	r26, Z+10	; 0x0a
    38f4:	b0 e0       	ldi	r27, 0x00	; 0
    38f6:	11 96       	adiw	r26, 0x01	; 1
    38f8:	83 85       	ldd	r24, Z+11	; 0x0b
    38fa:	a8 0f       	add	r26, r24
    38fc:	b1 1d       	adc	r27, r1
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	0e 94 81 24 	call	0x4902	; 0x4902 <__usmulhisi3>
    3904:	47 85       	ldd	r20, Z+15	; 0x0f
    3906:	50 89       	ldd	r21, Z+16	; 0x10
    3908:	4f 5f       	subi	r20, 0xFF	; 255
    390a:	5f 4f       	sbci	r21, 0xFF	; 255
    390c:	21 89       	ldd	r18, Z+17	; 0x11
    390e:	42 0f       	add	r20, r18
    3910:	51 1d       	adc	r21, r1
    3912:	6a 01       	movw	r12, r20
    3914:	e1 2c       	mov	r14, r1
    3916:	f1 2c       	mov	r15, r1
    3918:	21 e0       	ldi	r18, 0x01	; 1
    391a:	6c 15       	cp	r22, r12
    391c:	7d 05       	cpc	r23, r13
    391e:	8e 05       	cpc	r24, r14
    3920:	9f 05       	cpc	r25, r15
    3922:	19 f0       	breq	.+6      	; 0x392a <_ZNK18ACAN2517FDSettings42dataBitRateIsAMultipleOfArbitrationBitRateEv+0x48>
    3924:	20 e0       	ldi	r18, 0x00	; 0
    3926:	01 c0       	rjmp	.+2      	; 0x392a <_ZNK18ACAN2517FDSettings42dataBitRateIsAMultipleOfArbitrationBitRateEv+0x48>
    3928:	21 e0       	ldi	r18, 0x01	; 1
    392a:	82 2f       	mov	r24, r18
    392c:	ff 90       	pop	r15
    392e:	ef 90       	pop	r14
    3930:	df 90       	pop	r13
    3932:	cf 90       	pop	r12
    3934:	08 95       	ret

00003936 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv>:

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::CANBitSettingConsistency (void) const {
    3936:	cf 92       	push	r12
    3938:	df 92       	push	r13
    393a:	ef 92       	push	r14
    393c:	ff 92       	push	r15
    393e:	cf 93       	push	r28
    3940:	df 93       	push	r29
    3942:	fc 01       	movw	r30, r24
  uint32_t errorCode = 0 ; // Means no error
//--- Bit rate prescaler
  if (mBitRatePrescaler == 0) {
    3944:	85 85       	ldd	r24, Z+13	; 0x0d
    3946:	96 85       	ldd	r25, Z+14	; 0x0e
    3948:	00 97       	sbiw	r24, 0x00	; 0
    394a:	49 f0       	breq	.+18     	; 0x395e <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x28>
    errorCode |= kBitRatePrescalerIsZero ;
  }else if (mBitRatePrescaler > MAX_BRP) {
    394c:	81 30       	cpi	r24, 0x01	; 1
    394e:	91 40       	sbci	r25, 0x01	; 1
    3950:	58 f0       	brcs	.+22     	; 0x3968 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x32>
    errorCode |= kBitRatePrescalerIsGreaterThan256 ;
    3952:	92 e0       	ldi	r25, 0x02	; 2
    3954:	c9 2e       	mov	r12, r25
    3956:	d1 2c       	mov	r13, r1
    3958:	e1 2c       	mov	r14, r1
    395a:	f1 2c       	mov	r15, r1
    395c:	08 c0       	rjmp	.+16     	; 0x396e <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x38>

uint32_t ACAN2517FDSettings::CANBitSettingConsistency (void) const {
  uint32_t errorCode = 0 ; // Means no error
//--- Bit rate prescaler
  if (mBitRatePrescaler == 0) {
    errorCode |= kBitRatePrescalerIsZero ;
    395e:	c1 2c       	mov	r12, r1
    3960:	d1 2c       	mov	r13, r1
    3962:	76 01       	movw	r14, r12
    3964:	c3 94       	inc	r12
    3966:	03 c0       	rjmp	.+6      	; 0x396e <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x38>
}

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::CANBitSettingConsistency (void) const {
  uint32_t errorCode = 0 ; // Means no error
    3968:	c1 2c       	mov	r12, r1
    396a:	d1 2c       	mov	r13, r1
    396c:	76 01       	movw	r14, r12
    errorCode |= kBitRatePrescalerIsZero ;
  }else if (mBitRatePrescaler > MAX_BRP) {
    errorCode |= kBitRatePrescalerIsGreaterThan256 ;
  }
//--- Arbitration Phase Segment 1
  if (mArbitrationPhaseSegment1 < 2) {
    396e:	27 85       	ldd	r18, Z+15	; 0x0f
    3970:	30 89       	ldd	r19, Z+16	; 0x10
    3972:	22 30       	cpi	r18, 0x02	; 2
    3974:	31 05       	cpc	r19, r1
    3976:	18 f4       	brcc	.+6      	; 0x397e <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x48>
    errorCode |= kArbitrationPhaseSegment1IsLowerThan2 ;
    3978:	68 94       	set
    397a:	c2 f8       	bld	r12, 2
    397c:	06 c0       	rjmp	.+12     	; 0x398a <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x54>
  }else if (mArbitrationPhaseSegment1 > MAX_ARBITRATION_PHASE_SEGMENT_1) {
    397e:	21 30       	cpi	r18, 0x01	; 1
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	38 07       	cpc	r19, r24
    3984:	10 f0       	brcs	.+4      	; 0x398a <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x54>
    errorCode |= kArbitrationPhaseSegment1IsGreaterThan256 ;
    3986:	68 94       	set
    3988:	c3 f8       	bld	r12, 3
  }
//--- Arbitration Phase Segment 2
  if (mArbitrationPhaseSegment2 == 0) {
    398a:	91 89       	ldd	r25, Z+17	; 0x11
    398c:	91 11       	cpse	r25, r1
    398e:	03 c0       	rjmp	.+6      	; 0x3996 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x60>
    errorCode |= kArbitrationPhaseSegment2IsZero ;
    3990:	68 94       	set
    3992:	c4 f8       	bld	r12, 4
    3994:	04 c0       	rjmp	.+8      	; 0x399e <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x68>
  }else if (mArbitrationPhaseSegment2 > MAX_ARBITRATION_PHASE_SEGMENT_2) {
    3996:	91 38       	cpi	r25, 0x81	; 129
    3998:	10 f0       	brcs	.+4      	; 0x399e <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x68>
    errorCode |= kArbitrationPhaseSegment2IsGreaterThan128 ;
    399a:	68 94       	set
    399c:	c5 f8       	bld	r12, 5
  }
//--- Arbitration SJW
  if (mArbitrationSJW == 0) {
    399e:	82 89       	ldd	r24, Z+18	; 0x12
    39a0:	81 11       	cpse	r24, r1
    39a2:	03 c0       	rjmp	.+6      	; 0x39aa <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x74>
    errorCode |= kArbitrationSJWIsZero ;
    39a4:	68 94       	set
    39a6:	c6 f8       	bld	r12, 6
    39a8:	04 c0       	rjmp	.+8      	; 0x39b2 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x7c>
  }else if (mArbitrationSJW > MAX_ARBITRATION_SJW) {
    39aa:	81 38       	cpi	r24, 0x81	; 129
    39ac:	10 f0       	brcs	.+4      	; 0x39b2 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x7c>
    errorCode |= kArbitrationSJWIsGreaterThan128 ;
    39ae:	68 94       	set
    39b0:	c7 f8       	bld	r12, 7
  }
  if (mArbitrationSJW > mArbitrationPhaseSegment1) {
    39b2:	48 2f       	mov	r20, r24
    39b4:	50 e0       	ldi	r21, 0x00	; 0
    39b6:	24 17       	cp	r18, r20
    39b8:	35 07       	cpc	r19, r21
    39ba:	10 f4       	brcc	.+4      	; 0x39c0 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x8a>
    errorCode |= kArbitrationSJWIsGreaterThanPhaseSegment1 ;
    39bc:	68 94       	set
    39be:	d0 f8       	bld	r13, 0
  }
  if (mArbitrationSJW > mArbitrationPhaseSegment2) {
    39c0:	98 17       	cp	r25, r24
    39c2:	10 f4       	brcc	.+4      	; 0x39c8 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x92>
    errorCode |= kArbitrationSJWIsGreaterThanPhaseSegment2 ;
    39c4:	68 94       	set
    39c6:	d1 f8       	bld	r13, 1
  }
//--- Data bit rate ?
  if (mDataBitRateFactor != DataBitRateFactor::x1) {
    39c8:	81 85       	ldd	r24, Z+9	; 0x09
    39ca:	81 30       	cpi	r24, 0x01	; 1
    39cc:	71 f1       	breq	.+92     	; 0x3a2a <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xf4>
    39ce:	ef 01       	movw	r28, r30
    if (! dataBitRateIsAMultipleOfArbitrationBitRate ()) {
    39d0:	cf 01       	movw	r24, r30
    39d2:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <_ZNK18ACAN2517FDSettings42dataBitRateIsAMultipleOfArbitrationBitRateEv>
    39d6:	81 11       	cpse	r24, r1
    39d8:	02 c0       	rjmp	.+4      	; 0x39de <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xa8>
      errorCode |= kArbitrationTQCountNotDivisibleByDataBitRateFactor ;
    39da:	68 94       	set
    39dc:	d2 f8       	bld	r13, 2
    }
  //--- Data Phase Segment 1
    if (mDataPhaseSegment1 < 2) {
    39de:	2a 85       	ldd	r18, Y+10	; 0x0a
    39e0:	22 30       	cpi	r18, 0x02	; 2
    39e2:	18 f4       	brcc	.+6      	; 0x39ea <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xb4>
      errorCode |= kDataPhaseSegment1IsLowerThan2 ;
    39e4:	68 94       	set
    39e6:	d3 f8       	bld	r13, 3
    39e8:	04 c0       	rjmp	.+8      	; 0x39f2 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xbc>
    }else if (mDataPhaseSegment1 > MAX_DATA_PHASE_SEGMENT_1) {
    39ea:	21 32       	cpi	r18, 0x21	; 33
    39ec:	10 f0       	brcs	.+4      	; 0x39f2 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xbc>
      errorCode |= kDataPhaseSegment1IsGreaterThan32 ;
    39ee:	68 94       	set
    39f0:	d4 f8       	bld	r13, 4
    }
  //--- Data Phase Segment 2
    if (mDataPhaseSegment2 == 0) {
    39f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    39f4:	91 11       	cpse	r25, r1
    39f6:	03 c0       	rjmp	.+6      	; 0x39fe <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xc8>
      errorCode |= kDataPhaseSegment2IsZero ;
    39f8:	68 94       	set
    39fa:	d5 f8       	bld	r13, 5
    39fc:	04 c0       	rjmp	.+8      	; 0x3a06 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xd0>
    }else if (mDataPhaseSegment2 > MAX_DATA_PHASE_SEGMENT_2) {
    39fe:	91 31       	cpi	r25, 0x11	; 17
    3a00:	10 f0       	brcs	.+4      	; 0x3a06 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xd0>
      errorCode |= kDataPhaseSegment2IsGreaterThan16 ;
    3a02:	68 94       	set
    3a04:	d6 f8       	bld	r13, 6
    }
  //--- Data SJW
    if (mDataSJW == 0) {
    3a06:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a08:	81 11       	cpse	r24, r1
    3a0a:	03 c0       	rjmp	.+6      	; 0x3a12 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xdc>
      errorCode |= kDataSJWIsZero ;
    3a0c:	68 94       	set
    3a0e:	d7 f8       	bld	r13, 7
    3a10:	0c c0       	rjmp	.+24     	; 0x3a2a <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xf4>
    }else if (mDataSJW > MAX_DATA_SJW) {
    3a12:	81 31       	cpi	r24, 0x11	; 17
    3a14:	10 f0       	brcs	.+4      	; 0x3a1a <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xe4>
      errorCode |= kDataSJWIsGreaterThan16 ;
    3a16:	68 94       	set
    3a18:	e0 f8       	bld	r14, 0
    }
    if (mDataSJW > mDataPhaseSegment1) {
    3a1a:	28 17       	cp	r18, r24
    3a1c:	10 f4       	brcc	.+4      	; 0x3a22 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xec>
      errorCode |= kDataSJWIsGreaterThanPhaseSegment1 ;
    3a1e:	68 94       	set
    3a20:	e1 f8       	bld	r14, 1
    }
    if (mDataSJW > mDataPhaseSegment2) {
    3a22:	98 17       	cp	r25, r24
    3a24:	10 f4       	brcc	.+4      	; 0x3a2a <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xf4>
      errorCode |= kDataSJWIsGreaterThanPhaseSegment2 ;
    3a26:	68 94       	set
    3a28:	e2 f8       	bld	r14, 2
    }
  }
//---
  return errorCode ;
}
    3a2a:	c7 01       	movw	r24, r14
    3a2c:	b6 01       	movw	r22, r12
    3a2e:	df 91       	pop	r29
    3a30:	cf 91       	pop	r28
    3a32:	ff 90       	pop	r15
    3a34:	ef 90       	pop	r14
    3a36:	df 90       	pop	r13
    3a38:	cf 90       	pop	r12
    3a3a:	08 95       	ret

00003a3c <_ZNK18ACAN2517FDSettings8ramUsageEv>:

//----------------------------------------------------------------------------------------------------------------------
//   RAM USAGE
//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::ramUsage (void) const {
    3a3c:	cf 92       	push	r12
    3a3e:	df 92       	push	r13
    3a40:	ef 92       	push	r14
    3a42:	ff 92       	push	r15
    3a44:	cf 93       	push	r28
    3a46:	df 93       	push	r29
    3a48:	fc 01       	movw	r30, r24

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::objectSizeForPayload (const PayloadSize inPayload) {
  static const uint8_t kPayload [8] = {16, 20, 24, 28, 32, 40, 56, 72} ;
  return kPayload [inPayload] ;
    3a4a:	a1 a1       	ldd	r26, Z+33	; 0x21
    3a4c:	b0 e0       	ldi	r27, 0x00	; 0
    3a4e:	a4 55       	subi	r26, 0x54	; 84
    3a50:	bd 4f       	sbci	r27, 0xFD	; 253
    3a52:	ac 91       	ld	r26, X
//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::ramUsage (void) const {
  uint32_t result = 0 ;
//--- TXQ
  result += objectSizeForPayload (mControllerTXQBufferPayload) * mControllerTXQSize ;
    3a54:	20 a1       	ldd	r18, Z+32	; 0x20

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::objectSizeForPayload (const PayloadSize inPayload) {
  static const uint8_t kPayload [8] = {16, 20, 24, 28, 32, 40, 56, 72} ;
  return kPayload [inPayload] ;
    3a56:	c6 a1       	ldd	r28, Z+38	; 0x26
    3a58:	d0 e0       	ldi	r29, 0x00	; 0
    3a5a:	c4 55       	subi	r28, 0x54	; 84
    3a5c:	dd 4f       	sbci	r29, 0xFD	; 253
    3a5e:	48 81       	ld	r20, Y
uint32_t ACAN2517FDSettings::ramUsage (void) const {
  uint32_t result = 0 ;
//--- TXQ
  result += objectSizeForPayload (mControllerTXQBufferPayload) * mControllerTXQSize ;
//--- Receive FIFO (FIFO #1)
  result += objectSizeForPayload (mControllerReceiveFIFOPayload) * mControllerReceiveFIFOSize ;
    3a60:	57 a1       	ldd	r21, Z+39	; 0x27
    3a62:	30 e0       	ldi	r19, 0x00	; 0
    3a64:	b0 e0       	ldi	r27, 0x00	; 0
    3a66:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__umulhisi3>
    3a6a:	6b 01       	movw	r12, r22
    3a6c:	7c 01       	movw	r14, r24
    3a6e:	25 2f       	mov	r18, r21
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	a4 2f       	mov	r26, r20
    3a74:	b0 e0       	ldi	r27, 0x00	; 0
    3a76:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__umulhisi3>
    3a7a:	c6 0e       	add	r12, r22
    3a7c:	d7 1e       	adc	r13, r23
    3a7e:	e8 1e       	adc	r14, r24
    3a80:	f9 1e       	adc	r15, r25

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::objectSizeForPayload (const PayloadSize inPayload) {
  static const uint8_t kPayload [8] = {16, 20, 24, 28, 32, 40, 56, 72} ;
  return kPayload [inPayload] ;
    3a82:	a5 8d       	ldd	r26, Z+29	; 0x1d
    3a84:	b0 e0       	ldi	r27, 0x00	; 0
    3a86:	a4 55       	subi	r26, 0x54	; 84
    3a88:	bd 4f       	sbci	r27, 0xFD	; 253
    3a8a:	2c 91       	ld	r18, X
//--- TXQ
  result += objectSizeForPayload (mControllerTXQBufferPayload) * mControllerTXQSize ;
//--- Receive FIFO (FIFO #1)
  result += objectSizeForPayload (mControllerReceiveFIFOPayload) * mControllerReceiveFIFOSize ;
//--- Send FIFO (FIFO #2)
  result += objectSizeForPayload (mControllerTransmitFIFOPayload) * mControllerTransmitFIFOSize ;
    3a8c:	a4 8d       	ldd	r26, Z+28	; 0x1c
//---
  return result ;
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	b0 e0       	ldi	r27, 0x00	; 0
    3a92:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__umulhisi3>
    3a96:	6c 0d       	add	r22, r12
    3a98:	7d 1d       	adc	r23, r13
    3a9a:	8e 1d       	adc	r24, r14
    3a9c:	9f 1d       	adc	r25, r15
}
    3a9e:	df 91       	pop	r29
    3aa0:	cf 91       	pop	r28
    3aa2:	ff 90       	pop	r15
    3aa4:	ef 90       	pop	r14
    3aa6:	df 90       	pop	r13
    3aa8:	cf 90       	pop	r12
    3aaa:	08 95       	ret

00003aac <_ZN18ACAN2517FDSettings20objectSizeForPayloadENS_11PayloadSizeE>:

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::objectSizeForPayload (const PayloadSize inPayload) {
  static const uint8_t kPayload [8] = {16, 20, 24, 28, 32, 40, 56, 72} ;
  return kPayload [inPayload] ;
    3aac:	e8 2f       	mov	r30, r24
    3aae:	f0 e0       	ldi	r31, 0x00	; 0
    3ab0:	e4 55       	subi	r30, 0x54	; 84
    3ab2:	fd 4f       	sbci	r31, 0xFD	; 253
    3ab4:	60 81       	ld	r22, Z
    3ab6:	70 e0       	ldi	r23, 0x00	; 0
    3ab8:	80 e0       	ldi	r24, 0x00	; 0
    3aba:	90 e0       	ldi	r25, 0x00	; 0
}
    3abc:	08 95       	ret

00003abe <_ZN8SPIClass5beginEv>:
    interruptMode = 0;
    #ifdef SPI_TRANSACTION_MISMATCH_LED
    inTransactionFlag = 0;
    #endif
  }
  SREG = sreg;
    3abe:	cf 93       	push	r28
    3ac0:	cf b7       	in	r28, 0x3f	; 63
    3ac2:	f8 94       	cli
    3ac4:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <_ZN8SPIClass11initializedE>
    3ac8:	81 11       	cpse	r24, r1
    3aca:	27 c0       	rjmp	.+78     	; 0x3b1a <_ZN8SPIClass5beginEv+0x5c>
    3acc:	e1 e3       	ldi	r30, 0x31	; 49
    3ace:	f1 e0       	ldi	r31, 0x01	; 1
    3ad0:	84 91       	lpm	r24, Z
    3ad2:	ed e1       	ldi	r30, 0x1D	; 29
    3ad4:	f1 e0       	ldi	r31, 0x01	; 1
    3ad6:	94 91       	lpm	r25, Z
    3ad8:	e8 2f       	mov	r30, r24
    3ada:	f0 e0       	ldi	r31, 0x00	; 0
    3adc:	ee 0f       	add	r30, r30
    3ade:	ff 1f       	adc	r31, r31
    3ae0:	eb 5b       	subi	r30, 0xBB	; 187
    3ae2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ae4:	a5 91       	lpm	r26, Z+
    3ae6:	b4 91       	lpm	r27, Z
    3ae8:	ec 91       	ld	r30, X
    3aea:	e9 23       	and	r30, r25
    3aec:	21 f4       	brne	.+8      	; 0x3af6 <_ZN8SPIClass5beginEv+0x38>
    3aee:	61 e0       	ldi	r22, 0x01	; 1
    3af0:	8a e0       	ldi	r24, 0x0A	; 10
    3af2:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <digitalWrite>
    3af6:	61 e0       	ldi	r22, 0x01	; 1
    3af8:	8a e0       	ldi	r24, 0x0A	; 10
    3afa:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <pinMode>
    3afe:	8c b5       	in	r24, 0x2c	; 44
    3b00:	80 61       	ori	r24, 0x10	; 16
    3b02:	8c bd       	out	0x2c, r24	; 44
    3b04:	8c b5       	in	r24, 0x2c	; 44
    3b06:	80 64       	ori	r24, 0x40	; 64
    3b08:	8c bd       	out	0x2c, r24	; 44
    3b0a:	61 e0       	ldi	r22, 0x01	; 1
    3b0c:	8d e0       	ldi	r24, 0x0D	; 13
    3b0e:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <pinMode>
    3b12:	61 e0       	ldi	r22, 0x01	; 1
    3b14:	8b e0       	ldi	r24, 0x0B	; 11
    3b16:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <pinMode>
    3b1a:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <_ZN8SPIClass11initializedE>
    3b1e:	8f 5f       	subi	r24, 0xFF	; 255
    3b20:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <_ZN8SPIClass11initializedE>
    3b24:	cf bf       	out	0x3f, r28	; 63
    3b26:	cf 91       	pop	r28
    3b28:	08 95       	ret

00003b2a <_ZN8SPIClass14usingInterruptEh>:
#endif

void SPIClass::usingInterrupt(uint8_t interruptNumber)
{
  uint8_t mask = 0;
  uint8_t sreg = SREG;
    3b2a:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    3b2c:	f8 94       	cli
  switch (interruptNumber) {
    3b2e:	88 23       	and	r24, r24
    3b30:	49 f0       	breq	.+18     	; 0x3b44 <_ZN8SPIClass14usingInterruptEh+0x1a>
    3b32:	81 30       	cpi	r24, 0x01	; 1
    3b34:	11 f4       	brne	.+4      	; 0x3b3a <_ZN8SPIClass14usingInterruptEh+0x10>
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
  #endif
  #ifdef SPI_INT1_MASK
  case 1: mask = SPI_INT1_MASK; break;
    3b36:	82 e0       	ldi	r24, 0x02	; 2
    3b38:	06 c0       	rjmp	.+12     	; 0x3b46 <_ZN8SPIClass14usingInterruptEh+0x1c>
  #endif
  #ifdef SPI_INT7_MASK
  case 7: mask = SPI_INT7_MASK; break;
  #endif
  default:
    interruptMode = 2;
    3b3a:	82 e0       	ldi	r24, 0x02	; 2
    3b3c:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <_ZN8SPIClass13interruptModeE>
  #endif
#endif

void SPIClass::usingInterrupt(uint8_t interruptNumber)
{
  uint8_t mask = 0;
    3b40:	80 e0       	ldi	r24, 0x00	; 0
  #ifdef SPI_INT7_MASK
  case 7: mask = SPI_INT7_MASK; break;
  #endif
  default:
    interruptMode = 2;
    break;
    3b42:	01 c0       	rjmp	.+2      	; 0x3b46 <_ZN8SPIClass14usingInterruptEh+0x1c>
  uint8_t mask = 0;
  uint8_t sreg = SREG;
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
  switch (interruptNumber) {
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
    3b44:	81 e0       	ldi	r24, 0x01	; 1
  #endif
  default:
    interruptMode = 2;
    break;
  }
  interruptMask |= mask;
    3b46:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <_ZN8SPIClass13interruptMaskE>
    3b4a:	82 2b       	or	r24, r18
    3b4c:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <_ZN8SPIClass13interruptMaskE>
  if (!interruptMode)
    3b50:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <_ZN8SPIClass13interruptModeE>
    3b54:	81 11       	cpse	r24, r1
    3b56:	03 c0       	rjmp	.+6      	; 0x3b5e <_ZN8SPIClass14usingInterruptEh+0x34>
    interruptMode = 1;
    3b58:	81 e0       	ldi	r24, 0x01	; 1
    3b5a:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <_ZN8SPIClass13interruptModeE>
  SREG = sreg;
    3b5e:	9f bf       	out	0x3f, r25	; 63
    3b60:	08 95       	ret

00003b62 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    3b62:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <_ZN7TwoWire14rxBufferLengthE>
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	20 91 af 05 	lds	r18, 0x05AF	; 0x8005af <_ZN7TwoWire13rxBufferIndexE>
    3b6c:	82 1b       	sub	r24, r18
    3b6e:	91 09       	sbc	r25, r1
    3b70:	08 95       	ret

00003b72 <_ZN7TwoWire4readEv>:
    3b72:	90 91 af 05 	lds	r25, 0x05AF	; 0x8005af <_ZN7TwoWire13rxBufferIndexE>
    3b76:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <_ZN7TwoWire14rxBufferLengthE>
    3b7a:	98 17       	cp	r25, r24
    3b7c:	50 f4       	brcc	.+20     	; 0x3b92 <_ZN7TwoWire4readEv+0x20>
    3b7e:	e9 2f       	mov	r30, r25
    3b80:	f0 e0       	ldi	r31, 0x00	; 0
    3b82:	e0 55       	subi	r30, 0x50	; 80
    3b84:	fa 4f       	sbci	r31, 0xFA	; 250
    3b86:	20 81       	ld	r18, Z
    3b88:	30 e0       	ldi	r19, 0x00	; 0
    3b8a:	9f 5f       	subi	r25, 0xFF	; 255
    3b8c:	90 93 af 05 	sts	0x05AF, r25	; 0x8005af <_ZN7TwoWire13rxBufferIndexE>
    3b90:	02 c0       	rjmp	.+4      	; 0x3b96 <_ZN7TwoWire4readEv+0x24>
    3b92:	2f ef       	ldi	r18, 0xFF	; 255
    3b94:	3f ef       	ldi	r19, 0xFF	; 255
    3b96:	c9 01       	movw	r24, r18
    3b98:	08 95       	ret

00003b9a <_ZN7TwoWire4peekEv>:
    3b9a:	e0 91 af 05 	lds	r30, 0x05AF	; 0x8005af <_ZN7TwoWire13rxBufferIndexE>
    3b9e:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <_ZN7TwoWire14rxBufferLengthE>
    3ba2:	e8 17       	cp	r30, r24
    3ba4:	30 f4       	brcc	.+12     	; 0x3bb2 <_ZN7TwoWire4peekEv+0x18>
    3ba6:	f0 e0       	ldi	r31, 0x00	; 0
    3ba8:	e0 55       	subi	r30, 0x50	; 80
    3baa:	fa 4f       	sbci	r31, 0xFA	; 250
    3bac:	80 81       	ld	r24, Z
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	08 95       	ret
    3bb2:	8f ef       	ldi	r24, 0xFF	; 255
    3bb4:	9f ef       	ldi	r25, 0xFF	; 255
    3bb6:	08 95       	ret

00003bb8 <_ZN7TwoWire5flushEv>:
    3bb8:	08 95       	ret

00003bba <_ZN7TwoWire16onReceiveServiceEPhi>:
    3bba:	cf 93       	push	r28
    3bbc:	df 93       	push	r29
    3bbe:	ec 01       	movw	r28, r24
    3bc0:	e0 91 86 05 	lds	r30, 0x0586	; 0x800586 <_ZN7TwoWire14user_onReceiveE>
    3bc4:	f0 91 87 05 	lds	r31, 0x0587	; 0x800587 <_ZN7TwoWire14user_onReceiveE+0x1>
    3bc8:	30 97       	sbiw	r30, 0x00	; 0
    3bca:	f1 f0       	breq	.+60     	; 0x3c08 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3bcc:	90 91 af 05 	lds	r25, 0x05AF	; 0x8005af <_ZN7TwoWire13rxBufferIndexE>
    3bd0:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <_ZN7TwoWire14rxBufferLengthE>
    3bd4:	98 17       	cp	r25, r24
    3bd6:	c0 f0       	brcs	.+48     	; 0x3c08 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	29 2f       	mov	r18, r25
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	26 17       	cp	r18, r22
    3be0:	37 07       	cpc	r19, r23
    3be2:	54 f4       	brge	.+20     	; 0x3bf8 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    3be4:	de 01       	movw	r26, r28
    3be6:	a2 0f       	add	r26, r18
    3be8:	b3 1f       	adc	r27, r19
    3bea:	4c 91       	ld	r20, X
    3bec:	d9 01       	movw	r26, r18
    3bee:	a0 55       	subi	r26, 0x50	; 80
    3bf0:	ba 4f       	sbci	r27, 0xFA	; 250
    3bf2:	4c 93       	st	X, r20
    3bf4:	9f 5f       	subi	r25, 0xFF	; 255
    3bf6:	f1 cf       	rjmp	.-30     	; 0x3bda <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    3bf8:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <_ZN7TwoWire13rxBufferIndexE>
    3bfc:	60 93 ae 05 	sts	0x05AE, r22	; 0x8005ae <_ZN7TwoWire14rxBufferLengthE>
    3c00:	cb 01       	movw	r24, r22
    3c02:	df 91       	pop	r29
    3c04:	cf 91       	pop	r28
    3c06:	09 94       	ijmp
    3c08:	df 91       	pop	r29
    3c0a:	cf 91       	pop	r28
    3c0c:	08 95       	ret

00003c0e <_ZN7TwoWire16onRequestServiceEv>:
    3c0e:	e0 91 88 05 	lds	r30, 0x0588	; 0x800588 <_ZN7TwoWire14user_onRequestE>
    3c12:	f0 91 89 05 	lds	r31, 0x0589	; 0x800589 <_ZN7TwoWire14user_onRequestE+0x1>
    3c16:	30 97       	sbiw	r30, 0x00	; 0
    3c18:	29 f0       	breq	.+10     	; 0x3c24 <_ZN7TwoWire16onRequestServiceEv+0x16>
    3c1a:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <_ZN7TwoWire13txBufferIndexE>
    3c1e:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <_ZN7TwoWire14txBufferLengthE>
    3c22:	09 94       	ijmp
    3c24:	08 95       	ret

00003c26 <_ZN7TwoWire5writeEPKhj>:
    3c26:	cf 92       	push	r12
    3c28:	df 92       	push	r13
    3c2a:	ef 92       	push	r14
    3c2c:	ff 92       	push	r15
    3c2e:	0f 93       	push	r16
    3c30:	1f 93       	push	r17
    3c32:	cf 93       	push	r28
    3c34:	df 93       	push	r29
    3c36:	7c 01       	movw	r14, r24
    3c38:	cb 01       	movw	r24, r22
    3c3a:	8a 01       	movw	r16, r20
    3c3c:	20 91 8a 05 	lds	r18, 0x058A	; 0x80058a <_ZN7TwoWire12transmittingE>
    3c40:	22 23       	and	r18, r18
    3c42:	89 f0       	breq	.+34     	; 0x3c66 <_ZN7TwoWire5writeEPKhj+0x40>
    3c44:	eb 01       	movw	r28, r22
    3c46:	6b 01       	movw	r12, r22
    3c48:	c4 0e       	add	r12, r20
    3c4a:	d5 1e       	adc	r13, r21
    3c4c:	cc 15       	cp	r28, r12
    3c4e:	dd 05       	cpc	r29, r13
    3c50:	69 f0       	breq	.+26     	; 0x3c6c <_ZN7TwoWire5writeEPKhj+0x46>
    3c52:	69 91       	ld	r22, Y+
    3c54:	d7 01       	movw	r26, r14
    3c56:	ed 91       	ld	r30, X+
    3c58:	fc 91       	ld	r31, X
    3c5a:	01 90       	ld	r0, Z+
    3c5c:	f0 81       	ld	r31, Z
    3c5e:	e0 2d       	mov	r30, r0
    3c60:	c7 01       	movw	r24, r14
    3c62:	09 95       	icall
    3c64:	f3 cf       	rjmp	.-26     	; 0x3c4c <_ZN7TwoWire5writeEPKhj+0x26>
    3c66:	64 2f       	mov	r22, r20
    3c68:	0e 94 aa 20 	call	0x4154	; 0x4154 <twi_transmit>
    3c6c:	c8 01       	movw	r24, r16
    3c6e:	df 91       	pop	r29
    3c70:	cf 91       	pop	r28
    3c72:	1f 91       	pop	r17
    3c74:	0f 91       	pop	r16
    3c76:	ff 90       	pop	r15
    3c78:	ef 90       	pop	r14
    3c7a:	df 90       	pop	r13
    3c7c:	cf 90       	pop	r12
    3c7e:	08 95       	ret

00003c80 <_ZN7TwoWire5writeEh>:
    3c80:	cf 93       	push	r28
    3c82:	df 93       	push	r29
    3c84:	1f 92       	push	r1
    3c86:	cd b7       	in	r28, 0x3d	; 61
    3c88:	de b7       	in	r29, 0x3e	; 62
    3c8a:	69 83       	std	Y+1, r22	; 0x01
    3c8c:	20 91 8a 05 	lds	r18, 0x058A	; 0x80058a <_ZN7TwoWire12transmittingE>
    3c90:	22 23       	and	r18, r18
    3c92:	d1 f0       	breq	.+52     	; 0x3cc8 <_ZN7TwoWire5writeEh+0x48>
    3c94:	20 91 8b 05 	lds	r18, 0x058B	; 0x80058b <_ZN7TwoWire14txBufferLengthE>
    3c98:	20 32       	cpi	r18, 0x20	; 32
    3c9a:	40 f0       	brcs	.+16     	; 0x3cac <_ZN7TwoWire5writeEh+0x2c>
    3c9c:	21 e0       	ldi	r18, 0x01	; 1
    3c9e:	30 e0       	ldi	r19, 0x00	; 0
    3ca0:	fc 01       	movw	r30, r24
    3ca2:	33 83       	std	Z+3, r19	; 0x03
    3ca4:	22 83       	std	Z+2, r18	; 0x02
    3ca6:	80 e0       	ldi	r24, 0x00	; 0
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	15 c0       	rjmp	.+42     	; 0x3cd6 <_ZN7TwoWire5writeEh+0x56>
    3cac:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <_ZN7TwoWire13txBufferIndexE>
    3cb0:	e8 2f       	mov	r30, r24
    3cb2:	f0 e0       	ldi	r31, 0x00	; 0
    3cb4:	e3 57       	subi	r30, 0x73	; 115
    3cb6:	fa 4f       	sbci	r31, 0xFA	; 250
    3cb8:	99 81       	ldd	r25, Y+1	; 0x01
    3cba:	90 83       	st	Z, r25
    3cbc:	8f 5f       	subi	r24, 0xFF	; 255
    3cbe:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <_ZN7TwoWire13txBufferIndexE>
    3cc2:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <_ZN7TwoWire14txBufferLengthE>
    3cc6:	05 c0       	rjmp	.+10     	; 0x3cd2 <_ZN7TwoWire5writeEh+0x52>
    3cc8:	61 e0       	ldi	r22, 0x01	; 1
    3cca:	ce 01       	movw	r24, r28
    3ccc:	01 96       	adiw	r24, 0x01	; 1
    3cce:	0e 94 aa 20 	call	0x4154	; 0x4154 <twi_transmit>
    3cd2:	81 e0       	ldi	r24, 0x01	; 1
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
    3cd6:	0f 90       	pop	r0
    3cd8:	df 91       	pop	r29
    3cda:	cf 91       	pop	r28
    3cdc:	08 95       	ret

00003cde <_ZN7TwoWireC1Ev>:
    3cde:	fc 01       	movw	r30, r24
    3ce0:	13 82       	std	Z+3, r1	; 0x03
    3ce2:	12 82       	std	Z+2, r1	; 0x02
    3ce4:	88 ee       	ldi	r24, 0xE8	; 232
    3ce6:	93 e0       	ldi	r25, 0x03	; 3
    3ce8:	a0 e0       	ldi	r26, 0x00	; 0
    3cea:	b0 e0       	ldi	r27, 0x00	; 0
    3cec:	84 83       	std	Z+4, r24	; 0x04
    3cee:	95 83       	std	Z+5, r25	; 0x05
    3cf0:	a6 83       	std	Z+6, r26	; 0x06
    3cf2:	b7 83       	std	Z+7, r27	; 0x07
    3cf4:	88 eb       	ldi	r24, 0xB8	; 184
    3cf6:	92 e0       	ldi	r25, 0x02	; 2
    3cf8:	91 83       	std	Z+1, r25	; 0x01
    3cfa:	80 83       	st	Z, r24
    3cfc:	08 95       	ret

00003cfe <_ZN7TwoWire5beginEv>:
    3cfe:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <_ZN7TwoWire13rxBufferIndexE>
    3d02:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <_ZN7TwoWire14rxBufferLengthE>
    3d06:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <_ZN7TwoWire13txBufferIndexE>
    3d0a:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <_ZN7TwoWire14txBufferLengthE>
    3d0e:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <twi_init>
    3d12:	87 e0       	ldi	r24, 0x07	; 7
    3d14:	9e e1       	ldi	r25, 0x1E	; 30
    3d16:	0e 94 d7 20 	call	0x41ae	; 0x41ae <twi_attachSlaveTxEvent>
    3d1a:	8d ed       	ldi	r24, 0xDD	; 221
    3d1c:	9d e1       	ldi	r25, 0x1D	; 29
    3d1e:	0c 94 d2 20 	jmp	0x41a4	; 0x41a4 <twi_attachSlaveRxEvent>

00003d22 <_ZN7TwoWire8setClockEm>:
    3d22:	cb 01       	movw	r24, r22
    3d24:	ba 01       	movw	r22, r20
    3d26:	0c 94 96 20 	jmp	0x412c	; 0x412c <twi_setFrequency>

00003d2a <_ZN7TwoWire17beginTransmissionEh>:
    3d2a:	81 e0       	ldi	r24, 0x01	; 1
    3d2c:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <_ZN7TwoWire12transmittingE>
    3d30:	60 93 ad 05 	sts	0x05AD, r22	; 0x8005ad <_ZN7TwoWire9txAddressE>
    3d34:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <_ZN7TwoWire13txBufferIndexE>
    3d38:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <_ZN7TwoWire14txBufferLengthE>
    3d3c:	08 95       	ret

00003d3e <_ZN7TwoWire15endTransmissionEh>:
    3d3e:	0f 93       	push	r16
    3d40:	06 2f       	mov	r16, r22
    3d42:	21 e0       	ldi	r18, 0x01	; 1
    3d44:	40 91 8b 05 	lds	r20, 0x058B	; 0x80058b <_ZN7TwoWire14txBufferLengthE>
    3d48:	6d e8       	ldi	r22, 0x8D	; 141
    3d4a:	75 e0       	ldi	r23, 0x05	; 5
    3d4c:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <_ZN7TwoWire9txAddressE>
    3d50:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <twi_writeTo>
    3d54:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <_ZN7TwoWire13txBufferIndexE>
    3d58:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <_ZN7TwoWire14txBufferLengthE>
    3d5c:	10 92 8a 05 	sts	0x058A, r1	; 0x80058a <_ZN7TwoWire12transmittingE>
    3d60:	0f 91       	pop	r16
    3d62:	08 95       	ret

00003d64 <_ZN7TwoWire11requestFromEhhmhh>:
    3d64:	4f 92       	push	r4
    3d66:	5f 92       	push	r5
    3d68:	6f 92       	push	r6
    3d6a:	7f 92       	push	r7
    3d6c:	af 92       	push	r10
    3d6e:	bf 92       	push	r11
    3d70:	cf 92       	push	r12
    3d72:	ef 92       	push	r14
    3d74:	ff 92       	push	r15
    3d76:	0f 93       	push	r16
    3d78:	1f 93       	push	r17
    3d7a:	cf 93       	push	r28
    3d7c:	df 93       	push	r29
    3d7e:	5c 01       	movw	r10, r24
    3d80:	f6 2e       	mov	r15, r22
    3d82:	d4 2f       	mov	r29, r20
    3d84:	28 01       	movw	r4, r16
    3d86:	39 01       	movw	r6, r18
    3d88:	ee 20       	and	r14, r14
    3d8a:	21 f1       	breq	.+72     	; 0x3dd4 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    3d8c:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_ZN7TwoWire17beginTransmissionEh>
    3d90:	ce 2d       	mov	r28, r14
    3d92:	c4 30       	cpi	r28, 0x04	; 4
    3d94:	08 f0       	brcs	.+2      	; 0x3d98 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    3d96:	c3 e0       	ldi	r28, 0x03	; 3
    3d98:	c1 50       	subi	r28, 0x01	; 1
    3d9a:	c0 f0       	brcs	.+48     	; 0x3dcc <_ZN7TwoWire11requestFromEhhmhh+0x68>
    3d9c:	28 e0       	ldi	r18, 0x08	; 8
    3d9e:	c2 9f       	mul	r28, r18
    3da0:	c0 01       	movw	r24, r0
    3da2:	11 24       	eor	r1, r1
    3da4:	a3 01       	movw	r20, r6
    3da6:	92 01       	movw	r18, r4
    3da8:	04 c0       	rjmp	.+8      	; 0x3db2 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    3daa:	56 95       	lsr	r21
    3dac:	47 95       	ror	r20
    3dae:	37 95       	ror	r19
    3db0:	27 95       	ror	r18
    3db2:	8a 95       	dec	r24
    3db4:	d2 f7       	brpl	.-12     	; 0x3daa <_ZN7TwoWire11requestFromEhhmhh+0x46>
    3db6:	ca 01       	movw	r24, r20
    3db8:	b9 01       	movw	r22, r18
    3dba:	d5 01       	movw	r26, r10
    3dbc:	ed 91       	ld	r30, X+
    3dbe:	fc 91       	ld	r31, X
    3dc0:	01 90       	ld	r0, Z+
    3dc2:	f0 81       	ld	r31, Z
    3dc4:	e0 2d       	mov	r30, r0
    3dc6:	c5 01       	movw	r24, r10
    3dc8:	09 95       	icall
    3dca:	e6 cf       	rjmp	.-52     	; 0x3d98 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    3dcc:	60 e0       	ldi	r22, 0x00	; 0
    3dce:	c5 01       	movw	r24, r10
    3dd0:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <_ZN7TwoWire15endTransmissionEh>
    3dd4:	4d 2f       	mov	r20, r29
    3dd6:	d1 32       	cpi	r29, 0x21	; 33
    3dd8:	08 f0       	brcs	.+2      	; 0x3ddc <_ZN7TwoWire11requestFromEhhmhh+0x78>
    3dda:	40 e2       	ldi	r20, 0x20	; 32
    3ddc:	2c 2d       	mov	r18, r12
    3dde:	60 eb       	ldi	r22, 0xB0	; 176
    3de0:	75 e0       	ldi	r23, 0x05	; 5
    3de2:	8f 2d       	mov	r24, r15
    3de4:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <twi_readFrom>
    3de8:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <_ZN7TwoWire13rxBufferIndexE>
    3dec:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <_ZN7TwoWire14rxBufferLengthE>
    3df0:	df 91       	pop	r29
    3df2:	cf 91       	pop	r28
    3df4:	1f 91       	pop	r17
    3df6:	0f 91       	pop	r16
    3df8:	ff 90       	pop	r15
    3dfa:	ef 90       	pop	r14
    3dfc:	cf 90       	pop	r12
    3dfe:	bf 90       	pop	r11
    3e00:	af 90       	pop	r10
    3e02:	7f 90       	pop	r7
    3e04:	6f 90       	pop	r6
    3e06:	5f 90       	pop	r5
    3e08:	4f 90       	pop	r4
    3e0a:	08 95       	ret

00003e0c <_ZN7TwoWire11requestFromEhhh>:
    3e0c:	cf 92       	push	r12
    3e0e:	ef 92       	push	r14
    3e10:	0f 93       	push	r16
    3e12:	1f 93       	push	r17
    3e14:	c2 2e       	mov	r12, r18
    3e16:	e1 2c       	mov	r14, r1
    3e18:	00 e0       	ldi	r16, 0x00	; 0
    3e1a:	10 e0       	ldi	r17, 0x00	; 0
    3e1c:	98 01       	movw	r18, r16
    3e1e:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <_ZN7TwoWire11requestFromEhhmhh>
    3e22:	1f 91       	pop	r17
    3e24:	0f 91       	pop	r16
    3e26:	ef 90       	pop	r14
    3e28:	cf 90       	pop	r12
    3e2a:	08 95       	ret

00003e2c <_ZN7TwoWire11requestFromEhh>:
    3e2c:	21 e0       	ldi	r18, 0x01	; 1
    3e2e:	0c 94 06 1f 	jmp	0x3e0c	; 0x3e0c <_ZN7TwoWire11requestFromEhhh>

00003e32 <_ZN7TwoWire15endTransmissionEv>:
    3e32:	61 e0       	ldi	r22, 0x01	; 1
    3e34:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <_ZN7TwoWire15endTransmissionEh>

00003e38 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3e38:	8a e7       	ldi	r24, 0x7A	; 122
    3e3a:	95 e0       	ldi	r25, 0x05	; 5
    3e3c:	0c 94 6f 1e 	jmp	0x3cde	; 0x3cde <_ZN7TwoWireC1Ev>

00003e40 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3e40:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    3e42:	91 8d       	ldd	r25, Z+25	; 0x19
    3e44:	22 8d       	ldd	r18, Z+26	; 0x1a
    3e46:	89 2f       	mov	r24, r25
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	80 5c       	subi	r24, 0xC0	; 192
    3e4c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e4e:	82 1b       	sub	r24, r18
    3e50:	91 09       	sbc	r25, r1
}
    3e52:	8f 73       	andi	r24, 0x3F	; 63
    3e54:	99 27       	eor	r25, r25
    3e56:	08 95       	ret

00003e58 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3e58:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3e5a:	91 8d       	ldd	r25, Z+25	; 0x19
    3e5c:	82 8d       	ldd	r24, Z+26	; 0x1a
    3e5e:	98 17       	cp	r25, r24
    3e60:	31 f0       	breq	.+12     	; 0x3e6e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3e62:	82 8d       	ldd	r24, Z+26	; 0x1a
    3e64:	e8 0f       	add	r30, r24
    3e66:	f1 1d       	adc	r31, r1
    3e68:	85 8d       	ldd	r24, Z+29	; 0x1d
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3e6e:	8f ef       	ldi	r24, 0xFF	; 255
    3e70:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3e72:	08 95       	ret

00003e74 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3e74:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3e76:	91 8d       	ldd	r25, Z+25	; 0x19
    3e78:	82 8d       	ldd	r24, Z+26	; 0x1a
    3e7a:	98 17       	cp	r25, r24
    3e7c:	61 f0       	breq	.+24     	; 0x3e96 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3e7e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3e80:	df 01       	movw	r26, r30
    3e82:	a8 0f       	add	r26, r24
    3e84:	b1 1d       	adc	r27, r1
    3e86:	5d 96       	adiw	r26, 0x1d	; 29
    3e88:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3e8a:	92 8d       	ldd	r25, Z+26	; 0x1a
    3e8c:	9f 5f       	subi	r25, 0xFF	; 255
    3e8e:	9f 73       	andi	r25, 0x3F	; 63
    3e90:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3e96:	8f ef       	ldi	r24, 0xFF	; 255
    3e98:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3e9a:	08 95       	ret

00003e9c <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    3e9c:	fc 01       	movw	r30, r24
    3e9e:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    3ea0:	44 8d       	ldd	r20, Z+28	; 0x1c
    3ea2:	25 2f       	mov	r18, r21
    3ea4:	30 e0       	ldi	r19, 0x00	; 0
    3ea6:	84 2f       	mov	r24, r20
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    3eaa:	82 1b       	sub	r24, r18
    3eac:	93 0b       	sbc	r25, r19
    3eae:	54 17       	cp	r21, r20
    3eb0:	10 f0       	brcs	.+4      	; 0x3eb6 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    3eb2:	cf 96       	adiw	r24, 0x3f	; 63
    3eb4:	08 95       	ret
  return tail - head - 1;
    3eb6:	01 97       	sbiw	r24, 0x01	; 1
}
    3eb8:	08 95       	ret

00003eba <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3eba:	82 e3       	ldi	r24, 0x32	; 50
    3ebc:	9a e0       	ldi	r25, 0x0A	; 10
    3ebe:	89 2b       	or	r24, r25
    3ec0:	49 f0       	breq	.+18     	; 0x3ed4 <_Z14serialEventRunv+0x1a>
    3ec2:	80 e0       	ldi	r24, 0x00	; 0
    3ec4:	90 e0       	ldi	r25, 0x00	; 0
    3ec6:	89 2b       	or	r24, r25
    3ec8:	29 f0       	breq	.+10     	; 0x3ed4 <_Z14serialEventRunv+0x1a>
    3eca:	0e 94 32 0a 	call	0x1464	; 0x1464 <_Z17Serial0_availablev>
    3ece:	81 11       	cpse	r24, r1
    3ed0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3ed4:	08 95       	ret

00003ed6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3ed6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3ed8:	84 8d       	ldd	r24, Z+28	; 0x1c
    3eda:	df 01       	movw	r26, r30
    3edc:	a8 0f       	add	r26, r24
    3ede:	b1 1d       	adc	r27, r1
    3ee0:	a3 5a       	subi	r26, 0xA3	; 163
    3ee2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ee4:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3ee6:	84 8d       	ldd	r24, Z+28	; 0x1c
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	01 96       	adiw	r24, 0x01	; 1
    3eec:	8f 73       	andi	r24, 0x3F	; 63
    3eee:	99 27       	eor	r25, r25
    3ef0:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3ef2:	a6 89       	ldd	r26, Z+22	; 0x16
    3ef4:	b7 89       	ldd	r27, Z+23	; 0x17
    3ef6:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3ef8:	a0 89       	ldd	r26, Z+16	; 0x10
    3efa:	b1 89       	ldd	r27, Z+17	; 0x11
    3efc:	8c 91       	ld	r24, X
    3efe:	83 70       	andi	r24, 0x03	; 3
    3f00:	80 64       	ori	r24, 0x40	; 64
    3f02:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    3f04:	93 8d       	ldd	r25, Z+27	; 0x1b
    3f06:	84 8d       	ldd	r24, Z+28	; 0x1c
    3f08:	98 13       	cpse	r25, r24
    3f0a:	06 c0       	rjmp	.+12     	; 0x3f18 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3f0c:	02 88       	ldd	r0, Z+18	; 0x12
    3f0e:	f3 89       	ldd	r31, Z+19	; 0x13
    3f10:	e0 2d       	mov	r30, r0
    3f12:	80 81       	ld	r24, Z
    3f14:	8f 7d       	andi	r24, 0xDF	; 223
    3f16:	80 83       	st	Z, r24
    3f18:	08 95       	ret

00003f1a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3f1a:	ef 92       	push	r14
    3f1c:	ff 92       	push	r15
    3f1e:	0f 93       	push	r16
    3f20:	1f 93       	push	r17
    3f22:	cf 93       	push	r28
    3f24:	df 93       	push	r29
    3f26:	ec 01       	movw	r28, r24
  _written = true;
    3f28:	81 e0       	ldi	r24, 0x01	; 1
    3f2a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3f2c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3f2e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3f30:	98 13       	cpse	r25, r24
    3f32:	05 c0       	rjmp	.+10     	; 0x3f3e <_ZN14HardwareSerial5writeEh+0x24>
    3f34:	e8 89       	ldd	r30, Y+16	; 0x10
    3f36:	f9 89       	ldd	r31, Y+17	; 0x11
    3f38:	80 81       	ld	r24, Z
    3f3a:	85 fd       	sbrc	r24, 5
    3f3c:	26 c0       	rjmp	.+76     	; 0x3f8a <_ZN14HardwareSerial5writeEh+0x70>
    3f3e:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3f40:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3f42:	10 e0       	ldi	r17, 0x00	; 0
    3f44:	0f 5f       	subi	r16, 0xFF	; 255
    3f46:	1f 4f       	sbci	r17, 0xFF	; 255
    3f48:	0f 73       	andi	r16, 0x3F	; 63
    3f4a:	11 27       	eor	r17, r17
    3f4c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3f4e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3f50:	e8 12       	cpse	r14, r24
    3f52:	0c c0       	rjmp	.+24     	; 0x3f6c <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    3f54:	0f b6       	in	r0, 0x3f	; 63
    3f56:	07 fc       	sbrc	r0, 7
    3f58:	fa cf       	rjmp	.-12     	; 0x3f4e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3f5a:	e8 89       	ldd	r30, Y+16	; 0x10
    3f5c:	f9 89       	ldd	r31, Y+17	; 0x11
    3f5e:	80 81       	ld	r24, Z
    3f60:	85 ff       	sbrs	r24, 5
    3f62:	f5 cf       	rjmp	.-22     	; 0x3f4e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3f64:	ce 01       	movw	r24, r28
    3f66:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3f6a:	f1 cf       	rjmp	.-30     	; 0x3f4e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3f6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f6e:	fe 01       	movw	r30, r28
    3f70:	e8 0f       	add	r30, r24
    3f72:	f1 1d       	adc	r31, r1
    3f74:	e3 5a       	subi	r30, 0xA3	; 163
    3f76:	ff 4f       	sbci	r31, 0xFF	; 255
    3f78:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3f7a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3f7c:	f8 94       	cli
    _tx_buffer_head = i;
    3f7e:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    3f80:	ea 89       	ldd	r30, Y+18	; 0x12
    3f82:	fb 89       	ldd	r31, Y+19	; 0x13
    3f84:	80 81       	ld	r24, Z
    3f86:	80 62       	ori	r24, 0x20	; 32
    3f88:	0a c0       	rjmp	.+20     	; 0x3f9e <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3f8a:	9f b7       	in	r25, 0x3f	; 63
    3f8c:	f8 94       	cli
      *_udr = c;
    3f8e:	ee 89       	ldd	r30, Y+22	; 0x16
    3f90:	ff 89       	ldd	r31, Y+23	; 0x17
    3f92:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3f94:	e8 89       	ldd	r30, Y+16	; 0x10
    3f96:	f9 89       	ldd	r31, Y+17	; 0x11
    3f98:	80 81       	ld	r24, Z
    3f9a:	83 70       	andi	r24, 0x03	; 3
    3f9c:	80 64       	ori	r24, 0x40	; 64
    3f9e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3fa0:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    3fa2:	81 e0       	ldi	r24, 0x01	; 1
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	df 91       	pop	r29
    3fa8:	cf 91       	pop	r28
    3faa:	1f 91       	pop	r17
    3fac:	0f 91       	pop	r16
    3fae:	ff 90       	pop	r15
    3fb0:	ef 90       	pop	r14
    3fb2:	08 95       	ret

00003fb4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3fb4:	cf 93       	push	r28
    3fb6:	df 93       	push	r29
    3fb8:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3fba:	88 8d       	ldd	r24, Y+24	; 0x18
    3fbc:	88 23       	and	r24, r24
    3fbe:	c9 f0       	breq	.+50     	; 0x3ff2 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3fc0:	ea 89       	ldd	r30, Y+18	; 0x12
    3fc2:	fb 89       	ldd	r31, Y+19	; 0x13
    3fc4:	80 81       	ld	r24, Z
    3fc6:	85 fd       	sbrc	r24, 5
    3fc8:	05 c0       	rjmp	.+10     	; 0x3fd4 <_ZN14HardwareSerial5flushEv+0x20>
    3fca:	a8 89       	ldd	r26, Y+16	; 0x10
    3fcc:	b9 89       	ldd	r27, Y+17	; 0x11
    3fce:	8c 91       	ld	r24, X
    3fd0:	86 fd       	sbrc	r24, 6
    3fd2:	0f c0       	rjmp	.+30     	; 0x3ff2 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3fd4:	0f b6       	in	r0, 0x3f	; 63
    3fd6:	07 fc       	sbrc	r0, 7
    3fd8:	f5 cf       	rjmp	.-22     	; 0x3fc4 <_ZN14HardwareSerial5flushEv+0x10>
    3fda:	80 81       	ld	r24, Z
    3fdc:	85 ff       	sbrs	r24, 5
    3fde:	f2 cf       	rjmp	.-28     	; 0x3fc4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3fe0:	a8 89       	ldd	r26, Y+16	; 0x10
    3fe2:	b9 89       	ldd	r27, Y+17	; 0x11
    3fe4:	8c 91       	ld	r24, X
    3fe6:	85 ff       	sbrs	r24, 5
    3fe8:	ed cf       	rjmp	.-38     	; 0x3fc4 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3fea:	ce 01       	movw	r24, r28
    3fec:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3ff0:	e7 cf       	rjmp	.-50     	; 0x3fc0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3ff2:	df 91       	pop	r29
    3ff4:	cf 91       	pop	r28
    3ff6:	08 95       	ret

00003ff8 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    3ff8:	08 95       	ret

00003ffa <attachInterrupt>:
    3ffa:	82 30       	cpi	r24, 0x02	; 2
    3ffc:	e8 f4       	brcc	.+58     	; 0x4038 <attachInterrupt+0x3e>
    3ffe:	e8 2f       	mov	r30, r24
    4000:	f0 e0       	ldi	r31, 0x00	; 0
    4002:	ee 0f       	add	r30, r30
    4004:	ff 1f       	adc	r31, r31
    4006:	e3 5e       	subi	r30, 0xE3	; 227
    4008:	fe 4f       	sbci	r31, 0xFE	; 254
    400a:	71 83       	std	Z+1, r23	; 0x01
    400c:	60 83       	st	Z, r22
    400e:	81 30       	cpi	r24, 0x01	; 1
    4010:	41 f0       	breq	.+16     	; 0x4022 <attachInterrupt+0x28>
    4012:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    4016:	8c 7f       	andi	r24, 0xFC	; 252
    4018:	48 2b       	or	r20, r24
    401a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    401e:	e8 9a       	sbi	0x1d, 0	; 29
    4020:	08 95       	ret
    4022:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    4026:	83 7f       	andi	r24, 0xF3	; 243
    4028:	44 0f       	add	r20, r20
    402a:	55 1f       	adc	r21, r21
    402c:	44 0f       	add	r20, r20
    402e:	55 1f       	adc	r21, r21
    4030:	48 2b       	or	r20, r24
    4032:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    4036:	e9 9a       	sbi	0x1d, 1	; 29
    4038:	08 95       	ret

0000403a <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    403a:	1f 92       	push	r1
    403c:	0f 92       	push	r0
    403e:	0f b6       	in	r0, 0x3f	; 63
    4040:	0f 92       	push	r0
    4042:	11 24       	eor	r1, r1
    4044:	2f 93       	push	r18
    4046:	3f 93       	push	r19
    4048:	4f 93       	push	r20
    404a:	5f 93       	push	r21
    404c:	6f 93       	push	r22
    404e:	7f 93       	push	r23
    4050:	8f 93       	push	r24
    4052:	9f 93       	push	r25
    4054:	af 93       	push	r26
    4056:	bf 93       	push	r27
    4058:	ef 93       	push	r30
    405a:	ff 93       	push	r31
    405c:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <intFunc>
    4060:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <intFunc+0x1>
    4064:	09 95       	icall
    4066:	ff 91       	pop	r31
    4068:	ef 91       	pop	r30
    406a:	bf 91       	pop	r27
    406c:	af 91       	pop	r26
    406e:	9f 91       	pop	r25
    4070:	8f 91       	pop	r24
    4072:	7f 91       	pop	r23
    4074:	6f 91       	pop	r22
    4076:	5f 91       	pop	r21
    4078:	4f 91       	pop	r20
    407a:	3f 91       	pop	r19
    407c:	2f 91       	pop	r18
    407e:	0f 90       	pop	r0
    4080:	0f be       	out	0x3f, r0	; 63
    4082:	0f 90       	pop	r0
    4084:	1f 90       	pop	r1
    4086:	18 95       	reti

00004088 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    4088:	1f 92       	push	r1
    408a:	0f 92       	push	r0
    408c:	0f b6       	in	r0, 0x3f	; 63
    408e:	0f 92       	push	r0
    4090:	11 24       	eor	r1, r1
    4092:	2f 93       	push	r18
    4094:	3f 93       	push	r19
    4096:	4f 93       	push	r20
    4098:	5f 93       	push	r21
    409a:	6f 93       	push	r22
    409c:	7f 93       	push	r23
    409e:	8f 93       	push	r24
    40a0:	9f 93       	push	r25
    40a2:	af 93       	push	r26
    40a4:	bf 93       	push	r27
    40a6:	ef 93       	push	r30
    40a8:	ff 93       	push	r31
    40aa:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <intFunc+0x2>
    40ae:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <intFunc+0x3>
    40b2:	09 95       	icall
    40b4:	ff 91       	pop	r31
    40b6:	ef 91       	pop	r30
    40b8:	bf 91       	pop	r27
    40ba:	af 91       	pop	r26
    40bc:	9f 91       	pop	r25
    40be:	8f 91       	pop	r24
    40c0:	7f 91       	pop	r23
    40c2:	6f 91       	pop	r22
    40c4:	5f 91       	pop	r21
    40c6:	4f 91       	pop	r20
    40c8:	3f 91       	pop	r19
    40ca:	2f 91       	pop	r18
    40cc:	0f 90       	pop	r0
    40ce:	0f be       	out	0x3f, r0	; 63
    40d0:	0f 90       	pop	r0
    40d2:	1f 90       	pop	r1
    40d4:	18 95       	reti

000040d6 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    40d6:	10 92 43 06 	sts	0x0643, r1	; 0x800643 <twi_state>
    40da:	81 e0       	ldi	r24, 0x01	; 1
    40dc:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <twi_sendStop>
    40e0:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <twi_inRepStart>
    40e4:	61 e0       	ldi	r22, 0x01	; 1
    40e6:	82 e1       	ldi	r24, 0x12	; 18
    40e8:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <digitalWrite>
    40ec:	61 e0       	ldi	r22, 0x01	; 1
    40ee:	83 e1       	ldi	r24, 0x13	; 19
    40f0:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <digitalWrite>
    40f4:	e9 eb       	ldi	r30, 0xB9	; 185
    40f6:	f0 e0       	ldi	r31, 0x00	; 0
    40f8:	80 81       	ld	r24, Z
    40fa:	8e 7f       	andi	r24, 0xFE	; 254
    40fc:	80 83       	st	Z, r24
    40fe:	80 81       	ld	r24, Z
    4100:	8d 7f       	andi	r24, 0xFD	; 253
    4102:	80 83       	st	Z, r24
    4104:	88 e4       	ldi	r24, 0x48	; 72
    4106:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    410a:	85 e4       	ldi	r24, 0x45	; 69
    410c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4110:	08 95       	ret

00004112 <twi_disable>:
    4112:	ec eb       	ldi	r30, 0xBC	; 188
    4114:	f0 e0       	ldi	r31, 0x00	; 0
    4116:	80 81       	ld	r24, Z
    4118:	8a 7b       	andi	r24, 0xBA	; 186
    411a:	80 83       	st	Z, r24
    411c:	60 e0       	ldi	r22, 0x00	; 0
    411e:	82 e1       	ldi	r24, 0x12	; 18
    4120:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <digitalWrite>
    4124:	60 e0       	ldi	r22, 0x00	; 0
    4126:	83 e1       	ldi	r24, 0x13	; 19
    4128:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <digitalWrite>

0000412c <twi_setFrequency>:
    412c:	9b 01       	movw	r18, r22
    412e:	ac 01       	movw	r20, r24
    4130:	60 e0       	ldi	r22, 0x00	; 0
    4132:	74 e2       	ldi	r23, 0x24	; 36
    4134:	84 ef       	ldi	r24, 0xF4	; 244
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	0e 94 50 24 	call	0x48a0	; 0x48a0 <__udivmodsi4>
    413c:	da 01       	movw	r26, r20
    413e:	c9 01       	movw	r24, r18
    4140:	40 97       	sbiw	r24, 0x10	; 16
    4142:	a1 09       	sbc	r26, r1
    4144:	b1 09       	sbc	r27, r1
    4146:	b6 95       	lsr	r27
    4148:	a7 95       	ror	r26
    414a:	97 95       	ror	r25
    414c:	87 95       	ror	r24
    414e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    4152:	08 95       	ret

00004154 <twi_transmit>:
    4154:	40 91 f2 05 	lds	r20, 0x05F2	; 0x8005f2 <twi_txBufferLength>
    4158:	26 2f       	mov	r18, r22
    415a:	30 e0       	ldi	r19, 0x00	; 0
    415c:	24 0f       	add	r18, r20
    415e:	31 1d       	adc	r19, r1
    4160:	21 32       	cpi	r18, 0x21	; 33
    4162:	31 05       	cpc	r19, r1
    4164:	dc f4       	brge	.+54     	; 0x419c <twi_transmit+0x48>
    4166:	20 91 43 06 	lds	r18, 0x0643	; 0x800643 <twi_state>
    416a:	24 30       	cpi	r18, 0x04	; 4
    416c:	c9 f4       	brne	.+50     	; 0x41a0 <twi_transmit+0x4c>
    416e:	fc 01       	movw	r30, r24
    4170:	80 e0       	ldi	r24, 0x00	; 0
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	86 17       	cp	r24, r22
    4176:	58 f4       	brcc	.+22     	; 0x418e <twi_transmit+0x3a>
    4178:	30 91 f2 05 	lds	r19, 0x05F2	; 0x8005f2 <twi_txBufferLength>
    417c:	21 91       	ld	r18, Z+
    417e:	dc 01       	movw	r26, r24
    4180:	ac 50       	subi	r26, 0x0C	; 12
    4182:	ba 4f       	sbci	r27, 0xFA	; 250
    4184:	a3 0f       	add	r26, r19
    4186:	b1 1d       	adc	r27, r1
    4188:	2c 93       	st	X, r18
    418a:	01 96       	adiw	r24, 0x01	; 1
    418c:	f3 cf       	rjmp	.-26     	; 0x4174 <twi_transmit+0x20>
    418e:	80 91 f2 05 	lds	r24, 0x05F2	; 0x8005f2 <twi_txBufferLength>
    4192:	68 0f       	add	r22, r24
    4194:	60 93 f2 05 	sts	0x05F2, r22	; 0x8005f2 <twi_txBufferLength>
    4198:	80 e0       	ldi	r24, 0x00	; 0
    419a:	08 95       	ret
    419c:	81 e0       	ldi	r24, 0x01	; 1
    419e:	08 95       	ret
    41a0:	82 e0       	ldi	r24, 0x02	; 2
    41a2:	08 95       	ret

000041a4 <twi_attachSlaveRxEvent>:
    41a4:	90 93 37 06 	sts	0x0637, r25	; 0x800637 <twi_onSlaveReceive+0x1>
    41a8:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <twi_onSlaveReceive>
    41ac:	08 95       	ret

000041ae <twi_attachSlaveTxEvent>:
    41ae:	90 93 39 06 	sts	0x0639, r25	; 0x800639 <twi_onSlaveTransmit+0x1>
    41b2:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <twi_onSlaveTransmit>
    41b6:	08 95       	ret

000041b8 <twi_releaseBus>:
    41b8:	85 ec       	ldi	r24, 0xC5	; 197
    41ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    41be:	10 92 43 06 	sts	0x0643, r1	; 0x800643 <twi_state>
    41c2:	08 95       	ret

000041c4 <twi_handleTimeout>:
    41c4:	cf 93       	push	r28
    41c6:	df 93       	push	r29
    41c8:	91 e0       	ldi	r25, 0x01	; 1
    41ca:	90 93 3b 06 	sts	0x063B, r25	; 0x80063b <twi_timed_out_flag>
    41ce:	88 23       	and	r24, r24
    41d0:	61 f0       	breq	.+24     	; 0x41ea <twi_handleTimeout+0x26>
    41d2:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    41d6:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
    41da:	0e 94 89 20 	call	0x4112	; 0x4112 <twi_disable>
    41de:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <twi_init>
    41e2:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
    41e6:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    41ea:	df 91       	pop	r29
    41ec:	cf 91       	pop	r28
    41ee:	08 95       	ret

000041f0 <twi_readFrom>:
    41f0:	4f 92       	push	r4
    41f2:	5f 92       	push	r5
    41f4:	6f 92       	push	r6
    41f6:	7f 92       	push	r7
    41f8:	8f 92       	push	r8
    41fa:	9f 92       	push	r9
    41fc:	af 92       	push	r10
    41fe:	bf 92       	push	r11
    4200:	cf 92       	push	r12
    4202:	df 92       	push	r13
    4204:	ef 92       	push	r14
    4206:	ff 92       	push	r15
    4208:	0f 93       	push	r16
    420a:	1f 93       	push	r17
    420c:	cf 93       	push	r28
    420e:	df 93       	push	r29
    4210:	f8 2e       	mov	r15, r24
    4212:	16 2f       	mov	r17, r22
    4214:	07 2f       	mov	r16, r23
    4216:	c4 2f       	mov	r28, r20
    4218:	e2 2e       	mov	r14, r18
    421a:	41 32       	cpi	r20, 0x21	; 33
    421c:	08 f0       	brcs	.+2      	; 0x4220 <twi_readFrom+0x30>
    421e:	be c0       	rjmp	.+380    	; 0x439c <twi_readFrom+0x1ac>
    4220:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <micros>
    4224:	4b 01       	movw	r8, r22
    4226:	5c 01       	movw	r10, r24
    4228:	d0 91 43 06 	lds	r29, 0x0643	; 0x800643 <twi_state>
    422c:	dd 23       	and	r29, r29
    422e:	31 f1       	breq	.+76     	; 0x427c <twi_readFrom+0x8c>
    4230:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <twi_timeout_us>
    4234:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <twi_timeout_us+0x1>
    4238:	a0 91 3e 06 	lds	r26, 0x063E	; 0x80063e <twi_timeout_us+0x2>
    423c:	b0 91 3f 06 	lds	r27, 0x063F	; 0x80063f <twi_timeout_us+0x3>
    4240:	89 2b       	or	r24, r25
    4242:	8a 2b       	or	r24, r26
    4244:	8b 2b       	or	r24, r27
    4246:	81 f3       	breq	.-32     	; 0x4228 <twi_readFrom+0x38>
    4248:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <micros>
    424c:	40 90 3c 06 	lds	r4, 0x063C	; 0x80063c <twi_timeout_us>
    4250:	50 90 3d 06 	lds	r5, 0x063D	; 0x80063d <twi_timeout_us+0x1>
    4254:	60 90 3e 06 	lds	r6, 0x063E	; 0x80063e <twi_timeout_us+0x2>
    4258:	70 90 3f 06 	lds	r7, 0x063F	; 0x80063f <twi_timeout_us+0x3>
    425c:	dc 01       	movw	r26, r24
    425e:	cb 01       	movw	r24, r22
    4260:	88 19       	sub	r24, r8
    4262:	99 09       	sbc	r25, r9
    4264:	aa 09       	sbc	r26, r10
    4266:	bb 09       	sbc	r27, r11
    4268:	48 16       	cp	r4, r24
    426a:	59 06       	cpc	r5, r25
    426c:	6a 06       	cpc	r6, r26
    426e:	7b 06       	cpc	r7, r27
    4270:	d8 f6       	brcc	.-74     	; 0x4228 <twi_readFrom+0x38>
    4272:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <twi_do_reset_on_timeout>
    4276:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <twi_handleTimeout>
    427a:	90 c0       	rjmp	.+288    	; 0x439c <twi_readFrom+0x1ac>
    427c:	81 e0       	ldi	r24, 0x01	; 1
    427e:	80 93 43 06 	sts	0x0643, r24	; 0x800643 <twi_state>
    4282:	e0 92 41 06 	sts	0x0641, r14	; 0x800641 <twi_sendStop>
    4286:	9f ef       	ldi	r25, 0xFF	; 255
    4288:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <twi_error>
    428c:	10 92 15 06 	sts	0x0615, r1	; 0x800615 <twi_masterBufferIndex>
    4290:	9c 0f       	add	r25, r28
    4292:	90 93 14 06 	sts	0x0614, r25	; 0x800614 <twi_masterBufferLength>
    4296:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <twi_slarw>
    429a:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <twi_slarw>
    429e:	8f 2d       	mov	r24, r15
    42a0:	88 0f       	add	r24, r24
    42a2:	89 2b       	or	r24, r25
    42a4:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <twi_slarw>
    42a8:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <twi_inRepStart>
    42ac:	81 30       	cpi	r24, 0x01	; 1
    42ae:	89 f5       	brne	.+98     	; 0x4312 <twi_readFrom+0x122>
    42b0:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <twi_inRepStart>
    42b4:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <micros>
    42b8:	6b 01       	movw	r12, r22
    42ba:	7c 01       	movw	r14, r24
    42bc:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <twi_slarw>
    42c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    42c4:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <twi_timeout_us>
    42c8:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <twi_timeout_us+0x1>
    42cc:	a0 91 3e 06 	lds	r26, 0x063E	; 0x80063e <twi_timeout_us+0x2>
    42d0:	b0 91 3f 06 	lds	r27, 0x063F	; 0x80063f <twi_timeout_us+0x3>
    42d4:	89 2b       	or	r24, r25
    42d6:	8a 2b       	or	r24, r26
    42d8:	8b 2b       	or	r24, r27
    42da:	a9 f0       	breq	.+42     	; 0x4306 <twi_readFrom+0x116>
    42dc:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <micros>
    42e0:	80 90 3c 06 	lds	r8, 0x063C	; 0x80063c <twi_timeout_us>
    42e4:	90 90 3d 06 	lds	r9, 0x063D	; 0x80063d <twi_timeout_us+0x1>
    42e8:	a0 90 3e 06 	lds	r10, 0x063E	; 0x80063e <twi_timeout_us+0x2>
    42ec:	b0 90 3f 06 	lds	r11, 0x063F	; 0x80063f <twi_timeout_us+0x3>
    42f0:	dc 01       	movw	r26, r24
    42f2:	cb 01       	movw	r24, r22
    42f4:	8c 19       	sub	r24, r12
    42f6:	9d 09       	sbc	r25, r13
    42f8:	ae 09       	sbc	r26, r14
    42fa:	bf 09       	sbc	r27, r15
    42fc:	88 16       	cp	r8, r24
    42fe:	99 06       	cpc	r9, r25
    4300:	aa 06       	cpc	r10, r26
    4302:	bb 06       	cpc	r11, r27
    4304:	90 f1       	brcs	.+100    	; 0x436a <twi_readFrom+0x17a>
    4306:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    430a:	83 fd       	sbrc	r24, 3
    430c:	d7 cf       	rjmp	.-82     	; 0x42bc <twi_readFrom+0xcc>
    430e:	85 ec       	ldi	r24, 0xC5	; 197
    4310:	01 c0       	rjmp	.+2      	; 0x4314 <twi_readFrom+0x124>
    4312:	85 ee       	ldi	r24, 0xE5	; 229
    4314:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4318:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <micros>
    431c:	6b 01       	movw	r12, r22
    431e:	7c 01       	movw	r14, r24
    4320:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <twi_state>
    4324:	81 30       	cpi	r24, 0x01	; 1
    4326:	31 f5       	brne	.+76     	; 0x4374 <twi_readFrom+0x184>
    4328:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <twi_timeout_us>
    432c:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <twi_timeout_us+0x1>
    4330:	a0 91 3e 06 	lds	r26, 0x063E	; 0x80063e <twi_timeout_us+0x2>
    4334:	b0 91 3f 06 	lds	r27, 0x063F	; 0x80063f <twi_timeout_us+0x3>
    4338:	89 2b       	or	r24, r25
    433a:	8a 2b       	or	r24, r26
    433c:	8b 2b       	or	r24, r27
    433e:	81 f3       	breq	.-32     	; 0x4320 <twi_readFrom+0x130>
    4340:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <micros>
    4344:	80 90 3c 06 	lds	r8, 0x063C	; 0x80063c <twi_timeout_us>
    4348:	90 90 3d 06 	lds	r9, 0x063D	; 0x80063d <twi_timeout_us+0x1>
    434c:	a0 90 3e 06 	lds	r10, 0x063E	; 0x80063e <twi_timeout_us+0x2>
    4350:	b0 90 3f 06 	lds	r11, 0x063F	; 0x80063f <twi_timeout_us+0x3>
    4354:	dc 01       	movw	r26, r24
    4356:	cb 01       	movw	r24, r22
    4358:	8c 19       	sub	r24, r12
    435a:	9d 09       	sbc	r25, r13
    435c:	ae 09       	sbc	r26, r14
    435e:	bf 09       	sbc	r27, r15
    4360:	88 16       	cp	r8, r24
    4362:	99 06       	cpc	r9, r25
    4364:	aa 06       	cpc	r10, r26
    4366:	bb 06       	cpc	r11, r27
    4368:	d8 f6       	brcc	.-74     	; 0x4320 <twi_readFrom+0x130>
    436a:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <twi_do_reset_on_timeout>
    436e:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <twi_handleTimeout>
    4372:	15 c0       	rjmp	.+42     	; 0x439e <twi_readFrom+0x1ae>
    4374:	80 91 15 06 	lds	r24, 0x0615	; 0x800615 <twi_masterBufferIndex>
    4378:	8c 17       	cp	r24, r28
    437a:	10 f4       	brcc	.+4      	; 0x4380 <twi_readFrom+0x190>
    437c:	c0 91 15 06 	lds	r28, 0x0615	; 0x800615 <twi_masterBufferIndex>
    4380:	a6 e1       	ldi	r26, 0x16	; 22
    4382:	b6 e0       	ldi	r27, 0x06	; 6
    4384:	91 2f       	mov	r25, r17
    4386:	e1 2f       	mov	r30, r17
    4388:	f0 2f       	mov	r31, r16
    438a:	8e 2f       	mov	r24, r30
    438c:	89 1b       	sub	r24, r25
    438e:	8c 17       	cp	r24, r28
    4390:	18 f4       	brcc	.+6      	; 0x4398 <twi_readFrom+0x1a8>
    4392:	8d 91       	ld	r24, X+
    4394:	81 93       	st	Z+, r24
    4396:	f9 cf       	rjmp	.-14     	; 0x438a <twi_readFrom+0x19a>
    4398:	dc 2f       	mov	r29, r28
    439a:	01 c0       	rjmp	.+2      	; 0x439e <twi_readFrom+0x1ae>
    439c:	d0 e0       	ldi	r29, 0x00	; 0
    439e:	8d 2f       	mov	r24, r29
    43a0:	df 91       	pop	r29
    43a2:	cf 91       	pop	r28
    43a4:	1f 91       	pop	r17
    43a6:	0f 91       	pop	r16
    43a8:	ff 90       	pop	r15
    43aa:	ef 90       	pop	r14
    43ac:	df 90       	pop	r13
    43ae:	cf 90       	pop	r12
    43b0:	bf 90       	pop	r11
    43b2:	af 90       	pop	r10
    43b4:	9f 90       	pop	r9
    43b6:	8f 90       	pop	r8
    43b8:	7f 90       	pop	r7
    43ba:	6f 90       	pop	r6
    43bc:	5f 90       	pop	r5
    43be:	4f 90       	pop	r4
    43c0:	08 95       	ret

000043c2 <twi_writeTo>:
    43c2:	4f 92       	push	r4
    43c4:	5f 92       	push	r5
    43c6:	6f 92       	push	r6
    43c8:	7f 92       	push	r7
    43ca:	8f 92       	push	r8
    43cc:	9f 92       	push	r9
    43ce:	af 92       	push	r10
    43d0:	bf 92       	push	r11
    43d2:	cf 92       	push	r12
    43d4:	df 92       	push	r13
    43d6:	ef 92       	push	r14
    43d8:	ff 92       	push	r15
    43da:	0f 93       	push	r16
    43dc:	1f 93       	push	r17
    43de:	cf 93       	push	r28
    43e0:	df 93       	push	r29
    43e2:	41 32       	cpi	r20, 0x21	; 33
    43e4:	08 f0       	brcs	.+2      	; 0x43e8 <twi_writeTo+0x26>
    43e6:	c6 c0       	rjmp	.+396    	; 0x4574 <twi_writeTo+0x1b2>
    43e8:	12 2f       	mov	r17, r18
    43ea:	f4 2e       	mov	r15, r20
    43ec:	d7 2e       	mov	r13, r23
    43ee:	e6 2e       	mov	r14, r22
    43f0:	d8 2f       	mov	r29, r24
    43f2:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <micros>
    43f6:	4b 01       	movw	r8, r22
    43f8:	5c 01       	movw	r10, r24
    43fa:	c0 91 43 06 	lds	r28, 0x0643	; 0x800643 <twi_state>
    43fe:	cc 23       	and	r28, r28
    4400:	11 f1       	breq	.+68     	; 0x4446 <twi_writeTo+0x84>
    4402:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <twi_timeout_us>
    4406:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <twi_timeout_us+0x1>
    440a:	a0 91 3e 06 	lds	r26, 0x063E	; 0x80063e <twi_timeout_us+0x2>
    440e:	b0 91 3f 06 	lds	r27, 0x063F	; 0x80063f <twi_timeout_us+0x3>
    4412:	89 2b       	or	r24, r25
    4414:	8a 2b       	or	r24, r26
    4416:	8b 2b       	or	r24, r27
    4418:	81 f3       	breq	.-32     	; 0x43fa <twi_writeTo+0x38>
    441a:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <micros>
    441e:	40 90 3c 06 	lds	r4, 0x063C	; 0x80063c <twi_timeout_us>
    4422:	50 90 3d 06 	lds	r5, 0x063D	; 0x80063d <twi_timeout_us+0x1>
    4426:	60 90 3e 06 	lds	r6, 0x063E	; 0x80063e <twi_timeout_us+0x2>
    442a:	70 90 3f 06 	lds	r7, 0x063F	; 0x80063f <twi_timeout_us+0x3>
    442e:	dc 01       	movw	r26, r24
    4430:	cb 01       	movw	r24, r22
    4432:	88 19       	sub	r24, r8
    4434:	99 09       	sbc	r25, r9
    4436:	aa 09       	sbc	r26, r10
    4438:	bb 09       	sbc	r27, r11
    443a:	48 16       	cp	r4, r24
    443c:	59 06       	cpc	r5, r25
    443e:	6a 06       	cpc	r6, r26
    4440:	7b 06       	cpc	r7, r27
    4442:	d8 f6       	brcc	.-74     	; 0x43fa <twi_writeTo+0x38>
    4444:	83 c0       	rjmp	.+262    	; 0x454c <twi_writeTo+0x18a>
    4446:	82 e0       	ldi	r24, 0x02	; 2
    4448:	80 93 43 06 	sts	0x0643, r24	; 0x800643 <twi_state>
    444c:	00 93 41 06 	sts	0x0641, r16	; 0x800641 <twi_sendStop>
    4450:	8f ef       	ldi	r24, 0xFF	; 255
    4452:	80 93 d0 05 	sts	0x05D0, r24	; 0x8005d0 <twi_error>
    4456:	10 92 15 06 	sts	0x0615, r1	; 0x800615 <twi_masterBufferIndex>
    445a:	f0 92 14 06 	sts	0x0614, r15	; 0x800614 <twi_masterBufferLength>
    445e:	9e 2d       	mov	r25, r14
    4460:	a6 e1       	ldi	r26, 0x16	; 22
    4462:	b6 e0       	ldi	r27, 0x06	; 6
    4464:	ee 2d       	mov	r30, r14
    4466:	fd 2d       	mov	r31, r13
    4468:	8e 2f       	mov	r24, r30
    446a:	89 1b       	sub	r24, r25
    446c:	8f 15       	cp	r24, r15
    446e:	18 f4       	brcc	.+6      	; 0x4476 <twi_writeTo+0xb4>
    4470:	81 91       	ld	r24, Z+
    4472:	8d 93       	st	X+, r24
    4474:	f9 cf       	rjmp	.-14     	; 0x4468 <twi_writeTo+0xa6>
    4476:	10 92 42 06 	sts	0x0642, r1	; 0x800642 <twi_slarw>
    447a:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <twi_slarw>
    447e:	dd 0f       	add	r29, r29
    4480:	d9 2b       	or	r29, r25
    4482:	d0 93 42 06 	sts	0x0642, r29	; 0x800642 <twi_slarw>
    4486:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <twi_inRepStart>
    448a:	81 30       	cpi	r24, 0x01	; 1
    448c:	89 f5       	brne	.+98     	; 0x44f0 <twi_writeTo+0x12e>
    448e:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <twi_inRepStart>
    4492:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <micros>
    4496:	6b 01       	movw	r12, r22
    4498:	7c 01       	movw	r14, r24
    449a:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <twi_slarw>
    449e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    44a2:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <twi_timeout_us>
    44a6:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <twi_timeout_us+0x1>
    44aa:	a0 91 3e 06 	lds	r26, 0x063E	; 0x80063e <twi_timeout_us+0x2>
    44ae:	b0 91 3f 06 	lds	r27, 0x063F	; 0x80063f <twi_timeout_us+0x3>
    44b2:	89 2b       	or	r24, r25
    44b4:	8a 2b       	or	r24, r26
    44b6:	8b 2b       	or	r24, r27
    44b8:	a9 f0       	breq	.+42     	; 0x44e4 <twi_writeTo+0x122>
    44ba:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <micros>
    44be:	80 90 3c 06 	lds	r8, 0x063C	; 0x80063c <twi_timeout_us>
    44c2:	90 90 3d 06 	lds	r9, 0x063D	; 0x80063d <twi_timeout_us+0x1>
    44c6:	a0 90 3e 06 	lds	r10, 0x063E	; 0x80063e <twi_timeout_us+0x2>
    44ca:	b0 90 3f 06 	lds	r11, 0x063F	; 0x80063f <twi_timeout_us+0x3>
    44ce:	dc 01       	movw	r26, r24
    44d0:	cb 01       	movw	r24, r22
    44d2:	8c 19       	sub	r24, r12
    44d4:	9d 09       	sbc	r25, r13
    44d6:	ae 09       	sbc	r26, r14
    44d8:	bf 09       	sbc	r27, r15
    44da:	88 16       	cp	r8, r24
    44dc:	99 06       	cpc	r9, r25
    44de:	aa 06       	cpc	r10, r26
    44e0:	bb 06       	cpc	r11, r27
    44e2:	a0 f1       	brcs	.+104    	; 0x454c <twi_writeTo+0x18a>
    44e4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    44e8:	83 fd       	sbrc	r24, 3
    44ea:	d7 cf       	rjmp	.-82     	; 0x449a <twi_writeTo+0xd8>
    44ec:	85 ec       	ldi	r24, 0xC5	; 197
    44ee:	01 c0       	rjmp	.+2      	; 0x44f2 <twi_writeTo+0x130>
    44f0:	85 ee       	ldi	r24, 0xE5	; 229
    44f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    44f6:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <micros>
    44fa:	6b 01       	movw	r12, r22
    44fc:	7c 01       	movw	r14, r24
    44fe:	11 23       	and	r17, r17
    4500:	59 f1       	breq	.+86     	; 0x4558 <twi_writeTo+0x196>
    4502:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <twi_state>
    4506:	82 30       	cpi	r24, 0x02	; 2
    4508:	39 f5       	brne	.+78     	; 0x4558 <twi_writeTo+0x196>
    450a:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <twi_timeout_us>
    450e:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <twi_timeout_us+0x1>
    4512:	a0 91 3e 06 	lds	r26, 0x063E	; 0x80063e <twi_timeout_us+0x2>
    4516:	b0 91 3f 06 	lds	r27, 0x063F	; 0x80063f <twi_timeout_us+0x3>
    451a:	89 2b       	or	r24, r25
    451c:	8a 2b       	or	r24, r26
    451e:	8b 2b       	or	r24, r27
    4520:	71 f3       	breq	.-36     	; 0x44fe <twi_writeTo+0x13c>
    4522:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <micros>
    4526:	80 90 3c 06 	lds	r8, 0x063C	; 0x80063c <twi_timeout_us>
    452a:	90 90 3d 06 	lds	r9, 0x063D	; 0x80063d <twi_timeout_us+0x1>
    452e:	a0 90 3e 06 	lds	r10, 0x063E	; 0x80063e <twi_timeout_us+0x2>
    4532:	b0 90 3f 06 	lds	r11, 0x063F	; 0x80063f <twi_timeout_us+0x3>
    4536:	dc 01       	movw	r26, r24
    4538:	cb 01       	movw	r24, r22
    453a:	8c 19       	sub	r24, r12
    453c:	9d 09       	sbc	r25, r13
    453e:	ae 09       	sbc	r26, r14
    4540:	bf 09       	sbc	r27, r15
    4542:	88 16       	cp	r8, r24
    4544:	99 06       	cpc	r9, r25
    4546:	aa 06       	cpc	r10, r26
    4548:	bb 06       	cpc	r11, r27
    454a:	c8 f6       	brcc	.-78     	; 0x44fe <twi_writeTo+0x13c>
    454c:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <twi_do_reset_on_timeout>
    4550:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <twi_handleTimeout>
    4554:	c5 e0       	ldi	r28, 0x05	; 5
    4556:	13 c0       	rjmp	.+38     	; 0x457e <twi_writeTo+0x1bc>
    4558:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <twi_error>
    455c:	8f 3f       	cpi	r24, 0xFF	; 255
    455e:	79 f0       	breq	.+30     	; 0x457e <twi_writeTo+0x1bc>
    4560:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <twi_error>
    4564:	80 32       	cpi	r24, 0x20	; 32
    4566:	41 f0       	breq	.+16     	; 0x4578 <twi_writeTo+0x1b6>
    4568:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <twi_error>
    456c:	80 33       	cpi	r24, 0x30	; 48
    456e:	31 f0       	breq	.+12     	; 0x457c <twi_writeTo+0x1ba>
    4570:	c4 e0       	ldi	r28, 0x04	; 4
    4572:	05 c0       	rjmp	.+10     	; 0x457e <twi_writeTo+0x1bc>
    4574:	c1 e0       	ldi	r28, 0x01	; 1
    4576:	03 c0       	rjmp	.+6      	; 0x457e <twi_writeTo+0x1bc>
    4578:	c2 e0       	ldi	r28, 0x02	; 2
    457a:	01 c0       	rjmp	.+2      	; 0x457e <twi_writeTo+0x1bc>
    457c:	c3 e0       	ldi	r28, 0x03	; 3
    457e:	8c 2f       	mov	r24, r28
    4580:	df 91       	pop	r29
    4582:	cf 91       	pop	r28
    4584:	1f 91       	pop	r17
    4586:	0f 91       	pop	r16
    4588:	ff 90       	pop	r15
    458a:	ef 90       	pop	r14
    458c:	df 90       	pop	r13
    458e:	cf 90       	pop	r12
    4590:	bf 90       	pop	r11
    4592:	af 90       	pop	r10
    4594:	9f 90       	pop	r9
    4596:	8f 90       	pop	r8
    4598:	7f 90       	pop	r7
    459a:	6f 90       	pop	r6
    459c:	5f 90       	pop	r5
    459e:	4f 90       	pop	r4
    45a0:	08 95       	ret

000045a2 <twi_stop>:
    45a2:	85 ed       	ldi	r24, 0xD5	; 213
    45a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    45a8:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <twi_timeout_us>
    45ac:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <twi_timeout_us+0x1>
    45b0:	a0 91 3e 06 	lds	r26, 0x063E	; 0x80063e <twi_timeout_us+0x2>
    45b4:	b0 91 3f 06 	lds	r27, 0x063F	; 0x80063f <twi_timeout_us+0x3>
    45b8:	07 96       	adiw	r24, 0x07	; 7
    45ba:	a1 1d       	adc	r26, r1
    45bc:	b1 1d       	adc	r27, r1
    45be:	23 e0       	ldi	r18, 0x03	; 3
    45c0:	b6 95       	lsr	r27
    45c2:	a7 95       	ror	r26
    45c4:	97 95       	ror	r25
    45c6:	87 95       	ror	r24
    45c8:	2a 95       	dec	r18
    45ca:	d1 f7       	brne	.-12     	; 0x45c0 <twi_stop+0x1e>
    45cc:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    45d0:	24 ff       	sbrs	r18, 4
    45d2:	1c c0       	rjmp	.+56     	; 0x460c <twi_stop+0x6a>
    45d4:	40 91 3c 06 	lds	r20, 0x063C	; 0x80063c <twi_timeout_us>
    45d8:	50 91 3d 06 	lds	r21, 0x063D	; 0x80063d <twi_timeout_us+0x1>
    45dc:	60 91 3e 06 	lds	r22, 0x063E	; 0x80063e <twi_timeout_us+0x2>
    45e0:	70 91 3f 06 	lds	r23, 0x063F	; 0x80063f <twi_timeout_us+0x3>
    45e4:	45 2b       	or	r20, r21
    45e6:	46 2b       	or	r20, r22
    45e8:	47 2b       	or	r20, r23
    45ea:	81 f3       	breq	.-32     	; 0x45cc <twi_stop+0x2a>
    45ec:	00 97       	sbiw	r24, 0x00	; 0
    45ee:	a1 05       	cpc	r26, r1
    45f0:	b1 05       	cpc	r27, r1
    45f2:	41 f0       	breq	.+16     	; 0x4604 <twi_stop+0x62>
    45f4:	25 e3       	ldi	r18, 0x35	; 53
    45f6:	2a 95       	dec	r18
    45f8:	f1 f7       	brne	.-4      	; 0x45f6 <twi_stop+0x54>
    45fa:	00 00       	nop
    45fc:	01 97       	sbiw	r24, 0x01	; 1
    45fe:	a1 09       	sbc	r26, r1
    4600:	b1 09       	sbc	r27, r1
    4602:	e4 cf       	rjmp	.-56     	; 0x45cc <twi_stop+0x2a>
    4604:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <twi_do_reset_on_timeout>
    4608:	0c 94 e2 20 	jmp	0x41c4	; 0x41c4 <twi_handleTimeout>
    460c:	10 92 43 06 	sts	0x0643, r1	; 0x800643 <twi_state>
    4610:	08 95       	ret

00004612 <__vector_24>:

ISR(TWI_vect)
{
    4612:	1f 92       	push	r1
    4614:	0f 92       	push	r0
    4616:	0f b6       	in	r0, 0x3f	; 63
    4618:	0f 92       	push	r0
    461a:	11 24       	eor	r1, r1
    461c:	2f 93       	push	r18
    461e:	3f 93       	push	r19
    4620:	4f 93       	push	r20
    4622:	5f 93       	push	r21
    4624:	6f 93       	push	r22
    4626:	7f 93       	push	r23
    4628:	8f 93       	push	r24
    462a:	9f 93       	push	r25
    462c:	af 93       	push	r26
    462e:	bf 93       	push	r27
    4630:	ef 93       	push	r30
    4632:	ff 93       	push	r31
  switch(TW_STATUS){
    4634:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    4638:	88 7f       	andi	r24, 0xF8	; 248
    463a:	80 36       	cpi	r24, 0x60	; 96
    463c:	09 f4       	brne	.+2      	; 0x4640 <__vector_24+0x2e>
    463e:	9e c0       	rjmp	.+316    	; 0x477c <__vector_24+0x16a>
    4640:	78 f5       	brcc	.+94     	; 0x46a0 <__vector_24+0x8e>
    4642:	88 32       	cpi	r24, 0x28	; 40
    4644:	09 f4       	brne	.+2      	; 0x4648 <__vector_24+0x36>
    4646:	5d c0       	rjmp	.+186    	; 0x4702 <__vector_24+0xf0>
    4648:	90 f4       	brcc	.+36     	; 0x466e <__vector_24+0x5c>
    464a:	80 31       	cpi	r24, 0x10	; 16
    464c:	09 f4       	brne	.+2      	; 0x4650 <__vector_24+0x3e>
    464e:	56 c0       	rjmp	.+172    	; 0x46fc <__vector_24+0xea>
    4650:	38 f4       	brcc	.+14     	; 0x4660 <__vector_24+0x4e>
    4652:	88 23       	and	r24, r24
    4654:	09 f4       	brne	.+2      	; 0x4658 <__vector_24+0x46>
    4656:	f5 c0       	rjmp	.+490    	; 0x4842 <__vector_24+0x230>
    4658:	88 30       	cpi	r24, 0x08	; 8
    465a:	09 f4       	brne	.+2      	; 0x465e <__vector_24+0x4c>
    465c:	4f c0       	rjmp	.+158    	; 0x46fc <__vector_24+0xea>
    465e:	f5 c0       	rjmp	.+490    	; 0x484a <__vector_24+0x238>
    4660:	88 31       	cpi	r24, 0x18	; 24
    4662:	09 f4       	brne	.+2      	; 0x4666 <__vector_24+0x54>
    4664:	4e c0       	rjmp	.+156    	; 0x4702 <__vector_24+0xf0>
    4666:	80 32       	cpi	r24, 0x20	; 32
    4668:	09 f4       	brne	.+2      	; 0x466c <__vector_24+0x5a>
    466a:	5f c0       	rjmp	.+190    	; 0x472a <__vector_24+0x118>
    466c:	ee c0       	rjmp	.+476    	; 0x484a <__vector_24+0x238>
    466e:	80 34       	cpi	r24, 0x40	; 64
    4670:	09 f4       	brne	.+2      	; 0x4674 <__vector_24+0x62>
    4672:	6a c0       	rjmp	.+212    	; 0x4748 <__vector_24+0x136>
    4674:	58 f4       	brcc	.+22     	; 0x468c <__vector_24+0x7a>
    4676:	80 33       	cpi	r24, 0x30	; 48
    4678:	09 f4       	brne	.+2      	; 0x467c <__vector_24+0x6a>
    467a:	57 c0       	rjmp	.+174    	; 0x472a <__vector_24+0x118>
    467c:	88 33       	cpi	r24, 0x38	; 56
    467e:	09 f0       	breq	.+2      	; 0x4682 <__vector_24+0x70>
    4680:	e4 c0       	rjmp	.+456    	; 0x484a <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4682:	80 93 d0 05 	sts	0x05D0, r24	; 0x8005d0 <twi_error>
      twi_releaseBus();
    4686:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <twi_releaseBus>
      break;
    468a:	df c0       	rjmp	.+446    	; 0x484a <__vector_24+0x238>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    468c:	80 35       	cpi	r24, 0x50	; 80
    468e:	09 f4       	brne	.+2      	; 0x4692 <__vector_24+0x80>
    4690:	4f c0       	rjmp	.+158    	; 0x4730 <__vector_24+0x11e>
    4692:	88 35       	cpi	r24, 0x58	; 88
    4694:	09 f4       	brne	.+2      	; 0x4698 <__vector_24+0x86>
    4696:	5d c0       	rjmp	.+186    	; 0x4752 <__vector_24+0x140>
    4698:	88 34       	cpi	r24, 0x48	; 72
    469a:	09 f0       	breq	.+2      	; 0x469e <__vector_24+0x8c>
    469c:	d6 c0       	rjmp	.+428    	; 0x484a <__vector_24+0x238>
    469e:	d3 c0       	rjmp	.+422    	; 0x4846 <__vector_24+0x234>
    46a0:	88 39       	cpi	r24, 0x98	; 152
    46a2:	09 f4       	brne	.+2      	; 0x46a6 <__vector_24+0x94>
    46a4:	c4 c0       	rjmp	.+392    	; 0x482e <__vector_24+0x21c>
    46a6:	a8 f4       	brcc	.+42     	; 0x46d2 <__vector_24+0xc0>
    46a8:	88 37       	cpi	r24, 0x78	; 120
    46aa:	09 f4       	brne	.+2      	; 0x46ae <__vector_24+0x9c>
    46ac:	67 c0       	rjmp	.+206    	; 0x477c <__vector_24+0x16a>
    46ae:	38 f4       	brcc	.+14     	; 0x46be <__vector_24+0xac>
    46b0:	88 36       	cpi	r24, 0x68	; 104
    46b2:	09 f4       	brne	.+2      	; 0x46b6 <__vector_24+0xa4>
    46b4:	63 c0       	rjmp	.+198    	; 0x477c <__vector_24+0x16a>
    46b6:	80 37       	cpi	r24, 0x70	; 112
    46b8:	09 f4       	brne	.+2      	; 0x46bc <__vector_24+0xaa>
    46ba:	60 c0       	rjmp	.+192    	; 0x477c <__vector_24+0x16a>
    46bc:	c6 c0       	rjmp	.+396    	; 0x484a <__vector_24+0x238>
    46be:	88 38       	cpi	r24, 0x88	; 136
    46c0:	09 f4       	brne	.+2      	; 0x46c4 <__vector_24+0xb2>
    46c2:	b5 c0       	rjmp	.+362    	; 0x482e <__vector_24+0x21c>
    46c4:	80 39       	cpi	r24, 0x90	; 144
    46c6:	09 f4       	brne	.+2      	; 0x46ca <__vector_24+0xb8>
    46c8:	5f c0       	rjmp	.+190    	; 0x4788 <__vector_24+0x176>
    46ca:	80 38       	cpi	r24, 0x80	; 128
    46cc:	09 f0       	breq	.+2      	; 0x46d0 <__vector_24+0xbe>
    46ce:	bd c0       	rjmp	.+378    	; 0x484a <__vector_24+0x238>
    46d0:	5b c0       	rjmp	.+182    	; 0x4788 <__vector_24+0x176>
    46d2:	80 3b       	cpi	r24, 0xB0	; 176
    46d4:	09 f4       	brne	.+2      	; 0x46d8 <__vector_24+0xc6>
    46d6:	83 c0       	rjmp	.+262    	; 0x47de <__vector_24+0x1cc>
    46d8:	38 f4       	brcc	.+14     	; 0x46e8 <__vector_24+0xd6>
    46da:	80 3a       	cpi	r24, 0xA0	; 160
    46dc:	09 f4       	brne	.+2      	; 0x46e0 <__vector_24+0xce>
    46de:	66 c0       	rjmp	.+204    	; 0x47ac <__vector_24+0x19a>
    46e0:	88 3a       	cpi	r24, 0xA8	; 168
    46e2:	09 f4       	brne	.+2      	; 0x46e6 <__vector_24+0xd4>
    46e4:	7c c0       	rjmp	.+248    	; 0x47de <__vector_24+0x1cc>
    46e6:	b1 c0       	rjmp	.+354    	; 0x484a <__vector_24+0x238>
    46e8:	80 3c       	cpi	r24, 0xC0	; 192
    46ea:	09 f4       	brne	.+2      	; 0x46ee <__vector_24+0xdc>
    46ec:	a4 c0       	rjmp	.+328    	; 0x4836 <__vector_24+0x224>
    46ee:	88 3c       	cpi	r24, 0xC8	; 200
    46f0:	09 f4       	brne	.+2      	; 0x46f4 <__vector_24+0xe2>
    46f2:	a1 c0       	rjmp	.+322    	; 0x4836 <__vector_24+0x224>
    46f4:	88 3b       	cpi	r24, 0xB8	; 184
    46f6:	09 f4       	brne	.+2      	; 0x46fa <__vector_24+0xe8>
    46f8:	87 c0       	rjmp	.+270    	; 0x4808 <__vector_24+0x1f6>
    46fa:	a7 c0       	rjmp	.+334    	; 0x484a <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    46fc:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <twi_slarw>
    4700:	10 c0       	rjmp	.+32     	; 0x4722 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4702:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <twi_masterBufferIndex>
    4706:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <twi_masterBufferLength>
    470a:	98 17       	cp	r25, r24
    470c:	70 f5       	brcc	.+92     	; 0x476a <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    470e:	e0 91 15 06 	lds	r30, 0x0615	; 0x800615 <twi_masterBufferIndex>
    4712:	81 e0       	ldi	r24, 0x01	; 1
    4714:	8e 0f       	add	r24, r30
    4716:	80 93 15 06 	sts	0x0615, r24	; 0x800615 <twi_masterBufferIndex>
    471a:	f0 e0       	ldi	r31, 0x00	; 0
    471c:	ea 5e       	subi	r30, 0xEA	; 234
    471e:	f9 4f       	sbci	r31, 0xF9	; 249
    4720:	80 81       	ld	r24, Z
    4722:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4726:	85 ec       	ldi	r24, 0xC5	; 197
    4728:	83 c0       	rjmp	.+262    	; 0x4830 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    472a:	80 93 d0 05 	sts	0x05D0, r24	; 0x8005d0 <twi_error>
    472e:	8b c0       	rjmp	.+278    	; 0x4846 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4730:	e0 91 15 06 	lds	r30, 0x0615	; 0x800615 <twi_masterBufferIndex>
    4734:	81 e0       	ldi	r24, 0x01	; 1
    4736:	8e 0f       	add	r24, r30
    4738:	80 93 15 06 	sts	0x0615, r24	; 0x800615 <twi_masterBufferIndex>
    473c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    4740:	f0 e0       	ldi	r31, 0x00	; 0
    4742:	ea 5e       	subi	r30, 0xEA	; 234
    4744:	f9 4f       	sbci	r31, 0xF9	; 249
    4746:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4748:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <twi_masterBufferIndex>
    474c:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <twi_masterBufferLength>
    4750:	6b c0       	rjmp	.+214    	; 0x4828 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4752:	e0 91 15 06 	lds	r30, 0x0615	; 0x800615 <twi_masterBufferIndex>
    4756:	81 e0       	ldi	r24, 0x01	; 1
    4758:	8e 0f       	add	r24, r30
    475a:	80 93 15 06 	sts	0x0615, r24	; 0x800615 <twi_masterBufferIndex>
    475e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    4762:	f0 e0       	ldi	r31, 0x00	; 0
    4764:	ea 5e       	subi	r30, 0xEA	; 234
    4766:	f9 4f       	sbci	r31, 0xF9	; 249
    4768:	80 83       	st	Z, r24
      if (twi_sendStop){
    476a:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <twi_sendStop>
    476e:	81 11       	cpse	r24, r1
    4770:	6a c0       	rjmp	.+212    	; 0x4846 <__vector_24+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    4772:	81 e0       	ldi	r24, 0x01	; 1
    4774:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4778:	84 ea       	ldi	r24, 0xA4	; 164
    477a:	5e c0       	rjmp	.+188    	; 0x4838 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    477c:	83 e0       	ldi	r24, 0x03	; 3
    477e:	80 93 43 06 	sts	0x0643, r24	; 0x800643 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4782:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <twi_rxBufferIndex>
    4786:	cf cf       	rjmp	.-98     	; 0x4726 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4788:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <twi_rxBufferIndex>
    478c:	80 32       	cpi	r24, 0x20	; 32
    478e:	08 f0       	brcs	.+2      	; 0x4792 <__vector_24+0x180>
    4790:	4e c0       	rjmp	.+156    	; 0x482e <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    4792:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <twi_rxBufferIndex>
    4796:	81 e0       	ldi	r24, 0x01	; 1
    4798:	8e 0f       	add	r24, r30
    479a:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <twi_rxBufferIndex>
    479e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    47a2:	f0 e0       	ldi	r31, 0x00	; 0
    47a4:	ee 52       	subi	r30, 0x2E	; 46
    47a6:	fa 4f       	sbci	r31, 0xFA	; 250
    47a8:	80 83       	st	Z, r24
    47aa:	bd cf       	rjmp	.-134    	; 0x4726 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    47ac:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    47b0:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <twi_rxBufferIndex>
    47b4:	80 32       	cpi	r24, 0x20	; 32
    47b6:	30 f4       	brcc	.+12     	; 0x47c4 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    47b8:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <twi_rxBufferIndex>
    47bc:	f0 e0       	ldi	r31, 0x00	; 0
    47be:	ee 52       	subi	r30, 0x2E	; 46
    47c0:	fa 4f       	sbci	r31, 0xFA	; 250
    47c2:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    47c4:	60 91 d1 05 	lds	r22, 0x05D1	; 0x8005d1 <twi_rxBufferIndex>
    47c8:	70 e0       	ldi	r23, 0x00	; 0
    47ca:	e0 91 36 06 	lds	r30, 0x0636	; 0x800636 <twi_onSlaveReceive>
    47ce:	f0 91 37 06 	lds	r31, 0x0637	; 0x800637 <twi_onSlaveReceive+0x1>
    47d2:	82 ed       	ldi	r24, 0xD2	; 210
    47d4:	95 e0       	ldi	r25, 0x05	; 5
    47d6:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    47d8:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <twi_rxBufferIndex>
      break;
    47dc:	36 c0       	rjmp	.+108    	; 0x484a <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    47de:	84 e0       	ldi	r24, 0x04	; 4
    47e0:	80 93 43 06 	sts	0x0643, r24	; 0x800643 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    47e4:	10 92 f3 05 	sts	0x05F3, r1	; 0x8005f3 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    47e8:	10 92 f2 05 	sts	0x05F2, r1	; 0x8005f2 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    47ec:	e0 91 38 06 	lds	r30, 0x0638	; 0x800638 <twi_onSlaveTransmit>
    47f0:	f0 91 39 06 	lds	r31, 0x0639	; 0x800639 <twi_onSlaveTransmit+0x1>
    47f4:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    47f6:	80 91 f2 05 	lds	r24, 0x05F2	; 0x8005f2 <twi_txBufferLength>
    47fa:	81 11       	cpse	r24, r1
    47fc:	05 c0       	rjmp	.+10     	; 0x4808 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    47fe:	81 e0       	ldi	r24, 0x01	; 1
    4800:	80 93 f2 05 	sts	0x05F2, r24	; 0x8005f2 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    4804:	10 92 f4 05 	sts	0x05F4, r1	; 0x8005f4 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4808:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <twi_txBufferIndex>
    480c:	81 e0       	ldi	r24, 0x01	; 1
    480e:	8e 0f       	add	r24, r30
    4810:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <twi_txBufferIndex>
    4814:	f0 e0       	ldi	r31, 0x00	; 0
    4816:	ec 50       	subi	r30, 0x0C	; 12
    4818:	fa 4f       	sbci	r31, 0xFA	; 250
    481a:	80 81       	ld	r24, Z
    481c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4820:	90 91 f3 05 	lds	r25, 0x05F3	; 0x8005f3 <twi_txBufferIndex>
    4824:	80 91 f2 05 	lds	r24, 0x05F2	; 0x8005f2 <twi_txBufferLength>
    4828:	98 17       	cp	r25, r24
    482a:	08 f4       	brcc	.+2      	; 0x482e <__vector_24+0x21c>
    482c:	7c cf       	rjmp	.-264    	; 0x4726 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    482e:	85 e8       	ldi	r24, 0x85	; 133
    4830:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4834:	0a c0       	rjmp	.+20     	; 0x484a <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4836:	85 ec       	ldi	r24, 0xC5	; 197
    4838:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    483c:	10 92 43 06 	sts	0x0643, r1	; 0x800643 <twi_state>
      break;
    4840:	04 c0       	rjmp	.+8      	; 0x484a <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    4842:	10 92 d0 05 	sts	0x05D0, r1	; 0x8005d0 <twi_error>
      twi_stop();
    4846:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <twi_stop>
      break;
  }
}
    484a:	ff 91       	pop	r31
    484c:	ef 91       	pop	r30
    484e:	bf 91       	pop	r27
    4850:	af 91       	pop	r26
    4852:	9f 91       	pop	r25
    4854:	8f 91       	pop	r24
    4856:	7f 91       	pop	r23
    4858:	6f 91       	pop	r22
    485a:	5f 91       	pop	r21
    485c:	4f 91       	pop	r20
    485e:	3f 91       	pop	r19
    4860:	2f 91       	pop	r18
    4862:	0f 90       	pop	r0
    4864:	0f be       	out	0x3f, r0	; 63
    4866:	0f 90       	pop	r0
    4868:	1f 90       	pop	r1
    486a:	18 95       	reti

0000486c <__cmpsf2>:
    486c:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fp_cmp>
    4870:	08 f4       	brcc	.+2      	; 0x4874 <__cmpsf2+0x8>
    4872:	81 e0       	ldi	r24, 0x01	; 1
    4874:	08 95       	ret

00004876 <__unordsf2>:
    4876:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fp_cmp>
    487a:	88 0b       	sbc	r24, r24
    487c:	99 0b       	sbc	r25, r25
    487e:	08 95       	ret

00004880 <__mulsi3>:
    4880:	db 01       	movw	r26, r22
    4882:	8f 93       	push	r24
    4884:	9f 93       	push	r25
    4886:	0e 94 88 24 	call	0x4910	; 0x4910 <__muluhisi3>
    488a:	bf 91       	pop	r27
    488c:	af 91       	pop	r26
    488e:	a2 9f       	mul	r26, r18
    4890:	80 0d       	add	r24, r0
    4892:	91 1d       	adc	r25, r1
    4894:	a3 9f       	mul	r26, r19
    4896:	90 0d       	add	r25, r0
    4898:	b2 9f       	mul	r27, r18
    489a:	90 0d       	add	r25, r0
    489c:	11 24       	eor	r1, r1
    489e:	08 95       	ret

000048a0 <__udivmodsi4>:
    48a0:	a1 e2       	ldi	r26, 0x21	; 33
    48a2:	1a 2e       	mov	r1, r26
    48a4:	aa 1b       	sub	r26, r26
    48a6:	bb 1b       	sub	r27, r27
    48a8:	fd 01       	movw	r30, r26
    48aa:	0d c0       	rjmp	.+26     	; 0x48c6 <__udivmodsi4_ep>

000048ac <__udivmodsi4_loop>:
    48ac:	aa 1f       	adc	r26, r26
    48ae:	bb 1f       	adc	r27, r27
    48b0:	ee 1f       	adc	r30, r30
    48b2:	ff 1f       	adc	r31, r31
    48b4:	a2 17       	cp	r26, r18
    48b6:	b3 07       	cpc	r27, r19
    48b8:	e4 07       	cpc	r30, r20
    48ba:	f5 07       	cpc	r31, r21
    48bc:	20 f0       	brcs	.+8      	; 0x48c6 <__udivmodsi4_ep>
    48be:	a2 1b       	sub	r26, r18
    48c0:	b3 0b       	sbc	r27, r19
    48c2:	e4 0b       	sbc	r30, r20
    48c4:	f5 0b       	sbc	r31, r21

000048c6 <__udivmodsi4_ep>:
    48c6:	66 1f       	adc	r22, r22
    48c8:	77 1f       	adc	r23, r23
    48ca:	88 1f       	adc	r24, r24
    48cc:	99 1f       	adc	r25, r25
    48ce:	1a 94       	dec	r1
    48d0:	69 f7       	brne	.-38     	; 0x48ac <__udivmodsi4_loop>
    48d2:	60 95       	com	r22
    48d4:	70 95       	com	r23
    48d6:	80 95       	com	r24
    48d8:	90 95       	com	r25
    48da:	9b 01       	movw	r18, r22
    48dc:	ac 01       	movw	r20, r24
    48de:	bd 01       	movw	r22, r26
    48e0:	cf 01       	movw	r24, r30
    48e2:	08 95       	ret

000048e4 <__umulhisi3>:
    48e4:	a2 9f       	mul	r26, r18
    48e6:	b0 01       	movw	r22, r0
    48e8:	b3 9f       	mul	r27, r19
    48ea:	c0 01       	movw	r24, r0
    48ec:	a3 9f       	mul	r26, r19
    48ee:	70 0d       	add	r23, r0
    48f0:	81 1d       	adc	r24, r1
    48f2:	11 24       	eor	r1, r1
    48f4:	91 1d       	adc	r25, r1
    48f6:	b2 9f       	mul	r27, r18
    48f8:	70 0d       	add	r23, r0
    48fa:	81 1d       	adc	r24, r1
    48fc:	11 24       	eor	r1, r1
    48fe:	91 1d       	adc	r25, r1
    4900:	08 95       	ret

00004902 <__usmulhisi3>:
    4902:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__umulhisi3>

00004906 <__usmulhisi3_tail>:
    4906:	b7 ff       	sbrs	r27, 7
    4908:	08 95       	ret
    490a:	82 1b       	sub	r24, r18
    490c:	93 0b       	sbc	r25, r19
    490e:	08 95       	ret

00004910 <__muluhisi3>:
    4910:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__umulhisi3>
    4914:	a5 9f       	mul	r26, r21
    4916:	90 0d       	add	r25, r0
    4918:	b4 9f       	mul	r27, r20
    491a:	90 0d       	add	r25, r0
    491c:	a4 9f       	mul	r26, r20
    491e:	80 0d       	add	r24, r0
    4920:	91 1d       	adc	r25, r1
    4922:	11 24       	eor	r1, r1
    4924:	08 95       	ret

00004926 <__muldi3>:
    4926:	df 93       	push	r29
    4928:	cf 93       	push	r28
    492a:	1f 93       	push	r17
    492c:	0f 93       	push	r16
    492e:	9a 9d       	mul	r25, r10
    4930:	f0 2d       	mov	r31, r0
    4932:	21 9f       	mul	r18, r17
    4934:	f0 0d       	add	r31, r0
    4936:	8b 9d       	mul	r24, r11
    4938:	f0 0d       	add	r31, r0
    493a:	8a 9d       	mul	r24, r10
    493c:	e0 2d       	mov	r30, r0
    493e:	f1 0d       	add	r31, r1
    4940:	03 9f       	mul	r16, r19
    4942:	f0 0d       	add	r31, r0
    4944:	02 9f       	mul	r16, r18
    4946:	e0 0d       	add	r30, r0
    4948:	f1 1d       	adc	r31, r1
    494a:	4e 9d       	mul	r20, r14
    494c:	e0 0d       	add	r30, r0
    494e:	f1 1d       	adc	r31, r1
    4950:	5e 9d       	mul	r21, r14
    4952:	f0 0d       	add	r31, r0
    4954:	4f 9d       	mul	r20, r15
    4956:	f0 0d       	add	r31, r0
    4958:	7f 93       	push	r23
    495a:	6f 93       	push	r22
    495c:	bf 92       	push	r11
    495e:	af 92       	push	r10
    4960:	5f 93       	push	r21
    4962:	4f 93       	push	r20
    4964:	d5 01       	movw	r26, r10
    4966:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__umulhisi3>
    496a:	8b 01       	movw	r16, r22
    496c:	ac 01       	movw	r20, r24
    496e:	d7 01       	movw	r26, r14
    4970:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__umulhisi3>
    4974:	eb 01       	movw	r28, r22
    4976:	e8 0f       	add	r30, r24
    4978:	f9 1f       	adc	r31, r25
    497a:	d6 01       	movw	r26, r12
    497c:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__muldi3_6>
    4980:	2f 91       	pop	r18
    4982:	3f 91       	pop	r19
    4984:	d6 01       	movw	r26, r12
    4986:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__umulhisi3>
    498a:	c6 0f       	add	r28, r22
    498c:	d7 1f       	adc	r29, r23
    498e:	e8 1f       	adc	r30, r24
    4990:	f9 1f       	adc	r31, r25
    4992:	af 91       	pop	r26
    4994:	bf 91       	pop	r27
    4996:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__muldi3_6>
    499a:	2f 91       	pop	r18
    499c:	3f 91       	pop	r19
    499e:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__umulhisi3>
    49a2:	c6 0f       	add	r28, r22
    49a4:	d7 1f       	adc	r29, r23
    49a6:	e8 1f       	adc	r30, r24
    49a8:	f9 1f       	adc	r31, r25
    49aa:	d6 01       	movw	r26, r12
    49ac:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__umulhisi3>
    49b0:	e6 0f       	add	r30, r22
    49b2:	f7 1f       	adc	r31, r23
    49b4:	98 01       	movw	r18, r16
    49b6:	be 01       	movw	r22, r28
    49b8:	cf 01       	movw	r24, r30
    49ba:	11 24       	eor	r1, r1
    49bc:	0f 91       	pop	r16
    49be:	1f 91       	pop	r17
    49c0:	cf 91       	pop	r28
    49c2:	df 91       	pop	r29
    49c4:	08 95       	ret

000049c6 <__muldi3_6>:
    49c6:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__umulhisi3>
    49ca:	46 0f       	add	r20, r22
    49cc:	57 1f       	adc	r21, r23
    49ce:	c8 1f       	adc	r28, r24
    49d0:	d9 1f       	adc	r29, r25
    49d2:	08 f4       	brcc	.+2      	; 0x49d6 <__muldi3_6+0x10>
    49d4:	31 96       	adiw	r30, 0x01	; 1
    49d6:	08 95       	ret

000049d8 <__umulsidi3>:
    49d8:	e8 94       	clt

000049da <__umulsidi3_helper>:
    49da:	df 93       	push	r29
    49dc:	cf 93       	push	r28
    49de:	fc 01       	movw	r30, r24
    49e0:	db 01       	movw	r26, r22
    49e2:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__umulhisi3>
    49e6:	7f 93       	push	r23
    49e8:	6f 93       	push	r22
    49ea:	e9 01       	movw	r28, r18
    49ec:	9a 01       	movw	r18, r20
    49ee:	ac 01       	movw	r20, r24
    49f0:	bf 93       	push	r27
    49f2:	af 93       	push	r26
    49f4:	3f 93       	push	r19
    49f6:	2f 93       	push	r18
    49f8:	df 01       	movw	r26, r30
    49fa:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__umulhisi3>
    49fe:	26 f4       	brtc	.+8      	; 0x4a08 <__umulsidi3_helper+0x2e>
    4a00:	6c 1b       	sub	r22, r28
    4a02:	7d 0b       	sbc	r23, r29
    4a04:	82 0b       	sbc	r24, r18
    4a06:	93 0b       	sbc	r25, r19
    4a08:	9e 01       	movw	r18, r28
    4a0a:	eb 01       	movw	r28, r22
    4a0c:	fc 01       	movw	r30, r24
    4a0e:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__muldi3_6>
    4a12:	af 91       	pop	r26
    4a14:	bf 91       	pop	r27
    4a16:	2f 91       	pop	r18
    4a18:	3f 91       	pop	r19
    4a1a:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__muldi3_6>
    4a1e:	be 01       	movw	r22, r28
    4a20:	cf 01       	movw	r24, r30
    4a22:	f9 01       	movw	r30, r18
    4a24:	2f 91       	pop	r18
    4a26:	3f 91       	pop	r19
    4a28:	cf 91       	pop	r28
    4a2a:	df 91       	pop	r29
    4a2c:	08 95       	ret

00004a2e <__cmpdi2>:
    4a2e:	2a 15       	cp	r18, r10
    4a30:	3b 05       	cpc	r19, r11
    4a32:	4c 05       	cpc	r20, r12
    4a34:	5d 05       	cpc	r21, r13
    4a36:	6e 05       	cpc	r22, r14
    4a38:	7f 05       	cpc	r23, r15
    4a3a:	80 07       	cpc	r24, r16
    4a3c:	91 07       	cpc	r25, r17
    4a3e:	08 95       	ret

00004a40 <__tablejump2__>:
    4a40:	ee 0f       	add	r30, r30
    4a42:	ff 1f       	adc	r31, r31
    4a44:	05 90       	lpm	r0, Z+
    4a46:	f4 91       	lpm	r31, Z
    4a48:	e0 2d       	mov	r30, r0
    4a4a:	09 94       	ijmp

00004a4c <malloc>:
    4a4c:	0f 93       	push	r16
    4a4e:	1f 93       	push	r17
    4a50:	cf 93       	push	r28
    4a52:	df 93       	push	r29
    4a54:	82 30       	cpi	r24, 0x02	; 2
    4a56:	91 05       	cpc	r25, r1
    4a58:	10 f4       	brcc	.+4      	; 0x4a5e <malloc+0x12>
    4a5a:	82 e0       	ldi	r24, 0x02	; 2
    4a5c:	90 e0       	ldi	r25, 0x00	; 0
    4a5e:	e0 91 46 06 	lds	r30, 0x0646	; 0x800646 <__flp>
    4a62:	f0 91 47 06 	lds	r31, 0x0647	; 0x800647 <__flp+0x1>
    4a66:	20 e0       	ldi	r18, 0x00	; 0
    4a68:	30 e0       	ldi	r19, 0x00	; 0
    4a6a:	a0 e0       	ldi	r26, 0x00	; 0
    4a6c:	b0 e0       	ldi	r27, 0x00	; 0
    4a6e:	30 97       	sbiw	r30, 0x00	; 0
    4a70:	19 f1       	breq	.+70     	; 0x4ab8 <malloc+0x6c>
    4a72:	40 81       	ld	r20, Z
    4a74:	51 81       	ldd	r21, Z+1	; 0x01
    4a76:	02 81       	ldd	r16, Z+2	; 0x02
    4a78:	13 81       	ldd	r17, Z+3	; 0x03
    4a7a:	48 17       	cp	r20, r24
    4a7c:	59 07       	cpc	r21, r25
    4a7e:	c8 f0       	brcs	.+50     	; 0x4ab2 <malloc+0x66>
    4a80:	84 17       	cp	r24, r20
    4a82:	95 07       	cpc	r25, r21
    4a84:	69 f4       	brne	.+26     	; 0x4aa0 <malloc+0x54>
    4a86:	10 97       	sbiw	r26, 0x00	; 0
    4a88:	31 f0       	breq	.+12     	; 0x4a96 <malloc+0x4a>
    4a8a:	12 96       	adiw	r26, 0x02	; 2
    4a8c:	0c 93       	st	X, r16
    4a8e:	12 97       	sbiw	r26, 0x02	; 2
    4a90:	13 96       	adiw	r26, 0x03	; 3
    4a92:	1c 93       	st	X, r17
    4a94:	27 c0       	rjmp	.+78     	; 0x4ae4 <malloc+0x98>
    4a96:	00 93 46 06 	sts	0x0646, r16	; 0x800646 <__flp>
    4a9a:	10 93 47 06 	sts	0x0647, r17	; 0x800647 <__flp+0x1>
    4a9e:	22 c0       	rjmp	.+68     	; 0x4ae4 <malloc+0x98>
    4aa0:	21 15       	cp	r18, r1
    4aa2:	31 05       	cpc	r19, r1
    4aa4:	19 f0       	breq	.+6      	; 0x4aac <malloc+0x60>
    4aa6:	42 17       	cp	r20, r18
    4aa8:	53 07       	cpc	r21, r19
    4aaa:	18 f4       	brcc	.+6      	; 0x4ab2 <malloc+0x66>
    4aac:	9a 01       	movw	r18, r20
    4aae:	bd 01       	movw	r22, r26
    4ab0:	ef 01       	movw	r28, r30
    4ab2:	df 01       	movw	r26, r30
    4ab4:	f8 01       	movw	r30, r16
    4ab6:	db cf       	rjmp	.-74     	; 0x4a6e <malloc+0x22>
    4ab8:	21 15       	cp	r18, r1
    4aba:	31 05       	cpc	r19, r1
    4abc:	f9 f0       	breq	.+62     	; 0x4afc <malloc+0xb0>
    4abe:	28 1b       	sub	r18, r24
    4ac0:	39 0b       	sbc	r19, r25
    4ac2:	24 30       	cpi	r18, 0x04	; 4
    4ac4:	31 05       	cpc	r19, r1
    4ac6:	80 f4       	brcc	.+32     	; 0x4ae8 <malloc+0x9c>
    4ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aca:	9b 81       	ldd	r25, Y+3	; 0x03
    4acc:	61 15       	cp	r22, r1
    4ace:	71 05       	cpc	r23, r1
    4ad0:	21 f0       	breq	.+8      	; 0x4ada <malloc+0x8e>
    4ad2:	fb 01       	movw	r30, r22
    4ad4:	93 83       	std	Z+3, r25	; 0x03
    4ad6:	82 83       	std	Z+2, r24	; 0x02
    4ad8:	04 c0       	rjmp	.+8      	; 0x4ae2 <malloc+0x96>
    4ada:	90 93 47 06 	sts	0x0647, r25	; 0x800647 <__flp+0x1>
    4ade:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__flp>
    4ae2:	fe 01       	movw	r30, r28
    4ae4:	32 96       	adiw	r30, 0x02	; 2
    4ae6:	44 c0       	rjmp	.+136    	; 0x4b70 <malloc+0x124>
    4ae8:	fe 01       	movw	r30, r28
    4aea:	e2 0f       	add	r30, r18
    4aec:	f3 1f       	adc	r31, r19
    4aee:	81 93       	st	Z+, r24
    4af0:	91 93       	st	Z+, r25
    4af2:	22 50       	subi	r18, 0x02	; 2
    4af4:	31 09       	sbc	r19, r1
    4af6:	39 83       	std	Y+1, r19	; 0x01
    4af8:	28 83       	st	Y, r18
    4afa:	3a c0       	rjmp	.+116    	; 0x4b70 <malloc+0x124>
    4afc:	20 91 44 06 	lds	r18, 0x0644	; 0x800644 <__brkval>
    4b00:	30 91 45 06 	lds	r19, 0x0645	; 0x800645 <__brkval+0x1>
    4b04:	23 2b       	or	r18, r19
    4b06:	41 f4       	brne	.+16     	; 0x4b18 <malloc+0xcc>
    4b08:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4b0c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4b10:	30 93 45 06 	sts	0x0645, r19	; 0x800645 <__brkval+0x1>
    4b14:	20 93 44 06 	sts	0x0644, r18	; 0x800644 <__brkval>
    4b18:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    4b1c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4b20:	21 15       	cp	r18, r1
    4b22:	31 05       	cpc	r19, r1
    4b24:	41 f4       	brne	.+16     	; 0x4b36 <malloc+0xea>
    4b26:	2d b7       	in	r18, 0x3d	; 61
    4b28:	3e b7       	in	r19, 0x3e	; 62
    4b2a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4b2e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4b32:	24 1b       	sub	r18, r20
    4b34:	35 0b       	sbc	r19, r21
    4b36:	e0 91 44 06 	lds	r30, 0x0644	; 0x800644 <__brkval>
    4b3a:	f0 91 45 06 	lds	r31, 0x0645	; 0x800645 <__brkval+0x1>
    4b3e:	e2 17       	cp	r30, r18
    4b40:	f3 07       	cpc	r31, r19
    4b42:	a0 f4       	brcc	.+40     	; 0x4b6c <malloc+0x120>
    4b44:	2e 1b       	sub	r18, r30
    4b46:	3f 0b       	sbc	r19, r31
    4b48:	28 17       	cp	r18, r24
    4b4a:	39 07       	cpc	r19, r25
    4b4c:	78 f0       	brcs	.+30     	; 0x4b6c <malloc+0x120>
    4b4e:	ac 01       	movw	r20, r24
    4b50:	4e 5f       	subi	r20, 0xFE	; 254
    4b52:	5f 4f       	sbci	r21, 0xFF	; 255
    4b54:	24 17       	cp	r18, r20
    4b56:	35 07       	cpc	r19, r21
    4b58:	48 f0       	brcs	.+18     	; 0x4b6c <malloc+0x120>
    4b5a:	4e 0f       	add	r20, r30
    4b5c:	5f 1f       	adc	r21, r31
    4b5e:	50 93 45 06 	sts	0x0645, r21	; 0x800645 <__brkval+0x1>
    4b62:	40 93 44 06 	sts	0x0644, r20	; 0x800644 <__brkval>
    4b66:	81 93       	st	Z+, r24
    4b68:	91 93       	st	Z+, r25
    4b6a:	02 c0       	rjmp	.+4      	; 0x4b70 <malloc+0x124>
    4b6c:	e0 e0       	ldi	r30, 0x00	; 0
    4b6e:	f0 e0       	ldi	r31, 0x00	; 0
    4b70:	cf 01       	movw	r24, r30
    4b72:	df 91       	pop	r29
    4b74:	cf 91       	pop	r28
    4b76:	1f 91       	pop	r17
    4b78:	0f 91       	pop	r16
    4b7a:	08 95       	ret

00004b7c <free>:
    4b7c:	cf 93       	push	r28
    4b7e:	df 93       	push	r29
    4b80:	00 97       	sbiw	r24, 0x00	; 0
    4b82:	09 f4       	brne	.+2      	; 0x4b86 <free+0xa>
    4b84:	81 c0       	rjmp	.+258    	; 0x4c88 <free+0x10c>
    4b86:	fc 01       	movw	r30, r24
    4b88:	32 97       	sbiw	r30, 0x02	; 2
    4b8a:	13 82       	std	Z+3, r1	; 0x03
    4b8c:	12 82       	std	Z+2, r1	; 0x02
    4b8e:	a0 91 46 06 	lds	r26, 0x0646	; 0x800646 <__flp>
    4b92:	b0 91 47 06 	lds	r27, 0x0647	; 0x800647 <__flp+0x1>
    4b96:	10 97       	sbiw	r26, 0x00	; 0
    4b98:	81 f4       	brne	.+32     	; 0x4bba <free+0x3e>
    4b9a:	20 81       	ld	r18, Z
    4b9c:	31 81       	ldd	r19, Z+1	; 0x01
    4b9e:	82 0f       	add	r24, r18
    4ba0:	93 1f       	adc	r25, r19
    4ba2:	20 91 44 06 	lds	r18, 0x0644	; 0x800644 <__brkval>
    4ba6:	30 91 45 06 	lds	r19, 0x0645	; 0x800645 <__brkval+0x1>
    4baa:	28 17       	cp	r18, r24
    4bac:	39 07       	cpc	r19, r25
    4bae:	51 f5       	brne	.+84     	; 0x4c04 <free+0x88>
    4bb0:	f0 93 45 06 	sts	0x0645, r31	; 0x800645 <__brkval+0x1>
    4bb4:	e0 93 44 06 	sts	0x0644, r30	; 0x800644 <__brkval>
    4bb8:	67 c0       	rjmp	.+206    	; 0x4c88 <free+0x10c>
    4bba:	ed 01       	movw	r28, r26
    4bbc:	20 e0       	ldi	r18, 0x00	; 0
    4bbe:	30 e0       	ldi	r19, 0x00	; 0
    4bc0:	ce 17       	cp	r28, r30
    4bc2:	df 07       	cpc	r29, r31
    4bc4:	40 f4       	brcc	.+16     	; 0x4bd6 <free+0x5a>
    4bc6:	4a 81       	ldd	r20, Y+2	; 0x02
    4bc8:	5b 81       	ldd	r21, Y+3	; 0x03
    4bca:	9e 01       	movw	r18, r28
    4bcc:	41 15       	cp	r20, r1
    4bce:	51 05       	cpc	r21, r1
    4bd0:	f1 f0       	breq	.+60     	; 0x4c0e <free+0x92>
    4bd2:	ea 01       	movw	r28, r20
    4bd4:	f5 cf       	rjmp	.-22     	; 0x4bc0 <free+0x44>
    4bd6:	d3 83       	std	Z+3, r29	; 0x03
    4bd8:	c2 83       	std	Z+2, r28	; 0x02
    4bda:	40 81       	ld	r20, Z
    4bdc:	51 81       	ldd	r21, Z+1	; 0x01
    4bde:	84 0f       	add	r24, r20
    4be0:	95 1f       	adc	r25, r21
    4be2:	c8 17       	cp	r28, r24
    4be4:	d9 07       	cpc	r29, r25
    4be6:	59 f4       	brne	.+22     	; 0x4bfe <free+0x82>
    4be8:	88 81       	ld	r24, Y
    4bea:	99 81       	ldd	r25, Y+1	; 0x01
    4bec:	84 0f       	add	r24, r20
    4bee:	95 1f       	adc	r25, r21
    4bf0:	02 96       	adiw	r24, 0x02	; 2
    4bf2:	91 83       	std	Z+1, r25	; 0x01
    4bf4:	80 83       	st	Z, r24
    4bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    4bf8:	9b 81       	ldd	r25, Y+3	; 0x03
    4bfa:	93 83       	std	Z+3, r25	; 0x03
    4bfc:	82 83       	std	Z+2, r24	; 0x02
    4bfe:	21 15       	cp	r18, r1
    4c00:	31 05       	cpc	r19, r1
    4c02:	29 f4       	brne	.+10     	; 0x4c0e <free+0x92>
    4c04:	f0 93 47 06 	sts	0x0647, r31	; 0x800647 <__flp+0x1>
    4c08:	e0 93 46 06 	sts	0x0646, r30	; 0x800646 <__flp>
    4c0c:	3d c0       	rjmp	.+122    	; 0x4c88 <free+0x10c>
    4c0e:	e9 01       	movw	r28, r18
    4c10:	fb 83       	std	Y+3, r31	; 0x03
    4c12:	ea 83       	std	Y+2, r30	; 0x02
    4c14:	49 91       	ld	r20, Y+
    4c16:	59 91       	ld	r21, Y+
    4c18:	c4 0f       	add	r28, r20
    4c1a:	d5 1f       	adc	r29, r21
    4c1c:	ec 17       	cp	r30, r28
    4c1e:	fd 07       	cpc	r31, r29
    4c20:	61 f4       	brne	.+24     	; 0x4c3a <free+0xbe>
    4c22:	80 81       	ld	r24, Z
    4c24:	91 81       	ldd	r25, Z+1	; 0x01
    4c26:	84 0f       	add	r24, r20
    4c28:	95 1f       	adc	r25, r21
    4c2a:	02 96       	adiw	r24, 0x02	; 2
    4c2c:	e9 01       	movw	r28, r18
    4c2e:	99 83       	std	Y+1, r25	; 0x01
    4c30:	88 83       	st	Y, r24
    4c32:	82 81       	ldd	r24, Z+2	; 0x02
    4c34:	93 81       	ldd	r25, Z+3	; 0x03
    4c36:	9b 83       	std	Y+3, r25	; 0x03
    4c38:	8a 83       	std	Y+2, r24	; 0x02
    4c3a:	e0 e0       	ldi	r30, 0x00	; 0
    4c3c:	f0 e0       	ldi	r31, 0x00	; 0
    4c3e:	12 96       	adiw	r26, 0x02	; 2
    4c40:	8d 91       	ld	r24, X+
    4c42:	9c 91       	ld	r25, X
    4c44:	13 97       	sbiw	r26, 0x03	; 3
    4c46:	00 97       	sbiw	r24, 0x00	; 0
    4c48:	19 f0       	breq	.+6      	; 0x4c50 <free+0xd4>
    4c4a:	fd 01       	movw	r30, r26
    4c4c:	dc 01       	movw	r26, r24
    4c4e:	f7 cf       	rjmp	.-18     	; 0x4c3e <free+0xc2>
    4c50:	8d 91       	ld	r24, X+
    4c52:	9c 91       	ld	r25, X
    4c54:	11 97       	sbiw	r26, 0x01	; 1
    4c56:	9d 01       	movw	r18, r26
    4c58:	2e 5f       	subi	r18, 0xFE	; 254
    4c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c5c:	82 0f       	add	r24, r18
    4c5e:	93 1f       	adc	r25, r19
    4c60:	20 91 44 06 	lds	r18, 0x0644	; 0x800644 <__brkval>
    4c64:	30 91 45 06 	lds	r19, 0x0645	; 0x800645 <__brkval+0x1>
    4c68:	28 17       	cp	r18, r24
    4c6a:	39 07       	cpc	r19, r25
    4c6c:	69 f4       	brne	.+26     	; 0x4c88 <free+0x10c>
    4c6e:	30 97       	sbiw	r30, 0x00	; 0
    4c70:	29 f4       	brne	.+10     	; 0x4c7c <free+0x100>
    4c72:	10 92 47 06 	sts	0x0647, r1	; 0x800647 <__flp+0x1>
    4c76:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__flp>
    4c7a:	02 c0       	rjmp	.+4      	; 0x4c80 <free+0x104>
    4c7c:	13 82       	std	Z+3, r1	; 0x03
    4c7e:	12 82       	std	Z+2, r1	; 0x02
    4c80:	b0 93 45 06 	sts	0x0645, r27	; 0x800645 <__brkval+0x1>
    4c84:	a0 93 44 06 	sts	0x0644, r26	; 0x800644 <__brkval>
    4c88:	df 91       	pop	r29
    4c8a:	cf 91       	pop	r28
    4c8c:	08 95       	ret

00004c8e <__do_global_dtors>:
    4c8e:	10 e0       	ldi	r17, 0x00	; 0
    4c90:	cb ea       	ldi	r28, 0xAB	; 171
    4c92:	d0 e0       	ldi	r29, 0x00	; 0
    4c94:	04 c0       	rjmp	.+8      	; 0x4c9e <__do_global_dtors+0x10>
    4c96:	fe 01       	movw	r30, r28
    4c98:	0e 94 20 25 	call	0x4a40	; 0x4a40 <__tablejump2__>
    4c9c:	21 96       	adiw	r28, 0x01	; 1
    4c9e:	cc 3a       	cpi	r28, 0xAC	; 172
    4ca0:	d1 07       	cpc	r29, r17
    4ca2:	c9 f7       	brne	.-14     	; 0x4c96 <__do_global_dtors+0x8>
    4ca4:	f8 94       	cli

00004ca6 <__stop_program>:
    4ca6:	ff cf       	rjmp	.-2      	; 0x4ca6 <__stop_program>
