
pdm_sketch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e0  00800100  00004cd0  00004d64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004cd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000036c  008002e0  008002e0  00004f44  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004f44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004f74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007a8  00000000  00000000  00004fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00015329  00000000  00000000  0000575c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003957  00000000  00000000  0001aa85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004df0  00000000  00000000  0001e3dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001b10  00000000  00000000  000231cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005f9c  00000000  00000000  00024cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009f4e  00000000  00000000  0002ac78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000798  00000000  00000000  00034bc6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ac 00 	jmp	0x158	; 0x158 <__dtors_end>
       4:	0c 94 31 20 	jmp	0x4062	; 0x4062 <__vector_1>
       8:	0c 94 58 20 	jmp	0x40b0	; 0x40b0 <__vector_2>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <__vector_16>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 ca 0a 	jmp	0x1594	; 0x1594 <__vector_18>
      4c:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <__vector_19>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 1d 23 	jmp	0x463a	; 0x463a <__vector_24>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	73 65       	ori	r23, 0x53	; 83
      6a:	74 20       	and	r7, r4
      6c:	63 61       	ori	r22, 0x13	; 19
      6e:	6c 69       	ori	r22, 0x9C	; 156
      70:	62 72       	andi	r22, 0x22	; 34
      72:	61 74       	andi	r22, 0x41	; 65
      74:	69 6f       	ori	r22, 0xF9	; 249
      76:	6e 00       	.word	0x006e	; ????

00000078 <_ZZN8INA233_S10resetAlarmEvE3__c>:
      78:	72 65 73 65 74 20 61 6c 61 72 6d 00                 reset alarm.

00000084 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_4>:
      84:	55 56 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     UV WARN LIMIT re
      94:	61 64 62 61 63 6b 3a 20 00                          adback: .

0000009d <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_3>:
      9d:	55 56 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     UV WARN LIMIT: .

000000ad <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_2>:
      ad:	4f 56 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     OV WARN LIMIT re
      bd:	61 64 62 61 63 6b 3a 20 00                          adback: .

000000c6 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_1>:
      c6:	4f 56 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     OV WARN LIMIT: .

000000d6 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_0>:
      d6:	4f 43 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     OC WARN LIMIT re
      e6:	61 64 62 61 63 6b 3a 20 00                          adback: .

000000ef <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c>:
      ef:	4f 43 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     OC WARN LIMIT: .

000000ff <digital_pin_to_timer_PGM>:
      ff:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     10f:	00 00 00 00                                         ....

00000113 <digital_pin_to_bit_mask_PGM>:
     113:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     123:	04 08 10 20                                         ... 

00000127 <digital_pin_to_port_PGM>:
     127:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     137:	03 03 03 03                                         ....

0000013b <port_to_output_PGM>:
     13b:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000145 <port_to_mode_PGM>:
     145:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000150 <__ctors_start>:
     150:	21 06       	cpc	r2, r17
     152:	2c 0b       	sbc	r18, r28
     154:	0c 20       	and	r0, r12

00000156 <__ctors_end>:
     156:	3c 07       	cpc	r19, r28

00000158 <__dtors_end>:
     158:	11 24       	eor	r1, r1
     15a:	1f be       	out	0x3f, r1	; 63
     15c:	cf ef       	ldi	r28, 0xFF	; 255
     15e:	d8 e0       	ldi	r29, 0x08	; 8
     160:	de bf       	out	0x3e, r29	; 62
     162:	cd bf       	out	0x3d, r28	; 61

00000164 <__do_copy_data>:
     164:	12 e0       	ldi	r17, 0x02	; 2
     166:	a0 e0       	ldi	r26, 0x00	; 0
     168:	b1 e0       	ldi	r27, 0x01	; 1
     16a:	e0 ed       	ldi	r30, 0xD0	; 208
     16c:	fc e4       	ldi	r31, 0x4C	; 76
     16e:	02 c0       	rjmp	.+4      	; 0x174 <__do_copy_data+0x10>
     170:	05 90       	lpm	r0, Z+
     172:	0d 92       	st	X+, r0
     174:	a0 3e       	cpi	r26, 0xE0	; 224
     176:	b1 07       	cpc	r27, r17
     178:	d9 f7       	brne	.-10     	; 0x170 <__do_copy_data+0xc>

0000017a <__do_clear_bss>:
     17a:	26 e0       	ldi	r18, 0x06	; 6
     17c:	a0 ee       	ldi	r26, 0xE0	; 224
     17e:	b2 e0       	ldi	r27, 0x02	; 2
     180:	01 c0       	rjmp	.+2      	; 0x184 <.do_clear_bss_start>

00000182 <.do_clear_bss_loop>:
     182:	1d 92       	st	X+, r1

00000184 <.do_clear_bss_start>:
     184:	ac 34       	cpi	r26, 0x4C	; 76
     186:	b2 07       	cpc	r27, r18
     188:	e1 f7       	brne	.-8      	; 0x182 <.do_clear_bss_loop>

0000018a <__do_global_ctors>:
     18a:	10 e0       	ldi	r17, 0x00	; 0
     18c:	cb ea       	ldi	r28, 0xAB	; 171
     18e:	d0 e0       	ldi	r29, 0x00	; 0
     190:	04 c0       	rjmp	.+8      	; 0x19a <__do_global_ctors+0x10>
     192:	21 97       	sbiw	r28, 0x01	; 1
     194:	fe 01       	movw	r30, r28
     196:	0e 94 34 25 	call	0x4a68	; 0x4a68 <__tablejump2__>
     19a:	c8 3a       	cpi	r28, 0xA8	; 168
     19c:	d1 07       	cpc	r29, r17
     19e:	c9 f7       	brne	.-14     	; 0x192 <__do_global_ctors+0x8>
     1a0:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <main>
     1a4:	0c 94 5b 26 	jmp	0x4cb6	; 0x4cb6 <__do_global_dtors>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>:

void INA233_S::getAlarm()
{
    INA233_Data_Package data = receiveData_(0x7C, 1);
    Serial.print("status input: ");
    Serial.println(data.msg[0], BIN);
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
     1b4:	dc 01       	movw	r26, r24
     1b6:	6c 93       	st	X, r22
     1b8:	12 96       	adiw	r26, 0x02	; 2
     1ba:	5c 93       	st	X, r21
     1bc:	4e 93       	st	-X, r20
     1be:	11 97       	sbiw	r26, 0x01	; 1
     1c0:	14 96       	adiw	r26, 0x04	; 4
     1c2:	3c 93       	st	X, r19
     1c4:	2e 93       	st	-X, r18
     1c6:	13 97       	sbiw	r26, 0x03	; 3
     1c8:	2c e0       	ldi	r18, 0x0C	; 12
     1ca:	fe 01       	movw	r30, r28
     1cc:	35 96       	adiw	r30, 0x05	; 5
     1ce:	15 96       	adiw	r26, 0x05	; 5
     1d0:	01 90       	ld	r0, Z+
     1d2:	0d 92       	st	X+, r0
     1d4:	2a 95       	dec	r18
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config+0x24>
     1d8:	2a e0       	ldi	r18, 0x0A	; 10
     1da:	fc 01       	movw	r30, r24
     1dc:	71 96       	adiw	r30, 0x11	; 17
     1de:	df 01       	movw	r26, r30
     1e0:	32 2f       	mov	r19, r18
     1e2:	1d 92       	st	X+, r1
     1e4:	3a 95       	dec	r19
     1e6:	e9 f7       	brne	.-6      	; 0x1e2 <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config+0x36>
     1e8:	dc 01       	movw	r26, r24
     1ea:	5b 96       	adiw	r26, 0x1b	; 27
     1ec:	1c 92       	st	X, r1
     1ee:	5b 97       	sbiw	r26, 0x1b	; 27
     1f0:	5c 96       	adiw	r26, 0x1c	; 28
     1f2:	2c 93       	st	X, r18
     1f4:	5c 97       	sbiw	r26, 0x1c	; 28
     1f6:	5d 96       	adiw	r26, 0x1d	; 29
     1f8:	1c 92       	st	X, r1
     1fa:	5d 97       	sbiw	r26, 0x1d	; 29
     1fc:	5e 96       	adiw	r26, 0x1e	; 30
     1fe:	1c 92       	st	X, r1
     200:	5e 97       	sbiw	r26, 0x1e	; 30
     202:	5f 96       	adiw	r26, 0x1f	; 31
     204:	1c 92       	st	X, r1
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <_ZN8INA233_S15transmitCommandEh>:
     20c:	cf 93       	push	r28
     20e:	c6 2f       	mov	r28, r22
     210:	fc 01       	movw	r30, r24
     212:	60 81       	ld	r22, Z
     214:	8e e7       	ldi	r24, 0x7E	; 126
     216:	95 e0       	ldi	r25, 0x05	; 5
     218:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <_ZN7TwoWire17beginTransmissionEh>
     21c:	6c 2f       	mov	r22, r28
     21e:	8e e7       	ldi	r24, 0x7E	; 126
     220:	95 e0       	ldi	r25, 0x05	; 5
     222:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <_ZN7TwoWire5writeEh>
     226:	8e e7       	ldi	r24, 0x7E	; 126
     228:	95 e0       	ldi	r25, 0x05	; 5
     22a:	cf 91       	pop	r28
     22c:	0c 94 09 20 	jmp	0x4012	; 0x4012 <_ZN7TwoWire15endTransmissionEv>

00000230 <_ZN8INA233_S10resetAlarmEv>:
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	ec 01       	movw	r28, r24
     236:	68 e7       	ldi	r22, 0x78	; 120
     238:	70 e0       	ldi	r23, 0x00	; 0
     23a:	83 ed       	ldi	r24, 0xD3	; 211
     23c:	94 e0       	ldi	r25, 0x04	; 4
     23e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     242:	63 e0       	ldi	r22, 0x03	; 3
     244:	ce 01       	movw	r24, r28
     246:	df 91       	pop	r29
     248:	cf 91       	pop	r28
     24a:	0c 94 06 01 	jmp	0x20c	; 0x20c <_ZN8INA233_S15transmitCommandEh>

0000024e <_ZN8INA233_S9resetChipEv>:
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	ec 01       	movw	r28, r24
     254:	6f e2       	ldi	r22, 0x2F	; 47
     256:	71 e0       	ldi	r23, 0x01	; 1
     258:	83 ed       	ldi	r24, 0xD3	; 211
     25a:	94 e0       	ldi	r25, 0x04	; 4
     25c:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <_ZN5Print7printlnEPKc>
     260:	62 e1       	ldi	r22, 0x12	; 18
     262:	ce 01       	movw	r24, r28
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	0c 94 06 01 	jmp	0x20c	; 0x20c <_ZN8INA233_S15transmitCommandEh>

0000026c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>:
     26c:	1f 93       	push	r17
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	fc 01       	movw	r30, r24
     274:	eb 01       	movw	r28, r22
     276:	14 2f       	mov	r17, r20
     278:	9a 85       	ldd	r25, Y+10	; 0x0a
     27a:	93 30       	cpi	r25, 0x03	; 3
     27c:	18 f0       	brcs	.+6      	; 0x284 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x18>
     27e:	6a e3       	ldi	r22, 0x3A	; 58
     280:	71 e0       	ldi	r23, 0x01	; 1
     282:	04 c0       	rjmp	.+8      	; 0x28c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x20>
     284:	91 11       	cpse	r25, r1
     286:	0f c0       	rjmp	.+30     	; 0x2a6 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x3a>
     288:	60 ea       	ldi	r22, 0xA0	; 160
     28a:	71 e0       	ldi	r23, 0x01	; 1
     28c:	83 ed       	ldi	r24, 0xD3	; 211
     28e:	94 e0       	ldi	r25, 0x04	; 4
     290:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <_ZN5Print7printlnEPKc>
     294:	6f e7       	ldi	r22, 0x7F	; 127
     296:	71 e0       	ldi	r23, 0x01	; 1
     298:	83 ed       	ldi	r24, 0xD3	; 211
     29a:	94 e0       	ldi	r25, 0x04	; 4
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	1f 91       	pop	r17
     2a2:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <_ZN5Print7printlnEPKc>
     2a6:	60 81       	ld	r22, Z
     2a8:	8e e7       	ldi	r24, 0x7E	; 126
     2aa:	95 e0       	ldi	r25, 0x05	; 5
     2ac:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <_ZN7TwoWire17beginTransmissionEh>
     2b0:	61 2f       	mov	r22, r17
     2b2:	8e e7       	ldi	r24, 0x7E	; 126
     2b4:	95 e0       	ldi	r25, 0x05	; 5
     2b6:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <_ZN7TwoWire5writeEh>
     2ba:	68 81       	ld	r22, Y
     2bc:	8e e7       	ldi	r24, 0x7E	; 126
     2be:	95 e0       	ldi	r25, 0x05	; 5
     2c0:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <_ZN7TwoWire5writeEh>
     2c4:	8a 85       	ldd	r24, Y+10	; 0x0a
     2c6:	82 30       	cpi	r24, 0x02	; 2
     2c8:	29 f4       	brne	.+10     	; 0x2d4 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x68>
     2ca:	69 81       	ldd	r22, Y+1	; 0x01
     2cc:	8e e7       	ldi	r24, 0x7E	; 126
     2ce:	95 e0       	ldi	r25, 0x05	; 5
     2d0:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <_ZN7TwoWire5writeEh>
     2d4:	8e e7       	ldi	r24, 0x7E	; 126
     2d6:	95 e0       	ldi	r25, 0x05	; 5
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	1f 91       	pop	r17
     2de:	0c 94 09 20 	jmp	0x4012	; 0x4012 <_ZN7TwoWire15endTransmissionEv>

000002e2 <_ZN8INA233_S12receiveData_Ehh>:
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	0f 93       	push	r16
     2e8:	1f 93       	push	r17
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	ec 01       	movw	r28, r24
     2f0:	7b 01       	movw	r14, r22
     2f2:	02 2f       	mov	r16, r18
     2f4:	8f e0       	ldi	r24, 0x0F	; 15
     2f6:	fe 01       	movw	r30, r28
     2f8:	11 92       	st	Z+, r1
     2fa:	8a 95       	dec	r24
     2fc:	e9 f7       	brne	.-6      	; 0x2f8 <_ZN8INA233_S12receiveData_Ehh+0x16>
     2fe:	8a e0       	ldi	r24, 0x0A	; 10
     300:	8b 87       	std	Y+11, r24	; 0x0b
     302:	64 2f       	mov	r22, r20
     304:	c7 01       	movw	r24, r14
     306:	0e 94 06 01 	call	0x20c	; 0x20c <_ZN8INA233_S15transmitCommandEh>
     30a:	40 2f       	mov	r20, r16
     30c:	f7 01       	movw	r30, r14
     30e:	60 81       	ld	r22, Z
     310:	8e e7       	ldi	r24, 0x7E	; 126
     312:	95 e0       	ldi	r25, 0x05	; 5
     314:	0e 94 06 20 	call	0x400c	; 0x400c <_ZN7TwoWire11requestFromEhh>
     318:	8e e7       	ldi	r24, 0x7E	; 126
     31a:	95 e0       	ldi	r25, 0x05	; 5
     31c:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <_ZN7TwoWire9availableEv>
     320:	89 2b       	or	r24, r25
     322:	79 f0       	breq	.+30     	; 0x342 <_ZN8INA233_S12receiveData_Ehh+0x60>
     324:	1a 85       	ldd	r17, Y+10	; 0x0a
     326:	8e e7       	ldi	r24, 0x7E	; 126
     328:	95 e0       	ldi	r25, 0x05	; 5
     32a:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <_ZN7TwoWire4readEv>
     32e:	fe 01       	movw	r30, r28
     330:	e1 0f       	add	r30, r17
     332:	f1 1d       	adc	r31, r1
     334:	80 83       	st	Z, r24
     336:	1f 5f       	subi	r17, 0xFF	; 255
     338:	1a 87       	std	Y+10, r17	; 0x0a
     33a:	1a 30       	cpi	r17, 0x0A	; 10
     33c:	68 f3       	brcs	.-38     	; 0x318 <_ZN8INA233_S12receiveData_Ehh+0x36>
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	8c 87       	std	Y+12, r24	; 0x0c
     342:	8a 85       	ldd	r24, Y+10	; 0x0a
     344:	80 17       	cp	r24, r16
     346:	18 f4       	brcc	.+6      	; 0x34e <_ZN8INA233_S12receiveData_Ehh+0x6c>
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	8d 87       	std	Y+13, r24	; 0x0d
     34c:	04 c0       	rjmp	.+8      	; 0x356 <_ZN8INA233_S12receiveData_Ehh+0x74>
     34e:	08 17       	cp	r16, r24
     350:	10 f4       	brcc	.+4      	; 0x356 <_ZN8INA233_S12receiveData_Ehh+0x74>
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	8e 87       	std	Y+14, r24	; 0x0e
     356:	ce 01       	movw	r24, r28
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	1f 91       	pop	r17
     35e:	0f 91       	pop	r16
     360:	ff 90       	pop	r15
     362:	ef 90       	pop	r14
     364:	08 95       	ret

00000366 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>:
     366:	ef 92       	push	r14
     368:	ff 92       	push	r15
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	2f 97       	sbiw	r28, 0x0f	; 15
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	f8 94       	cli
     37c:	de bf       	out	0x3e, r29	; 62
     37e:	0f be       	out	0x3f, r0	; 63
     380:	cd bf       	out	0x3d, r28	; 61
     382:	8b 01       	movw	r16, r22
     384:	fb 01       	movw	r30, r22
     386:	22 85       	ldd	r18, Z+10	; 0x0a
     388:	bc 01       	movw	r22, r24
     38a:	ce 01       	movw	r24, r28
     38c:	01 96       	adiw	r24, 0x01	; 1
     38e:	7c 01       	movw	r14, r24
     390:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
     394:	f8 01       	movw	r30, r16
     396:	62 85       	ldd	r22, Z+10	; 0x0a
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	a8 01       	movw	r20, r16
     39c:	d7 01       	movw	r26, r14
     39e:	c8 01       	movw	r24, r16
     3a0:	9d 01       	movw	r18, r26
     3a2:	2e 19       	sub	r18, r14
     3a4:	3f 09       	sbc	r19, r15
     3a6:	26 17       	cp	r18, r22
     3a8:	37 07       	cpc	r19, r23
     3aa:	40 f4       	brcc	.+16     	; 0x3bc <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x56>
     3ac:	fc 01       	movw	r30, r24
     3ae:	31 91       	ld	r19, Z+
     3b0:	cf 01       	movw	r24, r30
     3b2:	2d 91       	ld	r18, X+
     3b4:	32 17       	cp	r19, r18
     3b6:	a1 f3       	breq	.-24     	; 0x3a0 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x3a>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	0a c0       	rjmp	.+20     	; 0x3d0 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x6a>
     3bc:	60 0f       	add	r22, r16
     3be:	71 1f       	adc	r23, r17
     3c0:	46 17       	cp	r20, r22
     3c2:	57 07       	cpc	r21, r23
     3c4:	21 f0       	breq	.+8      	; 0x3ce <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x68>
     3c6:	fa 01       	movw	r30, r20
     3c8:	11 92       	st	Z+, r1
     3ca:	af 01       	movw	r20, r30
     3cc:	f9 cf       	rjmp	.-14     	; 0x3c0 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x5a>
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	2f 96       	adiw	r28, 0x0f	; 15
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	de bf       	out	0x3e, r29	; 62
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	cd bf       	out	0x3d, r28	; 61
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	08 95       	ret

000003ea <_ZN8INA233_S15setADC_SettingsEj>:
     3ea:	ef 92       	push	r14
     3ec:	ff 92       	push	r15
     3ee:	0f 93       	push	r16
     3f0:	1f 93       	push	r17
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	2f 97       	sbiw	r28, 0x0f	; 15
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	de bf       	out	0x3e, r29	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	cd bf       	out	0x3d, r28	; 61
     406:	7c 01       	movw	r14, r24
     408:	8e 01       	movw	r16, r28
     40a:	0f 5f       	subi	r16, 0xFF	; 255
     40c:	1f 4f       	sbci	r17, 0xFF	; 255
     40e:	8f e0       	ldi	r24, 0x0F	; 15
     410:	f8 01       	movw	r30, r16
     412:	11 92       	st	Z+, r1
     414:	8a 95       	dec	r24
     416:	e9 f7       	brne	.-6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     418:	8a e0       	ldi	r24, 0x0A	; 10
     41a:	8c 87       	std	Y+12, r24	; 0x0c
     41c:	69 83       	std	Y+1, r22	; 0x01
     41e:	7a 83       	std	Y+2, r23	; 0x02
     420:	82 e0       	ldi	r24, 0x02	; 2
     422:	8b 87       	std	Y+11, r24	; 0x0b
     424:	40 ed       	ldi	r20, 0xD0	; 208
     426:	b8 01       	movw	r22, r16
     428:	c7 01       	movw	r24, r14
     42a:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     42e:	40 ed       	ldi	r20, 0xD0	; 208
     430:	b8 01       	movw	r22, r16
     432:	c7 01       	movw	r24, r14
     434:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	2f 96       	adiw	r28, 0x0f	; 15
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	f8 94       	cli
     440:	de bf       	out	0x3e, r29	; 62
     442:	0f be       	out	0x3f, r0	; 63
     444:	cd bf       	out	0x3d, r28	; 61
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
     452:	08 95       	ret

00000454 <_ZN8INA233_S15setCallibrationEj>:
     454:	cf 92       	push	r12
     456:	df 92       	push	r13
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
     468:	2f 97       	sbiw	r28, 0x0f	; 15
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	7c 01       	movw	r14, r24
     476:	6b 01       	movw	r12, r22
     478:	68 e6       	ldi	r22, 0x68	; 104
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	83 ed       	ldi	r24, 0xD3	; 211
     47e:	94 e0       	ldi	r25, 0x04	; 4
     480:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     484:	8e 01       	movw	r16, r28
     486:	0f 5f       	subi	r16, 0xFF	; 255
     488:	1f 4f       	sbci	r17, 0xFF	; 255
     48a:	8f e0       	ldi	r24, 0x0F	; 15
     48c:	f8 01       	movw	r30, r16
     48e:	11 92       	st	Z+, r1
     490:	8a 95       	dec	r24
     492:	e9 f7       	brne	.-6      	; 0x48e <_ZN8INA233_S15setCallibrationEj+0x3a>
     494:	8a e0       	ldi	r24, 0x0A	; 10
     496:	8c 87       	std	Y+12, r24	; 0x0c
     498:	c9 82       	std	Y+1, r12	; 0x01
     49a:	da 82       	std	Y+2, r13	; 0x02
     49c:	82 e0       	ldi	r24, 0x02	; 2
     49e:	8b 87       	std	Y+11, r24	; 0x0b
     4a0:	44 ed       	ldi	r20, 0xD4	; 212
     4a2:	b8 01       	movw	r22, r16
     4a4:	c7 01       	movw	r24, r14
     4a6:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     4aa:	44 ed       	ldi	r20, 0xD4	; 212
     4ac:	b8 01       	movw	r22, r16
     4ae:	c7 01       	movw	r24, r14
     4b0:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	2f 96       	adiw	r28, 0x0f	; 15
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	f8 94       	cli
     4bc:	de bf       	out	0x3e, r29	; 62
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	cd bf       	out	0x3d, r28	; 61
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	df 90       	pop	r13
     4d0:	cf 90       	pop	r12
     4d2:	08 95       	ret

000004d4 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config>:
     4d4:	4f 92       	push	r4
     4d6:	5f 92       	push	r5
     4d8:	6f 92       	push	r6
     4da:	7f 92       	push	r7
     4dc:	af 92       	push	r10
     4de:	bf 92       	push	r11
     4e0:	cf 92       	push	r12
     4e2:	df 92       	push	r13
     4e4:	ef 92       	push	r14
     4e6:	ff 92       	push	r15
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	ae 97       	sbiw	r28, 0x2e	; 46
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	cd bf       	out	0x3d, r28	; 61
     500:	5c 01       	movw	r10, r24
     502:	cf 8e       	std	Y+31, r12	; 0x1f
     504:	d8 a2       	std	Y+32, r13	; 0x20
     506:	e9 a2       	std	Y+33, r14	; 0x21
     508:	fa a2       	std	Y+34, r15	; 0x22
     50a:	0b a3       	std	Y+35, r16	; 0x23
     50c:	1c a3       	std	Y+36, r17	; 0x24
     50e:	2d a3       	std	Y+37, r18	; 0x25
     510:	3e a3       	std	Y+38, r19	; 0x26
     512:	4f a3       	std	Y+39, r20	; 0x27
     514:	58 a7       	std	Y+40, r21	; 0x28
     516:	69 a7       	std	Y+41, r22	; 0x29
     518:	7a a7       	std	Y+42, r23	; 0x2a
     51a:	cf 8c       	ldd	r12, Y+31	; 0x1f
     51c:	d8 a0       	ldd	r13, Y+32	; 0x20
     51e:	e9 a0       	ldd	r14, Y+33	; 0x21
     520:	fa a0       	ldd	r15, Y+34	; 0x22
     522:	8b a1       	ldd	r24, Y+35	; 0x23
     524:	9c a1       	ldd	r25, Y+36	; 0x24
     526:	ad a1       	ldd	r26, Y+37	; 0x25
     528:	be a1       	ldd	r27, Y+38	; 0x26
     52a:	8b a7       	std	Y+43, r24	; 0x2b
     52c:	9c a7       	std	Y+44, r25	; 0x2c
     52e:	ad a7       	std	Y+45, r26	; 0x2d
     530:	be a7       	std	Y+46, r27	; 0x2e
     532:	4f a0       	ldd	r4, Y+39	; 0x27
     534:	58 a4       	ldd	r5, Y+40	; 0x28
     536:	69 a4       	ldd	r6, Y+41	; 0x29
     538:	7a a4       	ldd	r7, Y+42	; 0x2a
     53a:	6c eb       	ldi	r22, 0xBC	; 188
     53c:	71 e0       	ldi	r23, 0x01	; 1
     53e:	83 ed       	ldi	r24, 0xD3	; 211
     540:	94 e0       	ldi	r25, 0x04	; 4
     542:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <_ZN5Print7printlnEPKc>
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	a9 01       	movw	r20, r18
     54c:	c7 01       	movw	r24, r14
     54e:	b6 01       	movw	r22, r12
     550:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__gesf2>
     554:	18 16       	cp	r1, r24
     556:	0c f0       	brlt	.+2      	; 0x55a <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x86>
     558:	51 c0       	rjmp	.+162    	; 0x5fc <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x128>
     55a:	d5 01       	movw	r26, r10
     55c:	11 96       	adiw	r26, 0x01	; 1
     55e:	6d 91       	ld	r22, X+
     560:	7c 91       	ld	r23, X
     562:	12 97       	sbiw	r26, 0x02	; 2
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__floatunsisf>
     56c:	a7 01       	movw	r20, r14
     56e:	96 01       	movw	r18, r12
     570:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__mulsf3>
     574:	6b 01       	movw	r12, r22
     576:	7c 01       	movw	r14, r24
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	a9 01       	movw	r20, r18
     57e:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__gesf2>
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	40 e0       	ldi	r20, 0x00	; 0
     588:	5f e3       	ldi	r21, 0x3F	; 63
     58a:	87 fd       	sbrc	r24, 7
     58c:	05 c0       	rjmp	.+10     	; 0x598 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xc4>
     58e:	c7 01       	movw	r24, r14
     590:	b6 01       	movw	r22, r12
     592:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__addsf3>
     596:	04 c0       	rjmp	.+8      	; 0x5a0 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xcc>
     598:	c7 01       	movw	r24, r14
     59a:	b6 01       	movw	r22, r12
     59c:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__subsf3>
     5a0:	0e 94 2c 08 	call	0x1058	; 0x1058 <__fixsfsi>
     5a4:	8b 01       	movw	r16, r22
     5a6:	7e 01       	movw	r14, r28
     5a8:	b0 e1       	ldi	r27, 0x10	; 16
     5aa:	eb 0e       	add	r14, r27
     5ac:	f1 1c       	adc	r15, r1
     5ae:	8f e0       	ldi	r24, 0x0F	; 15
     5b0:	f7 01       	movw	r30, r14
     5b2:	11 92       	st	Z+, r1
     5b4:	8a 95       	dec	r24
     5b6:	e9 f7       	brne	.-6      	; 0x5b2 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xde>
     5b8:	8a e0       	ldi	r24, 0x0A	; 10
     5ba:	8b 8f       	std	Y+27, r24	; 0x1b
     5bc:	08 8b       	std	Y+16, r16	; 0x10
     5be:	19 8b       	std	Y+17, r17	; 0x11
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	8a 8f       	std	Y+26, r24	; 0x1a
     5c4:	6f ee       	ldi	r22, 0xEF	; 239
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	83 ed       	ldi	r24, 0xD3	; 211
     5ca:	94 e0       	ldi	r25, 0x04	; 4
     5cc:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     5d0:	4a e0       	ldi	r20, 0x0A	; 10
     5d2:	50 e0       	ldi	r21, 0x00	; 0
     5d4:	b8 01       	movw	r22, r16
     5d6:	83 ed       	ldi	r24, 0xD3	; 211
     5d8:	94 e0       	ldi	r25, 0x04	; 4
     5da:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN5Print7printlnEji>
     5de:	4a e4       	ldi	r20, 0x4A	; 74
     5e0:	b7 01       	movw	r22, r14
     5e2:	c5 01       	movw	r24, r10
     5e4:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     5e8:	22 e0       	ldi	r18, 0x02	; 2
     5ea:	4a e4       	ldi	r20, 0x4A	; 74
     5ec:	b5 01       	movw	r22, r10
     5ee:	ce 01       	movw	r24, r28
     5f0:	01 96       	adiw	r24, 0x01	; 1
     5f2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
     5f6:	66 ed       	ldi	r22, 0xD6	; 214
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	af c0       	rjmp	.+350    	; 0x75a <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x286>
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	a9 01       	movw	r20, r18
     602:	6b a5       	ldd	r22, Y+43	; 0x2b
     604:	7c a5       	ldd	r23, Y+44	; 0x2c
     606:	8d a5       	ldd	r24, Y+45	; 0x2d
     608:	9e a5       	ldd	r25, Y+46	; 0x2e
     60a:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__gesf2>
     60e:	18 16       	cp	r1, r24
     610:	0c f0       	brlt	.+2      	; 0x614 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x140>
     612:	4e c0       	rjmp	.+156    	; 0x6b0 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x1dc>
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	48 e4       	ldi	r20, 0x48	; 72
     61a:	54 e4       	ldi	r21, 0x44	; 68
     61c:	6b a5       	ldd	r22, Y+43	; 0x2b
     61e:	7c a5       	ldd	r23, Y+44	; 0x2c
     620:	8d a5       	ldd	r24, Y+45	; 0x2d
     622:	9e a5       	ldd	r25, Y+46	; 0x2e
     624:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__mulsf3>
     628:	6b 01       	movw	r12, r22
     62a:	7c 01       	movw	r14, r24
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	a9 01       	movw	r20, r18
     632:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__gesf2>
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	40 e0       	ldi	r20, 0x00	; 0
     63c:	5f e3       	ldi	r21, 0x3F	; 63
     63e:	87 fd       	sbrc	r24, 7
     640:	05 c0       	rjmp	.+10     	; 0x64c <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x178>
     642:	c7 01       	movw	r24, r14
     644:	b6 01       	movw	r22, r12
     646:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__addsf3>
     64a:	04 c0       	rjmp	.+8      	; 0x654 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x180>
     64c:	c7 01       	movw	r24, r14
     64e:	b6 01       	movw	r22, r12
     650:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__subsf3>
     654:	0e 94 2c 08 	call	0x1058	; 0x1058 <__fixsfsi>
     658:	8b 01       	movw	r16, r22
     65a:	7e 01       	movw	r14, r28
     65c:	f0 e1       	ldi	r31, 0x10	; 16
     65e:	ef 0e       	add	r14, r31
     660:	f1 1c       	adc	r15, r1
     662:	8f e0       	ldi	r24, 0x0F	; 15
     664:	d7 01       	movw	r26, r14
     666:	1d 92       	st	X+, r1
     668:	8a 95       	dec	r24
     66a:	e9 f7       	brne	.-6      	; 0x666 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x192>
     66c:	8a e0       	ldi	r24, 0x0A	; 10
     66e:	8b 8f       	std	Y+27, r24	; 0x1b
     670:	08 8b       	std	Y+16, r16	; 0x10
     672:	19 8b       	std	Y+17, r17	; 0x11
     674:	82 e0       	ldi	r24, 0x02	; 2
     676:	8a 8f       	std	Y+26, r24	; 0x1a
     678:	66 ec       	ldi	r22, 0xC6	; 198
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	83 ed       	ldi	r24, 0xD3	; 211
     67e:	94 e0       	ldi	r25, 0x04	; 4
     680:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     684:	4a e0       	ldi	r20, 0x0A	; 10
     686:	50 e0       	ldi	r21, 0x00	; 0
     688:	b8 01       	movw	r22, r16
     68a:	83 ed       	ldi	r24, 0xD3	; 211
     68c:	94 e0       	ldi	r25, 0x04	; 4
     68e:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN5Print7printlnEji>
     692:	47 e5       	ldi	r20, 0x57	; 87
     694:	b7 01       	movw	r22, r14
     696:	c5 01       	movw	r24, r10
     698:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     69c:	22 e0       	ldi	r18, 0x02	; 2
     69e:	47 e5       	ldi	r20, 0x57	; 87
     6a0:	b5 01       	movw	r22, r10
     6a2:	ce 01       	movw	r24, r28
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
     6aa:	6d ea       	ldi	r22, 0xAD	; 173
     6ac:	70 e0       	ldi	r23, 0x00	; 0
     6ae:	55 c0       	rjmp	.+170    	; 0x75a <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x286>
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	a9 01       	movw	r20, r18
     6b6:	c3 01       	movw	r24, r6
     6b8:	b2 01       	movw	r22, r4
     6ba:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__gesf2>
     6be:	18 16       	cp	r1, r24
     6c0:	0c f0       	brlt	.+2      	; 0x6c4 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x1f0>
     6c2:	5a c0       	rjmp	.+180    	; 0x778 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x2a4>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	48 e4       	ldi	r20, 0x48	; 72
     6ca:	54 e4       	ldi	r21, 0x44	; 68
     6cc:	c3 01       	movw	r24, r6
     6ce:	b2 01       	movw	r22, r4
     6d0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__mulsf3>
     6d4:	6b 01       	movw	r12, r22
     6d6:	7c 01       	movw	r14, r24
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	a9 01       	movw	r20, r18
     6de:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__gesf2>
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	5f e3       	ldi	r21, 0x3F	; 63
     6ea:	87 fd       	sbrc	r24, 7
     6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x224>
     6ee:	c7 01       	movw	r24, r14
     6f0:	b6 01       	movw	r22, r12
     6f2:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__addsf3>
     6f6:	04 c0       	rjmp	.+8      	; 0x700 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x22c>
     6f8:	c7 01       	movw	r24, r14
     6fa:	b6 01       	movw	r22, r12
     6fc:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__subsf3>
     700:	0e 94 2c 08 	call	0x1058	; 0x1058 <__fixsfsi>
     704:	8b 01       	movw	r16, r22
     706:	7e 01       	movw	r14, r28
     708:	b0 e1       	ldi	r27, 0x10	; 16
     70a:	eb 0e       	add	r14, r27
     70c:	f1 1c       	adc	r15, r1
     70e:	8f e0       	ldi	r24, 0x0F	; 15
     710:	f7 01       	movw	r30, r14
     712:	11 92       	st	Z+, r1
     714:	8a 95       	dec	r24
     716:	e9 f7       	brne	.-6      	; 0x712 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x23e>
     718:	8a e0       	ldi	r24, 0x0A	; 10
     71a:	8b 8f       	std	Y+27, r24	; 0x1b
     71c:	08 8b       	std	Y+16, r16	; 0x10
     71e:	19 8b       	std	Y+17, r17	; 0x11
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	8a 8f       	std	Y+26, r24	; 0x1a
     724:	6d e9       	ldi	r22, 0x9D	; 157
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	83 ed       	ldi	r24, 0xD3	; 211
     72a:	94 e0       	ldi	r25, 0x04	; 4
     72c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     730:	4a e0       	ldi	r20, 0x0A	; 10
     732:	50 e0       	ldi	r21, 0x00	; 0
     734:	b8 01       	movw	r22, r16
     736:	83 ed       	ldi	r24, 0xD3	; 211
     738:	94 e0       	ldi	r25, 0x04	; 4
     73a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN5Print7printlnEji>
     73e:	48 e5       	ldi	r20, 0x58	; 88
     740:	b7 01       	movw	r22, r14
     742:	c5 01       	movw	r24, r10
     744:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     748:	22 e0       	ldi	r18, 0x02	; 2
     74a:	48 e5       	ldi	r20, 0x58	; 88
     74c:	b5 01       	movw	r22, r10
     74e:	ce 01       	movw	r24, r28
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
     756:	64 e8       	ldi	r22, 0x84	; 132
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	83 ed       	ldi	r24, 0xD3	; 211
     75c:	94 e0       	ldi	r25, 0x04	; 4
     75e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     762:	69 81       	ldd	r22, Y+1	; 0x01
     764:	7a 81       	ldd	r23, Y+2	; 0x02
     766:	4a e0       	ldi	r20, 0x0A	; 10
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	83 ed       	ldi	r24, 0xD3	; 211
     76c:	94 e0       	ldi	r25, 0x04	; 4
     76e:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <_ZN5Print7printlnEii>
     772:	8a e0       	ldi	r24, 0x0A	; 10
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	00 c0       	rjmp	.+0      	; 0x778 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x2a4>
     778:	ae 96       	adiw	r28, 0x2e	; 46
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	cd bf       	out	0x3d, r28	; 61
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	ff 90       	pop	r15
     78e:	ef 90       	pop	r14
     790:	df 90       	pop	r13
     792:	cf 90       	pop	r12
     794:	bf 90       	pop	r11
     796:	af 90       	pop	r10
     798:	7f 90       	pop	r7
     79a:	6f 90       	pop	r6
     79c:	5f 90       	pop	r5
     79e:	4f 90       	pop	r4
     7a0:	08 95       	ret

000007a2 <_ZN8INA233_S10initializeEv>:
     7a2:	cf 92       	push	r12
     7a4:	df 92       	push	r13
     7a6:	ef 92       	push	r14
     7a8:	ff 92       	push	r15
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	ec 01       	movw	r28, r24
     7b4:	0e 94 27 01 	call	0x24e	; 0x24e <_ZN8INA233_S9resetChipEv>
     7b8:	6b 81       	ldd	r22, Y+3	; 0x03
     7ba:	7c 81       	ldd	r23, Y+4	; 0x04
     7bc:	ce 01       	movw	r24, r28
     7be:	0e 94 2a 02 	call	0x454	; 0x454 <_ZN8INA233_S15setCallibrationEj>
     7c2:	81 30       	cpi	r24, 0x01	; 1
     7c4:	91 05       	cpc	r25, r1
     7c6:	a1 f0       	breq	.+40     	; 0x7f0 <_ZN8INA233_S10initializeEv+0x4e>
     7c8:	ce 01       	movw	r24, r28
     7ca:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8INA233_S10resetAlarmEv>
     7ce:	cd 80       	ldd	r12, Y+5	; 0x05
     7d0:	de 80       	ldd	r13, Y+6	; 0x06
     7d2:	ef 80       	ldd	r14, Y+7	; 0x07
     7d4:	f8 84       	ldd	r15, Y+8	; 0x08
     7d6:	09 85       	ldd	r16, Y+9	; 0x09
     7d8:	1a 85       	ldd	r17, Y+10	; 0x0a
     7da:	2b 85       	ldd	r18, Y+11	; 0x0b
     7dc:	3c 85       	ldd	r19, Y+12	; 0x0c
     7de:	4d 85       	ldd	r20, Y+13	; 0x0d
     7e0:	5e 85       	ldd	r21, Y+14	; 0x0e
     7e2:	6f 85       	ldd	r22, Y+15	; 0x0f
     7e4:	78 89       	ldd	r23, Y+16	; 0x10
     7e6:	ce 01       	movw	r24, r28
     7e8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config>
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	df 90       	pop	r13
     7fe:	cf 90       	pop	r12
     800:	08 95       	ret

00000802 <_ZN8INA233_S10getCurrentEv>:
     802:	cf 92       	push	r12
     804:	df 92       	push	r13
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	2f 97       	sbiw	r28, 0x0f	; 15
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
     822:	7c 01       	movw	r14, r24
     824:	22 e0       	ldi	r18, 0x02	; 2
     826:	49 e8       	ldi	r20, 0x89	; 137
     828:	bc 01       	movw	r22, r24
     82a:	ce 01       	movw	r24, r28
     82c:	01 96       	adiw	r24, 0x01	; 1
     82e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
     832:	09 81       	ldd	r16, Y+1	; 0x01
     834:	1a 81       	ldd	r17, Y+2	; 0x02
     836:	69 ec       	ldi	r22, 0xC9	; 201
     838:	71 e0       	ldi	r23, 0x01	; 1
     83a:	83 ed       	ldi	r24, 0xD3	; 211
     83c:	94 e0       	ldi	r25, 0x04	; 4
     83e:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN5Print5printEPKc>
     842:	4a e0       	ldi	r20, 0x0A	; 10
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	b8 01       	movw	r22, r16
     848:	83 ed       	ldi	r24, 0xD3	; 211
     84a:	94 e0       	ldi	r25, 0x04	; 4
     84c:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <_ZN5Print7printlnEii>
     850:	f7 01       	movw	r30, r14
     852:	61 81       	ldd	r22, Z+1	; 0x01
     854:	72 81       	ldd	r23, Z+2	; 0x02
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__floatunsisf>
     85e:	9b 01       	movw	r18, r22
     860:	ac 01       	movw	r20, r24
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	80 e8       	ldi	r24, 0x80	; 128
     868:	9f e3       	ldi	r25, 0x3F	; 63
     86a:	0e 94 ba 07 	call	0xf74	; 0xf74 <__divsf3>
     86e:	6b 01       	movw	r12, r22
     870:	7c 01       	movw	r14, r24
     872:	b8 01       	movw	r22, r16
     874:	11 0f       	add	r17, r17
     876:	88 0b       	sbc	r24, r24
     878:	99 0b       	sbc	r25, r25
     87a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__floatsisf>
     87e:	9b 01       	movw	r18, r22
     880:	ac 01       	movw	r20, r24
     882:	c7 01       	movw	r24, r14
     884:	b6 01       	movw	r22, r12
     886:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__mulsf3>
     88a:	2f 96       	adiw	r28, 0x0f	; 15
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	de bf       	out	0x3e, r29	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	cd bf       	out	0x3d, r28	; 61
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	ff 90       	pop	r15
     8a0:	ef 90       	pop	r14
     8a2:	df 90       	pop	r13
     8a4:	cf 90       	pop	r12
     8a6:	08 95       	ret

000008a8 <_ZN8INA233_S17testCommunicationEv>:
    Serial.println("reset chip");
    transmitCommand(0x12);
}

int INA233_S::testCommunication()
{
     8a8:	af 92       	push	r10
     8aa:	bf 92       	push	r11
     8ac:	df 92       	push	r13
     8ae:	ef 92       	push	r14
     8b0:	ff 92       	push	r15
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
     8be:	66 97       	sbiw	r28, 0x16	; 22
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	f8 94       	cli
     8c4:	de bf       	out	0x3e, r29	; 62
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	cd bf       	out	0x3d, r28	; 61
     8ca:	8c 01       	movw	r16, r24
    Serial.println("test communications");
     8cc:	6a ee       	ldi	r22, 0xEA	; 234
     8ce:	71 e0       	ldi	r23, 0x01	; 1
     8d0:	83 ed       	ldi	r24, 0xD3	; 211
     8d2:	94 e0       	ldi	r25, 0x04	; 4
     8d4:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <_ZN5Print7printlnEPKc>
    // TO DO ! Read MFR_MODEL, compare if correct.
    // Is there a way in wire.h to check for communications?
    INA233_Data_Package data = receiveData_(0x12, 7);
     8d8:	27 e0       	ldi	r18, 0x07	; 7
     8da:	42 e1       	ldi	r20, 0x12	; 18
     8dc:	b8 01       	movw	r22, r16
     8de:	ce 01       	movw	r24, r28
     8e0:	01 96       	adiw	r24, 0x01	; 1
     8e2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
    uint8_t compare[7]{
        0x06, 0x49, 0x4E, 0x41, 0x32, 0x33, 0x33};
     8e6:	87 e0       	ldi	r24, 0x07	; 7
     8e8:	e8 e2       	ldi	r30, 0x28	; 40
     8ea:	f1 e0       	ldi	r31, 0x01	; 1
     8ec:	de 01       	movw	r26, r28
     8ee:	50 96       	adiw	r26, 0x10	; 16
     8f0:	01 90       	ld	r0, Z+
     8f2:	0d 92       	st	X+, r0
     8f4:	8a 95       	dec	r24
     8f6:	e1 f7       	brne	.-8      	; 0x8f0 <_ZN8INA233_S17testCommunicationEv+0x48>
     8f8:	8e 01       	movw	r16, r28
     8fa:	0f 5f       	subi	r16, 0xFF	; 255
     8fc:	1f 4f       	sbci	r17, 0xFF	; 255
     8fe:	7e 01       	movw	r14, r28
     900:	80 e1       	ldi	r24, 0x10	; 16
     902:	e8 0e       	add	r14, r24
     904:	f1 1c       	adc	r15, r1
     906:	5e 01       	movw	r10, r28
     908:	e8 e0       	ldi	r30, 0x08	; 8
     90a:	ae 0e       	add	r10, r30
     90c:	b1 1c       	adc	r11, r1

    for (int ii = 0; ii <= 6; ii++)
    {
        Serial.print("Readback MFR_MODEL: ");
     90e:	6e ef       	ldi	r22, 0xFE	; 254
     910:	71 e0       	ldi	r23, 0x01	; 1
     912:	83 ed       	ldi	r24, 0xD3	; 211
     914:	94 e0       	ldi	r25, 0x04	; 4
     916:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN5Print5printEPKc>
        Serial.print(data.msg[ii]);
     91a:	f8 01       	movw	r30, r16
     91c:	d1 90       	ld	r13, Z+
     91e:	8f 01       	movw	r16, r30
     920:	4a e0       	ldi	r20, 0x0A	; 10
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	6d 2d       	mov	r22, r13
     926:	83 ed       	ldi	r24, 0xD3	; 211
     928:	94 e0       	ldi	r25, 0x04	; 4
     92a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <_ZN5Print5printEhi>
        if (compare[ii] != data.msg[ii])
     92e:	f7 01       	movw	r30, r14
     930:	81 91       	ld	r24, Z+
     932:	7f 01       	movw	r14, r30
     934:	d8 16       	cp	r13, r24
     936:	49 f0       	breq	.+18     	; 0x94a <__stack+0x4b>
        {
            Serial.println("Communication error");
     938:	63 e1       	ldi	r22, 0x13	; 19
     93a:	72 e0       	ldi	r23, 0x02	; 2
     93c:	83 ed       	ldi	r24, 0xD3	; 211
     93e:	94 e0       	ldi	r25, 0x04	; 4
     940:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <_ZN5Print7printlnEPKc>
			return 1;
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	05 c0       	rjmp	.+10     	; 0x954 <__stack+0x55>
    // Is there a way in wire.h to check for communications?
    INA233_Data_Package data = receiveData_(0x12, 7);
    uint8_t compare[7]{
        0x06, 0x49, 0x4E, 0x41, 0x32, 0x33, 0x33};

    for (int ii = 0; ii <= 6; ii++)
     94a:	0a 15       	cp	r16, r10
     94c:	1b 05       	cpc	r17, r11
     94e:	f9 f6       	brne	.-66     	; 0x90e <__stack+0xf>
            Serial.println("Communication error");
			return 1;
        }
    }
	
	return 0;
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
}
     954:	66 96       	adiw	r28, 0x16	; 22
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	f8 94       	cli
     95a:	de bf       	out	0x3e, r29	; 62
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	cd bf       	out	0x3d, r28	; 61
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	1f 91       	pop	r17
     966:	0f 91       	pop	r16
     968:	ff 90       	pop	r15
     96a:	ef 90       	pop	r14
     96c:	df 90       	pop	r13
     96e:	bf 90       	pop	r11
     970:	af 90       	pop	r10
     972:	08 95       	ret

00000974 <_ZZ5setupENUlvE_4_FUNEv>:
	Serial.print (settings.ramUsage());
	Serial.println (" bytes");
	
	
	// ___________________________ CAN BEGIN ______________________________//
	const uint32_t errorCode = can.begin (settings, [] { can.isr(); });
     974:	8f e7       	ldi	r24, 0x7F	; 127
     976:	94 e0       	ldi	r25, 0x04	; 4
     978:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <_ZN10ACAN2517FD3isrEv>

0000097c <_ZN12CANFDMessageC1Ev>:

//·············································································
//   Constructors
//·············································································

  public : CANFDMessage (void) :
     97c:	fc 01       	movw	r30, r24
  id (0),  // Frame identifier
  ext (false), // false -> base frame, true -> extended frame
  type (CANFD_WITH_BIT_RATE_SWITCH),
  idx (0),  // This field is used by the driver
  len (0), // Length of data (0 ... 64)
  data () {
     97e:	10 82       	st	Z, r1
     980:	11 82       	std	Z+1, r1	; 0x01
     982:	12 82       	std	Z+2, r1	; 0x02
     984:	13 82       	std	Z+3, r1	; 0x03
     986:	14 82       	std	Z+4, r1	; 0x04
     988:	83 e0       	ldi	r24, 0x03	; 3
     98a:	85 83       	std	Z+5, r24	; 0x05
     98c:	16 82       	std	Z+6, r1	; 0x06
     98e:	17 82       	std	Z+7, r1	; 0x07
     990:	df 01       	movw	r26, r30
     992:	18 96       	adiw	r26, 0x08	; 8
     994:	e8 5b       	subi	r30, 0xB8	; 184
     996:	ff 4f       	sbci	r31, 0xFF	; 255
     998:	1d 92       	st	X+, r1
     99a:	ae 17       	cp	r26, r30
     99c:	bf 07       	cpc	r27, r31
     99e:	e1 f7       	brne	.-8      	; 0x998 <_ZN12CANFDMessageC1Ev+0x1c>
  }
     9a0:	08 95       	ret

000009a2 <setup>:





void setup() {
     9a2:	cf 92       	push	r12
     9a4:	df 92       	push	r13
     9a6:	ef 92       	push	r14
     9a8:	ff 92       	push	r15
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
     9b6:	a8 97       	sbiw	r28, 0x28	; 40
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	f8 94       	cli
     9bc:	de bf       	out	0x3e, r29	; 62
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	cd bf       	out	0x3d, r28	; 61
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
     9c2:	9d e0       	ldi	r25, 0x0D	; 13
     9c4:	88 e1       	ldi	r24, 0x18	; 24
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	f8 94       	cli
     9ca:	a8 95       	wdr
     9cc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
	wdt_enable(WDTO_500MS);
	Wire.begin();
     9d6:	8e e7       	ldi	r24, 0x7E	; 126
     9d8:	95 e0       	ldi	r25, 0x05	; 5
     9da:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <_ZN7TwoWire5beginEv>
	Wire.setClock(10000);
     9de:	40 e1       	ldi	r20, 0x10	; 16
     9e0:	57 e2       	ldi	r21, 0x27	; 39
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	8e e7       	ldi	r24, 0x7E	; 126
     9e8:	95 e0       	ldi	r25, 0x05	; 5
     9ea:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <_ZN7TwoWire8setClockEm>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     9ee:	26 e0       	ldi	r18, 0x06	; 6
     9f0:	40 e8       	ldi	r20, 0x80	; 128
     9f2:	55 e2       	ldi	r21, 0x25	; 37
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	83 ed       	ldi	r24, 0xD3	; 211
     9fa:	94 e0       	ldi	r25, 0x04	; 4
     9fc:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <_ZN14HardwareSerial5beginEmh>
     a00:	04 e1       	ldi	r16, 0x14	; 20
     a02:	11 e0       	ldi	r17, 0x01	; 1
     a04:	92 e2       	ldi	r25, 0x22	; 34
     a06:	c9 2e       	mov	r12, r25
     a08:	91 e0       	ldi	r25, 0x01	; 1
     a0a:	d9 2e       	mov	r13, r25
     a0c:	78 01       	movw	r14, r16
	Serial.begin(9600);
	
	// Setup for each INA233 sensor
	for (uint8_t ii = 0; ii < 7; ii++){
		SensorList[ii]->initialize();
     a0e:	f7 01       	movw	r30, r14
     a10:	81 91       	ld	r24, Z+
     a12:	91 91       	ld	r25, Z+
     a14:	7f 01       	movw	r14, r30
     a16:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <_ZN8INA233_S10initializeEv>
	Wire.begin();
	Wire.setClock(10000);
	Serial.begin(9600);
	
	// Setup for each INA233 sensor
	for (uint8_t ii = 0; ii < 7; ii++){
     a1a:	ce 14       	cp	r12, r14
     a1c:	df 04       	cpc	r13, r15
     a1e:	b9 f7       	brne	.-18     	; 0xa0e <setup+0x6c>
		SensorList[ii]->initialize();
	}

	for (uint8_t ii = 0; ii < 7; ii++){
		SensorList[ii]->setADC_Settings(default_address);
     a20:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <default_address>
     a24:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <default_address+0x1>
     a28:	f8 01       	movw	r30, r16
     a2a:	81 91       	ld	r24, Z+
     a2c:	91 91       	ld	r25, Z+
     a2e:	8f 01       	movw	r16, r30
     a30:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_ZN8INA233_S15setADC_SettingsEj>
	// Setup for each INA233 sensor
	for (uint8_t ii = 0; ii < 7; ii++){
		SensorList[ii]->initialize();
	}

	for (uint8_t ii = 0; ii < 7; ii++){
     a34:	c0 16       	cp	r12, r16
     a36:	d1 06       	cpc	r13, r17
     a38:	99 f7       	brne	.-26     	; 0xa20 <setup+0x7e>
		SensorList[ii]->setADC_Settings(default_address);
	}
	
		
	// ___________________________ START SPI ______________________________//
	SPI.begin () ;
     a3a:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <_ZN8SPIClass5beginEv>
		// For version >= 2.1.0
	ACAN2517FDSettings settings (ACAN2517FDSettings::OSC_20MHz, 500UL * 1000UL, DataBitRateFactor::x8);
     a3e:	88 ee       	ldi	r24, 0xE8	; 232
     a40:	c8 2e       	mov	r12, r24
     a42:	83 e0       	ldi	r24, 0x03	; 3
     a44:	d8 2e       	mov	r13, r24
     a46:	e1 2c       	mov	r14, r1
     a48:	f1 2c       	mov	r15, r1
     a4a:	08 e0       	ldi	r16, 0x08	; 8
     a4c:	20 e2       	ldi	r18, 0x20	; 32
     a4e:	31 ea       	ldi	r19, 0xA1	; 161
     a50:	47 e0       	ldi	r20, 0x07	; 7
     a52:	50 e0       	ldi	r21, 0x00	; 0
     a54:	64 e0       	ldi	r22, 0x04	; 4
     a56:	ce 01       	movw	r24, r28
     a58:	01 96       	adiw	r24, 0x01	; 1
     a5a:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm>
		/* For version < 2.1.0
			ACAN2517FDSettings settings (ACAN2517FDSettings::OSC_20MHz, 125UL * 1000UL, ACAN2517FDSettings::DATA_BITRATE_x8);*/
	settings.mRequestedMode = ACAN2517FDSettings::NormalFD;
     a5e:	1a 8e       	std	Y+26, r1	; 0x1a
	
	// Default values are too high for an Arduino Uno that contains 2048 bytes of RAM: reduce them
	settings.mDriverTransmitFIFOSize = 1;
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	9c 8f       	std	Y+28, r25	; 0x1c
     a66:	8b 8f       	std	Y+27, r24	; 0x1b
	settings.mDriverReceiveFIFOSize = 1;
     a68:	9e a3       	std	Y+38, r25	; 0x26
     a6a:	8d a3       	std	Y+37, r24	; 0x25
	
	
	// ___________________________ RAM USAGE ______________________________//
	Serial.print ("MCP2517FD RAM Usage: ");
     a6c:	67 e2       	ldi	r22, 0x27	; 39
     a6e:	72 e0       	ldi	r23, 0x02	; 2
     a70:	83 ed       	ldi	r24, 0xD3	; 211
     a72:	94 e0       	ldi	r25, 0x04	; 4
     a74:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN5Print5printEPKc>
	Serial.print (settings.ramUsage());
     a78:	ce 01       	movw	r24, r28
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <_ZNK18ACAN2517FDSettings8ramUsageEv>
     a80:	ab 01       	movw	r20, r22
     a82:	bc 01       	movw	r22, r24
     a84:	2a e0       	ldi	r18, 0x0A	; 10
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	83 ed       	ldi	r24, 0xD3	; 211
     a8a:	94 e0       	ldi	r25, 0x04	; 4
     a8c:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN5Print5printEmi>
	Serial.println (" bytes");
     a90:	6d e3       	ldi	r22, 0x3D	; 61
     a92:	72 e0       	ldi	r23, 0x02	; 2
     a94:	83 ed       	ldi	r24, 0xD3	; 211
     a96:	94 e0       	ldi	r25, 0x04	; 4
     a98:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <_ZN5Print7printlnEPKc>
	
	
	// ___________________________ CAN BEGIN ______________________________//
	const uint32_t errorCode = can.begin (settings, [] { can.isr(); });
     a9c:	4a eb       	ldi	r20, 0xBA	; 186
     a9e:	54 e0       	ldi	r21, 0x04	; 4
     aa0:	be 01       	movw	r22, r28
     aa2:	6f 5f       	subi	r22, 0xFF	; 255
     aa4:	7f 4f       	sbci	r23, 0xFF	; 255
     aa6:	8f e7       	ldi	r24, 0x7F	; 127
     aa8:	94 e0       	ldi	r25, 0x04	; 4
     aaa:	0e 94 3e 19 	call	0x327c	; 0x327c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvE>
     aae:	6b 01       	movw	r12, r22
     ab0:	7c 01       	movw	r14, r24
	if (errorCode != 0) {
     ab2:	67 2b       	or	r22, r23
     ab4:	68 2b       	or	r22, r24
     ab6:	69 2b       	or	r22, r25
     ab8:	71 f0       	breq	.+28     	; 0xad6 <setup+0x134>
		Serial.print ("Configuration error 0x");
     aba:	64 e4       	ldi	r22, 0x44	; 68
     abc:	72 e0       	ldi	r23, 0x02	; 2
     abe:	83 ed       	ldi	r24, 0xD3	; 211
     ac0:	94 e0       	ldi	r25, 0x04	; 4
     ac2:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN5Print5printEPKc>
		Serial.println (errorCode, HEX);
     ac6:	20 e1       	ldi	r18, 0x10	; 16
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	b7 01       	movw	r22, r14
     acc:	a6 01       	movw	r20, r12
     ace:	83 ed       	ldi	r24, 0xD3	; 211
     ad0:	94 e0       	ldi	r25, 0x04	; 4
     ad2:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <_ZN5Print7printlnEmi>
     ad6:	ef e3       	ldi	r30, 0x3F	; 63
     ad8:	f4 e0       	ldi	r31, 0x04	; 4
     ada:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	for (int ii = 0; ii < 64; ii++){
		frame_FD.data[ii] = ii;
     adc:	81 93       	st	Z+, r24
     ade:	8f 5f       	subi	r24, 0xFF	; 255
	if (errorCode != 0) {
		Serial.print ("Configuration error 0x");
		Serial.println (errorCode, HEX);
	}
	
	for (int ii = 0; ii < 64; ii++){
     ae0:	80 34       	cpi	r24, 0x40	; 64
     ae2:	e1 f7       	brne	.-8      	; 0xadc <setup+0x13a>
     ae4:	e7 ef       	ldi	r30, 0xF7	; 247
     ae6:	f3 e0       	ldi	r31, 0x03	; 3
     ae8:	80 e0       	ldi	r24, 0x00	; 0
		frame_FD.data[ii] = ii;
	}
	for (int ii = 0; ii < 8; ii++){
		frame.data[ii] = ii;
     aea:	81 93       	st	Z+, r24
     aec:	8f 5f       	subi	r24, 0xFF	; 255
	}
	
	for (int ii = 0; ii < 64; ii++){
		frame_FD.data[ii] = ii;
	}
	for (int ii = 0; ii < 8; ii++){
     aee:	88 30       	cpi	r24, 0x08	; 8
     af0:	e1 f7       	brne	.-8      	; 0xaea <setup+0x148>
		frame.data[ii] = ii;
	}
	frame.len = 8;
     af2:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <frame+0x7>
	frame_FD.len = 64; // Valid lengths are: 0, 1, ..., 8, 12, 16, 20, 24, 32, 48, 64
     af6:	80 e4       	ldi	r24, 0x40	; 64
     af8:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <frame_FD+0x7>
	frame.type = CANFDMessage::CAN_DATA;
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <frame+0x5>
	frame_FD.type = CANFDMessage::CANFD_WITH_BIT_RATE_SWITCH;
     b02:	83 e0       	ldi	r24, 0x03	; 3
     b04:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <frame_FD+0x5>
	
	frame.id = 0x500;
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	95 e0       	ldi	r25, 0x05	; 5
     b0c:	a0 e0       	ldi	r26, 0x00	; 0
     b0e:	b0 e0       	ldi	r27, 0x00	; 0
     b10:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <frame>
     b14:	90 93 f0 03 	sts	0x03F0, r25	; 0x8003f0 <frame+0x1>
     b18:	a0 93 f1 03 	sts	0x03F1, r26	; 0x8003f1 <frame+0x2>
     b1c:	b0 93 f2 03 	sts	0x03F2, r27	; 0x8003f2 <frame+0x3>
	frame_FD.id = 0x501;
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	95 e0       	ldi	r25, 0x05	; 5
     b24:	a0 e0       	ldi	r26, 0x00	; 0
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <frame_FD>
     b2c:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <frame_FD+0x1>
     b30:	a0 93 39 04 	sts	0x0439, r26	; 0x800439 <frame_FD+0x2>
     b34:	b0 93 3a 04 	sts	0x043A, r27	; 0x80043a <frame_FD+0x3>
	//Serial.println(freeMemory());

	//Sensor1.setAlarmMask (0b11011111);
	//Sensor1.setMFRConfig (0b00000001);
	//expander.setPin (1,true);
}
     b38:	a8 96       	adiw	r28, 0x28	; 40
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	f8 94       	cli
     b3e:	de bf       	out	0x3e, r29	; 62
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	cd bf       	out	0x3d, r28	; 61
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	df 90       	pop	r13
     b52:	cf 90       	pop	r12
     b54:	08 95       	ret

00000b56 <_Z29check_INA233_miscommunicationv>:


	}
*/

void check_INA233_miscommunication(){
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
	
	if((millis() - timeStamps[0]) > interval_INA233_checking){
     b5e:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <millis>
     b62:	00 91 c7 03 	lds	r16, 0x03C7	; 0x8003c7 <timeStamps>
     b66:	10 91 c8 03 	lds	r17, 0x03C8	; 0x8003c8 <timeStamps+0x1>
     b6a:	20 91 c9 03 	lds	r18, 0x03C9	; 0x8003c9 <timeStamps+0x2>
     b6e:	30 91 ca 03 	lds	r19, 0x03CA	; 0x8003ca <timeStamps+0x3>
     b72:	dc 01       	movw	r26, r24
     b74:	cb 01       	movw	r24, r22
     b76:	80 1b       	sub	r24, r16
     b78:	91 0b       	sbc	r25, r17
     b7a:	a2 0b       	sbc	r26, r18
     b7c:	b3 0b       	sbc	r27, r19
     b7e:	81 31       	cpi	r24, 0x11	; 17
     b80:	97 42       	sbci	r25, 0x27	; 39
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	08 f1       	brcs	.+66     	; 0xbca <_Z29check_INA233_miscommunicationv+0x74>
     b88:	c4 e1       	ldi	r28, 0x14	; 20
     b8a:	d1 e0       	ldi	r29, 0x01	; 1
     b8c:	06 e0       	ldi	r16, 0x06	; 6
     b8e:	11 e0       	ldi	r17, 0x01	; 1
		
		for (uint8_t ii = 0; ii < 7; ii++){
			// If communication is not responding properly, open mosfet
			if(SensorList[ii]->testCommunication() == 1){
     b90:	89 91       	ld	r24, Y+
     b92:	99 91       	ld	r25, Y+
     b94:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_ZN8INA233_S17testCommunicationEv>
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	39 f4       	brne	.+14     	; 0xbaa <_Z29check_INA233_miscommunicationv+0x54>
		digitalWrite(MOSpin_, HIGH);
	}
	
	// Break circuit
	void open_MOSFET(){
		digitalWrite(MOSpin_, LOW);
     b9c:	d8 01       	movw	r26, r16
     b9e:	ed 91       	ld	r30, X+
     ba0:	fc 91       	ld	r31, X
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <digitalWrite>
     baa:	0e 5f       	subi	r16, 0xFE	; 254
     bac:	1f 4f       	sbci	r17, 0xFF	; 255

void check_INA233_miscommunication(){
	
	if((millis() - timeStamps[0]) > interval_INA233_checking){
		
		for (uint8_t ii = 0; ii < 7; ii++){
     bae:	b1 e0       	ldi	r27, 0x01	; 1
     bb0:	c2 32       	cpi	r28, 0x22	; 34
     bb2:	db 07       	cpc	r29, r27
     bb4:	69 f7       	brne	.-38     	; 0xb90 <_Z29check_INA233_miscommunicationv+0x3a>
			if(SensorList[ii]->testCommunication() == 1){
				MosfetList[ii]->open_MOSFET();
			}
		}		
		
		timeStamps[0] = millis();
     bb6:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <millis>
     bba:	60 93 c7 03 	sts	0x03C7, r22	; 0x8003c7 <timeStamps>
     bbe:	70 93 c8 03 	sts	0x03C8, r23	; 0x8003c8 <timeStamps+0x1>
     bc2:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <timeStamps+0x2>
     bc6:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <timeStamps+0x3>
	}
}
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	08 95       	ret

00000bd4 <loop>:
	mosfet() = delete;
	mosfet(uint8_t MOSpin) : MOSpin_(MOSpin){ }
	
	// Complete circuit
	void close_MOSFET(){
		digitalWrite(MOSpin_, HIGH);
     bd4:	61 e0       	ldi	r22, 0x01	; 1
     bd6:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <p1>
     bda:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <digitalWrite>
	
	// Let power through MOSFET nr 1
	p1.close_MOSFET();
	
	// Make sure communication with INA233 still works, if not then open mosfet
	check_INA233_miscommunication();
     bde:	0e 94 ab 05 	call	0xb56	; 0xb56 <_Z29check_INA233_miscommunicationv>
	
	float current_1 = Sensor_1.getCurrent();
     be2:	87 ea       	ldi	r24, 0xA7	; 167
     be4:	93 e0       	ldi	r25, 0x03	; 3
     be6:	0e 94 01 04 	call	0x802	; 0x802 <_ZN8INA233_S10getCurrentEv>
     bea:	ab 01       	movw	r20, r22
     bec:	bc 01       	movw	r22, r24
	int test = 1;
	
	Serial.println(current_1);
     bee:	22 e0       	ldi	r18, 0x02	; 2
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	83 ed       	ldi	r24, 0xD3	; 211
     bf4:	94 e0       	ldi	r25, 0x04	; 4
     bf6:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <_ZN5Print7printlnEdi>
	
	if (can.available ()) {
     bfa:	8f e7       	ldi	r24, 0x7F	; 127
     bfc:	94 e0       	ldi	r25, 0x04	; 4
     bfe:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <_ZN10ACAN2517FD9availableEv>
     c02:	88 23       	and	r24, r24
     c04:	e1 f0       	breq	.+56     	; 0xc3e <loop+0x6a>
		can.receive (frame);
     c06:	6f ee       	ldi	r22, 0xEF	; 239
     c08:	73 e0       	ldi	r23, 0x03	; 3
     c0a:	8f e7       	ldi	r24, 0x7F	; 127
     c0c:	94 e0       	ldi	r25, 0x04	; 4
     c0e:	0e 94 07 11 	call	0x220e	; 0x220e <_ZN10ACAN2517FD7receiveER12CANFDMessage>
		Serial.print ("Received: ");
     c12:	6b e5       	ldi	r22, 0x5B	; 91
     c14:	72 e0       	ldi	r23, 0x02	; 2
     c16:	83 ed       	ldi	r24, 0xD3	; 211
     c18:	94 e0       	ldi	r25, 0x04	; 4
     c1a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN5Print5printEPKc>
		
		if (frame.data[0] == 0x01){
     c1e:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <frame+0x8>
     c22:	81 30       	cpi	r24, 0x01	; 1
     c24:	21 f4       	brne	.+8      	; 0xc2e <loop+0x5a>
			digitalWrite(10, HIGH);
     c26:	61 e0       	ldi	r22, 0x01	; 1
     c28:	8a e0       	ldi	r24, 0x0A	; 10
     c2a:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <digitalWrite>
		}

		if (frame.data[0] == 0x02){
     c2e:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <frame+0x8>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <loop+0x6a>
			digitalWrite(10, LOW);
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	8a e0       	ldi	r24, 0x0A	; 10
     c3a:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <digitalWrite>
		}
		
	}
	
	wdt_reset();	
     c3e:	a8 95       	wdr
     c40:	08 95       	ret

00000c42 <_GLOBAL__sub_I_can>:
};

struct INA233_Alarm_Config
{
  float overCurrent = 0, overVoltage = 0, underVoltage = 0;
  INA233_Alarm_Config(float oc, float ov, float uv) : overCurrent(oc), overVoltage(ov), underVoltage(uv) {}  
     c42:	e7 ec       	ldi	r30, 0xC7	; 199
     c44:	f4 e0       	ldi	r31, 0x04	; 4
     c46:	40 e0       	ldi	r20, 0x00	; 0
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	70 e4       	ldi	r23, 0x40	; 64
     c4e:	40 83       	st	Z, r20
     c50:	51 83       	std	Z+1, r21	; 0x01
     c52:	62 83       	std	Z+2, r22	; 0x02
     c54:	73 83       	std	Z+3, r23	; 0x03
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	a0 e5       	ldi	r26, 0x50	; 80
     c5c:	b1 e4       	ldi	r27, 0x41	; 65
     c5e:	84 83       	std	Z+4, r24	; 0x04
     c60:	95 83       	std	Z+5, r25	; 0x05
     c62:	a6 83       	std	Z+6, r26	; 0x06
     c64:	b7 83       	std	Z+7, r27	; 0x07
     c66:	10 86       	std	Z+8, r1	; 0x08
     c68:	11 86       	std	Z+9, r1	; 0x09
     c6a:	12 86       	std	Z+10, r1	; 0x0a
     c6c:	13 86       	std	Z+11, r1	; 0x0b
     c6e:	eb eb       	ldi	r30, 0xBB	; 187
     c70:	f4 e0       	ldi	r31, 0x04	; 4
     c72:	40 83       	st	Z, r20
     c74:	51 83       	std	Z+1, r21	; 0x01
     c76:	62 83       	std	Z+2, r22	; 0x02
     c78:	73 83       	std	Z+3, r23	; 0x03
     c7a:	84 83       	std	Z+4, r24	; 0x04
     c7c:	95 83       	std	Z+5, r25	; 0x05
     c7e:	a6 83       	std	Z+6, r26	; 0x06
     c80:	b7 83       	std	Z+7, r27	; 0x07
     c82:	10 86       	std	Z+8, r1	; 0x08
     c84:	11 86       	std	Z+9, r1	; 0x09
     c86:	12 86       	std	Z+10, r1	; 0x0a
     c88:	13 86       	std	Z+11, r1	; 0x0b

// ___________________________ CANBUS SETTINGS ______________________________//
static const byte MCP2517_CS  = 7 ; // CS input of MCP2517
static const byte MCP2517_INT =  2 ; // INT output of MCP2517

ACAN2517FD can (MCP2517_CS, SPI, MCP2517_INT);
     c8a:	22 e0       	ldi	r18, 0x02	; 2
     c8c:	4d e7       	ldi	r20, 0x7D	; 125
     c8e:	55 e0       	ldi	r21, 0x05	; 5
     c90:	67 e0       	ldi	r22, 0x07	; 7
     c92:	8f e7       	ldi	r24, 0x7F	; 127
     c94:	94 e0       	ldi	r25, 0x04	; 4
     c96:	0e 94 ab 10 	call	0x2156	; 0x2156 <_ZN10ACAN2517FDC1EhR8SPIClassh>
	CANFDMessage frame_FD, frame;
     c9a:	87 e3       	ldi	r24, 0x37	; 55
     c9c:	94 e0       	ldi	r25, 0x04	; 4
     c9e:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN12CANFDMessageC1Ev>
     ca2:	8f ee       	ldi	r24, 0xEF	; 239
     ca4:	93 e0       	ldi	r25, 0x03	; 3
     ca6:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN12CANFDMessageC1Ev>
uint16_t default_address = 0b0100011100100111;
unsigned long timeStamps[10] = {0};


// creating each INA233 sensor object
INA233_S Sensor_1(adrSensor1, m_valueSensor1, cal_valueSensor1, alarmConfigSensor1), 
     caa:	8d b7       	in	r24, 0x3d	; 61
     cac:	9e b7       	in	r25, 0x3e	; 62
     cae:	0c 97       	sbiw	r24, 0x0c	; 12
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	9e bf       	out	0x3e, r25	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	8d bf       	out	0x3d, r24	; 61
     cba:	ad b7       	in	r26, 0x3d	; 61
     cbc:	be b7       	in	r27, 0x3e	; 62
     cbe:	11 96       	adiw	r26, 0x01	; 1
     cc0:	8c e0       	ldi	r24, 0x0C	; 12
     cc2:	e7 ec       	ldi	r30, 0xC7	; 199
     cc4:	f4 e0       	ldi	r31, 0x04	; 4
     cc6:	01 90       	ld	r0, Z+
     cc8:	0d 92       	st	X+, r0
     cca:	8a 95       	dec	r24
     ccc:	e1 f7       	brne	.-8      	; 0xcc6 <_GLOBAL__sub_I_can+0x84>
     cce:	23 e3       	ldi	r18, 0x33	; 51
     cd0:	38 e0       	ldi	r19, 0x08	; 8
     cd2:	44 e3       	ldi	r20, 0x34	; 52
     cd4:	53 e0       	ldi	r21, 0x03	; 3
     cd6:	60 e4       	ldi	r22, 0x40	; 64
     cd8:	87 ea       	ldi	r24, 0xA7	; 167
     cda:	93 e0       	ldi	r25, 0x03	; 3
     cdc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_2(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     ce0:	8d b7       	in	r24, 0x3d	; 61
     ce2:	9e b7       	in	r25, 0x3e	; 62
     ce4:	0c 97       	sbiw	r24, 0x0c	; 12
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	9e bf       	out	0x3e, r25	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	8d bf       	out	0x3d, r24	; 61
     cf0:	ad b7       	in	r26, 0x3d	; 61
     cf2:	be b7       	in	r27, 0x3e	; 62
     cf4:	11 96       	adiw	r26, 0x01	; 1
     cf6:	8c e0       	ldi	r24, 0x0C	; 12
     cf8:	eb eb       	ldi	r30, 0xBB	; 187
     cfa:	f4 e0       	ldi	r31, 0x04	; 4
     cfc:	01 90       	ld	r0, Z+
     cfe:	0d 92       	st	X+, r0
     d00:	8a 95       	dec	r24
     d02:	e1 f7       	brne	.-8      	; 0xcfc <_GLOBAL__sub_I_can+0xba>
     d04:	23 e3       	ldi	r18, 0x33	; 51
     d06:	38 e0       	ldi	r19, 0x08	; 8
     d08:	44 e3       	ldi	r20, 0x34	; 52
     d0a:	53 e0       	ldi	r21, 0x03	; 3
     d0c:	61 e4       	ldi	r22, 0x41	; 65
     d0e:	87 e8       	ldi	r24, 0x87	; 135
     d10:	93 e0       	ldi	r25, 0x03	; 3
     d12:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_3(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     d16:	8d b7       	in	r24, 0x3d	; 61
     d18:	9e b7       	in	r25, 0x3e	; 62
     d1a:	0c 97       	sbiw	r24, 0x0c	; 12
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	9e bf       	out	0x3e, r25	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	8d bf       	out	0x3d, r24	; 61
     d26:	ad b7       	in	r26, 0x3d	; 61
     d28:	be b7       	in	r27, 0x3e	; 62
     d2a:	11 96       	adiw	r26, 0x01	; 1
     d2c:	8c e0       	ldi	r24, 0x0C	; 12
     d2e:	eb eb       	ldi	r30, 0xBB	; 187
     d30:	f4 e0       	ldi	r31, 0x04	; 4
     d32:	01 90       	ld	r0, Z+
     d34:	0d 92       	st	X+, r0
     d36:	8a 95       	dec	r24
     d38:	e1 f7       	brne	.-8      	; 0xd32 <_GLOBAL__sub_I_can+0xf0>
     d3a:	23 e3       	ldi	r18, 0x33	; 51
     d3c:	38 e0       	ldi	r19, 0x08	; 8
     d3e:	44 e3       	ldi	r20, 0x34	; 52
     d40:	53 e0       	ldi	r21, 0x03	; 3
     d42:	61 e4       	ldi	r22, 0x41	; 65
     d44:	87 e6       	ldi	r24, 0x67	; 103
     d46:	93 e0       	ldi	r25, 0x03	; 3
     d48:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_4(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     d4c:	8d b7       	in	r24, 0x3d	; 61
     d4e:	9e b7       	in	r25, 0x3e	; 62
     d50:	84 96       	adiw	r24, 0x24	; 36
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	9e bf       	out	0x3e, r25	; 62
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	8d bf       	out	0x3d, r24	; 61
     d5c:	0c 97       	sbiw	r24, 0x0c	; 12
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	9e bf       	out	0x3e, r25	; 62
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	8d bf       	out	0x3d, r24	; 61
     d68:	ad b7       	in	r26, 0x3d	; 61
     d6a:	be b7       	in	r27, 0x3e	; 62
     d6c:	11 96       	adiw	r26, 0x01	; 1
     d6e:	8c e0       	ldi	r24, 0x0C	; 12
     d70:	eb eb       	ldi	r30, 0xBB	; 187
     d72:	f4 e0       	ldi	r31, 0x04	; 4
     d74:	01 90       	ld	r0, Z+
     d76:	0d 92       	st	X+, r0
     d78:	8a 95       	dec	r24
     d7a:	e1 f7       	brne	.-8      	; 0xd74 <_GLOBAL__sub_I_can+0x132>
     d7c:	23 e3       	ldi	r18, 0x33	; 51
     d7e:	38 e0       	ldi	r19, 0x08	; 8
     d80:	44 e3       	ldi	r20, 0x34	; 52
     d82:	53 e0       	ldi	r21, 0x03	; 3
     d84:	61 e4       	ldi	r22, 0x41	; 65
     d86:	87 e4       	ldi	r24, 0x47	; 71
     d88:	93 e0       	ldi	r25, 0x03	; 3
     d8a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_5(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     d8e:	8d b7       	in	r24, 0x3d	; 61
     d90:	9e b7       	in	r25, 0x3e	; 62
     d92:	0c 97       	sbiw	r24, 0x0c	; 12
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	9e bf       	out	0x3e, r25	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	8d bf       	out	0x3d, r24	; 61
     d9e:	ad b7       	in	r26, 0x3d	; 61
     da0:	be b7       	in	r27, 0x3e	; 62
     da2:	11 96       	adiw	r26, 0x01	; 1
     da4:	8c e0       	ldi	r24, 0x0C	; 12
     da6:	eb eb       	ldi	r30, 0xBB	; 187
     da8:	f4 e0       	ldi	r31, 0x04	; 4
     daa:	01 90       	ld	r0, Z+
     dac:	0d 92       	st	X+, r0
     dae:	8a 95       	dec	r24
     db0:	e1 f7       	brne	.-8      	; 0xdaa <_GLOBAL__sub_I_can+0x168>
     db2:	23 e3       	ldi	r18, 0x33	; 51
     db4:	38 e0       	ldi	r19, 0x08	; 8
     db6:	44 e3       	ldi	r20, 0x34	; 52
     db8:	53 e0       	ldi	r21, 0x03	; 3
     dba:	61 e4       	ldi	r22, 0x41	; 65
     dbc:	87 e2       	ldi	r24, 0x27	; 39
     dbe:	93 e0       	ldi	r25, 0x03	; 3
     dc0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_6(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     dc4:	8d b7       	in	r24, 0x3d	; 61
     dc6:	9e b7       	in	r25, 0x3e	; 62
     dc8:	0c 97       	sbiw	r24, 0x0c	; 12
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	9e bf       	out	0x3e, r25	; 62
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	8d bf       	out	0x3d, r24	; 61
     dd4:	ad b7       	in	r26, 0x3d	; 61
     dd6:	be b7       	in	r27, 0x3e	; 62
     dd8:	11 96       	adiw	r26, 0x01	; 1
     dda:	8c e0       	ldi	r24, 0x0C	; 12
     ddc:	eb eb       	ldi	r30, 0xBB	; 187
     dde:	f4 e0       	ldi	r31, 0x04	; 4
     de0:	01 90       	ld	r0, Z+
     de2:	0d 92       	st	X+, r0
     de4:	8a 95       	dec	r24
     de6:	e1 f7       	brne	.-8      	; 0xde0 <_GLOBAL__sub_I_can+0x19e>
     de8:	23 e3       	ldi	r18, 0x33	; 51
     dea:	38 e0       	ldi	r19, 0x08	; 8
     dec:	44 e3       	ldi	r20, 0x34	; 52
     dee:	53 e0       	ldi	r21, 0x03	; 3
     df0:	61 e4       	ldi	r22, 0x41	; 65
     df2:	87 e0       	ldi	r24, 0x07	; 7
     df4:	93 e0       	ldi	r25, 0x03	; 3
     df6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_7(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2);
     dfa:	8d b7       	in	r24, 0x3d	; 61
     dfc:	9e b7       	in	r25, 0x3e	; 62
     dfe:	84 96       	adiw	r24, 0x24	; 36
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	9e bf       	out	0x3e, r25	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	8d bf       	out	0x3d, r24	; 61
     e0a:	0c 97       	sbiw	r24, 0x0c	; 12
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	f8 94       	cli
     e10:	9e bf       	out	0x3e, r25	; 62
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	8d bf       	out	0x3d, r24	; 61
     e16:	ad b7       	in	r26, 0x3d	; 61
     e18:	be b7       	in	r27, 0x3e	; 62
     e1a:	11 96       	adiw	r26, 0x01	; 1
     e1c:	8c e0       	ldi	r24, 0x0C	; 12
     e1e:	eb eb       	ldi	r30, 0xBB	; 187
     e20:	f4 e0       	ldi	r31, 0x04	; 4
     e22:	01 90       	ld	r0, Z+
     e24:	0d 92       	st	X+, r0
     e26:	8a 95       	dec	r24
     e28:	e1 f7       	brne	.-8      	; 0xe22 <_GLOBAL__sub_I_can+0x1e0>
     e2a:	23 e3       	ldi	r18, 0x33	; 51
     e2c:	38 e0       	ldi	r19, 0x08	; 8
     e2e:	44 e3       	ldi	r20, 0x34	; 52
     e30:	53 e0       	ldi	r21, 0x03	; 3
     e32:	61 e4       	ldi	r22, 0x41	; 65
     e34:	87 ee       	ldi	r24, 0xE7	; 231
     e36:	92 e0       	ldi	r25, 0x02	; 2
     e38:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>

// ___________________________ INA233 AND MOSFET/RLE SETUP ______________________________//
class  mosfet{
public:
	mosfet() = delete;
	mosfet(uint8_t MOSpin) : MOSpin_(MOSpin){ }
     e3c:	83 e0       	ldi	r24, 0x03	; 3
     e3e:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <p1>
     e42:	85 e0       	ldi	r24, 0x05	; 5
     e44:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <p2>
     e48:	86 e0       	ldi	r24, 0x06	; 6
     e4a:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <p3>
     e4e:	8a e0       	ldi	r24, 0x0A	; 10
     e50:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <p4>
     e54:	8f e0       	ldi	r24, 0x0F	; 15
     e56:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <p5>
     e5a:	80 e1       	ldi	r24, 0x10	; 16
     e5c:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <p6>
     e60:	81 e1       	ldi	r24, 0x11	; 17
     e62:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <__data_end>
			}
		}		
		
		timeStamps[0] = millis();
	}
}
     e66:	8d b7       	in	r24, 0x3d	; 61
     e68:	9e b7       	in	r25, 0x3e	; 62
     e6a:	0c 96       	adiw	r24, 0x0c	; 12
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	9e bf       	out	0x3e, r25	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	8d bf       	out	0x3d, r24	; 61
     e76:	08 95       	ret

00000e78 <_GLOBAL__sub_D_can>:
//······················································································································
// Destructor
//······················································································································

  public: ~ ACANFDBuffer (void) {
    delete [] mBuffer ;
     e78:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <can+0x26>
     e7c:	90 91 a6 04 	lds	r25, 0x04A6	; 0x8004a6 <can+0x27>
     e80:	00 97       	sbiw	r24, 0x00	; 0
     e82:	11 f0       	breq	.+4      	; 0xe88 <_GLOBAL__sub_D_can+0x10>
     e84:	0e 94 6f 0b 	call	0x16de	; 0x16de <_ZdaPv>
     e88:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <can+0x10>
     e8c:	90 91 90 04 	lds	r25, 0x0490	; 0x800490 <can+0x11>
     e90:	00 97       	sbiw	r24, 0x00	; 0
     e92:	11 f0       	breq	.+4      	; 0xe98 <_GLOBAL__sub_D_can+0x20>
     e94:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <_ZdaPv>
     e98:	08 95       	ret

00000e9a <__subsf3>:
     e9a:	50 58       	subi	r21, 0x80	; 128

00000e9c <__addsf3>:
     e9c:	bb 27       	eor	r27, r27
     e9e:	aa 27       	eor	r26, r26
     ea0:	0e 94 65 07 	call	0xeca	; 0xeca <__addsf3x>
     ea4:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__fp_round>
     ea8:	0e 94 a8 08 	call	0x1150	; 0x1150 <__fp_pscA>
     eac:	38 f0       	brcs	.+14     	; 0xebc <__addsf3+0x20>
     eae:	0e 94 af 08 	call	0x115e	; 0x115e <__fp_pscB>
     eb2:	20 f0       	brcs	.+8      	; 0xebc <__addsf3+0x20>
     eb4:	39 f4       	brne	.+14     	; 0xec4 <__addsf3+0x28>
     eb6:	9f 3f       	cpi	r25, 0xFF	; 255
     eb8:	19 f4       	brne	.+6      	; 0xec0 <__addsf3+0x24>
     eba:	26 f4       	brtc	.+8      	; 0xec4 <__addsf3+0x28>
     ebc:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__fp_nan>
     ec0:	0e f4       	brtc	.+2      	; 0xec4 <__addsf3+0x28>
     ec2:	e0 95       	com	r30
     ec4:	e7 fb       	bst	r30, 7
     ec6:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_inf>

00000eca <__addsf3x>:
     eca:	e9 2f       	mov	r30, r25
     ecc:	0e 94 c7 08 	call	0x118e	; 0x118e <__fp_split3>
     ed0:	58 f3       	brcs	.-42     	; 0xea8 <__addsf3+0xc>
     ed2:	ba 17       	cp	r27, r26
     ed4:	62 07       	cpc	r22, r18
     ed6:	73 07       	cpc	r23, r19
     ed8:	84 07       	cpc	r24, r20
     eda:	95 07       	cpc	r25, r21
     edc:	20 f0       	brcs	.+8      	; 0xee6 <__addsf3x+0x1c>
     ede:	79 f4       	brne	.+30     	; 0xefe <__addsf3x+0x34>
     ee0:	a6 f5       	brtc	.+104    	; 0xf4a <__addsf3x+0x80>
     ee2:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__fp_zero>
     ee6:	0e f4       	brtc	.+2      	; 0xeea <__addsf3x+0x20>
     ee8:	e0 95       	com	r30
     eea:	0b 2e       	mov	r0, r27
     eec:	ba 2f       	mov	r27, r26
     eee:	a0 2d       	mov	r26, r0
     ef0:	0b 01       	movw	r0, r22
     ef2:	b9 01       	movw	r22, r18
     ef4:	90 01       	movw	r18, r0
     ef6:	0c 01       	movw	r0, r24
     ef8:	ca 01       	movw	r24, r20
     efa:	a0 01       	movw	r20, r0
     efc:	11 24       	eor	r1, r1
     efe:	ff 27       	eor	r31, r31
     f00:	59 1b       	sub	r21, r25
     f02:	99 f0       	breq	.+38     	; 0xf2a <__addsf3x+0x60>
     f04:	59 3f       	cpi	r21, 0xF9	; 249
     f06:	50 f4       	brcc	.+20     	; 0xf1c <__addsf3x+0x52>
     f08:	50 3e       	cpi	r21, 0xE0	; 224
     f0a:	68 f1       	brcs	.+90     	; 0xf66 <__addsf3x+0x9c>
     f0c:	1a 16       	cp	r1, r26
     f0e:	f0 40       	sbci	r31, 0x00	; 0
     f10:	a2 2f       	mov	r26, r18
     f12:	23 2f       	mov	r18, r19
     f14:	34 2f       	mov	r19, r20
     f16:	44 27       	eor	r20, r20
     f18:	58 5f       	subi	r21, 0xF8	; 248
     f1a:	f3 cf       	rjmp	.-26     	; 0xf02 <__addsf3x+0x38>
     f1c:	46 95       	lsr	r20
     f1e:	37 95       	ror	r19
     f20:	27 95       	ror	r18
     f22:	a7 95       	ror	r26
     f24:	f0 40       	sbci	r31, 0x00	; 0
     f26:	53 95       	inc	r21
     f28:	c9 f7       	brne	.-14     	; 0xf1c <__addsf3x+0x52>
     f2a:	7e f4       	brtc	.+30     	; 0xf4a <__addsf3x+0x80>
     f2c:	1f 16       	cp	r1, r31
     f2e:	ba 0b       	sbc	r27, r26
     f30:	62 0b       	sbc	r22, r18
     f32:	73 0b       	sbc	r23, r19
     f34:	84 0b       	sbc	r24, r20
     f36:	ba f0       	brmi	.+46     	; 0xf66 <__addsf3x+0x9c>
     f38:	91 50       	subi	r25, 0x01	; 1
     f3a:	a1 f0       	breq	.+40     	; 0xf64 <__addsf3x+0x9a>
     f3c:	ff 0f       	add	r31, r31
     f3e:	bb 1f       	adc	r27, r27
     f40:	66 1f       	adc	r22, r22
     f42:	77 1f       	adc	r23, r23
     f44:	88 1f       	adc	r24, r24
     f46:	c2 f7       	brpl	.-16     	; 0xf38 <__addsf3x+0x6e>
     f48:	0e c0       	rjmp	.+28     	; 0xf66 <__addsf3x+0x9c>
     f4a:	ba 0f       	add	r27, r26
     f4c:	62 1f       	adc	r22, r18
     f4e:	73 1f       	adc	r23, r19
     f50:	84 1f       	adc	r24, r20
     f52:	48 f4       	brcc	.+18     	; 0xf66 <__addsf3x+0x9c>
     f54:	87 95       	ror	r24
     f56:	77 95       	ror	r23
     f58:	67 95       	ror	r22
     f5a:	b7 95       	ror	r27
     f5c:	f7 95       	ror	r31
     f5e:	9e 3f       	cpi	r25, 0xFE	; 254
     f60:	08 f0       	brcs	.+2      	; 0xf64 <__addsf3x+0x9a>
     f62:	b0 cf       	rjmp	.-160    	; 0xec4 <__addsf3+0x28>
     f64:	93 95       	inc	r25
     f66:	88 0f       	add	r24, r24
     f68:	08 f0       	brcs	.+2      	; 0xf6c <__addsf3x+0xa2>
     f6a:	99 27       	eor	r25, r25
     f6c:	ee 0f       	add	r30, r30
     f6e:	97 95       	ror	r25
     f70:	87 95       	ror	r24
     f72:	08 95       	ret

00000f74 <__divsf3>:
     f74:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__divsf3x>
     f78:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__fp_round>
     f7c:	0e 94 af 08 	call	0x115e	; 0x115e <__fp_pscB>
     f80:	58 f0       	brcs	.+22     	; 0xf98 <__divsf3+0x24>
     f82:	0e 94 a8 08 	call	0x1150	; 0x1150 <__fp_pscA>
     f86:	40 f0       	brcs	.+16     	; 0xf98 <__divsf3+0x24>
     f88:	29 f4       	brne	.+10     	; 0xf94 <__divsf3+0x20>
     f8a:	5f 3f       	cpi	r21, 0xFF	; 255
     f8c:	29 f0       	breq	.+10     	; 0xf98 <__divsf3+0x24>
     f8e:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_inf>
     f92:	51 11       	cpse	r21, r1
     f94:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <__fp_szero>
     f98:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__fp_nan>

00000f9c <__divsf3x>:
     f9c:	0e 94 c7 08 	call	0x118e	; 0x118e <__fp_split3>
     fa0:	68 f3       	brcs	.-38     	; 0xf7c <__divsf3+0x8>

00000fa2 <__divsf3_pse>:
     fa2:	99 23       	and	r25, r25
     fa4:	b1 f3       	breq	.-20     	; 0xf92 <__divsf3+0x1e>
     fa6:	55 23       	and	r21, r21
     fa8:	91 f3       	breq	.-28     	; 0xf8e <__divsf3+0x1a>
     faa:	95 1b       	sub	r25, r21
     fac:	55 0b       	sbc	r21, r21
     fae:	bb 27       	eor	r27, r27
     fb0:	aa 27       	eor	r26, r26
     fb2:	62 17       	cp	r22, r18
     fb4:	73 07       	cpc	r23, r19
     fb6:	84 07       	cpc	r24, r20
     fb8:	38 f0       	brcs	.+14     	; 0xfc8 <__divsf3_pse+0x26>
     fba:	9f 5f       	subi	r25, 0xFF	; 255
     fbc:	5f 4f       	sbci	r21, 0xFF	; 255
     fbe:	22 0f       	add	r18, r18
     fc0:	33 1f       	adc	r19, r19
     fc2:	44 1f       	adc	r20, r20
     fc4:	aa 1f       	adc	r26, r26
     fc6:	a9 f3       	breq	.-22     	; 0xfb2 <__divsf3_pse+0x10>
     fc8:	35 d0       	rcall	.+106    	; 0x1034 <__divsf3_pse+0x92>
     fca:	0e 2e       	mov	r0, r30
     fcc:	3a f0       	brmi	.+14     	; 0xfdc <__divsf3_pse+0x3a>
     fce:	e0 e8       	ldi	r30, 0x80	; 128
     fd0:	32 d0       	rcall	.+100    	; 0x1036 <__divsf3_pse+0x94>
     fd2:	91 50       	subi	r25, 0x01	; 1
     fd4:	50 40       	sbci	r21, 0x00	; 0
     fd6:	e6 95       	lsr	r30
     fd8:	00 1c       	adc	r0, r0
     fda:	ca f7       	brpl	.-14     	; 0xfce <__divsf3_pse+0x2c>
     fdc:	2b d0       	rcall	.+86     	; 0x1034 <__divsf3_pse+0x92>
     fde:	fe 2f       	mov	r31, r30
     fe0:	29 d0       	rcall	.+82     	; 0x1034 <__divsf3_pse+0x92>
     fe2:	66 0f       	add	r22, r22
     fe4:	77 1f       	adc	r23, r23
     fe6:	88 1f       	adc	r24, r24
     fe8:	bb 1f       	adc	r27, r27
     fea:	26 17       	cp	r18, r22
     fec:	37 07       	cpc	r19, r23
     fee:	48 07       	cpc	r20, r24
     ff0:	ab 07       	cpc	r26, r27
     ff2:	b0 e8       	ldi	r27, 0x80	; 128
     ff4:	09 f0       	breq	.+2      	; 0xff8 <__divsf3_pse+0x56>
     ff6:	bb 0b       	sbc	r27, r27
     ff8:	80 2d       	mov	r24, r0
     ffa:	bf 01       	movw	r22, r30
     ffc:	ff 27       	eor	r31, r31
     ffe:	93 58       	subi	r25, 0x83	; 131
    1000:	5f 4f       	sbci	r21, 0xFF	; 255
    1002:	3a f0       	brmi	.+14     	; 0x1012 <__divsf3_pse+0x70>
    1004:	9e 3f       	cpi	r25, 0xFE	; 254
    1006:	51 05       	cpc	r21, r1
    1008:	78 f0       	brcs	.+30     	; 0x1028 <__divsf3_pse+0x86>
    100a:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_inf>
    100e:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <__fp_szero>
    1012:	5f 3f       	cpi	r21, 0xFF	; 255
    1014:	e4 f3       	brlt	.-8      	; 0x100e <__divsf3_pse+0x6c>
    1016:	98 3e       	cpi	r25, 0xE8	; 232
    1018:	d4 f3       	brlt	.-12     	; 0x100e <__divsf3_pse+0x6c>
    101a:	86 95       	lsr	r24
    101c:	77 95       	ror	r23
    101e:	67 95       	ror	r22
    1020:	b7 95       	ror	r27
    1022:	f7 95       	ror	r31
    1024:	9f 5f       	subi	r25, 0xFF	; 255
    1026:	c9 f7       	brne	.-14     	; 0x101a <__divsf3_pse+0x78>
    1028:	88 0f       	add	r24, r24
    102a:	91 1d       	adc	r25, r1
    102c:	96 95       	lsr	r25
    102e:	87 95       	ror	r24
    1030:	97 f9       	bld	r25, 7
    1032:	08 95       	ret
    1034:	e1 e0       	ldi	r30, 0x01	; 1
    1036:	66 0f       	add	r22, r22
    1038:	77 1f       	adc	r23, r23
    103a:	88 1f       	adc	r24, r24
    103c:	bb 1f       	adc	r27, r27
    103e:	62 17       	cp	r22, r18
    1040:	73 07       	cpc	r23, r19
    1042:	84 07       	cpc	r24, r20
    1044:	ba 07       	cpc	r27, r26
    1046:	20 f0       	brcs	.+8      	; 0x1050 <__divsf3_pse+0xae>
    1048:	62 1b       	sub	r22, r18
    104a:	73 0b       	sbc	r23, r19
    104c:	84 0b       	sbc	r24, r20
    104e:	ba 0b       	sbc	r27, r26
    1050:	ee 1f       	adc	r30, r30
    1052:	88 f7       	brcc	.-30     	; 0x1036 <__divsf3_pse+0x94>
    1054:	e0 95       	com	r30
    1056:	08 95       	ret

00001058 <__fixsfsi>:
    1058:	0e 94 33 08 	call	0x1066	; 0x1066 <__fixunssfsi>
    105c:	68 94       	set
    105e:	b1 11       	cpse	r27, r1
    1060:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <__fp_szero>
    1064:	08 95       	ret

00001066 <__fixunssfsi>:
    1066:	0e 94 cf 08 	call	0x119e	; 0x119e <__fp_splitA>
    106a:	88 f0       	brcs	.+34     	; 0x108e <__fixunssfsi+0x28>
    106c:	9f 57       	subi	r25, 0x7F	; 127
    106e:	98 f0       	brcs	.+38     	; 0x1096 <__fixunssfsi+0x30>
    1070:	b9 2f       	mov	r27, r25
    1072:	99 27       	eor	r25, r25
    1074:	b7 51       	subi	r27, 0x17	; 23
    1076:	b0 f0       	brcs	.+44     	; 0x10a4 <__fixunssfsi+0x3e>
    1078:	e1 f0       	breq	.+56     	; 0x10b2 <__fixunssfsi+0x4c>
    107a:	66 0f       	add	r22, r22
    107c:	77 1f       	adc	r23, r23
    107e:	88 1f       	adc	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	1a f0       	brmi	.+6      	; 0x108a <__fixunssfsi+0x24>
    1084:	ba 95       	dec	r27
    1086:	c9 f7       	brne	.-14     	; 0x107a <__fixunssfsi+0x14>
    1088:	14 c0       	rjmp	.+40     	; 0x10b2 <__fixunssfsi+0x4c>
    108a:	b1 30       	cpi	r27, 0x01	; 1
    108c:	91 f0       	breq	.+36     	; 0x10b2 <__fixunssfsi+0x4c>
    108e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__fp_zero>
    1092:	b1 e0       	ldi	r27, 0x01	; 1
    1094:	08 95       	ret
    1096:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__fp_zero>
    109a:	67 2f       	mov	r22, r23
    109c:	78 2f       	mov	r23, r24
    109e:	88 27       	eor	r24, r24
    10a0:	b8 5f       	subi	r27, 0xF8	; 248
    10a2:	39 f0       	breq	.+14     	; 0x10b2 <__fixunssfsi+0x4c>
    10a4:	b9 3f       	cpi	r27, 0xF9	; 249
    10a6:	cc f3       	brlt	.-14     	; 0x109a <__fixunssfsi+0x34>
    10a8:	86 95       	lsr	r24
    10aa:	77 95       	ror	r23
    10ac:	67 95       	ror	r22
    10ae:	b3 95       	inc	r27
    10b0:	d9 f7       	brne	.-10     	; 0x10a8 <__fixunssfsi+0x42>
    10b2:	3e f4       	brtc	.+14     	; 0x10c2 <__fixunssfsi+0x5c>
    10b4:	90 95       	com	r25
    10b6:	80 95       	com	r24
    10b8:	70 95       	com	r23
    10ba:	61 95       	neg	r22
    10bc:	7f 4f       	sbci	r23, 0xFF	; 255
    10be:	8f 4f       	sbci	r24, 0xFF	; 255
    10c0:	9f 4f       	sbci	r25, 0xFF	; 255
    10c2:	08 95       	ret

000010c4 <__floatunsisf>:
    10c4:	e8 94       	clt
    10c6:	09 c0       	rjmp	.+18     	; 0x10da <__floatsisf+0x12>

000010c8 <__floatsisf>:
    10c8:	97 fb       	bst	r25, 7
    10ca:	3e f4       	brtc	.+14     	; 0x10da <__floatsisf+0x12>
    10cc:	90 95       	com	r25
    10ce:	80 95       	com	r24
    10d0:	70 95       	com	r23
    10d2:	61 95       	neg	r22
    10d4:	7f 4f       	sbci	r23, 0xFF	; 255
    10d6:	8f 4f       	sbci	r24, 0xFF	; 255
    10d8:	9f 4f       	sbci	r25, 0xFF	; 255
    10da:	99 23       	and	r25, r25
    10dc:	a9 f0       	breq	.+42     	; 0x1108 <__floatsisf+0x40>
    10de:	f9 2f       	mov	r31, r25
    10e0:	96 e9       	ldi	r25, 0x96	; 150
    10e2:	bb 27       	eor	r27, r27
    10e4:	93 95       	inc	r25
    10e6:	f6 95       	lsr	r31
    10e8:	87 95       	ror	r24
    10ea:	77 95       	ror	r23
    10ec:	67 95       	ror	r22
    10ee:	b7 95       	ror	r27
    10f0:	f1 11       	cpse	r31, r1
    10f2:	f8 cf       	rjmp	.-16     	; 0x10e4 <__floatsisf+0x1c>
    10f4:	fa f4       	brpl	.+62     	; 0x1134 <__floatsisf+0x6c>
    10f6:	bb 0f       	add	r27, r27
    10f8:	11 f4       	brne	.+4      	; 0x10fe <__floatsisf+0x36>
    10fa:	60 ff       	sbrs	r22, 0
    10fc:	1b c0       	rjmp	.+54     	; 0x1134 <__floatsisf+0x6c>
    10fe:	6f 5f       	subi	r22, 0xFF	; 255
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	8f 4f       	sbci	r24, 0xFF	; 255
    1104:	9f 4f       	sbci	r25, 0xFF	; 255
    1106:	16 c0       	rjmp	.+44     	; 0x1134 <__floatsisf+0x6c>
    1108:	88 23       	and	r24, r24
    110a:	11 f0       	breq	.+4      	; 0x1110 <__floatsisf+0x48>
    110c:	96 e9       	ldi	r25, 0x96	; 150
    110e:	11 c0       	rjmp	.+34     	; 0x1132 <__floatsisf+0x6a>
    1110:	77 23       	and	r23, r23
    1112:	21 f0       	breq	.+8      	; 0x111c <__floatsisf+0x54>
    1114:	9e e8       	ldi	r25, 0x8E	; 142
    1116:	87 2f       	mov	r24, r23
    1118:	76 2f       	mov	r23, r22
    111a:	05 c0       	rjmp	.+10     	; 0x1126 <__floatsisf+0x5e>
    111c:	66 23       	and	r22, r22
    111e:	71 f0       	breq	.+28     	; 0x113c <__floatsisf+0x74>
    1120:	96 e8       	ldi	r25, 0x86	; 134
    1122:	86 2f       	mov	r24, r22
    1124:	70 e0       	ldi	r23, 0x00	; 0
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	2a f0       	brmi	.+10     	; 0x1134 <__floatsisf+0x6c>
    112a:	9a 95       	dec	r25
    112c:	66 0f       	add	r22, r22
    112e:	77 1f       	adc	r23, r23
    1130:	88 1f       	adc	r24, r24
    1132:	da f7       	brpl	.-10     	; 0x112a <__floatsisf+0x62>
    1134:	88 0f       	add	r24, r24
    1136:	96 95       	lsr	r25
    1138:	87 95       	ror	r24
    113a:	97 f9       	bld	r25, 7
    113c:	08 95       	ret

0000113e <__fp_inf>:
    113e:	97 f9       	bld	r25, 7
    1140:	9f 67       	ori	r25, 0x7F	; 127
    1142:	80 e8       	ldi	r24, 0x80	; 128
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	08 95       	ret

0000114a <__fp_nan>:
    114a:	9f ef       	ldi	r25, 0xFF	; 255
    114c:	80 ec       	ldi	r24, 0xC0	; 192
    114e:	08 95       	ret

00001150 <__fp_pscA>:
    1150:	00 24       	eor	r0, r0
    1152:	0a 94       	dec	r0
    1154:	16 16       	cp	r1, r22
    1156:	17 06       	cpc	r1, r23
    1158:	18 06       	cpc	r1, r24
    115a:	09 06       	cpc	r0, r25
    115c:	08 95       	ret

0000115e <__fp_pscB>:
    115e:	00 24       	eor	r0, r0
    1160:	0a 94       	dec	r0
    1162:	12 16       	cp	r1, r18
    1164:	13 06       	cpc	r1, r19
    1166:	14 06       	cpc	r1, r20
    1168:	05 06       	cpc	r0, r21
    116a:	08 95       	ret

0000116c <__fp_round>:
    116c:	09 2e       	mov	r0, r25
    116e:	03 94       	inc	r0
    1170:	00 0c       	add	r0, r0
    1172:	11 f4       	brne	.+4      	; 0x1178 <__fp_round+0xc>
    1174:	88 23       	and	r24, r24
    1176:	52 f0       	brmi	.+20     	; 0x118c <__fp_round+0x20>
    1178:	bb 0f       	add	r27, r27
    117a:	40 f4       	brcc	.+16     	; 0x118c <__fp_round+0x20>
    117c:	bf 2b       	or	r27, r31
    117e:	11 f4       	brne	.+4      	; 0x1184 <__fp_round+0x18>
    1180:	60 ff       	sbrs	r22, 0
    1182:	04 c0       	rjmp	.+8      	; 0x118c <__fp_round+0x20>
    1184:	6f 5f       	subi	r22, 0xFF	; 255
    1186:	7f 4f       	sbci	r23, 0xFF	; 255
    1188:	8f 4f       	sbci	r24, 0xFF	; 255
    118a:	9f 4f       	sbci	r25, 0xFF	; 255
    118c:	08 95       	ret

0000118e <__fp_split3>:
    118e:	57 fd       	sbrc	r21, 7
    1190:	90 58       	subi	r25, 0x80	; 128
    1192:	44 0f       	add	r20, r20
    1194:	55 1f       	adc	r21, r21
    1196:	59 f0       	breq	.+22     	; 0x11ae <__fp_splitA+0x10>
    1198:	5f 3f       	cpi	r21, 0xFF	; 255
    119a:	71 f0       	breq	.+28     	; 0x11b8 <__fp_splitA+0x1a>
    119c:	47 95       	ror	r20

0000119e <__fp_splitA>:
    119e:	88 0f       	add	r24, r24
    11a0:	97 fb       	bst	r25, 7
    11a2:	99 1f       	adc	r25, r25
    11a4:	61 f0       	breq	.+24     	; 0x11be <__fp_splitA+0x20>
    11a6:	9f 3f       	cpi	r25, 0xFF	; 255
    11a8:	79 f0       	breq	.+30     	; 0x11c8 <__fp_splitA+0x2a>
    11aa:	87 95       	ror	r24
    11ac:	08 95       	ret
    11ae:	12 16       	cp	r1, r18
    11b0:	13 06       	cpc	r1, r19
    11b2:	14 06       	cpc	r1, r20
    11b4:	55 1f       	adc	r21, r21
    11b6:	f2 cf       	rjmp	.-28     	; 0x119c <__fp_split3+0xe>
    11b8:	46 95       	lsr	r20
    11ba:	f1 df       	rcall	.-30     	; 0x119e <__fp_splitA>
    11bc:	08 c0       	rjmp	.+16     	; 0x11ce <__fp_splitA+0x30>
    11be:	16 16       	cp	r1, r22
    11c0:	17 06       	cpc	r1, r23
    11c2:	18 06       	cpc	r1, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	f1 cf       	rjmp	.-30     	; 0x11aa <__fp_splitA+0xc>
    11c8:	86 95       	lsr	r24
    11ca:	71 05       	cpc	r23, r1
    11cc:	61 05       	cpc	r22, r1
    11ce:	08 94       	sec
    11d0:	08 95       	ret

000011d2 <__fp_zero>:
    11d2:	e8 94       	clt

000011d4 <__fp_szero>:
    11d4:	bb 27       	eor	r27, r27
    11d6:	66 27       	eor	r22, r22
    11d8:	77 27       	eor	r23, r23
    11da:	cb 01       	movw	r24, r22
    11dc:	97 f9       	bld	r25, 7
    11de:	08 95       	ret

000011e0 <__gesf2>:
    11e0:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__fp_cmp>
    11e4:	08 f4       	brcc	.+2      	; 0x11e8 <__gesf2+0x8>
    11e6:	8f ef       	ldi	r24, 0xFF	; 255
    11e8:	08 95       	ret

000011ea <__mulsf3>:
    11ea:	0e 94 08 09 	call	0x1210	; 0x1210 <__mulsf3x>
    11ee:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__fp_round>
    11f2:	0e 94 a8 08 	call	0x1150	; 0x1150 <__fp_pscA>
    11f6:	38 f0       	brcs	.+14     	; 0x1206 <__mulsf3+0x1c>
    11f8:	0e 94 af 08 	call	0x115e	; 0x115e <__fp_pscB>
    11fc:	20 f0       	brcs	.+8      	; 0x1206 <__mulsf3+0x1c>
    11fe:	95 23       	and	r25, r21
    1200:	11 f0       	breq	.+4      	; 0x1206 <__mulsf3+0x1c>
    1202:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_inf>
    1206:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__fp_nan>
    120a:	11 24       	eor	r1, r1
    120c:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <__fp_szero>

00001210 <__mulsf3x>:
    1210:	0e 94 c7 08 	call	0x118e	; 0x118e <__fp_split3>
    1214:	70 f3       	brcs	.-36     	; 0x11f2 <__mulsf3+0x8>

00001216 <__mulsf3_pse>:
    1216:	95 9f       	mul	r25, r21
    1218:	c1 f3       	breq	.-16     	; 0x120a <__mulsf3+0x20>
    121a:	95 0f       	add	r25, r21
    121c:	50 e0       	ldi	r21, 0x00	; 0
    121e:	55 1f       	adc	r21, r21
    1220:	62 9f       	mul	r22, r18
    1222:	f0 01       	movw	r30, r0
    1224:	72 9f       	mul	r23, r18
    1226:	bb 27       	eor	r27, r27
    1228:	f0 0d       	add	r31, r0
    122a:	b1 1d       	adc	r27, r1
    122c:	63 9f       	mul	r22, r19
    122e:	aa 27       	eor	r26, r26
    1230:	f0 0d       	add	r31, r0
    1232:	b1 1d       	adc	r27, r1
    1234:	aa 1f       	adc	r26, r26
    1236:	64 9f       	mul	r22, r20
    1238:	66 27       	eor	r22, r22
    123a:	b0 0d       	add	r27, r0
    123c:	a1 1d       	adc	r26, r1
    123e:	66 1f       	adc	r22, r22
    1240:	82 9f       	mul	r24, r18
    1242:	22 27       	eor	r18, r18
    1244:	b0 0d       	add	r27, r0
    1246:	a1 1d       	adc	r26, r1
    1248:	62 1f       	adc	r22, r18
    124a:	73 9f       	mul	r23, r19
    124c:	b0 0d       	add	r27, r0
    124e:	a1 1d       	adc	r26, r1
    1250:	62 1f       	adc	r22, r18
    1252:	83 9f       	mul	r24, r19
    1254:	a0 0d       	add	r26, r0
    1256:	61 1d       	adc	r22, r1
    1258:	22 1f       	adc	r18, r18
    125a:	74 9f       	mul	r23, r20
    125c:	33 27       	eor	r19, r19
    125e:	a0 0d       	add	r26, r0
    1260:	61 1d       	adc	r22, r1
    1262:	23 1f       	adc	r18, r19
    1264:	84 9f       	mul	r24, r20
    1266:	60 0d       	add	r22, r0
    1268:	21 1d       	adc	r18, r1
    126a:	82 2f       	mov	r24, r18
    126c:	76 2f       	mov	r23, r22
    126e:	6a 2f       	mov	r22, r26
    1270:	11 24       	eor	r1, r1
    1272:	9f 57       	subi	r25, 0x7F	; 127
    1274:	50 40       	sbci	r21, 0x00	; 0
    1276:	9a f0       	brmi	.+38     	; 0x129e <__mulsf3_pse+0x88>
    1278:	f1 f0       	breq	.+60     	; 0x12b6 <__mulsf3_pse+0xa0>
    127a:	88 23       	and	r24, r24
    127c:	4a f0       	brmi	.+18     	; 0x1290 <__mulsf3_pse+0x7a>
    127e:	ee 0f       	add	r30, r30
    1280:	ff 1f       	adc	r31, r31
    1282:	bb 1f       	adc	r27, r27
    1284:	66 1f       	adc	r22, r22
    1286:	77 1f       	adc	r23, r23
    1288:	88 1f       	adc	r24, r24
    128a:	91 50       	subi	r25, 0x01	; 1
    128c:	50 40       	sbci	r21, 0x00	; 0
    128e:	a9 f7       	brne	.-22     	; 0x127a <__mulsf3_pse+0x64>
    1290:	9e 3f       	cpi	r25, 0xFE	; 254
    1292:	51 05       	cpc	r21, r1
    1294:	80 f0       	brcs	.+32     	; 0x12b6 <__mulsf3_pse+0xa0>
    1296:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_inf>
    129a:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <__fp_szero>
    129e:	5f 3f       	cpi	r21, 0xFF	; 255
    12a0:	e4 f3       	brlt	.-8      	; 0x129a <__mulsf3_pse+0x84>
    12a2:	98 3e       	cpi	r25, 0xE8	; 232
    12a4:	d4 f3       	brlt	.-12     	; 0x129a <__mulsf3_pse+0x84>
    12a6:	86 95       	lsr	r24
    12a8:	77 95       	ror	r23
    12aa:	67 95       	ror	r22
    12ac:	b7 95       	ror	r27
    12ae:	f7 95       	ror	r31
    12b0:	e7 95       	ror	r30
    12b2:	9f 5f       	subi	r25, 0xFF	; 255
    12b4:	c1 f7       	brne	.-16     	; 0x12a6 <__mulsf3_pse+0x90>
    12b6:	fe 2b       	or	r31, r30
    12b8:	88 0f       	add	r24, r24
    12ba:	91 1d       	adc	r25, r1
    12bc:	96 95       	lsr	r25
    12be:	87 95       	ror	r24
    12c0:	97 f9       	bld	r25, 7
    12c2:	08 95       	ret

000012c4 <__fp_cmp>:
    12c4:	99 0f       	add	r25, r25
    12c6:	00 08       	sbc	r0, r0
    12c8:	55 0f       	add	r21, r21
    12ca:	aa 0b       	sbc	r26, r26
    12cc:	e0 e8       	ldi	r30, 0x80	; 128
    12ce:	fe ef       	ldi	r31, 0xFE	; 254
    12d0:	16 16       	cp	r1, r22
    12d2:	17 06       	cpc	r1, r23
    12d4:	e8 07       	cpc	r30, r24
    12d6:	f9 07       	cpc	r31, r25
    12d8:	c0 f0       	brcs	.+48     	; 0x130a <__fp_cmp+0x46>
    12da:	12 16       	cp	r1, r18
    12dc:	13 06       	cpc	r1, r19
    12de:	e4 07       	cpc	r30, r20
    12e0:	f5 07       	cpc	r31, r21
    12e2:	98 f0       	brcs	.+38     	; 0x130a <__fp_cmp+0x46>
    12e4:	62 1b       	sub	r22, r18
    12e6:	73 0b       	sbc	r23, r19
    12e8:	84 0b       	sbc	r24, r20
    12ea:	95 0b       	sbc	r25, r21
    12ec:	39 f4       	brne	.+14     	; 0x12fc <__fp_cmp+0x38>
    12ee:	0a 26       	eor	r0, r26
    12f0:	61 f0       	breq	.+24     	; 0x130a <__fp_cmp+0x46>
    12f2:	23 2b       	or	r18, r19
    12f4:	24 2b       	or	r18, r20
    12f6:	25 2b       	or	r18, r21
    12f8:	21 f4       	brne	.+8      	; 0x1302 <__fp_cmp+0x3e>
    12fa:	08 95       	ret
    12fc:	0a 26       	eor	r0, r26
    12fe:	09 f4       	brne	.+2      	; 0x1302 <__fp_cmp+0x3e>
    1300:	a1 40       	sbci	r26, 0x01	; 1
    1302:	a6 95       	lsr	r26
    1304:	8f ef       	ldi	r24, 0xFF	; 255
    1306:	81 1d       	adc	r24, r1
    1308:	81 1d       	adc	r24, r1
    130a:	08 95       	ret

0000130c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    130c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    130e:	91 8d       	ldd	r25, Z+25	; 0x19
    1310:	22 8d       	ldd	r18, Z+26	; 0x1a
    1312:	89 2f       	mov	r24, r25
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	80 5c       	subi	r24, 0xC0	; 192
    1318:	9f 4f       	sbci	r25, 0xFF	; 255
    131a:	82 1b       	sub	r24, r18
    131c:	91 09       	sbc	r25, r1
}
    131e:	8f 73       	andi	r24, 0x3F	; 63
    1320:	99 27       	eor	r25, r25
    1322:	08 95       	ret

00001324 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1324:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1326:	91 8d       	ldd	r25, Z+25	; 0x19
    1328:	82 8d       	ldd	r24, Z+26	; 0x1a
    132a:	98 17       	cp	r25, r24
    132c:	31 f0       	breq	.+12     	; 0x133a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    132e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1330:	e8 0f       	add	r30, r24
    1332:	f1 1d       	adc	r31, r1
    1334:	85 8d       	ldd	r24, Z+29	; 0x1d
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    133a:	8f ef       	ldi	r24, 0xFF	; 255
    133c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    133e:	08 95       	ret

00001340 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1340:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1342:	91 8d       	ldd	r25, Z+25	; 0x19
    1344:	82 8d       	ldd	r24, Z+26	; 0x1a
    1346:	98 17       	cp	r25, r24
    1348:	61 f0       	breq	.+24     	; 0x1362 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    134a:	82 8d       	ldd	r24, Z+26	; 0x1a
    134c:	df 01       	movw	r26, r30
    134e:	a8 0f       	add	r26, r24
    1350:	b1 1d       	adc	r27, r1
    1352:	5d 96       	adiw	r26, 0x1d	; 29
    1354:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1356:	92 8d       	ldd	r25, Z+26	; 0x1a
    1358:	9f 5f       	subi	r25, 0xFF	; 255
    135a:	9f 73       	andi	r25, 0x3F	; 63
    135c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1362:	8f ef       	ldi	r24, 0xFF	; 255
    1364:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1366:	08 95       	ret

00001368 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1368:	fc 01       	movw	r30, r24
    136a:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    136c:	44 8d       	ldd	r20, Z+28	; 0x1c
    136e:	25 2f       	mov	r18, r21
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	84 2f       	mov	r24, r20
    1374:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1376:	82 1b       	sub	r24, r18
    1378:	93 0b       	sbc	r25, r19
    137a:	54 17       	cp	r21, r20
    137c:	10 f0       	brcs	.+4      	; 0x1382 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    137e:	cf 96       	adiw	r24, 0x3f	; 63
    1380:	08 95       	ret
  return tail - head - 1;
    1382:	01 97       	sbiw	r24, 0x01	; 1
}
    1384:	08 95       	ret

00001386 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1386:	82 e2       	ldi	r24, 0x22	; 34
    1388:	9b e0       	ldi	r25, 0x0B	; 11
    138a:	89 2b       	or	r24, r25
    138c:	49 f0       	breq	.+18     	; 0x13a0 <_Z14serialEventRunv+0x1a>
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	89 2b       	or	r24, r25
    1394:	29 f0       	breq	.+10     	; 0x13a0 <_Z14serialEventRunv+0x1a>
    1396:	0e 94 22 0b 	call	0x1644	; 0x1644 <_Z17Serial0_availablev>
    139a:	81 11       	cpse	r24, r1
    139c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    13a0:	08 95       	ret

000013a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    13a2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    13a4:	84 8d       	ldd	r24, Z+28	; 0x1c
    13a6:	df 01       	movw	r26, r30
    13a8:	a8 0f       	add	r26, r24
    13aa:	b1 1d       	adc	r27, r1
    13ac:	a3 5a       	subi	r26, 0xA3	; 163
    13ae:	bf 4f       	sbci	r27, 0xFF	; 255
    13b0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    13b2:	84 8d       	ldd	r24, Z+28	; 0x1c
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	01 96       	adiw	r24, 0x01	; 1
    13b8:	8f 73       	andi	r24, 0x3F	; 63
    13ba:	99 27       	eor	r25, r25
    13bc:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    13be:	a6 89       	ldd	r26, Z+22	; 0x16
    13c0:	b7 89       	ldd	r27, Z+23	; 0x17
    13c2:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    13c4:	a0 89       	ldd	r26, Z+16	; 0x10
    13c6:	b1 89       	ldd	r27, Z+17	; 0x11
    13c8:	8c 91       	ld	r24, X
    13ca:	83 70       	andi	r24, 0x03	; 3
    13cc:	80 64       	ori	r24, 0x40	; 64
    13ce:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    13d0:	93 8d       	ldd	r25, Z+27	; 0x1b
    13d2:	84 8d       	ldd	r24, Z+28	; 0x1c
    13d4:	98 13       	cpse	r25, r24
    13d6:	06 c0       	rjmp	.+12     	; 0x13e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    13d8:	02 88       	ldd	r0, Z+18	; 0x12
    13da:	f3 89       	ldd	r31, Z+19	; 0x13
    13dc:	e0 2d       	mov	r30, r0
    13de:	80 81       	ld	r24, Z
    13e0:	8f 7d       	andi	r24, 0xDF	; 223
    13e2:	80 83       	st	Z, r24
    13e4:	08 95       	ret

000013e6 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    13e6:	ef 92       	push	r14
    13e8:	ff 92       	push	r15
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	ec 01       	movw	r28, r24
  _written = true;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    13f8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    13fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13fc:	98 13       	cpse	r25, r24
    13fe:	05 c0       	rjmp	.+10     	; 0x140a <_ZN14HardwareSerial5writeEh+0x24>
    1400:	e8 89       	ldd	r30, Y+16	; 0x10
    1402:	f9 89       	ldd	r31, Y+17	; 0x11
    1404:	80 81       	ld	r24, Z
    1406:	85 fd       	sbrc	r24, 5
    1408:	26 c0       	rjmp	.+76     	; 0x1456 <_ZN14HardwareSerial5writeEh+0x70>
    140a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    140c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    140e:	10 e0       	ldi	r17, 0x00	; 0
    1410:	0f 5f       	subi	r16, 0xFF	; 255
    1412:	1f 4f       	sbci	r17, 0xFF	; 255
    1414:	0f 73       	andi	r16, 0x3F	; 63
    1416:	11 27       	eor	r17, r17
    1418:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    141a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    141c:	e8 12       	cpse	r14, r24
    141e:	0c c0       	rjmp	.+24     	; 0x1438 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	07 fc       	sbrc	r0, 7
    1424:	fa cf       	rjmp	.-12     	; 0x141a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1426:	e8 89       	ldd	r30, Y+16	; 0x10
    1428:	f9 89       	ldd	r31, Y+17	; 0x11
    142a:	80 81       	ld	r24, Z
    142c:	85 ff       	sbrs	r24, 5
    142e:	f5 cf       	rjmp	.-22     	; 0x141a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1430:	ce 01       	movw	r24, r28
    1432:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1436:	f1 cf       	rjmp	.-30     	; 0x141a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1438:	8b 8d       	ldd	r24, Y+27	; 0x1b
    143a:	fe 01       	movw	r30, r28
    143c:	e8 0f       	add	r30, r24
    143e:	f1 1d       	adc	r31, r1
    1440:	e3 5a       	subi	r30, 0xA3	; 163
    1442:	ff 4f       	sbci	r31, 0xFF	; 255
    1444:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1446:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1448:	f8 94       	cli
    _tx_buffer_head = i;
    144a:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    144c:	ea 89       	ldd	r30, Y+18	; 0x12
    144e:	fb 89       	ldd	r31, Y+19	; 0x13
    1450:	80 81       	ld	r24, Z
    1452:	80 62       	ori	r24, 0x20	; 32
    1454:	0a c0       	rjmp	.+20     	; 0x146a <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1456:	9f b7       	in	r25, 0x3f	; 63
    1458:	f8 94       	cli
      *_udr = c;
    145a:	ee 89       	ldd	r30, Y+22	; 0x16
    145c:	ff 89       	ldd	r31, Y+23	; 0x17
    145e:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1460:	e8 89       	ldd	r30, Y+16	; 0x10
    1462:	f9 89       	ldd	r31, Y+17	; 0x11
    1464:	80 81       	ld	r24, Z
    1466:	83 70       	andi	r24, 0x03	; 3
    1468:	80 64       	ori	r24, 0x40	; 64
    146a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    146c:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	1f 91       	pop	r17
    1478:	0f 91       	pop	r16
    147a:	ff 90       	pop	r15
    147c:	ef 90       	pop	r14
    147e:	08 95       	ret

00001480 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
    1484:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1486:	88 8d       	ldd	r24, Y+24	; 0x18
    1488:	88 23       	and	r24, r24
    148a:	c9 f0       	breq	.+50     	; 0x14be <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    148c:	ea 89       	ldd	r30, Y+18	; 0x12
    148e:	fb 89       	ldd	r31, Y+19	; 0x13
    1490:	80 81       	ld	r24, Z
    1492:	85 fd       	sbrc	r24, 5
    1494:	05 c0       	rjmp	.+10     	; 0x14a0 <_ZN14HardwareSerial5flushEv+0x20>
    1496:	a8 89       	ldd	r26, Y+16	; 0x10
    1498:	b9 89       	ldd	r27, Y+17	; 0x11
    149a:	8c 91       	ld	r24, X
    149c:	86 fd       	sbrc	r24, 6
    149e:	0f c0       	rjmp	.+30     	; 0x14be <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	07 fc       	sbrc	r0, 7
    14a4:	f5 cf       	rjmp	.-22     	; 0x1490 <_ZN14HardwareSerial5flushEv+0x10>
    14a6:	80 81       	ld	r24, Z
    14a8:	85 ff       	sbrs	r24, 5
    14aa:	f2 cf       	rjmp	.-28     	; 0x1490 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    14ac:	a8 89       	ldd	r26, Y+16	; 0x10
    14ae:	b9 89       	ldd	r27, Y+17	; 0x11
    14b0:	8c 91       	ld	r24, X
    14b2:	85 ff       	sbrs	r24, 5
    14b4:	ed cf       	rjmp	.-38     	; 0x1490 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    14b6:	ce 01       	movw	r24, r28
    14b8:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    14bc:	e7 cf       	rjmp	.-50     	; 0x148c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	08 95       	ret

000014c4 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    14c4:	cf 92       	push	r12
    14c6:	df 92       	push	r13
    14c8:	ef 92       	push	r14
    14ca:	ff 92       	push	r15
    14cc:	1f 93       	push	r17
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	ec 01       	movw	r28, r24
    14d4:	6a 01       	movw	r12, r20
    14d6:	7b 01       	movw	r14, r22
    14d8:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    14da:	e8 89       	ldd	r30, Y+16	; 0x10
    14dc:	f9 89       	ldd	r31, Y+17	; 0x11
    14de:	82 e0       	ldi	r24, 0x02	; 2
    14e0:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    14e2:	41 15       	cp	r20, r1
    14e4:	51 4e       	sbci	r21, 0xE1	; 225
    14e6:	61 05       	cpc	r22, r1
    14e8:	71 05       	cpc	r23, r1
    14ea:	b1 f0       	breq	.+44     	; 0x1518 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	79 e0       	ldi	r23, 0x09	; 9
    14f0:	8d e3       	ldi	r24, 0x3D	; 61
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	a7 01       	movw	r20, r14
    14f6:	96 01       	movw	r18, r12
    14f8:	0e 94 64 24 	call	0x48c8	; 0x48c8 <__udivmodsi4>
    14fc:	da 01       	movw	r26, r20
    14fe:	c9 01       	movw	r24, r18
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	a1 09       	sbc	r26, r1
    1504:	b1 09       	sbc	r27, r1
    1506:	b6 95       	lsr	r27
    1508:	a7 95       	ror	r26
    150a:	97 95       	ror	r25
    150c:	87 95       	ror	r24
    150e:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1510:	21 15       	cp	r18, r1
    1512:	80 e1       	ldi	r24, 0x10	; 16
    1514:	38 07       	cpc	r19, r24
    1516:	a8 f0       	brcs	.+42     	; 0x1542 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1518:	e8 89       	ldd	r30, Y+16	; 0x10
    151a:	f9 89       	ldd	r31, Y+17	; 0x11
    151c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    151e:	60 e8       	ldi	r22, 0x80	; 128
    1520:	74 e8       	ldi	r23, 0x84	; 132
    1522:	8e e1       	ldi	r24, 0x1E	; 30
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	a7 01       	movw	r20, r14
    1528:	96 01       	movw	r18, r12
    152a:	0e 94 64 24 	call	0x48c8	; 0x48c8 <__udivmodsi4>
    152e:	da 01       	movw	r26, r20
    1530:	c9 01       	movw	r24, r18
    1532:	01 97       	sbiw	r24, 0x01	; 1
    1534:	a1 09       	sbc	r26, r1
    1536:	b1 09       	sbc	r27, r1
    1538:	b6 95       	lsr	r27
    153a:	a7 95       	ror	r26
    153c:	97 95       	ror	r25
    153e:	87 95       	ror	r24
    1540:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1542:	ec 85       	ldd	r30, Y+12	; 0x0c
    1544:	fd 85       	ldd	r31, Y+13	; 0x0d
    1546:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1548:	ee 85       	ldd	r30, Y+14	; 0x0e
    154a:	ff 85       	ldd	r31, Y+15	; 0x0f
    154c:	20 83       	st	Z, r18

  _written = false;
    154e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1550:	ec 89       	ldd	r30, Y+20	; 0x14
    1552:	fd 89       	ldd	r31, Y+21	; 0x15
    1554:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1556:	ea 89       	ldd	r30, Y+18	; 0x12
    1558:	fb 89       	ldd	r31, Y+19	; 0x13
    155a:	80 81       	ld	r24, Z
    155c:	80 61       	ori	r24, 0x10	; 16
    155e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1560:	ea 89       	ldd	r30, Y+18	; 0x12
    1562:	fb 89       	ldd	r31, Y+19	; 0x13
    1564:	80 81       	ld	r24, Z
    1566:	88 60       	ori	r24, 0x08	; 8
    1568:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    156a:	ea 89       	ldd	r30, Y+18	; 0x12
    156c:	fb 89       	ldd	r31, Y+19	; 0x13
    156e:	80 81       	ld	r24, Z
    1570:	80 68       	ori	r24, 0x80	; 128
    1572:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1574:	ea 89       	ldd	r30, Y+18	; 0x12
    1576:	fb 89       	ldd	r31, Y+19	; 0x13
    1578:	80 81       	ld	r24, Z
    157a:	8f 7d       	andi	r24, 0xDF	; 223
    157c:	80 83       	st	Z, r24
}
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	1f 91       	pop	r17
    1584:	ff 90       	pop	r15
    1586:	ef 90       	pop	r14
    1588:	df 90       	pop	r13
    158a:	cf 90       	pop	r12
    158c:	08 95       	ret

0000158e <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	08 95       	ret

00001594 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1594:	1f 92       	push	r1
    1596:	0f 92       	push	r0
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	0f 92       	push	r0
    159c:	11 24       	eor	r1, r1
    159e:	2f 93       	push	r18
    15a0:	8f 93       	push	r24
    15a2:	9f 93       	push	r25
    15a4:	ef 93       	push	r30
    15a6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    15a8:	e0 91 e3 04 	lds	r30, 0x04E3	; 0x8004e3 <Serial+0x10>
    15ac:	f0 91 e4 04 	lds	r31, 0x04E4	; 0x8004e4 <Serial+0x11>
    15b0:	80 81       	ld	r24, Z
    15b2:	e0 91 e9 04 	lds	r30, 0x04E9	; 0x8004e9 <Serial+0x16>
    15b6:	f0 91 ea 04 	lds	r31, 0x04EA	; 0x8004ea <Serial+0x17>
    15ba:	82 fd       	sbrc	r24, 2
    15bc:	12 c0       	rjmp	.+36     	; 0x15e2 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    15be:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    15c0:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <Serial+0x19>
    15c4:	8f 5f       	subi	r24, 0xFF	; 255
    15c6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    15c8:	20 91 ed 04 	lds	r18, 0x04ED	; 0x8004ed <Serial+0x1a>
    15cc:	82 17       	cp	r24, r18
    15ce:	51 f0       	breq	.+20     	; 0x15e4 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    15d0:	e0 91 ec 04 	lds	r30, 0x04EC	; 0x8004ec <Serial+0x19>
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	ed 52       	subi	r30, 0x2D	; 45
    15d8:	fb 4f       	sbci	r31, 0xFB	; 251
    15da:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    15dc:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <Serial+0x19>
    15e0:	01 c0       	rjmp	.+2      	; 0x15e4 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    15e2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    15e4:	ff 91       	pop	r31
    15e6:	ef 91       	pop	r30
    15e8:	9f 91       	pop	r25
    15ea:	8f 91       	pop	r24
    15ec:	2f 91       	pop	r18
    15ee:	0f 90       	pop	r0
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	0f 90       	pop	r0
    15f4:	1f 90       	pop	r1
    15f6:	18 95       	reti

000015f8 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    15f8:	1f 92       	push	r1
    15fa:	0f 92       	push	r0
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	0f 92       	push	r0
    1600:	11 24       	eor	r1, r1
    1602:	2f 93       	push	r18
    1604:	3f 93       	push	r19
    1606:	4f 93       	push	r20
    1608:	5f 93       	push	r21
    160a:	6f 93       	push	r22
    160c:	7f 93       	push	r23
    160e:	8f 93       	push	r24
    1610:	9f 93       	push	r25
    1612:	af 93       	push	r26
    1614:	bf 93       	push	r27
    1616:	ef 93       	push	r30
    1618:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    161a:	83 ed       	ldi	r24, 0xD3	; 211
    161c:	94 e0       	ldi	r25, 0x04	; 4
    161e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1622:	ff 91       	pop	r31
    1624:	ef 91       	pop	r30
    1626:	bf 91       	pop	r27
    1628:	af 91       	pop	r26
    162a:	9f 91       	pop	r25
    162c:	8f 91       	pop	r24
    162e:	7f 91       	pop	r23
    1630:	6f 91       	pop	r22
    1632:	5f 91       	pop	r21
    1634:	4f 91       	pop	r20
    1636:	3f 91       	pop	r19
    1638:	2f 91       	pop	r18
    163a:	0f 90       	pop	r0
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	0f 90       	pop	r0
    1640:	1f 90       	pop	r1
    1642:	18 95       	reti

00001644 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1644:	83 ed       	ldi	r24, 0xD3	; 211
    1646:	94 e0       	ldi	r25, 0x04	; 4
    1648:	0e 94 86 09 	call	0x130c	; 0x130c <_ZN14HardwareSerial9availableEv>
    164c:	21 e0       	ldi	r18, 0x01	; 1
    164e:	89 2b       	or	r24, r25
    1650:	09 f4       	brne	.+2      	; 0x1654 <_Z17Serial0_availablev+0x10>
    1652:	20 e0       	ldi	r18, 0x00	; 0
}
    1654:	82 2f       	mov	r24, r18
    1656:	08 95       	ret

00001658 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1658:	e3 ed       	ldi	r30, 0xD3	; 211
    165a:	f4 e0       	ldi	r31, 0x04	; 4
    165c:	13 82       	std	Z+3, r1	; 0x03
    165e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1660:	88 ee       	ldi	r24, 0xE8	; 232
    1662:	93 e0       	ldi	r25, 0x03	; 3
    1664:	a0 e0       	ldi	r26, 0x00	; 0
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	84 83       	std	Z+4, r24	; 0x04
    166a:	95 83       	std	Z+5, r25	; 0x05
    166c:	a6 83       	std	Z+6, r26	; 0x06
    166e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1670:	8a e6       	ldi	r24, 0x6A	; 106
    1672:	92 e0       	ldi	r25, 0x02	; 2
    1674:	91 83       	std	Z+1, r25	; 0x01
    1676:	80 83       	st	Z, r24
    1678:	85 ec       	ldi	r24, 0xC5	; 197
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	95 87       	std	Z+13, r25	; 0x0d
    167e:	84 87       	std	Z+12, r24	; 0x0c
    1680:	84 ec       	ldi	r24, 0xC4	; 196
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	97 87       	std	Z+15, r25	; 0x0f
    1686:	86 87       	std	Z+14, r24	; 0x0e
    1688:	80 ec       	ldi	r24, 0xC0	; 192
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	91 8b       	std	Z+17, r25	; 0x11
    168e:	80 8b       	std	Z+16, r24	; 0x10
    1690:	81 ec       	ldi	r24, 0xC1	; 193
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	93 8b       	std	Z+19, r25	; 0x13
    1696:	82 8b       	std	Z+18, r24	; 0x12
    1698:	82 ec       	ldi	r24, 0xC2	; 194
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	95 8b       	std	Z+21, r25	; 0x15
    169e:	84 8b       	std	Z+20, r24	; 0x14
    16a0:	86 ec       	ldi	r24, 0xC6	; 198
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	97 8b       	std	Z+23, r25	; 0x17
    16a6:	86 8b       	std	Z+22, r24	; 0x16
    16a8:	11 8e       	std	Z+25, r1	; 0x19
    16aa:	12 8e       	std	Z+26, r1	; 0x1a
    16ac:	13 8e       	std	Z+27, r1	; 0x1b
    16ae:	14 8e       	std	Z+28, r1	; 0x1c
    16b0:	08 95       	ret

000016b2 <initVariant>:
    16b2:	08 95       	ret

000016b4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    16b4:	0e 94 55 0e 	call	0x1caa	; 0x1caa <init>

	initVariant();
    16b8:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    16bc:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    16c0:	c3 ec       	ldi	r28, 0xC3	; 195
    16c2:	d9 e0       	ldi	r29, 0x09	; 9
#endif
	
	setup();
    
	for (;;) {
		loop();
    16c4:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <loop>
		if (serialEventRun) serialEventRun();
    16c8:	20 97       	sbiw	r28, 0x00	; 0
    16ca:	e1 f3       	breq	.-8      	; 0x16c4 <main+0x10>
    16cc:	0e 94 c3 09 	call	0x1386	; 0x1386 <_Z14serialEventRunv>
    16d0:	f9 cf       	rjmp	.-14     	; 0x16c4 <main+0x10>

000016d2 <_Znwj>:
    16d2:	0c 94 3a 25 	jmp	0x4a74	; 0x4a74 <malloc>

000016d6 <_Znaj>:
}

void * operator new(size_t size, void * ptr) noexcept {
  (void)size;
  return ptr;
}
    16d6:	0c 94 3a 25 	jmp	0x4a74	; 0x4a74 <malloc>

000016da <_ZdlPv>:
    16da:	0c 94 d2 25 	jmp	0x4ba4	; 0x4ba4 <free>

000016de <_ZdaPv>:
void operator delete(void * ptr) {
  free(ptr);
}

void operator delete[](void * ptr) {
  free(ptr);
    16de:	0c 94 d2 25 	jmp	0x4ba4	; 0x4ba4 <free>

000016e2 <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    16e2:	cf 92       	push	r12
    16e4:	df 92       	push	r13
    16e6:	ef 92       	push	r14
    16e8:	ff 92       	push	r15
    16ea:	0f 93       	push	r16
    16ec:	1f 93       	push	r17
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	6c 01       	movw	r12, r24
    16f4:	7a 01       	movw	r14, r20
    16f6:	8b 01       	movw	r16, r22
    16f8:	c0 e0       	ldi	r28, 0x00	; 0
    16fa:	d0 e0       	ldi	r29, 0x00	; 0
    16fc:	ce 15       	cp	r28, r14
    16fe:	df 05       	cpc	r29, r15
    1700:	81 f0       	breq	.+32     	; 0x1722 <_ZN5Print5writeEPKhj+0x40>
    1702:	d8 01       	movw	r26, r16
    1704:	6d 91       	ld	r22, X+
    1706:	8d 01       	movw	r16, r26
    1708:	d6 01       	movw	r26, r12
    170a:	ed 91       	ld	r30, X+
    170c:	fc 91       	ld	r31, X
    170e:	01 90       	ld	r0, Z+
    1710:	f0 81       	ld	r31, Z
    1712:	e0 2d       	mov	r30, r0
    1714:	c6 01       	movw	r24, r12
    1716:	09 95       	icall
    1718:	89 2b       	or	r24, r25
    171a:	11 f0       	breq	.+4      	; 0x1720 <_ZN5Print5writeEPKhj+0x3e>
    171c:	21 96       	adiw	r28, 0x01	; 1
    171e:	ee cf       	rjmp	.-36     	; 0x16fc <_ZN5Print5writeEPKhj+0x1a>
    1720:	7e 01       	movw	r14, r28
    1722:	c7 01       	movw	r24, r14
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	1f 91       	pop	r17
    172a:	0f 91       	pop	r16
    172c:	ff 90       	pop	r15
    172e:	ef 90       	pop	r14
    1730:	df 90       	pop	r13
    1732:	cf 90       	pop	r12
    1734:	08 95       	ret

00001736 <_ZN5Print5writeEPKc>:
    1736:	61 15       	cp	r22, r1
    1738:	71 05       	cpc	r23, r1
    173a:	79 f0       	breq	.+30     	; 0x175a <_ZN5Print5writeEPKc+0x24>
    173c:	fb 01       	movw	r30, r22
    173e:	01 90       	ld	r0, Z+
    1740:	00 20       	and	r0, r0
    1742:	e9 f7       	brne	.-6      	; 0x173e <_ZN5Print5writeEPKc+0x8>
    1744:	31 97       	sbiw	r30, 0x01	; 1
    1746:	af 01       	movw	r20, r30
    1748:	46 1b       	sub	r20, r22
    174a:	57 0b       	sbc	r21, r23
    174c:	dc 01       	movw	r26, r24
    174e:	ed 91       	ld	r30, X+
    1750:	fc 91       	ld	r31, X
    1752:	02 80       	ldd	r0, Z+2	; 0x02
    1754:	f3 81       	ldd	r31, Z+3	; 0x03
    1756:	e0 2d       	mov	r30, r0
    1758:	09 94       	ijmp
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	08 95       	ret

00001760 <_ZN5Print5printEPK19__FlashStringHelper>:
    1760:	ef 92       	push	r14
    1762:	ff 92       	push	r15
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	8c 01       	movw	r16, r24
    176e:	7b 01       	movw	r14, r22
    1770:	c0 e0       	ldi	r28, 0x00	; 0
    1772:	d0 e0       	ldi	r29, 0x00	; 0
    1774:	f7 01       	movw	r30, r14
    1776:	ec 0f       	add	r30, r28
    1778:	fd 1f       	adc	r31, r29
    177a:	64 91       	lpm	r22, Z
    177c:	66 23       	and	r22, r22
    177e:	61 f0       	breq	.+24     	; 0x1798 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1780:	d8 01       	movw	r26, r16
    1782:	ed 91       	ld	r30, X+
    1784:	fc 91       	ld	r31, X
    1786:	01 90       	ld	r0, Z+
    1788:	f0 81       	ld	r31, Z
    178a:	e0 2d       	mov	r30, r0
    178c:	c8 01       	movw	r24, r16
    178e:	09 95       	icall
    1790:	89 2b       	or	r24, r25
    1792:	11 f0       	breq	.+4      	; 0x1798 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1794:	21 96       	adiw	r28, 0x01	; 1
    1796:	ee cf       	rjmp	.-36     	; 0x1774 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    1798:	ce 01       	movw	r24, r28
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	ff 90       	pop	r15
    17a4:	ef 90       	pop	r14
    17a6:	08 95       	ret

000017a8 <_ZN5Print5printEPKc>:
    17a8:	0c 94 9b 0b 	jmp	0x1736	; 0x1736 <_ZN5Print5writeEPKc>

000017ac <_ZN5Print5printEc>:
    17ac:	dc 01       	movw	r26, r24
    17ae:	ed 91       	ld	r30, X+
    17b0:	fc 91       	ld	r31, X
    17b2:	01 90       	ld	r0, Z+
    17b4:	f0 81       	ld	r31, Z
    17b6:	e0 2d       	mov	r30, r0
    17b8:	09 94       	ijmp

000017ba <_ZN5Print7printlnEv>:
    17ba:	68 e7       	ldi	r22, 0x78	; 120
    17bc:	72 e0       	ldi	r23, 0x02	; 2
    17be:	0c 94 9b 0b 	jmp	0x1736	; 0x1736 <_ZN5Print5writeEPKc>

000017c2 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    17c2:	0f 93       	push	r16
    17c4:	1f 93       	push	r17
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	ec 01       	movw	r28, r24
    17cc:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN5Print5printEPK19__FlashStringHelper>
    17d0:	8c 01       	movw	r16, r24
    17d2:	ce 01       	movw	r24, r28
    17d4:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN5Print7printlnEv>
    17d8:	80 0f       	add	r24, r16
    17da:	91 1f       	adc	r25, r17
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	1f 91       	pop	r17
    17e2:	0f 91       	pop	r16
    17e4:	08 95       	ret

000017e6 <_ZN5Print7printlnEPKc>:
    17e6:	0f 93       	push	r16
    17e8:	1f 93       	push	r17
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	ec 01       	movw	r28, r24
    17f0:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5writeEPKc>
    17f4:	8c 01       	movw	r16, r24
    17f6:	ce 01       	movw	r24, r28
    17f8:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN5Print7printlnEv>
    17fc:	80 0f       	add	r24, r16
    17fe:	91 1f       	adc	r25, r17
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	1f 91       	pop	r17
    1806:	0f 91       	pop	r16
    1808:	08 95       	ret

0000180a <_ZN5Print11printNumberEmh>:
    180a:	8f 92       	push	r8
    180c:	9f 92       	push	r9
    180e:	af 92       	push	r10
    1810:	bf 92       	push	r11
    1812:	ef 92       	push	r14
    1814:	ff 92       	push	r15
    1816:	0f 93       	push	r16
    1818:	1f 93       	push	r17
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	a1 97       	sbiw	r28, 0x21	; 33
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	7c 01       	movw	r14, r24
    1830:	fa 01       	movw	r30, r20
    1832:	cb 01       	movw	r24, r22
    1834:	19 a2       	std	Y+33, r1	; 0x21
    1836:	22 30       	cpi	r18, 0x02	; 2
    1838:	08 f4       	brcc	.+2      	; 0x183c <_ZN5Print11printNumberEmh+0x32>
    183a:	2a e0       	ldi	r18, 0x0A	; 10
    183c:	8e 01       	movw	r16, r28
    183e:	0f 5d       	subi	r16, 0xDF	; 223
    1840:	1f 4f       	sbci	r17, 0xFF	; 255
    1842:	82 2e       	mov	r8, r18
    1844:	91 2c       	mov	r9, r1
    1846:	a1 2c       	mov	r10, r1
    1848:	b1 2c       	mov	r11, r1
    184a:	bf 01       	movw	r22, r30
    184c:	a5 01       	movw	r20, r10
    184e:	94 01       	movw	r18, r8
    1850:	0e 94 64 24 	call	0x48c8	; 0x48c8 <__udivmodsi4>
    1854:	f9 01       	movw	r30, r18
    1856:	ca 01       	movw	r24, r20
    1858:	01 50       	subi	r16, 0x01	; 1
    185a:	11 09       	sbc	r17, r1
    185c:	6a 30       	cpi	r22, 0x0A	; 10
    185e:	10 f4       	brcc	.+4      	; 0x1864 <_ZN5Print11printNumberEmh+0x5a>
    1860:	60 5d       	subi	r22, 0xD0	; 208
    1862:	01 c0       	rjmp	.+2      	; 0x1866 <_ZN5Print11printNumberEmh+0x5c>
    1864:	69 5c       	subi	r22, 0xC9	; 201
    1866:	d8 01       	movw	r26, r16
    1868:	6c 93       	st	X, r22
    186a:	23 2b       	or	r18, r19
    186c:	24 2b       	or	r18, r20
    186e:	25 2b       	or	r18, r21
    1870:	61 f7       	brne	.-40     	; 0x184a <_ZN5Print11printNumberEmh+0x40>
    1872:	b8 01       	movw	r22, r16
    1874:	c7 01       	movw	r24, r14
    1876:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN5Print5writeEPKc>
    187a:	a1 96       	adiw	r28, 0x21	; 33
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	de bf       	out	0x3e, r29	; 62
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	cd bf       	out	0x3d, r28	; 61
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	1f 91       	pop	r17
    188c:	0f 91       	pop	r16
    188e:	ff 90       	pop	r15
    1890:	ef 90       	pop	r14
    1892:	bf 90       	pop	r11
    1894:	af 90       	pop	r10
    1896:	9f 90       	pop	r9
    1898:	8f 90       	pop	r8
    189a:	08 95       	ret

0000189c <_ZN5Print5printEmi>:
    189c:	21 15       	cp	r18, r1
    189e:	31 05       	cpc	r19, r1
    18a0:	41 f4       	brne	.+16     	; 0x18b2 <_ZN5Print5printEmi+0x16>
    18a2:	dc 01       	movw	r26, r24
    18a4:	ed 91       	ld	r30, X+
    18a6:	fc 91       	ld	r31, X
    18a8:	01 90       	ld	r0, Z+
    18aa:	f0 81       	ld	r31, Z
    18ac:	e0 2d       	mov	r30, r0
    18ae:	64 2f       	mov	r22, r20
    18b0:	09 94       	ijmp
    18b2:	0c 94 05 0c 	jmp	0x180a	; 0x180a <_ZN5Print11printNumberEmh>

000018b6 <_ZN5Print5printEhi>:
    18b6:	9a 01       	movw	r18, r20
    18b8:	46 2f       	mov	r20, r22
    18ba:	50 e0       	ldi	r21, 0x00	; 0
    18bc:	60 e0       	ldi	r22, 0x00	; 0
    18be:	70 e0       	ldi	r23, 0x00	; 0
    18c0:	0c 94 4e 0c 	jmp	0x189c	; 0x189c <_ZN5Print5printEmi>

000018c4 <_ZN5Print5printEji>:
    18c4:	9a 01       	movw	r18, r20
    18c6:	ab 01       	movw	r20, r22
    18c8:	60 e0       	ldi	r22, 0x00	; 0
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	0c 94 4e 0c 	jmp	0x189c	; 0x189c <_ZN5Print5printEmi>

000018d0 <_ZN5Print7printlnEji>:
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	ec 01       	movw	r28, r24
    18da:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <_ZN5Print5printEji>
    18de:	8c 01       	movw	r16, r24
    18e0:	ce 01       	movw	r24, r28
    18e2:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN5Print7printlnEv>
    18e6:	80 0f       	add	r24, r16
    18e8:	91 1f       	adc	r25, r17
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	1f 91       	pop	r17
    18f0:	0f 91       	pop	r16
    18f2:	08 95       	ret

000018f4 <_ZN5Print7printlnEmi>:
    18f4:	0f 93       	push	r16
    18f6:	1f 93       	push	r17
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	ec 01       	movw	r28, r24
    18fe:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN5Print5printEmi>
    1902:	8c 01       	movw	r16, r24
    1904:	ce 01       	movw	r24, r28
    1906:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN5Print7printlnEv>
    190a:	80 0f       	add	r24, r16
    190c:	91 1f       	adc	r25, r17
    190e:	df 91       	pop	r29
    1910:	cf 91       	pop	r28
    1912:	1f 91       	pop	r17
    1914:	0f 91       	pop	r16
    1916:	08 95       	ret

00001918 <_ZN5Print5printEli>:
    1918:	cf 92       	push	r12
    191a:	df 92       	push	r13
    191c:	ef 92       	push	r14
    191e:	ff 92       	push	r15
    1920:	0f 93       	push	r16
    1922:	1f 93       	push	r17
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	21 15       	cp	r18, r1
    192a:	31 05       	cpc	r19, r1
    192c:	81 f4       	brne	.+32     	; 0x194e <_ZN5Print5printEli+0x36>
    192e:	dc 01       	movw	r26, r24
    1930:	ed 91       	ld	r30, X+
    1932:	fc 91       	ld	r31, X
    1934:	01 90       	ld	r0, Z+
    1936:	f0 81       	ld	r31, Z
    1938:	e0 2d       	mov	r30, r0
    193a:	64 2f       	mov	r22, r20
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	ff 90       	pop	r15
    1946:	ef 90       	pop	r14
    1948:	df 90       	pop	r13
    194a:	cf 90       	pop	r12
    194c:	09 94       	ijmp
    194e:	2a 30       	cpi	r18, 0x0A	; 10
    1950:	31 05       	cpc	r19, r1
    1952:	01 f5       	brne	.+64     	; 0x1994 <_ZN5Print5printEli+0x7c>
    1954:	77 ff       	sbrs	r23, 7
    1956:	1d c0       	rjmp	.+58     	; 0x1992 <_ZN5Print5printEli+0x7a>
    1958:	6a 01       	movw	r12, r20
    195a:	7b 01       	movw	r14, r22
    195c:	ec 01       	movw	r28, r24
    195e:	6d e2       	ldi	r22, 0x2D	; 45
    1960:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <_ZN5Print5printEc>
    1964:	8c 01       	movw	r16, r24
    1966:	44 27       	eor	r20, r20
    1968:	55 27       	eor	r21, r21
    196a:	ba 01       	movw	r22, r20
    196c:	4c 19       	sub	r20, r12
    196e:	5d 09       	sbc	r21, r13
    1970:	6e 09       	sbc	r22, r14
    1972:	7f 09       	sbc	r23, r15
    1974:	2a e0       	ldi	r18, 0x0A	; 10
    1976:	ce 01       	movw	r24, r28
    1978:	0e 94 05 0c 	call	0x180a	; 0x180a <_ZN5Print11printNumberEmh>
    197c:	80 0f       	add	r24, r16
    197e:	91 1f       	adc	r25, r17
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	ff 90       	pop	r15
    198a:	ef 90       	pop	r14
    198c:	df 90       	pop	r13
    198e:	cf 90       	pop	r12
    1990:	08 95       	ret
    1992:	2a e0       	ldi	r18, 0x0A	; 10
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	1f 91       	pop	r17
    199a:	0f 91       	pop	r16
    199c:	ff 90       	pop	r15
    199e:	ef 90       	pop	r14
    19a0:	df 90       	pop	r13
    19a2:	cf 90       	pop	r12
    19a4:	0c 94 05 0c 	jmp	0x180a	; 0x180a <_ZN5Print11printNumberEmh>

000019a8 <_ZN5Print5printEii>:
    19a8:	9a 01       	movw	r18, r20
    19aa:	ab 01       	movw	r20, r22
    19ac:	77 0f       	add	r23, r23
    19ae:	66 0b       	sbc	r22, r22
    19b0:	77 0b       	sbc	r23, r23
    19b2:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <_ZN5Print5printEli>

000019b6 <_ZN5Print7printlnEii>:
    19b6:	0f 93       	push	r16
    19b8:	1f 93       	push	r17
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	ec 01       	movw	r28, r24
    19c0:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <_ZN5Print5printEii>
    19c4:	8c 01       	movw	r16, r24
    19c6:	ce 01       	movw	r24, r28
    19c8:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN5Print7printlnEv>
    19cc:	80 0f       	add	r24, r16
    19ce:	91 1f       	adc	r25, r17
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	1f 91       	pop	r17
    19d6:	0f 91       	pop	r16
    19d8:	08 95       	ret

000019da <_ZN5Print10printFloatEdh>:
    19da:	7f 92       	push	r7
    19dc:	8f 92       	push	r8
    19de:	9f 92       	push	r9
    19e0:	af 92       	push	r10
    19e2:	bf 92       	push	r11
    19e4:	cf 92       	push	r12
    19e6:	df 92       	push	r13
    19e8:	ef 92       	push	r14
    19ea:	ff 92       	push	r15
    19ec:	0f 93       	push	r16
    19ee:	1f 93       	push	r17
    19f0:	cf 93       	push	r28
    19f2:	df 93       	push	r29
    19f4:	8c 01       	movw	r16, r24
    19f6:	6a 01       	movw	r12, r20
    19f8:	7b 01       	movw	r14, r22
    19fa:	72 2e       	mov	r7, r18
    19fc:	9a 01       	movw	r18, r20
    19fe:	ab 01       	movw	r20, r22
    1a00:	c7 01       	movw	r24, r14
    1a02:	b6 01       	movw	r22, r12
    1a04:	0e 94 4f 24 	call	0x489e	; 0x489e <__unordsf2>
    1a08:	88 23       	and	r24, r24
    1a0a:	19 f0       	breq	.+6      	; 0x1a12 <_ZN5Print10printFloatEdh+0x38>
    1a0c:	6b e7       	ldi	r22, 0x7B	; 123
    1a0e:	72 e0       	ldi	r23, 0x02	; 2
    1a10:	27 c0       	rjmp	.+78     	; 0x1a60 <_ZN5Print10printFloatEdh+0x86>
    1a12:	46 01       	movw	r8, r12
    1a14:	57 01       	movw	r10, r14
    1a16:	e8 94       	clt
    1a18:	b7 f8       	bld	r11, 7
    1a1a:	2f ef       	ldi	r18, 0xFF	; 255
    1a1c:	3f ef       	ldi	r19, 0xFF	; 255
    1a1e:	4f e7       	ldi	r20, 0x7F	; 127
    1a20:	5f e7       	ldi	r21, 0x7F	; 127
    1a22:	c5 01       	movw	r24, r10
    1a24:	b4 01       	movw	r22, r8
    1a26:	0e 94 4f 24 	call	0x489e	; 0x489e <__unordsf2>
    1a2a:	81 11       	cpse	r24, r1
    1a2c:	0d c0       	rjmp	.+26     	; 0x1a48 <_ZN5Print10printFloatEdh+0x6e>
    1a2e:	2f ef       	ldi	r18, 0xFF	; 255
    1a30:	3f ef       	ldi	r19, 0xFF	; 255
    1a32:	4f e7       	ldi	r20, 0x7F	; 127
    1a34:	5f e7       	ldi	r21, 0x7F	; 127
    1a36:	c5 01       	movw	r24, r10
    1a38:	b4 01       	movw	r22, r8
    1a3a:	0e 94 4a 24 	call	0x4894	; 0x4894 <__cmpsf2>
    1a3e:	18 16       	cp	r1, r24
    1a40:	1c f4       	brge	.+6      	; 0x1a48 <_ZN5Print10printFloatEdh+0x6e>
    1a42:	6f e7       	ldi	r22, 0x7F	; 127
    1a44:	72 e0       	ldi	r23, 0x02	; 2
    1a46:	0c c0       	rjmp	.+24     	; 0x1a60 <_ZN5Print10printFloatEdh+0x86>
    1a48:	2f ef       	ldi	r18, 0xFF	; 255
    1a4a:	3f ef       	ldi	r19, 0xFF	; 255
    1a4c:	4f e7       	ldi	r20, 0x7F	; 127
    1a4e:	5f e4       	ldi	r21, 0x4F	; 79
    1a50:	c7 01       	movw	r24, r14
    1a52:	b6 01       	movw	r22, r12
    1a54:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__gesf2>
    1a58:	18 16       	cp	r1, r24
    1a5a:	94 f4       	brge	.+36     	; 0x1a80 <_ZN5Print10printFloatEdh+0xa6>
    1a5c:	63 e8       	ldi	r22, 0x83	; 131
    1a5e:	72 e0       	ldi	r23, 0x02	; 2
    1a60:	c8 01       	movw	r24, r16
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	1f 91       	pop	r17
    1a68:	0f 91       	pop	r16
    1a6a:	ff 90       	pop	r15
    1a6c:	ef 90       	pop	r14
    1a6e:	df 90       	pop	r13
    1a70:	cf 90       	pop	r12
    1a72:	bf 90       	pop	r11
    1a74:	af 90       	pop	r10
    1a76:	9f 90       	pop	r9
    1a78:	8f 90       	pop	r8
    1a7a:	7f 90       	pop	r7
    1a7c:	0c 94 9b 0b 	jmp	0x1736	; 0x1736 <_ZN5Print5writeEPKc>
    1a80:	2f ef       	ldi	r18, 0xFF	; 255
    1a82:	3f ef       	ldi	r19, 0xFF	; 255
    1a84:	4f e7       	ldi	r20, 0x7F	; 127
    1a86:	5f ec       	ldi	r21, 0xCF	; 207
    1a88:	c7 01       	movw	r24, r14
    1a8a:	b6 01       	movw	r22, r12
    1a8c:	0e 94 4a 24 	call	0x4894	; 0x4894 <__cmpsf2>
    1a90:	87 fd       	sbrc	r24, 7
    1a92:	e4 cf       	rjmp	.-56     	; 0x1a5c <_ZN5Print10printFloatEdh+0x82>
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	a9 01       	movw	r20, r18
    1a9a:	c7 01       	movw	r24, r14
    1a9c:	b6 01       	movw	r22, r12
    1a9e:	0e 94 4a 24 	call	0x4894	; 0x4894 <__cmpsf2>
    1aa2:	87 ff       	sbrs	r24, 7
    1aa4:	0a c0       	rjmp	.+20     	; 0x1aba <_ZN5Print10printFloatEdh+0xe0>
    1aa6:	6d e2       	ldi	r22, 0x2D	; 45
    1aa8:	c8 01       	movw	r24, r16
    1aaa:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <_ZN5Print5printEc>
    1aae:	ec 01       	movw	r28, r24
    1ab0:	f7 fa       	bst	r15, 7
    1ab2:	f0 94       	com	r15
    1ab4:	f7 f8       	bld	r15, 7
    1ab6:	f0 94       	com	r15
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <_ZN5Print10printFloatEdh+0xe4>
    1aba:	c0 e0       	ldi	r28, 0x00	; 0
    1abc:	d0 e0       	ldi	r29, 0x00	; 0
    1abe:	b1 2c       	mov	r11, r1
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	70 e0       	ldi	r23, 0x00	; 0
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	9f e3       	ldi	r25, 0x3F	; 63
    1ac8:	7b 14       	cp	r7, r11
    1aca:	41 f0       	breq	.+16     	; 0x1adc <_ZN5Print10printFloatEdh+0x102>
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e2       	ldi	r20, 0x20	; 32
    1ad2:	51 e4       	ldi	r21, 0x41	; 65
    1ad4:	0e 94 ba 07 	call	0xf74	; 0xf74 <__divsf3>
    1ad8:	b3 94       	inc	r11
    1ada:	f6 cf       	rjmp	.-20     	; 0x1ac8 <_ZN5Print10printFloatEdh+0xee>
    1adc:	a7 01       	movw	r20, r14
    1ade:	96 01       	movw	r18, r12
    1ae0:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__addsf3>
    1ae4:	6b 01       	movw	r12, r22
    1ae6:	7c 01       	movw	r14, r24
    1ae8:	0e 94 33 08 	call	0x1066	; 0x1066 <__fixunssfsi>
    1aec:	4b 01       	movw	r8, r22
    1aee:	5c 01       	movw	r10, r24
    1af0:	2a e0       	ldi	r18, 0x0A	; 10
    1af2:	ab 01       	movw	r20, r22
    1af4:	bc 01       	movw	r22, r24
    1af6:	c8 01       	movw	r24, r16
    1af8:	0e 94 05 0c 	call	0x180a	; 0x180a <_ZN5Print11printNumberEmh>
    1afc:	c8 0f       	add	r28, r24
    1afe:	d9 1f       	adc	r29, r25
    1b00:	77 20       	and	r7, r7
    1b02:	b9 f1       	breq	.+110    	; 0x1b72 <_ZN5Print10printFloatEdh+0x198>
    1b04:	c5 01       	movw	r24, r10
    1b06:	b4 01       	movw	r22, r8
    1b08:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__floatunsisf>
    1b0c:	9b 01       	movw	r18, r22
    1b0e:	ac 01       	movw	r20, r24
    1b10:	c7 01       	movw	r24, r14
    1b12:	b6 01       	movw	r22, r12
    1b14:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__subsf3>
    1b18:	6b 01       	movw	r12, r22
    1b1a:	7c 01       	movw	r14, r24
    1b1c:	6e e2       	ldi	r22, 0x2E	; 46
    1b1e:	c8 01       	movw	r24, r16
    1b20:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <_ZN5Print5printEc>
    1b24:	c8 0f       	add	r28, r24
    1b26:	d9 1f       	adc	r29, r25
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e2       	ldi	r20, 0x20	; 32
    1b2e:	51 e4       	ldi	r21, 0x41	; 65
    1b30:	c7 01       	movw	r24, r14
    1b32:	b6 01       	movw	r22, r12
    1b34:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__mulsf3>
    1b38:	4b 01       	movw	r8, r22
    1b3a:	5c 01       	movw	r10, r24
    1b3c:	0e 94 33 08 	call	0x1066	; 0x1066 <__fixunssfsi>
    1b40:	6b 01       	movw	r12, r22
    1b42:	7c 01       	movw	r14, r24
    1b44:	4a e0       	ldi	r20, 0x0A	; 10
    1b46:	50 e0       	ldi	r21, 0x00	; 0
    1b48:	c8 01       	movw	r24, r16
    1b4a:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <_ZN5Print5printEji>
    1b4e:	c8 0f       	add	r28, r24
    1b50:	d9 1f       	adc	r29, r25
    1b52:	b6 01       	movw	r22, r12
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__floatunsisf>
    1b5c:	9b 01       	movw	r18, r22
    1b5e:	ac 01       	movw	r20, r24
    1b60:	c5 01       	movw	r24, r10
    1b62:	b4 01       	movw	r22, r8
    1b64:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__subsf3>
    1b68:	6b 01       	movw	r12, r22
    1b6a:	7c 01       	movw	r14, r24
    1b6c:	7a 94       	dec	r7
    1b6e:	71 10       	cpse	r7, r1
    1b70:	db cf       	rjmp	.-74     	; 0x1b28 <_ZN5Print10printFloatEdh+0x14e>
    1b72:	ce 01       	movw	r24, r28
    1b74:	df 91       	pop	r29
    1b76:	cf 91       	pop	r28
    1b78:	1f 91       	pop	r17
    1b7a:	0f 91       	pop	r16
    1b7c:	ff 90       	pop	r15
    1b7e:	ef 90       	pop	r14
    1b80:	df 90       	pop	r13
    1b82:	cf 90       	pop	r12
    1b84:	bf 90       	pop	r11
    1b86:	af 90       	pop	r10
    1b88:	9f 90       	pop	r9
    1b8a:	8f 90       	pop	r8
    1b8c:	7f 90       	pop	r7
    1b8e:	08 95       	ret

00001b90 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    1b90:	0f 93       	push	r16
    1b92:	1f 93       	push	r17
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1b9a:	0e 94 ed 0c 	call	0x19da	; 0x19da <_ZN5Print10printFloatEdh>
    1b9e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1ba0:	ce 01       	movw	r24, r28
    1ba2:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN5Print7printlnEv>
  return n;
}
    1ba6:	80 0f       	add	r24, r16
    1ba8:	91 1f       	adc	r25, r17
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	1f 91       	pop	r17
    1bb0:	0f 91       	pop	r16
    1bb2:	08 95       	ret

00001bb4 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1bb4:	1f 92       	push	r1
    1bb6:	0f 92       	push	r0
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	0f 92       	push	r0
    1bbc:	11 24       	eor	r1, r1
    1bbe:	2f 93       	push	r18
    1bc0:	3f 93       	push	r19
    1bc2:	8f 93       	push	r24
    1bc4:	9f 93       	push	r25
    1bc6:	af 93       	push	r26
    1bc8:	bf 93       	push	r27
    1bca:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <timer0_millis>
    1bce:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <timer0_millis+0x1>
    1bd2:	a0 91 73 05 	lds	r26, 0x0573	; 0x800573 <timer0_millis+0x2>
    1bd6:	b0 91 74 05 	lds	r27, 0x0574	; 0x800574 <timer0_millis+0x3>
    1bda:	30 91 70 05 	lds	r19, 0x0570	; 0x800570 <timer0_fract>
    1bde:	23 e0       	ldi	r18, 0x03	; 3
    1be0:	23 0f       	add	r18, r19
    1be2:	2d 37       	cpi	r18, 0x7D	; 125
    1be4:	20 f4       	brcc	.+8      	; 0x1bee <__vector_16+0x3a>
    1be6:	01 96       	adiw	r24, 0x01	; 1
    1be8:	a1 1d       	adc	r26, r1
    1bea:	b1 1d       	adc	r27, r1
    1bec:	05 c0       	rjmp	.+10     	; 0x1bf8 <__vector_16+0x44>
    1bee:	26 e8       	ldi	r18, 0x86	; 134
    1bf0:	23 0f       	add	r18, r19
    1bf2:	02 96       	adiw	r24, 0x02	; 2
    1bf4:	a1 1d       	adc	r26, r1
    1bf6:	b1 1d       	adc	r27, r1
    1bf8:	20 93 70 05 	sts	0x0570, r18	; 0x800570 <timer0_fract>
    1bfc:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <timer0_millis>
    1c00:	90 93 72 05 	sts	0x0572, r25	; 0x800572 <timer0_millis+0x1>
    1c04:	a0 93 73 05 	sts	0x0573, r26	; 0x800573 <timer0_millis+0x2>
    1c08:	b0 93 74 05 	sts	0x0574, r27	; 0x800574 <timer0_millis+0x3>
    1c0c:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <timer0_overflow_count>
    1c10:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <timer0_overflow_count+0x1>
    1c14:	a0 91 77 05 	lds	r26, 0x0577	; 0x800577 <timer0_overflow_count+0x2>
    1c18:	b0 91 78 05 	lds	r27, 0x0578	; 0x800578 <timer0_overflow_count+0x3>
    1c1c:	01 96       	adiw	r24, 0x01	; 1
    1c1e:	a1 1d       	adc	r26, r1
    1c20:	b1 1d       	adc	r27, r1
    1c22:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <timer0_overflow_count>
    1c26:	90 93 76 05 	sts	0x0576, r25	; 0x800576 <timer0_overflow_count+0x1>
    1c2a:	a0 93 77 05 	sts	0x0577, r26	; 0x800577 <timer0_overflow_count+0x2>
    1c2e:	b0 93 78 05 	sts	0x0578, r27	; 0x800578 <timer0_overflow_count+0x3>
    1c32:	bf 91       	pop	r27
    1c34:	af 91       	pop	r26
    1c36:	9f 91       	pop	r25
    1c38:	8f 91       	pop	r24
    1c3a:	3f 91       	pop	r19
    1c3c:	2f 91       	pop	r18
    1c3e:	0f 90       	pop	r0
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	0f 90       	pop	r0
    1c44:	1f 90       	pop	r1
    1c46:	18 95       	reti

00001c48 <millis>:
    1c48:	2f b7       	in	r18, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	60 91 71 05 	lds	r22, 0x0571	; 0x800571 <timer0_millis>
    1c50:	70 91 72 05 	lds	r23, 0x0572	; 0x800572 <timer0_millis+0x1>
    1c54:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <timer0_millis+0x2>
    1c58:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <timer0_millis+0x3>
    1c5c:	2f bf       	out	0x3f, r18	; 63
    1c5e:	08 95       	ret

00001c60 <micros>:
    1c60:	3f b7       	in	r19, 0x3f	; 63
    1c62:	f8 94       	cli
    1c64:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <timer0_overflow_count>
    1c68:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <timer0_overflow_count+0x1>
    1c6c:	a0 91 77 05 	lds	r26, 0x0577	; 0x800577 <timer0_overflow_count+0x2>
    1c70:	b0 91 78 05 	lds	r27, 0x0578	; 0x800578 <timer0_overflow_count+0x3>
    1c74:	26 b5       	in	r18, 0x26	; 38
    1c76:	a8 9b       	sbis	0x15, 0	; 21
    1c78:	05 c0       	rjmp	.+10     	; 0x1c84 <micros+0x24>
    1c7a:	2f 3f       	cpi	r18, 0xFF	; 255
    1c7c:	19 f0       	breq	.+6      	; 0x1c84 <micros+0x24>
    1c7e:	01 96       	adiw	r24, 0x01	; 1
    1c80:	a1 1d       	adc	r26, r1
    1c82:	b1 1d       	adc	r27, r1
    1c84:	3f bf       	out	0x3f, r19	; 63
    1c86:	ba 2f       	mov	r27, r26
    1c88:	a9 2f       	mov	r26, r25
    1c8a:	98 2f       	mov	r25, r24
    1c8c:	88 27       	eor	r24, r24
    1c8e:	82 0f       	add	r24, r18
    1c90:	91 1d       	adc	r25, r1
    1c92:	a1 1d       	adc	r26, r1
    1c94:	b1 1d       	adc	r27, r1
    1c96:	bc 01       	movw	r22, r24
    1c98:	cd 01       	movw	r24, r26
    1c9a:	42 e0       	ldi	r20, 0x02	; 2
    1c9c:	66 0f       	add	r22, r22
    1c9e:	77 1f       	adc	r23, r23
    1ca0:	88 1f       	adc	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	4a 95       	dec	r20
    1ca6:	d1 f7       	brne	.-12     	; 0x1c9c <micros+0x3c>
    1ca8:	08 95       	ret

00001caa <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1caa:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1cac:	84 b5       	in	r24, 0x24	; 36
    1cae:	82 60       	ori	r24, 0x02	; 2
    1cb0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1cb2:	84 b5       	in	r24, 0x24	; 36
    1cb4:	81 60       	ori	r24, 0x01	; 1
    1cb6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1cb8:	85 b5       	in	r24, 0x25	; 37
    1cba:	82 60       	ori	r24, 0x02	; 2
    1cbc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1cbe:	85 b5       	in	r24, 0x25	; 37
    1cc0:	81 60       	ori	r24, 0x01	; 1
    1cc2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1cc4:	ee e6       	ldi	r30, 0x6E	; 110
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	81 60       	ori	r24, 0x01	; 1
    1ccc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1cce:	e1 e8       	ldi	r30, 0x81	; 129
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1cd4:	80 81       	ld	r24, Z
    1cd6:	82 60       	ori	r24, 0x02	; 2
    1cd8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1cda:	80 81       	ld	r24, Z
    1cdc:	81 60       	ori	r24, 0x01	; 1
    1cde:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1ce0:	e0 e8       	ldi	r30, 0x80	; 128
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	81 60       	ori	r24, 0x01	; 1
    1ce8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1cea:	e1 eb       	ldi	r30, 0xB1	; 177
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	84 60       	ori	r24, 0x04	; 4
    1cf2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1cf4:	e0 eb       	ldi	r30, 0xB0	; 176
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	81 60       	ori	r24, 0x01	; 1
    1cfc:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1cfe:	ea e7       	ldi	r30, 0x7A	; 122
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	84 60       	ori	r24, 0x04	; 4
    1d06:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1d08:	80 81       	ld	r24, Z
    1d0a:	82 60       	ori	r24, 0x02	; 2
    1d0c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1d0e:	80 81       	ld	r24, Z
    1d10:	81 60       	ori	r24, 0x01	; 1
    1d12:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1d14:	80 81       	ld	r24, Z
    1d16:	80 68       	ori	r24, 0x80	; 128
    1d18:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1d1a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    1d1e:	08 95       	ret

00001d20 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1d20:	83 30       	cpi	r24, 0x03	; 3
    1d22:	81 f0       	breq	.+32     	; 0x1d44 <turnOffPWM+0x24>
    1d24:	28 f4       	brcc	.+10     	; 0x1d30 <turnOffPWM+0x10>
    1d26:	81 30       	cpi	r24, 0x01	; 1
    1d28:	99 f0       	breq	.+38     	; 0x1d50 <turnOffPWM+0x30>
    1d2a:	82 30       	cpi	r24, 0x02	; 2
    1d2c:	a1 f0       	breq	.+40     	; 0x1d56 <turnOffPWM+0x36>
    1d2e:	08 95       	ret
    1d30:	87 30       	cpi	r24, 0x07	; 7
    1d32:	a9 f0       	breq	.+42     	; 0x1d5e <turnOffPWM+0x3e>
    1d34:	88 30       	cpi	r24, 0x08	; 8
    1d36:	b9 f0       	breq	.+46     	; 0x1d66 <turnOffPWM+0x46>
    1d38:	84 30       	cpi	r24, 0x04	; 4
    1d3a:	d1 f4       	brne	.+52     	; 0x1d70 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1d3c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1d40:	8f 7d       	andi	r24, 0xDF	; 223
    1d42:	03 c0       	rjmp	.+6      	; 0x1d4a <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1d44:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1d48:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1d4a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1d4e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1d50:	84 b5       	in	r24, 0x24	; 36
    1d52:	8f 77       	andi	r24, 0x7F	; 127
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1d56:	84 b5       	in	r24, 0x24	; 36
    1d58:	8f 7d       	andi	r24, 0xDF	; 223
    1d5a:	84 bd       	out	0x24, r24	; 36
    1d5c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1d5e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1d62:	8f 77       	andi	r24, 0x7F	; 127
    1d64:	03 c0       	rjmp	.+6      	; 0x1d6c <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1d66:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1d6a:	8f 7d       	andi	r24, 0xDF	; 223
    1d6c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1d70:	08 95       	ret

00001d72 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	fc 01       	movw	r30, r24
    1d7a:	ed 5e       	subi	r30, 0xED	; 237
    1d7c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d7e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1d80:	fc 01       	movw	r30, r24
    1d82:	e9 5d       	subi	r30, 0xD9	; 217
    1d84:	fe 4f       	sbci	r31, 0xFE	; 254
    1d86:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1d88:	88 23       	and	r24, r24
    1d8a:	61 f1       	breq	.+88     	; 0x1de4 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	fc 01       	movw	r30, r24
    1d94:	eb 5b       	subi	r30, 0xBB	; 187
    1d96:	fe 4f       	sbci	r31, 0xFE	; 254
    1d98:	c5 91       	lpm	r28, Z+
    1d9a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	e5 5c       	subi	r30, 0xC5	; 197
    1da0:	fe 4f       	sbci	r31, 0xFE	; 254
    1da2:	a5 91       	lpm	r26, Z+
    1da4:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1da6:	61 11       	cpse	r22, r1
    1da8:	09 c0       	rjmp	.+18     	; 0x1dbc <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1daa:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1dac:	f8 94       	cli
		*reg &= ~bit;
    1dae:	88 81       	ld	r24, Y
    1db0:	20 95       	com	r18
    1db2:	82 23       	and	r24, r18
    1db4:	88 83       	st	Y, r24
		*out &= ~bit;
    1db6:	ec 91       	ld	r30, X
    1db8:	2e 23       	and	r18, r30
    1dba:	0b c0       	rjmp	.+22     	; 0x1dd2 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1dbc:	62 30       	cpi	r22, 0x02	; 2
    1dbe:	61 f4       	brne	.+24     	; 0x1dd8 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1dc0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1dc2:	f8 94       	cli
		*reg &= ~bit;
    1dc4:	88 81       	ld	r24, Y
    1dc6:	32 2f       	mov	r19, r18
    1dc8:	30 95       	com	r19
    1dca:	83 23       	and	r24, r19
    1dcc:	88 83       	st	Y, r24
		*out |= bit;
    1dce:	ec 91       	ld	r30, X
    1dd0:	2e 2b       	or	r18, r30
    1dd2:	2c 93       	st	X, r18
		SREG = oldSREG;
    1dd4:	9f bf       	out	0x3f, r25	; 63
    1dd6:	06 c0       	rjmp	.+12     	; 0x1de4 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1dd8:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1dda:	f8 94       	cli
		*reg |= bit;
    1ddc:	e8 81       	ld	r30, Y
    1dde:	2e 2b       	or	r18, r30
    1de0:	28 83       	st	Y, r18
		SREG = oldSREG;
    1de2:	8f bf       	out	0x3f, r24	; 63
	}
}
    1de4:	df 91       	pop	r29
    1de6:	cf 91       	pop	r28
    1de8:	08 95       	ret

00001dea <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1dea:	1f 93       	push	r17
    1dec:	cf 93       	push	r28
    1dee:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1df0:	28 2f       	mov	r18, r24
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	f9 01       	movw	r30, r18
    1df6:	e1 50       	subi	r30, 0x01	; 1
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1dfc:	f9 01       	movw	r30, r18
    1dfe:	ed 5e       	subi	r30, 0xED	; 237
    1e00:	fe 4f       	sbci	r31, 0xFE	; 254
    1e02:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1e04:	f9 01       	movw	r30, r18
    1e06:	e9 5d       	subi	r30, 0xD9	; 217
    1e08:	fe 4f       	sbci	r31, 0xFE	; 254
    1e0a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1e0c:	cc 23       	and	r28, r28
    1e0e:	c1 f0       	breq	.+48     	; 0x1e40 <digitalWrite+0x56>
    1e10:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1e12:	81 11       	cpse	r24, r1
    1e14:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <turnOffPWM>

	out = portOutputRegister(port);
    1e18:	ec 2f       	mov	r30, r28
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	ee 0f       	add	r30, r30
    1e1e:	ff 1f       	adc	r31, r31
    1e20:	e5 5c       	subi	r30, 0xC5	; 197
    1e22:	fe 4f       	sbci	r31, 0xFE	; 254
    1e24:	a5 91       	lpm	r26, Z+
    1e26:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1e28:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1e2a:	f8 94       	cli

	if (val == LOW) {
    1e2c:	11 11       	cpse	r17, r1
    1e2e:	04 c0       	rjmp	.+8      	; 0x1e38 <digitalWrite+0x4e>
		*out &= ~bit;
    1e30:	8c 91       	ld	r24, X
    1e32:	d0 95       	com	r29
    1e34:	d8 23       	and	r29, r24
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <digitalWrite+0x52>
	} else {
		*out |= bit;
    1e38:	ec 91       	ld	r30, X
    1e3a:	de 2b       	or	r29, r30
    1e3c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1e3e:	9f bf       	out	0x3f, r25	; 63
}
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	08 95       	ret

00001e48 <_ZL23enterU32InBufferAtIndexmPhh>:
        wait = false ;
      }
    }
  }
  return recoveryDone ;
}
    1e48:	fa 01       	movw	r30, r20
    1e4a:	e2 0f       	add	r30, r18
    1e4c:	f1 1d       	adc	r31, r1
    1e4e:	60 83       	st	Z, r22
    1e50:	71 83       	std	Z+1, r23	; 0x01
    1e52:	82 83       	std	Z+2, r24	; 0x02
    1e54:	93 83       	std	Z+3, r25	; 0x03
    1e56:	08 95       	ret

00001e58 <_ZL20u32FromBufferAtIndexPhh>:
    1e58:	fc 01       	movw	r30, r24
    1e5a:	e6 0f       	add	r30, r22
    1e5c:	f1 1d       	adc	r31, r1
    1e5e:	20 81       	ld	r18, Z
    1e60:	31 81       	ldd	r19, Z+1	; 0x01
    1e62:	62 81       	ldd	r22, Z+2	; 0x02
    1e64:	86 2f       	mov	r24, r22
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	a0 e0       	ldi	r26, 0x00	; 0
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	99 27       	eor	r25, r25
    1e70:	88 27       	eor	r24, r24
    1e72:	93 2b       	or	r25, r19
    1e74:	82 2b       	or	r24, r18
    1e76:	23 81       	ldd	r18, Z+3	; 0x03
    1e78:	bc 01       	movw	r22, r24
    1e7a:	cd 01       	movw	r24, r26
    1e7c:	92 2b       	or	r25, r18
    1e7e:	08 95       	ret

00001e80 <_ZL19lengthCodeForLengthh>:
    1e80:	88 31       	cpi	r24, 0x18	; 24
    1e82:	e9 f0       	breq	.+58     	; 0x1ebe <_ZL19lengthCodeForLengthh+0x3e>
    1e84:	58 f4       	brcc	.+22     	; 0x1e9c <_ZL19lengthCodeForLengthh+0x1c>
    1e86:	80 31       	cpi	r24, 0x10	; 16
    1e88:	71 f1       	breq	.+92     	; 0x1ee6 <_ZL19lengthCodeForLengthh+0x66>
    1e8a:	84 31       	cpi	r24, 0x14	; 20
    1e8c:	99 f0       	breq	.+38     	; 0x1eb4 <_ZL19lengthCodeForLengthh+0x34>
    1e8e:	8c 30       	cpi	r24, 0x0C	; 12
    1e90:	59 f4       	brne	.+22     	; 0x1ea8 <_ZL19lengthCodeForLengthh+0x28>
    1e92:	69 e0       	ldi	r22, 0x09	; 9
    1e94:	70 e0       	ldi	r23, 0x00	; 0
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	08 95       	ret
    1e9c:	80 33       	cpi	r24, 0x30	; 48
    1e9e:	c9 f0       	breq	.+50     	; 0x1ed2 <_ZL19lengthCodeForLengthh+0x52>
    1ea0:	80 34       	cpi	r24, 0x40	; 64
    1ea2:	e1 f0       	breq	.+56     	; 0x1edc <_ZL19lengthCodeForLengthh+0x5c>
    1ea4:	80 32       	cpi	r24, 0x20	; 32
    1ea6:	81 f0       	breq	.+32     	; 0x1ec8 <_ZL19lengthCodeForLengthh+0x48>
    1ea8:	68 2f       	mov	r22, r24
    1eaa:	6f 70       	andi	r22, 0x0F	; 15
    1eac:	70 e0       	ldi	r23, 0x00	; 0
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	08 95       	ret
    1eb4:	6b e0       	ldi	r22, 0x0B	; 11
    1eb6:	70 e0       	ldi	r23, 0x00	; 0
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	08 95       	ret
    1ebe:	6c e0       	ldi	r22, 0x0C	; 12
    1ec0:	70 e0       	ldi	r23, 0x00	; 0
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	08 95       	ret
    1ec8:	6d e0       	ldi	r22, 0x0D	; 13
    1eca:	70 e0       	ldi	r23, 0x00	; 0
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	08 95       	ret
    1ed2:	6e e0       	ldi	r22, 0x0E	; 14
    1ed4:	70 e0       	ldi	r23, 0x00	; 0
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	08 95       	ret
    1edc:	6f e0       	ldi	r22, 0x0F	; 15
    1ede:	70 e0       	ldi	r23, 0x00	; 0
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	08 95       	ret
    1ee6:	6a e0       	ldi	r22, 0x0A	; 10
    1ee8:	70 e0       	ldi	r23, 0x00	; 0
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	08 95       	ret

00001ef0 <_ZN12ACANFDBuffer6appendERK12CANFDMessage.part.2>:
    1ef0:	cf 93       	push	r28
    1ef2:	df 93       	push	r29
    1ef4:	ec 01       	movw	r28, r24
    1ef6:	4a 85       	ldd	r20, Y+10	; 0x0a
    1ef8:	5b 85       	ldd	r21, Y+11	; 0x0b
    1efa:	88 e4       	ldi	r24, 0x48	; 72
    1efc:	84 9f       	mul	r24, r20
    1efe:	90 01       	movw	r18, r0
    1f00:	85 9f       	mul	r24, r21
    1f02:	30 0d       	add	r19, r0
    1f04:	11 24       	eor	r1, r1
    1f06:	a8 81       	ld	r26, Y
    1f08:	b9 81       	ldd	r27, Y+1	; 0x01
    1f0a:	a2 0f       	add	r26, r18
    1f0c:	b3 1f       	adc	r27, r19
    1f0e:	fb 01       	movw	r30, r22
    1f10:	01 90       	ld	r0, Z+
    1f12:	0d 92       	st	X+, r0
    1f14:	8a 95       	dec	r24
    1f16:	e1 f7       	brne	.-8      	; 0x1f10 <_ZN12ACANFDBuffer6appendERK12CANFDMessage.part.2+0x20>
    1f18:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f1c:	ac 85       	ldd	r26, Y+12	; 0x0c
    1f1e:	bd 85       	ldd	r27, Y+13	; 0x0d
    1f20:	01 96       	adiw	r24, 0x01	; 1
    1f22:	a1 1d       	adc	r26, r1
    1f24:	b1 1d       	adc	r27, r1
    1f26:	8a 87       	std	Y+10, r24	; 0x0a
    1f28:	9b 87       	std	Y+11, r25	; 0x0b
    1f2a:	ac 87       	std	Y+12, r26	; 0x0c
    1f2c:	bd 87       	std	Y+13, r27	; 0x0d
    1f2e:	4a 81       	ldd	r20, Y+2	; 0x02
    1f30:	5b 81       	ldd	r21, Y+3	; 0x03
    1f32:	6c 81       	ldd	r22, Y+4	; 0x04
    1f34:	7d 81       	ldd	r23, Y+5	; 0x05
    1f36:	84 17       	cp	r24, r20
    1f38:	95 07       	cpc	r25, r21
    1f3a:	a6 07       	cpc	r26, r22
    1f3c:	b7 07       	cpc	r27, r23
    1f3e:	21 f4       	brne	.+8      	; 0x1f48 <_ZN12ACANFDBuffer6appendERK12CANFDMessage.part.2+0x58>
    1f40:	1a 86       	std	Y+10, r1	; 0x0a
    1f42:	1b 86       	std	Y+11, r1	; 0x0b
    1f44:	1c 86       	std	Y+12, r1	; 0x0c
    1f46:	1d 86       	std	Y+13, r1	; 0x0d
    1f48:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f4a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f4c:	a8 89       	ldd	r26, Y+16	; 0x10
    1f4e:	b9 89       	ldd	r27, Y+17	; 0x11
    1f50:	01 96       	adiw	r24, 0x01	; 1
    1f52:	a1 1d       	adc	r26, r1
    1f54:	b1 1d       	adc	r27, r1
    1f56:	8e 87       	std	Y+14, r24	; 0x0e
    1f58:	9f 87       	std	Y+15, r25	; 0x0f
    1f5a:	a8 8b       	std	Y+16, r26	; 0x10
    1f5c:	b9 8b       	std	Y+17, r27	; 0x11
    1f5e:	4a 89       	ldd	r20, Y+18	; 0x12
    1f60:	5b 89       	ldd	r21, Y+19	; 0x13
    1f62:	6c 89       	ldd	r22, Y+20	; 0x14
    1f64:	7d 89       	ldd	r23, Y+21	; 0x15
    1f66:	48 17       	cp	r20, r24
    1f68:	59 07       	cpc	r21, r25
    1f6a:	6a 07       	cpc	r22, r26
    1f6c:	7b 07       	cpc	r23, r27
    1f6e:	20 f4       	brcc	.+8      	; 0x1f78 <_ZN12ACANFDBuffer6appendERK12CANFDMessage.part.2+0x88>
    1f70:	8a 8b       	std	Y+18, r24	; 0x12
    1f72:	9b 8b       	std	Y+19, r25	; 0x13
    1f74:	ac 8b       	std	Y+20, r26	; 0x14
    1f76:	bd 8b       	std	Y+21, r27	; 0x15
    1f78:	df 91       	pop	r29
    1f7a:	cf 91       	pop	r28
    1f7c:	08 95       	ret

00001f7e <_ZN12ACANFDBuffer6removeER12CANFDMessage.part.3>:
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
    1f82:	ec 01       	movw	r28, r24
    1f84:	4e 81       	ldd	r20, Y+6	; 0x06
    1f86:	5f 81       	ldd	r21, Y+7	; 0x07
    1f88:	88 e4       	ldi	r24, 0x48	; 72
    1f8a:	84 9f       	mul	r24, r20
    1f8c:	90 01       	movw	r18, r0
    1f8e:	85 9f       	mul	r24, r21
    1f90:	30 0d       	add	r19, r0
    1f92:	11 24       	eor	r1, r1
    1f94:	e8 81       	ld	r30, Y
    1f96:	f9 81       	ldd	r31, Y+1	; 0x01
    1f98:	e2 0f       	add	r30, r18
    1f9a:	f3 1f       	adc	r31, r19
    1f9c:	db 01       	movw	r26, r22
    1f9e:	01 90       	ld	r0, Z+
    1fa0:	0d 92       	st	X+, r0
    1fa2:	8a 95       	dec	r24
    1fa4:	e1 f7       	brne	.-8      	; 0x1f9e <_ZN12ACANFDBuffer6removeER12CANFDMessage.part.3+0x20>
    1fa6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fa8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1faa:	a8 89       	ldd	r26, Y+16	; 0x10
    1fac:	b9 89       	ldd	r27, Y+17	; 0x11
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	a1 09       	sbc	r26, r1
    1fb2:	b1 09       	sbc	r27, r1
    1fb4:	8e 87       	std	Y+14, r24	; 0x0e
    1fb6:	9f 87       	std	Y+15, r25	; 0x0f
    1fb8:	a8 8b       	std	Y+16, r26	; 0x10
    1fba:	b9 8b       	std	Y+17, r27	; 0x11
    1fbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1fbe:	9f 81       	ldd	r25, Y+7	; 0x07
    1fc0:	a8 85       	ldd	r26, Y+8	; 0x08
    1fc2:	b9 85       	ldd	r27, Y+9	; 0x09
    1fc4:	01 96       	adiw	r24, 0x01	; 1
    1fc6:	a1 1d       	adc	r26, r1
    1fc8:	b1 1d       	adc	r27, r1
    1fca:	8e 83       	std	Y+6, r24	; 0x06
    1fcc:	9f 83       	std	Y+7, r25	; 0x07
    1fce:	a8 87       	std	Y+8, r26	; 0x08
    1fd0:	b9 87       	std	Y+9, r27	; 0x09
    1fd2:	4a 81       	ldd	r20, Y+2	; 0x02
    1fd4:	5b 81       	ldd	r21, Y+3	; 0x03
    1fd6:	6c 81       	ldd	r22, Y+4	; 0x04
    1fd8:	7d 81       	ldd	r23, Y+5	; 0x05
    1fda:	84 17       	cp	r24, r20
    1fdc:	95 07       	cpc	r25, r21
    1fde:	a6 07       	cpc	r26, r22
    1fe0:	b7 07       	cpc	r27, r23
    1fe2:	21 f4       	brne	.+8      	; 0x1fec <_ZN12ACANFDBuffer6removeER12CANFDMessage.part.3+0x6e>
    1fe4:	1e 82       	std	Y+6, r1	; 0x06
    1fe6:	1f 82       	std	Y+7, r1	; 0x07
    1fe8:	18 86       	std	Y+8, r1	; 0x08
    1fea:	19 86       	std	Y+9, r1	; 0x09
    1fec:	df 91       	pop	r29
    1fee:	cf 91       	pop	r28
    1ff0:	08 95       	ret

00001ff2 <_ZN8SPIClass8transferEPvj.part.6>:
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	20 81       	ld	r18, Z
    1ff6:	2e bd       	out	0x2e, r18	; 46
    1ff8:	9b 01       	movw	r18, r22
    1ffa:	21 50       	subi	r18, 0x01	; 1
    1ffc:	31 09       	sbc	r19, r1
    1ffe:	41 f0       	breq	.+16     	; 0x2010 <_ZN8SPIClass8transferEPvj.part.6+0x1e>
    2000:	51 81       	ldd	r21, Z+1	; 0x01
    2002:	0d b4       	in	r0, 0x2d	; 45
    2004:	07 fe       	sbrs	r0, 7
    2006:	fd cf       	rjmp	.-6      	; 0x2002 <_ZN8SPIClass8transferEPvj.part.6+0x10>
    2008:	4e b5       	in	r20, 0x2e	; 46
    200a:	5e bd       	out	0x2e, r21	; 46
    200c:	41 93       	st	Z+, r20
    200e:	f5 cf       	rjmp	.-22     	; 0x1ffa <_ZN8SPIClass8transferEPvj.part.6+0x8>
    2010:	61 50       	subi	r22, 0x01	; 1
    2012:	71 09       	sbc	r23, r1
    2014:	fc 01       	movw	r30, r24
    2016:	e6 0f       	add	r30, r22
    2018:	f7 1f       	adc	r31, r23
    201a:	0d b4       	in	r0, 0x2d	; 45
    201c:	07 fe       	sbrs	r0, 7
    201e:	fd cf       	rjmp	.-6      	; 0x201a <_ZN8SPIClass8transferEPvj.part.6+0x28>
    2020:	8e b5       	in	r24, 0x2e	; 46
    2022:	80 83       	st	Z, r24
    2024:	08 95       	ret

00002026 <_ZN12ACANFDBuffer12initWithSizeEm>:
    2026:	8f 92       	push	r8
    2028:	9f 92       	push	r9
    202a:	af 92       	push	r10
    202c:	bf 92       	push	r11
    202e:	cf 92       	push	r12
    2030:	df 92       	push	r13
    2032:	ef 92       	push	r14
    2034:	ff 92       	push	r15
    2036:	0f 93       	push	r16
    2038:	1f 93       	push	r17
    203a:	cf 93       	push	r28
    203c:	df 93       	push	r29
    203e:	ec 01       	movw	r28, r24
    2040:	6a 01       	movw	r12, r20
    2042:	7b 01       	movw	r14, r22
    2044:	45 3c       	cpi	r20, 0xC5	; 197
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	58 07       	cpc	r21, r24
    204a:	38 f4       	brcc	.+14     	; 0x205a <_ZN12ACANFDBuffer12initWithSizeEm+0x34>
    204c:	28 e4       	ldi	r18, 0x48	; 72
    204e:	24 9f       	mul	r18, r20
    2050:	c0 01       	movw	r24, r0
    2052:	25 9f       	mul	r18, r21
    2054:	90 0d       	add	r25, r0
    2056:	11 24       	eor	r1, r1
    2058:	02 c0       	rjmp	.+4      	; 0x205e <_ZN12ACANFDBuffer12initWithSizeEm+0x38>
    205a:	8f ef       	ldi	r24, 0xFF	; 255
    205c:	9f ef       	ldi	r25, 0xFF	; 255
    205e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <_Znaj>
    2062:	4c 01       	movw	r8, r24
    2064:	56 01       	movw	r10, r12
    2066:	8c 01       	movw	r16, r24
    2068:	a1 14       	cp	r10, r1
    206a:	b1 04       	cpc	r11, r1
    206c:	49 f0       	breq	.+18     	; 0x2080 <_ZN12ACANFDBuffer12initWithSizeEm+0x5a>
    206e:	c8 01       	movw	r24, r16
    2070:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN12CANFDMessageC1Ev>
    2074:	08 5b       	subi	r16, 0xB8	; 184
    2076:	1f 4f       	sbci	r17, 0xFF	; 255
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	a8 1a       	sub	r10, r24
    207c:	b1 08       	sbc	r11, r1
    207e:	f4 cf       	rjmp	.-24     	; 0x2068 <_ZN12ACANFDBuffer12initWithSizeEm+0x42>
    2080:	88 82       	st	Y, r8
    2082:	99 82       	std	Y+1, r9	; 0x01
    2084:	ca 82       	std	Y+2, r12	; 0x02
    2086:	db 82       	std	Y+3, r13	; 0x03
    2088:	ec 82       	std	Y+4, r14	; 0x04
    208a:	fd 82       	std	Y+5, r15	; 0x05
    208c:	1e 82       	std	Y+6, r1	; 0x06
    208e:	1f 82       	std	Y+7, r1	; 0x07
    2090:	18 86       	std	Y+8, r1	; 0x08
    2092:	19 86       	std	Y+9, r1	; 0x09
    2094:	1a 86       	std	Y+10, r1	; 0x0a
    2096:	1b 86       	std	Y+11, r1	; 0x0b
    2098:	1c 86       	std	Y+12, r1	; 0x0c
    209a:	1d 86       	std	Y+13, r1	; 0x0d
    209c:	1e 86       	std	Y+14, r1	; 0x0e
    209e:	1f 86       	std	Y+15, r1	; 0x0f
    20a0:	18 8a       	std	Y+16, r1	; 0x10
    20a2:	19 8a       	std	Y+17, r1	; 0x11
    20a4:	1a 8a       	std	Y+18, r1	; 0x12
    20a6:	1b 8a       	std	Y+19, r1	; 0x13
    20a8:	1c 8a       	std	Y+20, r1	; 0x14
    20aa:	1d 8a       	std	Y+21, r1	; 0x15
    20ac:	df 91       	pop	r29
    20ae:	cf 91       	pop	r28
    20b0:	1f 91       	pop	r17
    20b2:	0f 91       	pop	r16
    20b4:	ff 90       	pop	r15
    20b6:	ef 90       	pop	r14
    20b8:	df 90       	pop	r13
    20ba:	cf 90       	pop	r12
    20bc:	bf 90       	pop	r11
    20be:	af 90       	pop	r10
    20c0:	9f 90       	pop	r9
    20c2:	8f 90       	pop	r8
    20c4:	08 95       	ret

000020c6 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    20c6:	20 91 7b 05 	lds	r18, 0x057B	; 0x80057b <_ZN8SPIClass13interruptModeE>
    20ca:	22 23       	and	r18, r18
    20cc:	99 f0       	breq	.+38     	; 0x20f4 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    20ce:	4f b7       	in	r20, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	20 91 7b 05 	lds	r18, 0x057B	; 0x80057b <_ZN8SPIClass13interruptModeE>
    20d6:	21 30       	cpi	r18, 0x01	; 1
    20d8:	59 f4       	brne	.+22     	; 0x20f0 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    20da:	2d b3       	in	r18, 0x1d	; 29
    20dc:	20 93 79 05 	sts	0x0579, r18	; 0x800579 <_ZN8SPIClass13interruptSaveE>
    20e0:	3d b3       	in	r19, 0x1d	; 29
    20e2:	20 91 7a 05 	lds	r18, 0x057A	; 0x80057a <_ZN8SPIClass13interruptMaskE>
    20e6:	20 95       	com	r18
    20e8:	23 23       	and	r18, r19
    20ea:	2d bb       	out	0x1d, r18	; 29
    20ec:	4f bf       	out	0x3f, r20	; 63
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    20f0:	40 93 79 05 	sts	0x0579, r20	; 0x800579 <_ZN8SPIClass13interruptSaveE>
    20f4:	8c bd       	out	0x2c, r24	; 44
    20f6:	9d bd       	out	0x2d, r25	; 45
    20f8:	08 95       	ret

000020fa <_ZN8SPIClass10transfer16Ej>:
    20fa:	0c b4       	in	r0, 0x2c	; 44
    20fc:	05 fc       	sbrc	r0, 5
    20fe:	0d c0       	rjmp	.+26     	; 0x211a <_ZN8SPIClass10transfer16Ej+0x20>
    2100:	9e bd       	out	0x2e, r25	; 46
    2102:	00 00       	nop
    2104:	0d b4       	in	r0, 0x2d	; 45
    2106:	07 fe       	sbrs	r0, 7
    2108:	fd cf       	rjmp	.-6      	; 0x2104 <_ZN8SPIClass10transfer16Ej+0xa>
    210a:	9e b5       	in	r25, 0x2e	; 46
    210c:	8e bd       	out	0x2e, r24	; 46
    210e:	00 00       	nop
    2110:	0d b4       	in	r0, 0x2d	; 45
    2112:	07 fe       	sbrs	r0, 7
    2114:	fd cf       	rjmp	.-6      	; 0x2110 <_ZN8SPIClass10transfer16Ej+0x16>
    2116:	8e b5       	in	r24, 0x2e	; 46
    2118:	08 95       	ret
    211a:	8e bd       	out	0x2e, r24	; 46
    211c:	00 00       	nop
    211e:	0d b4       	in	r0, 0x2d	; 45
    2120:	07 fe       	sbrs	r0, 7
    2122:	fd cf       	rjmp	.-6      	; 0x211e <_ZN8SPIClass10transfer16Ej+0x24>
    2124:	8e b5       	in	r24, 0x2e	; 46
    2126:	9e bd       	out	0x2e, r25	; 46
    2128:	00 00       	nop
    212a:	0d b4       	in	r0, 0x2d	; 45
    212c:	07 fe       	sbrs	r0, 7
    212e:	fd cf       	rjmp	.-6      	; 0x212a <_ZN8SPIClass10transfer16Ej+0x30>
    2130:	9e b5       	in	r25, 0x2e	; 46
    2132:	08 95       	ret

00002134 <_ZN8SPIClass14endTransactionEv>:
    2134:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <_ZN8SPIClass13interruptModeE>
    2138:	88 23       	and	r24, r24
    213a:	61 f0       	breq	.+24     	; 0x2154 <_ZN8SPIClass14endTransactionEv+0x20>
    213c:	9f b7       	in	r25, 0x3f	; 63
    213e:	f8 94       	cli
    2140:	20 91 7b 05 	lds	r18, 0x057B	; 0x80057b <_ZN8SPIClass13interruptModeE>
    2144:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <_ZN8SPIClass13interruptSaveE>
    2148:	21 30       	cpi	r18, 0x01	; 1
    214a:	19 f4       	brne	.+6      	; 0x2152 <_ZN8SPIClass14endTransactionEv+0x1e>
    214c:	8d bb       	out	0x1d, r24	; 29
    214e:	9f bf       	out	0x3f, r25	; 63
    2150:	08 95       	ret
    2152:	8f bf       	out	0x3f, r24	; 63
    2154:	08 95       	ret

00002156 <_ZN10ACAN2517FDC1EhR8SPIClassh>:
    2156:	fc 01       	movw	r30, r24
    2158:	11 82       	std	Z+1, r1	; 0x01
    215a:	10 82       	st	Z, r1
    215c:	80 e5       	ldi	r24, 0x50	; 80
    215e:	82 83       	std	Z+2, r24	; 0x02
    2160:	13 82       	std	Z+3, r1	; 0x03
    2162:	55 83       	std	Z+5, r21	; 0x05
    2164:	44 83       	std	Z+4, r20	; 0x04
    2166:	66 83       	std	Z+6, r22	; 0x06
    2168:	27 83       	std	Z+7, r18	; 0x07
    216a:	10 86       	std	Z+8, r1	; 0x08
    216c:	11 86       	std	Z+9, r1	; 0x09
    216e:	12 86       	std	Z+10, r1	; 0x0a
    2170:	13 86       	std	Z+11, r1	; 0x0b
    2172:	14 86       	std	Z+12, r1	; 0x0c
    2174:	15 86       	std	Z+13, r1	; 0x0d
    2176:	16 86       	std	Z+14, r1	; 0x0e
    2178:	17 86       	std	Z+15, r1	; 0x0f
    217a:	11 8a       	std	Z+17, r1	; 0x11
    217c:	10 8a       	std	Z+16, r1	; 0x10
    217e:	12 8a       	std	Z+18, r1	; 0x12
    2180:	13 8a       	std	Z+19, r1	; 0x13
    2182:	14 8a       	std	Z+20, r1	; 0x14
    2184:	15 8a       	std	Z+21, r1	; 0x15
    2186:	16 8a       	std	Z+22, r1	; 0x16
    2188:	17 8a       	std	Z+23, r1	; 0x17
    218a:	10 8e       	std	Z+24, r1	; 0x18
    218c:	11 8e       	std	Z+25, r1	; 0x19
    218e:	12 8e       	std	Z+26, r1	; 0x1a
    2190:	13 8e       	std	Z+27, r1	; 0x1b
    2192:	14 8e       	std	Z+28, r1	; 0x1c
    2194:	15 8e       	std	Z+29, r1	; 0x1d
    2196:	16 8e       	std	Z+30, r1	; 0x1e
    2198:	17 8e       	std	Z+31, r1	; 0x1f
    219a:	10 a2       	std	Z+32, r1	; 0x20
    219c:	11 a2       	std	Z+33, r1	; 0x21
    219e:	12 a2       	std	Z+34, r1	; 0x22
    21a0:	13 a2       	std	Z+35, r1	; 0x23
    21a2:	14 a2       	std	Z+36, r1	; 0x24
    21a4:	15 a2       	std	Z+37, r1	; 0x25
    21a6:	17 a2       	std	Z+39, r1	; 0x27
    21a8:	16 a2       	std	Z+38, r1	; 0x26
    21aa:	10 a6       	std	Z+40, r1	; 0x28
    21ac:	11 a6       	std	Z+41, r1	; 0x29
    21ae:	12 a6       	std	Z+42, r1	; 0x2a
    21b0:	13 a6       	std	Z+43, r1	; 0x2b
    21b2:	14 a6       	std	Z+44, r1	; 0x2c
    21b4:	15 a6       	std	Z+45, r1	; 0x2d
    21b6:	16 a6       	std	Z+46, r1	; 0x2e
    21b8:	17 a6       	std	Z+47, r1	; 0x2f
    21ba:	10 aa       	std	Z+48, r1	; 0x30
    21bc:	11 aa       	std	Z+49, r1	; 0x31
    21be:	12 aa       	std	Z+50, r1	; 0x32
    21c0:	13 aa       	std	Z+51, r1	; 0x33
    21c2:	14 aa       	std	Z+52, r1	; 0x34
    21c4:	15 aa       	std	Z+53, r1	; 0x35
    21c6:	16 aa       	std	Z+54, r1	; 0x36
    21c8:	17 aa       	std	Z+55, r1	; 0x37
    21ca:	10 ae       	std	Z+56, r1	; 0x38
    21cc:	11 ae       	std	Z+57, r1	; 0x39
    21ce:	12 ae       	std	Z+58, r1	; 0x3a
    21d0:	13 ae       	std	Z+59, r1	; 0x3b
    21d2:	08 95       	ret

000021d4 <_ZN10ACAN2517FD9availableEv>:
    21d4:	0f 93       	push	r16
    21d6:	1f 93       	push	r17
    21d8:	cf 93       	push	r28
    21da:	8c 01       	movw	r16, r24
    21dc:	fc 01       	movw	r30, r24
    21de:	82 81       	ldd	r24, Z+2	; 0x02
    21e0:	93 81       	ldd	r25, Z+3	; 0x03
    21e2:	0e 94 63 10 	call	0x20c6	; 0x20c6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    21e6:	f8 94       	cli
    21e8:	c1 e0       	ldi	r28, 0x01	; 1
    21ea:	f8 01       	movw	r30, r16
    21ec:	86 8d       	ldd	r24, Z+30	; 0x1e
    21ee:	97 8d       	ldd	r25, Z+31	; 0x1f
    21f0:	a0 a1       	ldd	r26, Z+32	; 0x20
    21f2:	b1 a1       	ldd	r27, Z+33	; 0x21
    21f4:	89 2b       	or	r24, r25
    21f6:	8a 2b       	or	r24, r26
    21f8:	8b 2b       	or	r24, r27
    21fa:	09 f4       	brne	.+2      	; 0x21fe <_ZN10ACAN2517FD9availableEv+0x2a>
    21fc:	c0 e0       	ldi	r28, 0x00	; 0
    21fe:	78 94       	sei
    2200:	0e 94 9a 10 	call	0x2134	; 0x2134 <_ZN8SPIClass14endTransactionEv>
    2204:	8c 2f       	mov	r24, r28
    2206:	cf 91       	pop	r28
    2208:	1f 91       	pop	r17
    220a:	0f 91       	pop	r16
    220c:	08 95       	ret

0000220e <_ZN10ACAN2517FD7receiveER12CANFDMessage>:
    220e:	ef 92       	push	r14
    2210:	ff 92       	push	r15
    2212:	1f 93       	push	r17
    2214:	cf 93       	push	r28
    2216:	df 93       	push	r29
    2218:	ec 01       	movw	r28, r24
    221a:	7b 01       	movw	r14, r22
    221c:	8a 81       	ldd	r24, Y+2	; 0x02
    221e:	9b 81       	ldd	r25, Y+3	; 0x03
    2220:	0e 94 63 10 	call	0x20c6	; 0x20c6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2224:	f8 94       	cli
    2226:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2228:	9f 8d       	ldd	r25, Y+31	; 0x1f
    222a:	a8 a1       	ldd	r26, Y+32	; 0x20
    222c:	b9 a1       	ldd	r27, Y+33	; 0x21
    222e:	11 e0       	ldi	r17, 0x01	; 1
    2230:	00 97       	sbiw	r24, 0x00	; 0
    2232:	a1 05       	cpc	r26, r1
    2234:	b1 05       	cpc	r27, r1
    2236:	09 f4       	brne	.+2      	; 0x223a <_ZN10ACAN2517FD7receiveER12CANFDMessage+0x2c>
    2238:	10 e0       	ldi	r17, 0x00	; 0
    223a:	89 2b       	or	r24, r25
    223c:	8a 2b       	or	r24, r26
    223e:	8b 2b       	or	r24, r27
    2240:	29 f0       	breq	.+10     	; 0x224c <_ZN10ACAN2517FD7receiveER12CANFDMessage+0x3e>
    2242:	b7 01       	movw	r22, r14
    2244:	ce 01       	movw	r24, r28
    2246:	40 96       	adiw	r24, 0x10	; 16
    2248:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <_ZN12ACANFDBuffer6removeER12CANFDMessage.part.3>
    224c:	78 94       	sei
    224e:	0e 94 9a 10 	call	0x2134	; 0x2134 <_ZN8SPIClass14endTransactionEv>
    2252:	81 2f       	mov	r24, r17
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	1f 91       	pop	r17
    225a:	ff 90       	pop	r15
    225c:	ef 90       	pop	r14
    225e:	08 95       	ret

00002260 <_ZN10ACAN2517FD8assertCSEv>:
    2260:	60 e0       	ldi	r22, 0x00	; 0
    2262:	fc 01       	movw	r30, r24
    2264:	86 81       	ldd	r24, Z+6	; 0x06
    2266:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <digitalWrite>

0000226a <_ZN10ACAN2517FD10deassertCSEv>:
    226a:	61 e0       	ldi	r22, 0x01	; 1
    226c:	fc 01       	movw	r30, r24
    226e:	86 81       	ldd	r24, Z+6	; 0x06
    2270:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <digitalWrite>

00002274 <_ZN10ACAN2517FD37writeRegister32Assume_SPI_transactionEjm>:
    2274:	ef 92       	push	r14
    2276:	ff 92       	push	r15
    2278:	0f 93       	push	r16
    227a:	1f 93       	push	r17
    227c:	cf 93       	push	r28
    227e:	df 93       	push	r29
    2280:	00 d0       	rcall	.+0      	; 0x2282 <_ZN10ACAN2517FD37writeRegister32Assume_SPI_transactionEjm+0xe>
    2282:	00 d0       	rcall	.+0      	; 0x2284 <_ZN10ACAN2517FD37writeRegister32Assume_SPI_transactionEjm+0x10>
    2284:	00 d0       	rcall	.+0      	; 0x2286 <_ZN10ACAN2517FD37writeRegister32Assume_SPI_transactionEjm+0x12>
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    228a:	7c 01       	movw	r14, r24
    228c:	fb 01       	movw	r30, r22
    228e:	ca 01       	movw	r24, r20
    2290:	b9 01       	movw	r22, r18
    2292:	8e 01       	movw	r16, r28
    2294:	0f 5f       	subi	r16, 0xFF	; 255
    2296:	1f 4f       	sbci	r17, 0xFF	; 255
    2298:	26 e0       	ldi	r18, 0x06	; 6
    229a:	d8 01       	movw	r26, r16
    229c:	1d 92       	st	X+, r1
    229e:	2a 95       	dec	r18
    22a0:	e9 f7       	brne	.-6      	; 0x229c <_ZN10ACAN2517FD37writeRegister32Assume_SPI_transactionEjm+0x28>
    22a2:	9f 01       	movw	r18, r30
    22a4:	3f 70       	andi	r19, 0x0F	; 15
    22a6:	30 62       	ori	r19, 0x20	; 32
    22a8:	39 83       	std	Y+1, r19	; 0x01
    22aa:	2a 83       	std	Y+2, r18	; 0x02
    22ac:	22 e0       	ldi	r18, 0x02	; 2
    22ae:	a8 01       	movw	r20, r16
    22b0:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <_ZL23enterU32InBufferAtIndexmPhh>
    22b4:	c7 01       	movw	r24, r14
    22b6:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN10ACAN2517FD8assertCSEv>
    22ba:	66 e0       	ldi	r22, 0x06	; 6
    22bc:	70 e0       	ldi	r23, 0x00	; 0
    22be:	c8 01       	movw	r24, r16
    22c0:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <_ZN8SPIClass8transferEPvj.part.6>
    22c4:	c7 01       	movw	r24, r14
    22c6:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN10ACAN2517FD10deassertCSEv>
    22ca:	26 96       	adiw	r28, 0x06	; 6
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	de bf       	out	0x3e, r29	; 62
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	cd bf       	out	0x3d, r28	; 61
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	1f 91       	pop	r17
    22dc:	0f 91       	pop	r16
    22de:	ff 90       	pop	r15
    22e0:	ef 90       	pop	r14
    22e2:	08 95       	ret

000022e4 <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>:
    22e4:	0f 93       	push	r16
    22e6:	1f 93       	push	r17
    22e8:	cf 93       	push	r28
    22ea:	df 93       	push	r29
    22ec:	00 d0       	rcall	.+0      	; 0x22ee <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh+0xa>
    22ee:	1f 92       	push	r1
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
    22f4:	8c 01       	movw	r16, r24
    22f6:	7f 70       	andi	r23, 0x0F	; 15
    22f8:	70 62       	ori	r23, 0x20	; 32
    22fa:	79 83       	std	Y+1, r23	; 0x01
    22fc:	6a 83       	std	Y+2, r22	; 0x02
    22fe:	4b 83       	std	Y+3, r20	; 0x03
    2300:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN10ACAN2517FD8assertCSEv>
    2304:	63 e0       	ldi	r22, 0x03	; 3
    2306:	70 e0       	ldi	r23, 0x00	; 0
    2308:	ce 01       	movw	r24, r28
    230a:	01 96       	adiw	r24, 0x01	; 1
    230c:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <_ZN8SPIClass8transferEPvj.part.6>
    2310:	c8 01       	movw	r24, r16
    2312:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN10ACAN2517FD10deassertCSEv>
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	df 91       	pop	r29
    231e:	cf 91       	pop	r28
    2320:	1f 91       	pop	r17
    2322:	0f 91       	pop	r16
    2324:	08 95       	ret

00002326 <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj>:
    2326:	ef 92       	push	r14
    2328:	ff 92       	push	r15
    232a:	0f 93       	push	r16
    232c:	1f 93       	push	r17
    232e:	cf 93       	push	r28
    2330:	df 93       	push	r29
    2332:	00 d0       	rcall	.+0      	; 0x2334 <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj+0xe>
    2334:	00 d0       	rcall	.+0      	; 0x2336 <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj+0x10>
    2336:	00 d0       	rcall	.+0      	; 0x2338 <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj+0x12>
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
    233c:	7c 01       	movw	r14, r24
    233e:	8e 01       	movw	r16, r28
    2340:	0f 5f       	subi	r16, 0xFF	; 255
    2342:	1f 4f       	sbci	r17, 0xFF	; 255
    2344:	86 e0       	ldi	r24, 0x06	; 6
    2346:	f8 01       	movw	r30, r16
    2348:	11 92       	st	Z+, r1
    234a:	8a 95       	dec	r24
    234c:	e9 f7       	brne	.-6      	; 0x2348 <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj+0x22>
    234e:	7f 70       	andi	r23, 0x0F	; 15
    2350:	70 63       	ori	r23, 0x30	; 48
    2352:	79 83       	std	Y+1, r23	; 0x01
    2354:	6a 83       	std	Y+2, r22	; 0x02
    2356:	c7 01       	movw	r24, r14
    2358:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN10ACAN2517FD8assertCSEv>
    235c:	66 e0       	ldi	r22, 0x06	; 6
    235e:	70 e0       	ldi	r23, 0x00	; 0
    2360:	c8 01       	movw	r24, r16
    2362:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <_ZN8SPIClass8transferEPvj.part.6>
    2366:	c7 01       	movw	r24, r14
    2368:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN10ACAN2517FD10deassertCSEv>
    236c:	62 e0       	ldi	r22, 0x02	; 2
    236e:	c8 01       	movw	r24, r16
    2370:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZL20u32FromBufferAtIndexPhh>
    2374:	26 96       	adiw	r28, 0x06	; 6
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	df 91       	pop	r29
    2382:	cf 91       	pop	r28
    2384:	1f 91       	pop	r17
    2386:	0f 91       	pop	r16
    2388:	ff 90       	pop	r15
    238a:	ef 90       	pop	r14
    238c:	08 95       	ret

0000238e <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage>:
    238e:	2f 92       	push	r2
    2390:	3f 92       	push	r3
    2392:	4f 92       	push	r4
    2394:	5f 92       	push	r5
    2396:	6f 92       	push	r6
    2398:	7f 92       	push	r7
    239a:	8f 92       	push	r8
    239c:	9f 92       	push	r9
    239e:	af 92       	push	r10
    23a0:	bf 92       	push	r11
    23a2:	cf 92       	push	r12
    23a4:	df 92       	push	r13
    23a6:	ef 92       	push	r14
    23a8:	ff 92       	push	r15
    23aa:	0f 93       	push	r16
    23ac:	1f 93       	push	r17
    23ae:	cf 93       	push	r28
    23b0:	df 93       	push	r29
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
    23b6:	c0 55       	subi	r28, 0x50	; 80
    23b8:	d1 09       	sbc	r29, r1
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	5c 01       	movw	r10, r24
    23c6:	8b 01       	movw	r16, r22
    23c8:	60 e7       	ldi	r22, 0x70	; 112
    23ca:	70 e0       	ldi	r23, 0x00	; 0
    23cc:	0e 94 93 11 	call	0x2326	; 0x2326 <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj>
    23d0:	9b 01       	movw	r18, r22
    23d2:	3c 5f       	subi	r19, 0xFC	; 252
    23d4:	2d 96       	adiw	r28, 0x0d	; 13
    23d6:	3f af       	std	Y+63, r19	; 0x3f
    23d8:	2e af       	std	Y+62, r18	; 0x3e
    23da:	2d 97       	sbiw	r28, 0x0d	; 13
    23dc:	d8 01       	movw	r26, r16
    23de:	4d 90       	ld	r4, X+
    23e0:	5d 90       	ld	r5, X+
    23e2:	6d 90       	ld	r6, X+
    23e4:	7c 90       	ld	r7, X
    23e6:	13 97       	sbiw	r26, 0x03	; 3
    23e8:	14 96       	adiw	r26, 0x04	; 4
    23ea:	9c 90       	ld	r9, X
    23ec:	99 20       	and	r9, r9
    23ee:	d1 f0       	breq	.+52     	; 0x2424 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0x96>
    23f0:	d3 01       	movw	r26, r6
    23f2:	c2 01       	movw	r24, r4
    23f4:	32 e1       	ldi	r19, 0x12	; 18
    23f6:	b6 95       	lsr	r27
    23f8:	a7 95       	ror	r26
    23fa:	97 95       	ror	r25
    23fc:	87 95       	ror	r24
    23fe:	3a 95       	dec	r19
    2400:	d1 f7       	brne	.-12     	; 0x23f6 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0x68>
    2402:	97 70       	andi	r25, 0x07	; 7
    2404:	aa 27       	eor	r26, r26
    2406:	bb 27       	eor	r27, r27
    2408:	e3 e0       	ldi	r30, 0x03	; 3
    240a:	6e 22       	and	r6, r30
    240c:	77 24       	eor	r7, r7
    240e:	4b e0       	ldi	r20, 0x0B	; 11
    2410:	44 0c       	add	r4, r4
    2412:	55 1c       	adc	r5, r5
    2414:	66 1c       	adc	r6, r6
    2416:	77 1c       	adc	r7, r7
    2418:	4a 95       	dec	r20
    241a:	d1 f7       	brne	.-12     	; 0x2410 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0x82>
    241c:	48 2a       	or	r4, r24
    241e:	59 2a       	or	r5, r25
    2420:	6a 2a       	or	r6, r26
    2422:	7b 2a       	or	r7, r27
    2424:	d8 01       	movw	r26, r16
    2426:	17 96       	adiw	r26, 0x07	; 7
    2428:	2c 90       	ld	r2, X
    242a:	82 2d       	mov	r24, r2
    242c:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <_ZL19lengthCodeForLengthh>
    2430:	6b 01       	movw	r12, r22
    2432:	7c 01       	movw	r14, r24
    2434:	99 20       	and	r9, r9
    2436:	11 f0       	breq	.+4      	; 0x243c <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xae>
    2438:	68 94       	set
    243a:	c4 f8       	bld	r12, 4
    243c:	f8 01       	movw	r30, r16
    243e:	85 81       	ldd	r24, Z+5	; 0x05
    2440:	82 30       	cpi	r24, 0x02	; 2
    2442:	61 f0       	breq	.+24     	; 0x245c <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xce>
    2444:	83 30       	cpi	r24, 0x03	; 3
    2446:	29 f0       	breq	.+10     	; 0x2452 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xc4>
    2448:	81 11       	cpse	r24, r1
    244a:	0d c0       	rjmp	.+26     	; 0x2466 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xd8>
    244c:	68 94       	set
    244e:	c5 f8       	bld	r12, 5
    2450:	0a c0       	rjmp	.+20     	; 0x2466 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xd8>
    2452:	d5 01       	movw	r26, r10
    2454:	1a 96       	adiw	r26, 0x0a	; 10
    2456:	8c 91       	ld	r24, X
    2458:	81 11       	cpse	r24, r1
    245a:	03 c0       	rjmp	.+6      	; 0x2462 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xd4>
    245c:	68 94       	set
    245e:	c7 f8       	bld	r12, 7
    2460:	02 c0       	rjmp	.+4      	; 0x2466 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xd8>
    2462:	b0 ec       	ldi	r27, 0xC0	; 192
    2464:	cb 2a       	or	r12, r27
    2466:	31 2c       	mov	r3, r1
    2468:	e3 e0       	ldi	r30, 0x03	; 3
    246a:	2e 0e       	add	r2, r30
    246c:	31 1c       	adc	r3, r1
    246e:	35 94       	asr	r3
    2470:	27 94       	ror	r2
    2472:	35 94       	asr	r3
    2474:	27 94       	ror	r2
    2476:	c1 01       	movw	r24, r2
    2478:	03 2c       	mov	r0, r3
    247a:	00 0c       	add	r0, r0
    247c:	aa 0b       	sbc	r26, r26
    247e:	bb 0b       	sbc	r27, r27
    2480:	61 96       	adiw	r28, 0x11	; 17
    2482:	8c af       	std	Y+60, r24	; 0x3c
    2484:	9d af       	std	Y+61, r25	; 0x3d
    2486:	ae af       	std	Y+62, r26	; 0x3e
    2488:	bf af       	std	Y+63, r27	; 0x3f
    248a:	61 97       	sbiw	r28, 0x11	; 17
    248c:	de 01       	movw	r26, r28
    248e:	11 96       	adiw	r26, 0x01	; 1
    2490:	4d 01       	movw	r8, r26
    2492:	8a e4       	ldi	r24, 0x4A	; 74
    2494:	fd 01       	movw	r30, r26
    2496:	11 92       	st	Z+, r1
    2498:	8a 95       	dec	r24
    249a:	e9 f7       	brne	.-6      	; 0x2496 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0x108>
    249c:	2d 96       	adiw	r28, 0x0d	; 13
    249e:	6e ad       	ldd	r22, Y+62	; 0x3e
    24a0:	7f ad       	ldd	r23, Y+63	; 0x3f
    24a2:	2d 97       	sbiw	r28, 0x0d	; 13
    24a4:	7f 70       	andi	r23, 0x0F	; 15
    24a6:	70 62       	ori	r23, 0x20	; 32
    24a8:	79 83       	std	Y+1, r23	; 0x01
    24aa:	6a 83       	std	Y+2, r22	; 0x02
    24ac:	22 e0       	ldi	r18, 0x02	; 2
    24ae:	ad 01       	movw	r20, r26
    24b0:	c3 01       	movw	r24, r6
    24b2:	b2 01       	movw	r22, r4
    24b4:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <_ZL23enterU32InBufferAtIndexmPhh>
    24b8:	26 e0       	ldi	r18, 0x06	; 6
    24ba:	a4 01       	movw	r20, r8
    24bc:	c7 01       	movw	r24, r14
    24be:	b6 01       	movw	r22, r12
    24c0:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <_ZL23enterU32InBufferAtIndexmPhh>
    24c4:	08 5f       	subi	r16, 0xF8	; 248
    24c6:	1f 4f       	sbci	r17, 0xFF	; 255
    24c8:	2a e0       	ldi	r18, 0x0A	; 10
    24ca:	f2 2e       	mov	r15, r18
    24cc:	41 2c       	mov	r4, r1
    24ce:	51 2c       	mov	r5, r1
    24d0:	32 01       	movw	r6, r4
    24d2:	61 96       	adiw	r28, 0x11	; 17
    24d4:	8c ad       	ldd	r24, Y+60	; 0x3c
    24d6:	9d ad       	ldd	r25, Y+61	; 0x3d
    24d8:	ae ad       	ldd	r26, Y+62	; 0x3e
    24da:	bf ad       	ldd	r27, Y+63	; 0x3f
    24dc:	61 97       	sbiw	r28, 0x11	; 17
    24de:	48 16       	cp	r4, r24
    24e0:	59 06       	cpc	r5, r25
    24e2:	6a 06       	cpc	r6, r26
    24e4:	7b 06       	cpc	r7, r27
    24e6:	90 f4       	brcc	.+36     	; 0x250c <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0x17e>
    24e8:	d8 01       	movw	r26, r16
    24ea:	6d 91       	ld	r22, X+
    24ec:	7d 91       	ld	r23, X+
    24ee:	8d 91       	ld	r24, X+
    24f0:	9d 91       	ld	r25, X+
    24f2:	8d 01       	movw	r16, r26
    24f4:	2f 2d       	mov	r18, r15
    24f6:	a4 01       	movw	r20, r8
    24f8:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <_ZL23enterU32InBufferAtIndexmPhh>
    24fc:	bf ef       	ldi	r27, 0xFF	; 255
    24fe:	4b 1a       	sub	r4, r27
    2500:	5b 0a       	sbc	r5, r27
    2502:	6b 0a       	sbc	r6, r27
    2504:	7b 0a       	sbc	r7, r27
    2506:	e4 e0       	ldi	r30, 0x04	; 4
    2508:	fe 0e       	add	r15, r30
    250a:	e3 cf       	rjmp	.-58     	; 0x24d2 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0x144>
    250c:	c5 01       	movw	r24, r10
    250e:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN10ACAN2517FD8assertCSEv>
    2512:	b1 01       	movw	r22, r2
    2514:	66 0f       	add	r22, r22
    2516:	77 1f       	adc	r23, r23
    2518:	66 0f       	add	r22, r22
    251a:	77 1f       	adc	r23, r23
    251c:	66 5f       	subi	r22, 0xF6	; 246
    251e:	7f 4f       	sbci	r23, 0xFF	; 255
    2520:	c4 01       	movw	r24, r8
    2522:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <_ZN8SPIClass8transferEPvj.part.6>
    2526:	c5 01       	movw	r24, r10
    2528:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN10ACAN2517FD10deassertCSEv>
    252c:	43 e0       	ldi	r20, 0x03	; 3
    252e:	69 e6       	ldi	r22, 0x69	; 105
    2530:	70 e0       	ldi	r23, 0x00	; 0
    2532:	c5 01       	movw	r24, r10
    2534:	0e 94 72 11 	call	0x22e4	; 0x22e4 <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    2538:	c0 5b       	subi	r28, 0xB0	; 176
    253a:	df 4f       	sbci	r29, 0xFF	; 255
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	f8 94       	cli
    2540:	de bf       	out	0x3e, r29	; 62
    2542:	0f be       	out	0x3f, r0	; 63
    2544:	cd bf       	out	0x3d, r28	; 61
    2546:	df 91       	pop	r29
    2548:	cf 91       	pop	r28
    254a:	1f 91       	pop	r17
    254c:	0f 91       	pop	r16
    254e:	ff 90       	pop	r15
    2550:	ef 90       	pop	r14
    2552:	df 90       	pop	r13
    2554:	cf 90       	pop	r12
    2556:	bf 90       	pop	r11
    2558:	af 90       	pop	r10
    255a:	9f 90       	pop	r9
    255c:	8f 90       	pop	r8
    255e:	7f 90       	pop	r7
    2560:	6f 90       	pop	r6
    2562:	5f 90       	pop	r5
    2564:	4f 90       	pop	r4
    2566:	3f 90       	pop	r3
    2568:	2f 90       	pop	r2
    256a:	08 95       	ret

0000256c <_ZN10ACAN2517FD17transmitInterruptEv>:
    256c:	0f 93       	push	r16
    256e:	1f 93       	push	r17
    2570:	cf 93       	push	r28
    2572:	df 93       	push	r29
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
    2578:	c8 54       	subi	r28, 0x48	; 72
    257a:	d1 09       	sbc	r29, r1
    257c:	0f b6       	in	r0, 0x3f	; 63
    257e:	f8 94       	cli
    2580:	de bf       	out	0x3e, r29	; 62
    2582:	0f be       	out	0x3f, r0	; 63
    2584:	cd bf       	out	0x3d, r28	; 61
    2586:	8c 01       	movw	r16, r24
    2588:	ce 01       	movw	r24, r28
    258a:	01 96       	adiw	r24, 0x01	; 1
    258c:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN12CANFDMessageC1Ev>
    2590:	f8 01       	movw	r30, r16
    2592:	84 a9       	ldd	r24, Z+52	; 0x34
    2594:	95 a9       	ldd	r25, Z+53	; 0x35
    2596:	a6 a9       	ldd	r26, Z+54	; 0x36
    2598:	b7 a9       	ldd	r27, Z+55	; 0x37
    259a:	89 2b       	or	r24, r25
    259c:	8a 2b       	or	r24, r26
    259e:	8b 2b       	or	r24, r27
    25a0:	71 f0       	breq	.+28     	; 0x25be <_ZN10ACAN2517FD17transmitInterruptEv+0x52>
    25a2:	be 01       	movw	r22, r28
    25a4:	6f 5f       	subi	r22, 0xFF	; 255
    25a6:	7f 4f       	sbci	r23, 0xFF	; 255
    25a8:	c8 01       	movw	r24, r16
    25aa:	86 96       	adiw	r24, 0x26	; 38
    25ac:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <_ZN12ACANFDBuffer6removeER12CANFDMessage.part.3>
    25b0:	be 01       	movw	r22, r28
    25b2:	6f 5f       	subi	r22, 0xFF	; 255
    25b4:	7f 4f       	sbci	r23, 0xFF	; 255
    25b6:	c8 01       	movw	r24, r16
    25b8:	0e 94 c7 11 	call	0x238e	; 0x238e <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage>
    25bc:	08 c0       	rjmp	.+16     	; 0x25ce <_ZN10ACAN2517FD17transmitInterruptEv+0x62>
    25be:	40 e9       	ldi	r20, 0x90	; 144
    25c0:	68 e6       	ldi	r22, 0x68	; 104
    25c2:	70 e0       	ldi	r23, 0x00	; 0
    25c4:	c8 01       	movw	r24, r16
    25c6:	0e 94 72 11 	call	0x22e4	; 0x22e4 <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    25ca:	f8 01       	movw	r30, r16
    25cc:	11 86       	std	Z+9, r1	; 0x09
    25ce:	c8 5b       	subi	r28, 0xB8	; 184
    25d0:	df 4f       	sbci	r29, 0xFF	; 255
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	f8 94       	cli
    25d6:	de bf       	out	0x3e, r29	; 62
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	cd bf       	out	0x3d, r28	; 61
    25dc:	df 91       	pop	r29
    25de:	cf 91       	pop	r28
    25e0:	1f 91       	pop	r17
    25e2:	0f 91       	pop	r16
    25e4:	08 95       	ret

000025e6 <_ZN10ACAN2517FD16receiveInterruptEv>:
    25e6:	2f 92       	push	r2
    25e8:	3f 92       	push	r3
    25ea:	4f 92       	push	r4
    25ec:	5f 92       	push	r5
    25ee:	6f 92       	push	r6
    25f0:	7f 92       	push	r7
    25f2:	8f 92       	push	r8
    25f4:	9f 92       	push	r9
    25f6:	af 92       	push	r10
    25f8:	bf 92       	push	r11
    25fa:	cf 92       	push	r12
    25fc:	df 92       	push	r13
    25fe:	ef 92       	push	r14
    2600:	ff 92       	push	r15
    2602:	0f 93       	push	r16
    2604:	1f 93       	push	r17
    2606:	cf 93       	push	r28
    2608:	df 93       	push	r29
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	c5 59       	subi	r28, 0x95	; 149
    2610:	d1 09       	sbc	r29, r1
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	f8 94       	cli
    2616:	de bf       	out	0x3e, r29	; 62
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	cd bf       	out	0x3d, r28	; 61
    261c:	3c 01       	movw	r6, r24
    261e:	64 e6       	ldi	r22, 0x64	; 100
    2620:	70 e0       	ldi	r23, 0x00	; 0
    2622:	0e 94 93 11 	call	0x2326	; 0x2326 <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj>
    2626:	6b 01       	movw	r12, r22
    2628:	7c 01       	movw	r14, r24
    262a:	ce 01       	movw	r24, r28
    262c:	85 5b       	subi	r24, 0xB5	; 181
    262e:	9f 4f       	sbci	r25, 0xFF	; 255
    2630:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN12CANFDMessageC1Ev>
    2634:	8e 01       	movw	r16, r28
    2636:	0f 5f       	subi	r16, 0xFF	; 255
    2638:	1f 4f       	sbci	r17, 0xFF	; 255
    263a:	8a e4       	ldi	r24, 0x4A	; 74
    263c:	f8 01       	movw	r30, r16
    263e:	11 92       	st	Z+, r1
    2640:	8a 95       	dec	r24
    2642:	e9 f7       	brne	.-6      	; 0x263e <_ZN10ACAN2517FD16receiveInterruptEv+0x58>
    2644:	fc ef       	ldi	r31, 0xFC	; 252
    2646:	df 1a       	sub	r13, r31
    2648:	8f e0       	ldi	r24, 0x0F	; 15
    264a:	d8 22       	and	r13, r24
    264c:	90 e3       	ldi	r25, 0x30	; 48
    264e:	d9 2a       	or	r13, r25
    2650:	d9 82       	std	Y+1, r13	; 0x01
    2652:	ca 82       	std	Y+2, r12	; 0x02
    2654:	c3 01       	movw	r24, r6
    2656:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN10ACAN2517FD8assertCSEv>
    265a:	6a e4       	ldi	r22, 0x4A	; 74
    265c:	70 e0       	ldi	r23, 0x00	; 0
    265e:	c8 01       	movw	r24, r16
    2660:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <_ZN8SPIClass8transferEPvj.part.6>
    2664:	62 e0       	ldi	r22, 0x02	; 2
    2666:	c8 01       	movw	r24, r16
    2668:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZL20u32FromBufferAtIndexPhh>
    266c:	2f 96       	adiw	r28, 0x0f	; 15
    266e:	6c af       	std	Y+60, r22	; 0x3c
    2670:	7d af       	std	Y+61, r23	; 0x3d
    2672:	8e af       	std	Y+62, r24	; 0x3e
    2674:	9f af       	std	Y+63, r25	; 0x3f
    2676:	2f 97       	sbiw	r28, 0x0f	; 15
    2678:	66 e0       	ldi	r22, 0x06	; 6
    267a:	c8 01       	movw	r24, r16
    267c:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZL20u32FromBufferAtIndexPhh>
    2680:	4b 01       	movw	r8, r22
    2682:	5c 01       	movw	r10, r24
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	8f 70       	andi	r24, 0x0F	; 15
    268a:	99 27       	eor	r25, r25
    268c:	aa 27       	eor	r26, r26
    268e:	bb 27       	eor	r27, r27
    2690:	fc 01       	movw	r30, r24
    2692:	eb 56       	subi	r30, 0x6B	; 107
    2694:	fd 4f       	sbci	r31, 0xFD	; 253
    2696:	c0 80       	ld	r12, Z
    2698:	63 96       	adiw	r28, 0x13	; 19
    269a:	cf ae       	std	Y+63, r12	; 0x3f
    269c:	63 97       	sbiw	r28, 0x13	; 19
    269e:	d1 2c       	mov	r13, r1
    26a0:	e3 e0       	ldi	r30, 0x03	; 3
    26a2:	ce 0e       	add	r12, r30
    26a4:	d1 1c       	adc	r13, r1
    26a6:	d5 94       	asr	r13
    26a8:	c7 94       	ror	r12
    26aa:	d5 94       	asr	r13
    26ac:	c7 94       	ror	r12
    26ae:	0d 2c       	mov	r0, r13
    26b0:	00 0c       	add	r0, r0
    26b2:	ee 08       	sbc	r14, r14
    26b4:	ff 08       	sbc	r15, r15
    26b6:	8b e4       	ldi	r24, 0x4B	; 75
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	8c 0f       	add	r24, r28
    26bc:	9d 1f       	adc	r25, r29
    26be:	08 96       	adiw	r24, 0x08	; 8
    26c0:	cc 56       	subi	r28, 0x6C	; 108
    26c2:	df 4f       	sbci	r29, 0xFF	; 255
    26c4:	99 83       	std	Y+1, r25	; 0x01
    26c6:	88 83       	st	Y, r24
    26c8:	c4 59       	subi	r28, 0x94	; 148
    26ca:	d0 40       	sbci	r29, 0x00	; 0
    26cc:	9a e0       	ldi	r25, 0x0A	; 10
    26ce:	cd 56       	subi	r28, 0x6D	; 109
    26d0:	df 4f       	sbci	r29, 0xFF	; 255
    26d2:	98 83       	st	Y, r25
    26d4:	c3 59       	subi	r28, 0x93	; 147
    26d6:	d0 40       	sbci	r29, 0x00	; 0
    26d8:	21 2c       	mov	r2, r1
    26da:	31 2c       	mov	r3, r1
    26dc:	21 01       	movw	r4, r2
    26de:	2c 14       	cp	r2, r12
    26e0:	3d 04       	cpc	r3, r13
    26e2:	4e 04       	cpc	r4, r14
    26e4:	5f 04       	cpc	r5, r15
    26e6:	48 f5       	brcc	.+82     	; 0x273a <_ZN10ACAN2517FD16receiveInterruptEv+0x154>
    26e8:	cd 56       	subi	r28, 0x6D	; 109
    26ea:	df 4f       	sbci	r29, 0xFF	; 255
    26ec:	68 81       	ld	r22, Y
    26ee:	c3 59       	subi	r28, 0x93	; 147
    26f0:	d0 40       	sbci	r29, 0x00	; 0
    26f2:	c8 01       	movw	r24, r16
    26f4:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZL20u32FromBufferAtIndexPhh>
    26f8:	cc 56       	subi	r28, 0x6C	; 108
    26fa:	df 4f       	sbci	r29, 0xFF	; 255
    26fc:	e8 81       	ld	r30, Y
    26fe:	f9 81       	ldd	r31, Y+1	; 0x01
    2700:	c4 59       	subi	r28, 0x94	; 148
    2702:	d0 40       	sbci	r29, 0x00	; 0
    2704:	61 93       	st	Z+, r22
    2706:	71 93       	st	Z+, r23
    2708:	81 93       	st	Z+, r24
    270a:	91 93       	st	Z+, r25
    270c:	cc 56       	subi	r28, 0x6C	; 108
    270e:	df 4f       	sbci	r29, 0xFF	; 255
    2710:	f9 83       	std	Y+1, r31	; 0x01
    2712:	e8 83       	st	Y, r30
    2714:	c4 59       	subi	r28, 0x94	; 148
    2716:	d0 40       	sbci	r29, 0x00	; 0
    2718:	ff ef       	ldi	r31, 0xFF	; 255
    271a:	2f 1a       	sub	r2, r31
    271c:	3f 0a       	sbc	r3, r31
    271e:	4f 0a       	sbc	r4, r31
    2720:	5f 0a       	sbc	r5, r31
    2722:	cd 56       	subi	r28, 0x6D	; 109
    2724:	df 4f       	sbci	r29, 0xFF	; 255
    2726:	88 81       	ld	r24, Y
    2728:	c3 59       	subi	r28, 0x93	; 147
    272a:	d0 40       	sbci	r29, 0x00	; 0
    272c:	8c 5f       	subi	r24, 0xFC	; 252
    272e:	cd 56       	subi	r28, 0x6D	; 109
    2730:	df 4f       	sbci	r29, 0xFF	; 255
    2732:	88 83       	st	Y, r24
    2734:	c3 59       	subi	r28, 0x93	; 147
    2736:	d0 40       	sbci	r29, 0x00	; 0
    2738:	d2 cf       	rjmp	.-92     	; 0x26de <_ZN10ACAN2517FD16receiveInterruptEv+0xf8>
    273a:	c3 01       	movw	r24, r6
    273c:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN10ACAN2517FD10deassertCSEv>
    2740:	41 e0       	ldi	r20, 0x01	; 1
    2742:	6d e5       	ldi	r22, 0x5D	; 93
    2744:	70 e0       	ldi	r23, 0x00	; 0
    2746:	c3 01       	movw	r24, r6
    2748:	0e 94 72 11 	call	0x22e4	; 0x22e4 <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    274c:	d5 01       	movw	r26, r10
    274e:	c4 01       	movw	r24, r8
    2750:	4b e0       	ldi	r20, 0x0B	; 11
    2752:	b6 95       	lsr	r27
    2754:	a7 95       	ror	r26
    2756:	97 95       	ror	r25
    2758:	87 95       	ror	r24
    275a:	4a 95       	dec	r20
    275c:	d1 f7       	brne	.-12     	; 0x2752 <_ZN10ACAN2517FD16receiveInterruptEv+0x16c>
    275e:	8f 71       	andi	r24, 0x1F	; 31
    2760:	62 96       	adiw	r28, 0x12	; 18
    2762:	8f af       	std	Y+63, r24	; 0x3f
    2764:	62 97       	sbiw	r28, 0x12	; 18
    2766:	85 fe       	sbrs	r8, 5
    2768:	04 c0       	rjmp	.+8      	; 0x2772 <_ZN10ACAN2517FD16receiveInterruptEv+0x18c>
    276a:	61 96       	adiw	r28, 0x11	; 17
    276c:	1f ae       	std	Y+63, r1	; 0x3f
    276e:	61 97       	sbiw	r28, 0x11	; 17
    2770:	0c c0       	rjmp	.+24     	; 0x278a <_ZN10ACAN2517FD16receiveInterruptEv+0x1a4>
    2772:	87 fc       	sbrc	r8, 7
    2774:	02 c0       	rjmp	.+4      	; 0x277a <_ZN10ACAN2517FD16receiveInterruptEv+0x194>
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	05 c0       	rjmp	.+10     	; 0x2784 <_ZN10ACAN2517FD16receiveInterruptEv+0x19e>
    277a:	86 fc       	sbrc	r8, 6
    277c:	02 c0       	rjmp	.+4      	; 0x2782 <_ZN10ACAN2517FD16receiveInterruptEv+0x19c>
    277e:	82 e0       	ldi	r24, 0x02	; 2
    2780:	01 c0       	rjmp	.+2      	; 0x2784 <_ZN10ACAN2517FD16receiveInterruptEv+0x19e>
    2782:	83 e0       	ldi	r24, 0x03	; 3
    2784:	61 96       	adiw	r28, 0x11	; 17
    2786:	8f af       	std	Y+63, r24	; 0x3f
    2788:	61 97       	sbiw	r28, 0x11	; 17
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	b5 01       	movw	r22, r10
    278e:	a4 01       	movw	r20, r8
    2790:	40 71       	andi	r20, 0x10	; 16
    2792:	55 27       	eor	r21, r21
    2794:	66 27       	eor	r22, r22
    2796:	77 27       	eor	r23, r23
    2798:	84 fe       	sbrs	r8, 4
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	60 96       	adiw	r28, 0x10	; 16
    279e:	8f af       	std	Y+63, r24	; 0x3f
    27a0:	60 97       	sbiw	r28, 0x10	; 16
    27a2:	45 2b       	or	r20, r21
    27a4:	46 2b       	or	r20, r22
    27a6:	47 2b       	or	r20, r23
    27a8:	29 f1       	breq	.+74     	; 0x27f4 <_ZN10ACAN2517FD16receiveInterruptEv+0x20e>
    27aa:	2f 96       	adiw	r28, 0x0f	; 15
    27ac:	8c ad       	ldd	r24, Y+60	; 0x3c
    27ae:	9d ad       	ldd	r25, Y+61	; 0x3d
    27b0:	ae ad       	ldd	r26, Y+62	; 0x3e
    27b2:	bf ad       	ldd	r27, Y+63	; 0x3f
    27b4:	2f 97       	sbiw	r28, 0x0f	; 15
    27b6:	ac 01       	movw	r20, r24
    27b8:	bd 01       	movw	r22, r26
    27ba:	2b e0       	ldi	r18, 0x0B	; 11
    27bc:	76 95       	lsr	r23
    27be:	67 95       	ror	r22
    27c0:	57 95       	ror	r21
    27c2:	47 95       	ror	r20
    27c4:	2a 95       	dec	r18
    27c6:	d1 f7       	brne	.-12     	; 0x27bc <_ZN10ACAN2517FD16receiveInterruptEv+0x1d6>
    27c8:	63 70       	andi	r22, 0x03	; 3
    27ca:	77 27       	eor	r23, r23
    27cc:	97 70       	andi	r25, 0x07	; 7
    27ce:	aa 27       	eor	r26, r26
    27d0:	bb 27       	eor	r27, r27
    27d2:	32 e1       	ldi	r19, 0x12	; 18
    27d4:	88 0f       	add	r24, r24
    27d6:	99 1f       	adc	r25, r25
    27d8:	aa 1f       	adc	r26, r26
    27da:	bb 1f       	adc	r27, r27
    27dc:	3a 95       	dec	r19
    27de:	d1 f7       	brne	.-12     	; 0x27d4 <_ZN10ACAN2517FD16receiveInterruptEv+0x1ee>
    27e0:	84 2b       	or	r24, r20
    27e2:	95 2b       	or	r25, r21
    27e4:	a6 2b       	or	r26, r22
    27e6:	b7 2b       	or	r27, r23
    27e8:	2f 96       	adiw	r28, 0x0f	; 15
    27ea:	8c af       	std	Y+60, r24	; 0x3c
    27ec:	9d af       	std	Y+61, r25	; 0x3d
    27ee:	ae af       	std	Y+62, r26	; 0x3e
    27f0:	bf af       	std	Y+63, r27	; 0x3f
    27f2:	2f 97       	sbiw	r28, 0x0f	; 15
    27f4:	f3 01       	movw	r30, r6
    27f6:	82 89       	ldd	r24, Z+18	; 0x12
    27f8:	93 89       	ldd	r25, Z+19	; 0x13
    27fa:	a4 89       	ldd	r26, Z+20	; 0x14
    27fc:	b5 89       	ldd	r27, Z+21	; 0x15
    27fe:	46 8d       	ldd	r20, Z+30	; 0x1e
    2800:	57 8d       	ldd	r21, Z+31	; 0x1f
    2802:	60 a1       	ldd	r22, Z+32	; 0x20
    2804:	71 a1       	ldd	r23, Z+33	; 0x21
    2806:	48 17       	cp	r20, r24
    2808:	59 07       	cpc	r21, r25
    280a:	6a 07       	cpc	r22, r26
    280c:	7b 07       	cpc	r23, r27
    280e:	40 f4       	brcc	.+16     	; 0x2820 <_ZN10ACAN2517FD16receiveInterruptEv+0x23a>
    2810:	be 01       	movw	r22, r28
    2812:	65 5b       	subi	r22, 0xB5	; 181
    2814:	7f 4f       	sbci	r23, 0xFF	; 255
    2816:	c3 01       	movw	r24, r6
    2818:	40 96       	adiw	r24, 0x10	; 16
    281a:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <_ZN12ACANFDBuffer6appendERK12CANFDMessage.part.2>
    281e:	08 c0       	rjmp	.+16     	; 0x2830 <_ZN10ACAN2517FD16receiveInterruptEv+0x24a>
    2820:	01 96       	adiw	r24, 0x01	; 1
    2822:	a1 1d       	adc	r26, r1
    2824:	b1 1d       	adc	r27, r1
    2826:	f3 01       	movw	r30, r6
    2828:	82 a3       	std	Z+34, r24	; 0x22
    282a:	93 a3       	std	Z+35, r25	; 0x23
    282c:	a4 a3       	std	Z+36, r26	; 0x24
    282e:	b5 a3       	std	Z+37, r27	; 0x25
    2830:	cb 56       	subi	r28, 0x6B	; 107
    2832:	df 4f       	sbci	r29, 0xFF	; 255
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	f8 94       	cli
    2838:	de bf       	out	0x3e, r29	; 62
    283a:	0f be       	out	0x3f, r0	; 63
    283c:	cd bf       	out	0x3d, r28	; 61
    283e:	df 91       	pop	r29
    2840:	cf 91       	pop	r28
    2842:	1f 91       	pop	r17
    2844:	0f 91       	pop	r16
    2846:	ff 90       	pop	r15
    2848:	ef 90       	pop	r14
    284a:	df 90       	pop	r13
    284c:	cf 90       	pop	r12
    284e:	bf 90       	pop	r11
    2850:	af 90       	pop	r10
    2852:	9f 90       	pop	r9
    2854:	8f 90       	pop	r8
    2856:	7f 90       	pop	r7
    2858:	6f 90       	pop	r6
    285a:	5f 90       	pop	r5
    285c:	4f 90       	pop	r4
    285e:	3f 90       	pop	r3
    2860:	2f 90       	pop	r2
    2862:	08 95       	ret

00002864 <_ZN10ACAN2517FD36readRegister16Assume_SPI_transactionEj>:
    2864:	0f 93       	push	r16
    2866:	1f 93       	push	r17
    2868:	cf 93       	push	r28
    286a:	df 93       	push	r29
    286c:	00 d0       	rcall	.+0      	; 0x286e <_ZN10ACAN2517FD36readRegister16Assume_SPI_transactionEj+0xa>
    286e:	00 d0       	rcall	.+0      	; 0x2870 <_ZN10ACAN2517FD36readRegister16Assume_SPI_transactionEj+0xc>
    2870:	cd b7       	in	r28, 0x3d	; 61
    2872:	de b7       	in	r29, 0x3e	; 62
    2874:	8c 01       	movw	r16, r24
    2876:	19 82       	std	Y+1, r1	; 0x01
    2878:	1a 82       	std	Y+2, r1	; 0x02
    287a:	1b 82       	std	Y+3, r1	; 0x03
    287c:	1c 82       	std	Y+4, r1	; 0x04
    287e:	7f 70       	andi	r23, 0x0F	; 15
    2880:	70 63       	ori	r23, 0x30	; 48
    2882:	79 83       	std	Y+1, r23	; 0x01
    2884:	6a 83       	std	Y+2, r22	; 0x02
    2886:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN10ACAN2517FD8assertCSEv>
    288a:	64 e0       	ldi	r22, 0x04	; 4
    288c:	70 e0       	ldi	r23, 0x00	; 0
    288e:	ce 01       	movw	r24, r28
    2890:	01 96       	adiw	r24, 0x01	; 1
    2892:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <_ZN8SPIClass8transferEPvj.part.6>
    2896:	c8 01       	movw	r24, r16
    2898:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN10ACAN2517FD10deassertCSEv>
    289c:	8b 81       	ldd	r24, Y+3	; 0x03
    289e:	9c 81       	ldd	r25, Y+4	; 0x04
    28a0:	0f 90       	pop	r0
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	0f 90       	pop	r0
    28a8:	df 91       	pop	r29
    28aa:	cf 91       	pop	r28
    28ac:	1f 91       	pop	r17
    28ae:	0f 91       	pop	r16
    28b0:	08 95       	ret

000028b2 <_ZN10ACAN2517FD8isr_coreEv>:
    28b2:	ef 92       	push	r14
    28b4:	ff 92       	push	r15
    28b6:	1f 93       	push	r17
    28b8:	cf 93       	push	r28
    28ba:	df 93       	push	r29
    28bc:	ec 01       	movw	r28, r24
    28be:	8a 81       	ldd	r24, Y+2	; 0x02
    28c0:	9b 81       	ldd	r25, Y+3	; 0x03
    28c2:	0e 94 63 10 	call	0x20c6	; 0x20c6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    28c6:	6c e1       	ldi	r22, 0x1C	; 28
    28c8:	70 e0       	ldi	r23, 0x00	; 0
    28ca:	ce 01       	movw	r24, r28
    28cc:	0e 94 32 14 	call	0x2864	; 0x2864 <_ZN10ACAN2517FD36readRegister16Assume_SPI_transactionEj>
    28d0:	7c 01       	movw	r14, r24
    28d2:	81 ff       	sbrs	r24, 1
    28d4:	05 c0       	rjmp	.+10     	; 0x28e0 <_ZN10ACAN2517FD8isr_coreEv+0x2e>
    28d6:	ce 01       	movw	r24, r28
    28d8:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_ZN10ACAN2517FD16receiveInterruptEv>
    28dc:	11 e0       	ldi	r17, 0x01	; 1
    28de:	01 c0       	rjmp	.+2      	; 0x28e2 <_ZN10ACAN2517FD8isr_coreEv+0x30>
    28e0:	10 e0       	ldi	r17, 0x00	; 0
    28e2:	f2 fe       	sbrs	r15, 2
    28e4:	07 c0       	rjmp	.+14     	; 0x28f4 <_ZN10ACAN2517FD8isr_coreEv+0x42>
    28e6:	4f ee       	ldi	r20, 0xEF	; 239
    28e8:	6c e6       	ldi	r22, 0x6C	; 108
    28ea:	70 e0       	ldi	r23, 0x00	; 0
    28ec:	ce 01       	movw	r24, r28
    28ee:	0e 94 72 11 	call	0x22e4	; 0x22e4 <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <_ZN10ACAN2517FD8isr_coreEv+0x46>
    28f4:	e0 fe       	sbrs	r14, 0
    28f6:	04 c0       	rjmp	.+8      	; 0x2900 <_ZN10ACAN2517FD8isr_coreEv+0x4e>
    28f8:	ce 01       	movw	r24, r28
    28fa:	0e 94 b6 12 	call	0x256c	; 0x256c <_ZN10ACAN2517FD17transmitInterruptEv>
    28fe:	11 e0       	ldi	r17, 0x01	; 1
    2900:	e2 fe       	sbrs	r14, 2
    2902:	07 c0       	rjmp	.+14     	; 0x2912 <_ZN10ACAN2517FD8isr_coreEv+0x60>
    2904:	4b ef       	ldi	r20, 0xFB	; 251
    2906:	6c e1       	ldi	r22, 0x1C	; 28
    2908:	70 e0       	ldi	r23, 0x00	; 0
    290a:	ce 01       	movw	r24, r28
    290c:	0e 94 72 11 	call	0x22e4	; 0x22e4 <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    2910:	11 e0       	ldi	r17, 0x01	; 1
    2912:	e3 fe       	sbrs	r14, 3
    2914:	07 c0       	rjmp	.+14     	; 0x2924 <_ZN10ACAN2517FD8isr_coreEv+0x72>
    2916:	47 ef       	ldi	r20, 0xF7	; 247
    2918:	6c e1       	ldi	r22, 0x1C	; 28
    291a:	70 e0       	ldi	r23, 0x00	; 0
    291c:	ce 01       	movw	r24, r28
    291e:	0e 94 72 11 	call	0x22e4	; 0x22e4 <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    2922:	11 e0       	ldi	r17, 0x01	; 1
    2924:	f4 fe       	sbrs	r15, 4
    2926:	07 c0       	rjmp	.+14     	; 0x2936 <_ZN10ACAN2517FD8isr_coreEv+0x84>
    2928:	4f ee       	ldi	r20, 0xEF	; 239
    292a:	6d e1       	ldi	r22, 0x1D	; 29
    292c:	70 e0       	ldi	r23, 0x00	; 0
    292e:	ce 01       	movw	r24, r28
    2930:	0e 94 72 11 	call	0x22e4	; 0x22e4 <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    2934:	11 e0       	ldi	r17, 0x01	; 1
    2936:	f3 fe       	sbrs	r15, 3
    2938:	0c c0       	rjmp	.+24     	; 0x2952 <_ZN10ACAN2517FD8isr_coreEv+0xa0>
    293a:	8f 85       	ldd	r24, Y+15	; 0x0f
    293c:	8f 3f       	cpi	r24, 0xFF	; 255
    293e:	11 f0       	breq	.+4      	; 0x2944 <_ZN10ACAN2517FD8isr_coreEv+0x92>
    2940:	8f 5f       	subi	r24, 0xFF	; 255
    2942:	8f 87       	std	Y+15, r24	; 0x0f
    2944:	47 ef       	ldi	r20, 0xF7	; 247
    2946:	60 e6       	ldi	r22, 0x60	; 96
    2948:	70 e0       	ldi	r23, 0x00	; 0
    294a:	ce 01       	movw	r24, r28
    294c:	0e 94 72 11 	call	0x22e4	; 0x22e4 <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    2950:	11 e0       	ldi	r17, 0x01	; 1
    2952:	0e 94 9a 10 	call	0x2134	; 0x2134 <_ZN8SPIClass14endTransactionEv>
    2956:	81 2f       	mov	r24, r17
    2958:	df 91       	pop	r29
    295a:	cf 91       	pop	r28
    295c:	1f 91       	pop	r17
    295e:	ff 90       	pop	r15
    2960:	ef 90       	pop	r14
    2962:	08 95       	ret

00002964 <_ZN10ACAN2517FD3isrEv>:
    2964:	cf 93       	push	r28
    2966:	df 93       	push	r29
    2968:	ec 01       	movw	r28, r24
    296a:	ce 01       	movw	r24, r28
    296c:	0e 94 59 14 	call	0x28b2	; 0x28b2 <_ZN10ACAN2517FD8isr_coreEv>
    2970:	81 11       	cpse	r24, r1
    2972:	fb cf       	rjmp	.-10     	; 0x296a <_ZN10ACAN2517FD3isrEv+0x6>
    2974:	df 91       	pop	r29
    2976:	cf 91       	pop	r28
    2978:	08 95       	ret

0000297a <_ZN10ACAN2517FD35readRegister8Assume_SPI_transactionEj>:
    297a:	0f 93       	push	r16
    297c:	1f 93       	push	r17
    297e:	cf 93       	push	r28
    2980:	df 93       	push	r29
    2982:	00 d0       	rcall	.+0      	; 0x2984 <_ZN10ACAN2517FD35readRegister8Assume_SPI_transactionEj+0xa>
    2984:	1f 92       	push	r1
    2986:	cd b7       	in	r28, 0x3d	; 61
    2988:	de b7       	in	r29, 0x3e	; 62
    298a:	8c 01       	movw	r16, r24
    298c:	19 82       	std	Y+1, r1	; 0x01
    298e:	1a 82       	std	Y+2, r1	; 0x02
    2990:	1b 82       	std	Y+3, r1	; 0x03
    2992:	7f 70       	andi	r23, 0x0F	; 15
    2994:	70 63       	ori	r23, 0x30	; 48
    2996:	79 83       	std	Y+1, r23	; 0x01
    2998:	6a 83       	std	Y+2, r22	; 0x02
    299a:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN10ACAN2517FD8assertCSEv>
    299e:	63 e0       	ldi	r22, 0x03	; 3
    29a0:	70 e0       	ldi	r23, 0x00	; 0
    29a2:	ce 01       	movw	r24, r28
    29a4:	01 96       	adiw	r24, 0x01	; 1
    29a6:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <_ZN8SPIClass8transferEPvj.part.6>
    29aa:	c8 01       	movw	r24, r16
    29ac:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN10ACAN2517FD10deassertCSEv>
    29b0:	8b 81       	ldd	r24, Y+3	; 0x03
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
    29b6:	0f 90       	pop	r0
    29b8:	df 91       	pop	r29
    29ba:	cf 91       	pop	r28
    29bc:	1f 91       	pop	r17
    29be:	0f 91       	pop	r16
    29c0:	08 95       	ret

000029c2 <_ZN10ACAN2517FD14writeRegister8Ejh>:
    29c2:	ff 92       	push	r15
    29c4:	0f 93       	push	r16
    29c6:	1f 93       	push	r17
    29c8:	cf 93       	push	r28
    29ca:	df 93       	push	r29
    29cc:	ec 01       	movw	r28, r24
    29ce:	8b 01       	movw	r16, r22
    29d0:	f4 2e       	mov	r15, r20
    29d2:	8a 81       	ldd	r24, Y+2	; 0x02
    29d4:	9b 81       	ldd	r25, Y+3	; 0x03
    29d6:	0e 94 63 10 	call	0x20c6	; 0x20c6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    29da:	f8 94       	cli
    29dc:	4f 2d       	mov	r20, r15
    29de:	b8 01       	movw	r22, r16
    29e0:	ce 01       	movw	r24, r28
    29e2:	0e 94 72 11 	call	0x22e4	; 0x22e4 <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    29e6:	78 94       	sei
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	1f 91       	pop	r17
    29ee:	0f 91       	pop	r16
    29f0:	ff 90       	pop	r15
    29f2:	0c 94 9a 10 	jmp	0x2134	; 0x2134 <_ZN8SPIClass14endTransactionEv>

000029f6 <_ZN10ACAN2517FD13readRegister8Ej>:
    29f6:	0f 93       	push	r16
    29f8:	1f 93       	push	r17
    29fa:	cf 93       	push	r28
    29fc:	df 93       	push	r29
    29fe:	ec 01       	movw	r28, r24
    2a00:	8b 01       	movw	r16, r22
    2a02:	8a 81       	ldd	r24, Y+2	; 0x02
    2a04:	9b 81       	ldd	r25, Y+3	; 0x03
    2a06:	0e 94 63 10 	call	0x20c6	; 0x20c6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2a0a:	f8 94       	cli
    2a0c:	b8 01       	movw	r22, r16
    2a0e:	ce 01       	movw	r24, r28
    2a10:	0e 94 bd 14 	call	0x297a	; 0x297a <_ZN10ACAN2517FD35readRegister8Assume_SPI_transactionEj>
    2a14:	c8 2f       	mov	r28, r24
    2a16:	78 94       	sei
    2a18:	0e 94 9a 10 	call	0x2134	; 0x2134 <_ZN8SPIClass14endTransactionEv>
    2a1c:	8c 2f       	mov	r24, r28
    2a1e:	df 91       	pop	r29
    2a20:	cf 91       	pop	r28
    2a22:	1f 91       	pop	r17
    2a24:	0f 91       	pop	r16
    2a26:	08 95       	ret

00002a28 <_ZN10ACAN2517FD15writeRegister32Ejm>:
    2a28:	cf 92       	push	r12
    2a2a:	df 92       	push	r13
    2a2c:	ef 92       	push	r14
    2a2e:	ff 92       	push	r15
    2a30:	0f 93       	push	r16
    2a32:	1f 93       	push	r17
    2a34:	cf 93       	push	r28
    2a36:	df 93       	push	r29
    2a38:	ec 01       	movw	r28, r24
    2a3a:	8b 01       	movw	r16, r22
    2a3c:	69 01       	movw	r12, r18
    2a3e:	7a 01       	movw	r14, r20
    2a40:	8a 81       	ldd	r24, Y+2	; 0x02
    2a42:	9b 81       	ldd	r25, Y+3	; 0x03
    2a44:	0e 94 63 10 	call	0x20c6	; 0x20c6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2a48:	f8 94       	cli
    2a4a:	a7 01       	movw	r20, r14
    2a4c:	96 01       	movw	r18, r12
    2a4e:	b8 01       	movw	r22, r16
    2a50:	ce 01       	movw	r24, r28
    2a52:	0e 94 3a 11 	call	0x2274	; 0x2274 <_ZN10ACAN2517FD37writeRegister32Assume_SPI_transactionEjm>
    2a56:	78 94       	sei
    2a58:	df 91       	pop	r29
    2a5a:	cf 91       	pop	r28
    2a5c:	1f 91       	pop	r17
    2a5e:	0f 91       	pop	r16
    2a60:	ff 90       	pop	r15
    2a62:	ef 90       	pop	r14
    2a64:	df 90       	pop	r13
    2a66:	cf 90       	pop	r12
    2a68:	0c 94 9a 10 	jmp	0x2134	; 0x2134 <_ZN8SPIClass14endTransactionEv>

00002a6c <_ZN10ACAN2517FD14readRegister32Ej>:
    2a6c:	cf 92       	push	r12
    2a6e:	df 92       	push	r13
    2a70:	ef 92       	push	r14
    2a72:	ff 92       	push	r15
    2a74:	cf 93       	push	r28
    2a76:	df 93       	push	r29
    2a78:	ec 01       	movw	r28, r24
    2a7a:	7b 01       	movw	r14, r22
    2a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a80:	0e 94 63 10 	call	0x20c6	; 0x20c6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2a84:	f8 94       	cli
    2a86:	b7 01       	movw	r22, r14
    2a88:	ce 01       	movw	r24, r28
    2a8a:	0e 94 93 11 	call	0x2326	; 0x2326 <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj>
    2a8e:	6b 01       	movw	r12, r22
    2a90:	7c 01       	movw	r14, r24
    2a92:	78 94       	sei
    2a94:	0e 94 9a 10 	call	0x2134	; 0x2134 <_ZN8SPIClass14endTransactionEv>
    2a98:	c7 01       	movw	r24, r14
    2a9a:	b6 01       	movw	r22, r12
    2a9c:	df 91       	pop	r29
    2a9e:	cf 91       	pop	r28
    2aa0:	ff 90       	pop	r15
    2aa2:	ef 90       	pop	r14
    2aa4:	df 90       	pop	r13
    2aa6:	cf 90       	pop	r12
    2aa8:	08 95       	ret

00002aaa <_ZN10ACAN2517FD11reset2517FDEv>:

//----------------------------------------------------------------------------------------------------------------------

void ACAN2517FD::reset2517FD (void) {
    2aaa:	cf 93       	push	r28
    2aac:	df 93       	push	r29
    2aae:	ec 01       	movw	r28, r24
  mSPI.beginTransaction (mSPISettings) ; // Check RESET is performed with 1 MHz clock
    2ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab4:	0e 94 63 10 	call	0x20c6	; 0x20c6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    #ifdef ARDUINO_ARCH_ESP32
      taskDISABLE_INTERRUPTS () ;
    #else
      noInterrupts () ;
    2ab8:	f8 94       	cli
    #endif
      assertCS () ;
    2aba:	ce 01       	movw	r24, r28
    2abc:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN10ACAN2517FD8assertCSEv>
        mSPI.transfer16 (0x00) ; // Reset instruction: 0x0000
    2ac0:	80 e0       	ldi	r24, 0x00	; 0
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	0e 94 7d 10 	call	0x20fa	; 0x20fa <_ZN8SPIClass10transfer16Ej>
      deassertCS () ;
    2ac8:	ce 01       	movw	r24, r28
    2aca:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN10ACAN2517FD10deassertCSEv>
    #ifdef ARDUINO_ARCH_ESP32
      taskENABLE_INTERRUPTS () ;
    #else
      interrupts () ;
    2ace:	78 94       	sei
    #endif
  mSPI.endTransaction () ;
}
    2ad0:	df 91       	pop	r29
    2ad2:	cf 91       	pop	r28
    #ifdef ARDUINO_ARCH_ESP32
      taskENABLE_INTERRUPTS () ;
    #else
      interrupts () ;
    #endif
  mSPI.endTransaction () ;
    2ad4:	0c 94 9a 10 	jmp	0x2134	; 0x2134 <_ZN8SPIClass14endTransactionEv>

00002ad8 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters>:

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FD::begin (const ACAN2517FDSettings & inSettings,
                            void (* inInterruptServiceRoutine) (void),
                            const ACAN2517FDFilters & inFilters) {
    2ad8:	2f 92       	push	r2
    2ada:	3f 92       	push	r3
    2adc:	4f 92       	push	r4
    2ade:	5f 92       	push	r5
    2ae0:	6f 92       	push	r6
    2ae2:	7f 92       	push	r7
    2ae4:	8f 92       	push	r8
    2ae6:	9f 92       	push	r9
    2ae8:	af 92       	push	r10
    2aea:	bf 92       	push	r11
    2aec:	cf 92       	push	r12
    2aee:	df 92       	push	r13
    2af0:	ef 92       	push	r14
    2af2:	ff 92       	push	r15
    2af4:	0f 93       	push	r16
    2af6:	1f 93       	push	r17
    2af8:	cf 93       	push	r28
    2afa:	df 93       	push	r29
    2afc:	00 d0       	rcall	.+0      	; 0x2afe <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x26>
    2afe:	1f 92       	push	r1
    2b00:	cd b7       	in	r28, 0x3d	; 61
    2b02:	de b7       	in	r29, 0x3e	; 62
    2b04:	9b 83       	std	Y+3, r25	; 0x03
    2b06:	8a 83       	std	Y+2, r24	; 0x02
    2b08:	8b 01       	movw	r16, r22
    2b0a:	1a 01       	movw	r2, r20
    2b0c:	69 01       	movw	r12, r18
  uint32_t errorCode = 0 ; // Means no error
//----------------------------------- If ok, check if settings are correct
  if (!inSettings.mArbitrationBitRateClosedToDesiredRate) {
    2b0e:	fb 01       	movw	r30, r22
    2b10:	83 89       	ldd	r24, Z+19	; 0x13
    2b12:	81 11       	cpse	r24, r1
    2b14:	06 c0       	rjmp	.+12     	; 0x2b22 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x4a>
    errorCode |= kTooFarFromDesiredBitRate ;
    2b16:	44 e0       	ldi	r20, 0x04	; 4
    2b18:	84 2e       	mov	r8, r20
    2b1a:	91 2c       	mov	r9, r1
    2b1c:	a1 2c       	mov	r10, r1
    2b1e:	b1 2c       	mov	r11, r1
    2b20:	03 c0       	rjmp	.+6      	; 0x2b28 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x50>
//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FD::begin (const ACAN2517FDSettings & inSettings,
                            void (* inInterruptServiceRoutine) (void),
                            const ACAN2517FDFilters & inFilters) {
  uint32_t errorCode = 0 ; // Means no error
    2b22:	81 2c       	mov	r8, r1
    2b24:	91 2c       	mov	r9, r1
    2b26:	54 01       	movw	r10, r8
//----------------------------------- If ok, check if settings are correct
  if (!inSettings.mArbitrationBitRateClosedToDesiredRate) {
    errorCode |= kTooFarFromDesiredBitRate ;
  }
  if (inSettings.CANBitSettingConsistency () != 0) {
    2b28:	c8 01       	movw	r24, r16
    2b2a:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv>
    2b2e:	67 2b       	or	r22, r23
    2b30:	68 2b       	or	r22, r24
    2b32:	69 2b       	or	r22, r25
    2b34:	11 f0       	breq	.+4      	; 0x2b3a <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x62>
    errorCode |= kInconsistentBitRateSettings ;
    2b36:	68 94       	set
    2b38:	83 f8       	bld	r8, 3
  }
//----------------------------------- Check mINT has interrupt capability
  const int8_t itPin = digitalPinToInterrupt (mINT) ;
    2b3a:	ea 81       	ldd	r30, Y+2	; 0x02
    2b3c:	fb 81       	ldd	r31, Y+3	; 0x03
    2b3e:	87 81       	ldd	r24, Z+7	; 0x07
    2b40:	82 30       	cpi	r24, 0x02	; 2
    2b42:	29 f0       	breq	.+10     	; 0x2b4e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x76>
    2b44:	83 30       	cpi	r24, 0x03	; 3
    2b46:	29 f4       	brne	.+10     	; 0x2b52 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x7a>
    2b48:	f1 e0       	ldi	r31, 0x01	; 1
    2b4a:	f9 83       	std	Y+1, r31	; 0x01
    2b4c:	74 c3       	rjmp	.+1768   	; 0x3236 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x75e>
    2b4e:	19 82       	std	Y+1, r1	; 0x01
    2b50:	72 c3       	rjmp	.+1764   	; 0x3236 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x75e>
  if ((mINT != 255) && (itPin == NOT_AN_INTERRUPT)) {
    2b52:	8f 3f       	cpi	r24, 0xFF	; 255
    2b54:	09 f0       	breq	.+2      	; 0x2b58 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x80>
    2b56:	68 c3       	rjmp	.+1744   	; 0x3228 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x750>
//----------------------------------- Check interrupt service routine is not null
  if ((mINT != 255) && (inInterruptServiceRoutine == NULL)) {
    errorCode |= kISRIsNull ;
  }
//----------------------------------- Check consistency between ISR and INT pin
  if ((mINT == 255) && (inInterruptServiceRoutine != NULL)) {
    2b58:	21 14       	cp	r2, r1
    2b5a:	31 04       	cpc	r3, r1
    2b5c:	09 f4       	brne	.+2      	; 0x2b60 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x88>
    2b5e:	61 c3       	rjmp	.+1730   	; 0x3222 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x74a>
    errorCode |= kISRNotNullAndNoIntPin ;
    2b60:	68 94       	set
    2b62:	a3 f8       	bld	r10, 3
    2b64:	2f ef       	ldi	r18, 0xFF	; 255
    2b66:	29 83       	std	Y+1, r18	; 0x01
  }
//----------------------------------- Check TXQ size is <= 32
  if (inSettings.mControllerTXQSize > 32) {
    2b68:	f8 01       	movw	r30, r16
    2b6a:	80 a1       	ldd	r24, Z+32	; 0x20
    2b6c:	81 32       	cpi	r24, 0x21	; 33
    2b6e:	10 f0       	brcs	.+4      	; 0x2b74 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x9c>
    errorCode |= kControllerTXQSizeGreaterThan32 ;
    2b70:	68 94       	set
    2b72:	97 f8       	bld	r9, 7
  }
//----------------------------------- Check TXQ priority is <= 31
  if (inSettings.mControllerTXQBufferPriority > 31) {
    2b74:	f8 01       	movw	r30, r16
    2b76:	82 a1       	ldd	r24, Z+34	; 0x22
    2b78:	80 32       	cpi	r24, 0x20	; 32
    2b7a:	10 f0       	brcs	.+4      	; 0x2b80 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xa8>
    errorCode |= kControllerTXQPriorityGreaterThan31 ;
    2b7c:	68 94       	set
    2b7e:	95 f8       	bld	r9, 5
  }
//----------------------------------- Check controller receive FIFO size is 1 ... 32
  if (inSettings.mControllerReceiveFIFOSize == 0) {
    2b80:	f8 01       	movw	r30, r16
    2b82:	87 a1       	ldd	r24, Z+39	; 0x27
    2b84:	81 11       	cpse	r24, r1
    2b86:	03 c0       	rjmp	.+6      	; 0x2b8e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xb6>
    errorCode |= kControllerReceiveFIFOSizeIsZero ;
    2b88:	68 94       	set
    2b8a:	90 f8       	bld	r9, 0
    2b8c:	04 c0       	rjmp	.+8      	; 0x2b96 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xbe>
  }else if (inSettings.mControllerReceiveFIFOSize > 32) {
    2b8e:	81 32       	cpi	r24, 0x21	; 33
    2b90:	10 f0       	brcs	.+4      	; 0x2b96 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xbe>
    errorCode |= kControllerReceiveFIFOSizeGreaterThan32 ;
    2b92:	68 94       	set
    2b94:	91 f8       	bld	r9, 1
  }
//----------------------------------- Check controller transmit FIFO size is 1 ... 32
  if (inSettings.mControllerTransmitFIFOSize == 0) {
    2b96:	f8 01       	movw	r30, r16
    2b98:	84 8d       	ldd	r24, Z+28	; 0x1c
    2b9a:	81 11       	cpse	r24, r1
    2b9c:	03 c0       	rjmp	.+6      	; 0x2ba4 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xcc>
    errorCode |= kControllerTransmitFIFOSizeIsZero ;
    2b9e:	68 94       	set
    2ba0:	92 f8       	bld	r9, 2
    2ba2:	04 c0       	rjmp	.+8      	; 0x2bac <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xd4>
  }else if (inSettings.mControllerTransmitFIFOSize > 32) {
    2ba4:	81 32       	cpi	r24, 0x21	; 33
    2ba6:	10 f0       	brcs	.+4      	; 0x2bac <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xd4>
    errorCode |= kControllerTransmitFIFOSizeGreaterThan32 ;
    2ba8:	68 94       	set
    2baa:	93 f8       	bld	r9, 3
  }
//----------------------------------- Check Transmit FIFO priority is <= 31
  if (inSettings.mControllerTransmitFIFOPriority > 31) {
    2bac:	f8 01       	movw	r30, r16
    2bae:	86 8d       	ldd	r24, Z+30	; 0x1e
    2bb0:	80 32       	cpi	r24, 0x20	; 32
    2bb2:	10 f0       	brcs	.+4      	; 0x2bb8 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xe0>
    errorCode |= kControllerTransmitFIFOPriorityGreaterThan31 ;
    2bb4:	68 94       	set
    2bb6:	96 f8       	bld	r9, 6
  }
//----------------------------------- Check MCP2517FD controller RAM usage is <= 2048 bytes
  if (inSettings.ramUsage () > 2048) {
    2bb8:	c8 01       	movw	r24, r16
    2bba:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <_ZNK18ACAN2517FDSettings8ramUsageEv>
    2bbe:	61 30       	cpi	r22, 0x01	; 1
    2bc0:	78 40       	sbci	r23, 0x08	; 8
    2bc2:	81 05       	cpc	r24, r1
    2bc4:	91 05       	cpc	r25, r1
    2bc6:	10 f0       	brcs	.+4      	; 0x2bcc <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xf4>
    errorCode |= kControllerRamUsageGreaterThan2048 ;
    2bc8:	68 94       	set
    2bca:	94 f8       	bld	r9, 4
  }
//----------------------------------- Check Filter definition
  if (inFilters.filterCount () > 32) {
    2bcc:	f6 01       	movw	r30, r12
    2bce:	80 81       	ld	r24, Z
    2bd0:	81 32       	cpi	r24, 0x21	; 33
    2bd2:	10 f0       	brcs	.+4      	; 0x2bd8 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x100>
    errorCode |= kMoreThan32Filters ;
    2bd4:	68 94       	set
    2bd6:	87 f8       	bld	r8, 7
  }
  if (inFilters.filterStatus () != ACAN2517FDFilters::kFiltersOk) {
    2bd8:	f6 01       	movw	r30, r12
    2bda:	85 81       	ldd	r24, Z+5	; 0x05
    2bdc:	88 23       	and	r24, r24
    2bde:	11 f0       	breq	.+4      	; 0x2be4 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x10c>
    errorCode |= kFilterDefinitionError ;
    2be0:	68 94       	set
    2be2:	86 f8       	bld	r8, 6
  }
//----------------------------------- Check TDCO value
  if ((inSettings.mTDCO > 63) || (inSettings.mTDCO < -64)) {
    2be4:	f8 01       	movw	r30, r16
    2be6:	84 89       	ldd	r24, Z+20	; 0x14
    2be8:	80 5c       	subi	r24, 0xC0	; 192
    2bea:	87 ff       	sbrs	r24, 7
    2bec:	03 c0       	rjmp	.+6      	; 0x2bf4 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x11c>
    errorCode |= kInvalidTDCO ;
    2bee:	68 94       	set
    2bf0:	a4 f8       	bld	r10, 4
    2bf2:	bc c0       	rjmp	.+376    	; 0x2d6c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x294>
  }
//----------------------------------- INT, CS pins, reset MCP2517FD
  if (errorCode == 0) {
    2bf4:	81 14       	cp	r8, r1
    2bf6:	91 04       	cpc	r9, r1
    2bf8:	a1 04       	cpc	r10, r1
    2bfa:	b1 04       	cpc	r11, r1
    2bfc:	09 f0       	breq	.+2      	; 0x2c00 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x128>
    2bfe:	b6 c0       	rjmp	.+364    	; 0x2d6c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x294>
    if (mINT != 255) { // 255 means interrupt is not used (thanks to Tyler Lewis)
    2c00:	ea 81       	ldd	r30, Y+2	; 0x02
    2c02:	fb 81       	ldd	r31, Y+3	; 0x03
    2c04:	87 81       	ldd	r24, Z+7	; 0x07
    2c06:	8f 3f       	cpi	r24, 0xFF	; 255
    2c08:	19 f0       	breq	.+6      	; 0x2c10 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x138>
      pinMode (mINT, INPUT_PULLUP) ;
    2c0a:	62 e0       	ldi	r22, 0x02	; 2
    2c0c:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <pinMode>
    }
    deassertCS () ;
    2c10:	8a 81       	ldd	r24, Y+2	; 0x02
    2c12:	9b 81       	ldd	r25, Y+3	; 0x03
    2c14:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN10ACAN2517FD10deassertCSEv>
    pinMode (mCS, OUTPUT) ;
    2c18:	61 e0       	ldi	r22, 0x01	; 1
    2c1a:	ea 81       	ldd	r30, Y+2	; 0x02
    2c1c:	fb 81       	ldd	r31, Y+3	; 0x03
    2c1e:	86 81       	ldd	r24, Z+6	; 0x06
    2c20:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <pinMode>
  //----------------------------------- Set SPI clock to 1 MHz
    mSPISettings = SPISettings (1000UL * 1000, MSBFIRST, SPI_MODE0) ;
    2c24:	81 e5       	ldi	r24, 0x51	; 81
    2c26:	ea 81       	ldd	r30, Y+2	; 0x02
    2c28:	fb 81       	ldd	r31, Y+3	; 0x03
    2c2a:	82 83       	std	Z+2, r24	; 0x02
    2c2c:	13 82       	std	Z+3, r1	; 0x03
  //----------------------------------- Request configuration mode
    bool wait = true ;
    const uint32_t deadline = millis () + 2 ; // Wait (2 ms max) until the configuration mode is reached
    2c2e:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <millis>
    2c32:	2b 01       	movw	r4, r22
    2c34:	3c 01       	movw	r6, r24
    2c36:	f2 e0       	ldi	r31, 0x02	; 2
    2c38:	4f 0e       	add	r4, r31
    2c3a:	51 1c       	adc	r5, r1
    2c3c:	61 1c       	adc	r6, r1
    2c3e:	71 1c       	adc	r7, r1
    while (wait) {
      writeRegister8 (CON_REGISTER + 3, 0x04 | (1 << 3)) ; // Request configuration mode, abort all transmissions
    2c40:	4c e0       	ldi	r20, 0x0C	; 12
    2c42:	63 e0       	ldi	r22, 0x03	; 3
    2c44:	70 e0       	ldi	r23, 0x00	; 0
    2c46:	8a 81       	ldd	r24, Y+2	; 0x02
    2c48:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4a:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN10ACAN2517FD14writeRegister8Ejh>
      const uint8_t actualMode = (readRegister8 (CON_REGISTER + 2) >> 5) & 0x07 ;
    2c4e:	62 e0       	ldi	r22, 0x02	; 2
    2c50:	70 e0       	ldi	r23, 0x00	; 0
    2c52:	8a 81       	ldd	r24, Y+2	; 0x02
    2c54:	9b 81       	ldd	r25, Y+3	; 0x03
    2c56:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <_ZN10ACAN2517FD13readRegister8Ej>
      wait = actualMode != 0x04 ;
      if (wait && (millis () >= deadline)) {
    2c5a:	82 95       	swap	r24
    2c5c:	86 95       	lsr	r24
    2c5e:	87 70       	andi	r24, 0x07	; 7
    2c60:	84 30       	cpi	r24, 0x04	; 4
    2c62:	59 f0       	breq	.+22     	; 0x2c7a <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x1a2>
    2c64:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <millis>
    2c68:	64 15       	cp	r22, r4
    2c6a:	75 05       	cpc	r23, r5
    2c6c:	86 05       	cpc	r24, r6
    2c6e:	97 05       	cpc	r25, r7
    2c70:	38 f3       	brcs	.-50     	; 0x2c40 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x168>
        errorCode |= kRequestedConfigurationModeTimeOut ;
    2c72:	81 2c       	mov	r8, r1
    2c74:	91 2c       	mov	r9, r1
    2c76:	54 01       	movw	r10, r8
    2c78:	83 94       	inc	r8
        wait = false ;
      }
    }
  //----------------------------------- Reset MCP2517FD (always use a 1 MHz clock)
    reset2517FD () ;
    2c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c7e:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <_ZN10ACAN2517FD11reset2517FDEv>
    2c82:	90 e2       	ldi	r25, 0x20	; 32
    2c84:	e9 2e       	mov	r14, r25
    2c86:	f1 2c       	mov	r15, r1
    2c88:	41 2c       	mov	r4, r1
    2c8a:	51 2c       	mov	r5, r1
    2c8c:	32 01       	movw	r6, r4
    2c8e:	43 94       	inc	r4
  }
//----------------------------------- Check SPI connection is on (with a 1 MHz clock)
// We write and the read back MCP2517FD RAM at address 0x400
  for (uint32_t i=1 ; (i != 0) && (errorCode == 0) ; i <<= 1) {
    2c90:	81 14       	cp	r8, r1
    2c92:	91 04       	cpc	r9, r1
    2c94:	a1 04       	cpc	r10, r1
    2c96:	b1 04       	cpc	r11, r1
    2c98:	09 f0       	breq	.+2      	; 0x2c9c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x1c4>
    2c9a:	68 c0       	rjmp	.+208    	; 0x2d6c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x294>
    const uint16_t RAM_WORD_ADDRESS = 0x400 ;
    writeRegister32 (RAM_WORD_ADDRESS, i) ;
    2c9c:	a3 01       	movw	r20, r6
    2c9e:	92 01       	movw	r18, r4
    2ca0:	60 e0       	ldi	r22, 0x00	; 0
    2ca2:	74 e0       	ldi	r23, 0x04	; 4
    2ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca8:	0e 94 14 15 	call	0x2a28	; 0x2a28 <_ZN10ACAN2517FD15writeRegister32Ejm>
    const uint32_t readBackValue = readRegister32 (RAM_WORD_ADDRESS) ;
    2cac:	60 e0       	ldi	r22, 0x00	; 0
    2cae:	74 e0       	ldi	r23, 0x04	; 4
    2cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb4:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <_ZN10ACAN2517FD14readRegister32Ej>
    if (readBackValue != i) {
    2cb8:	64 15       	cp	r22, r4
    2cba:	75 05       	cpc	r23, r5
    2cbc:	86 05       	cpc	r24, r6
    2cbe:	97 05       	cpc	r25, r7
    2cc0:	29 f0       	breq	.+10     	; 0x2ccc <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x1f4>
      errorCode = kReadBackErrorWith1MHzSPIClock ;
    2cc2:	82 e0       	ldi	r24, 0x02	; 2
    2cc4:	88 2e       	mov	r8, r24
    2cc6:	91 2c       	mov	r9, r1
    2cc8:	a1 2c       	mov	r10, r1
    2cca:	b1 2c       	mov	r11, r1
  //----------------------------------- Reset MCP2517FD (always use a 1 MHz clock)
    reset2517FD () ;
  }
//----------------------------------- Check SPI connection is on (with a 1 MHz clock)
// We write and the read back MCP2517FD RAM at address 0x400
  for (uint32_t i=1 ; (i != 0) && (errorCode == 0) ; i <<= 1) {
    2ccc:	44 0c       	add	r4, r4
    2cce:	55 1c       	adc	r5, r5
    2cd0:	66 1c       	adc	r6, r6
    2cd2:	77 1c       	adc	r7, r7
    2cd4:	21 e0       	ldi	r18, 0x01	; 1
    2cd6:	e2 1a       	sub	r14, r18
    2cd8:	f1 08       	sbc	r15, r1
    2cda:	d1 f6       	brne	.-76     	; 0x2c90 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x1b8>
  }
//----------------------------------- Now, set internal clock with OSC register
//     Bit 0: (rw) 1 --> 10xPLL
//     Bit 4: (rw) 0 --> SCLK is divided by 1, 1 --> SCLK is divided by 2
//     Bits 5-6: Clock Output Divisor
  if (errorCode == 0) {
    2cdc:	81 14       	cp	r8, r1
    2cde:	91 04       	cpc	r9, r1
    2ce0:	a1 04       	cpc	r10, r1
    2ce2:	b1 04       	cpc	r11, r1
    2ce4:	09 f0       	breq	.+2      	; 0x2ce8 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x210>
    2ce6:	42 c0       	rjmp	.+132    	; 0x2d6c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x294>
    2ce8:	f8 01       	movw	r30, r16
    2cea:	80 81       	ld	r24, Z
    2cec:	81 50       	subi	r24, 0x01	; 1
    2cee:	87 30       	cpi	r24, 0x07	; 7
    2cf0:	50 f4       	brcc	.+20     	; 0x2d06 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x22e>
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	fc 01       	movw	r30, r24
    2cf6:	e2 57       	subi	r30, 0x72	; 114
    2cf8:	fd 4f       	sbci	r31, 0xFD	; 253
    2cfa:	f0 80       	ld	r15, Z
    2cfc:	fc 01       	movw	r30, r24
    2cfe:	e9 57       	subi	r30, 0x79	; 121
    2d00:	fd 4f       	sbci	r31, 0xFD	; 253
    2d02:	40 81       	ld	r20, Z
    2d04:	02 c0       	rjmp	.+4      	; 0x2d0a <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x232>
    2d06:	40 e0       	ldi	r20, 0x00	; 0
    2d08:	f1 2c       	mov	r15, r1
      break ;
    case ACAN2517FDSettings::OSC_4MHz10xPLL :
      pll = 1 ; // Enable 10x PLL
      break ;
    }
    osc |= pll ;
    2d0a:	4f 29       	or	r20, r15
    if (inSettings.mCLKOPin != ACAN2517FDSettings::SOF) {
    2d0c:	f8 01       	movw	r30, r16
    2d0e:	80 8d       	ldd	r24, Z+24	; 0x18
    2d10:	84 30       	cpi	r24, 0x04	; 4
    2d12:	29 f0       	breq	.+10     	; 0x2d1e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x246>
      osc |= ((uint8_t) inSettings.mCLKOPin) << 5 ;
    2d14:	f0 e2       	ldi	r31, 0x20	; 32
    2d16:	8f 9f       	mul	r24, r31
    2d18:	c0 01       	movw	r24, r0
    2d1a:	11 24       	eor	r1, r1
    2d1c:	48 2b       	or	r20, r24
    }
    writeRegister8 (OSC_REGISTER, osc) ; // DS20005688B, page 16
    2d1e:	60 e0       	ldi	r22, 0x00	; 0
    2d20:	7e e0       	ldi	r23, 0x0E	; 14
    2d22:	8a 81       	ldd	r24, Y+2	; 0x02
    2d24:	9b 81       	ldd	r25, Y+3	; 0x03
    2d26:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN10ACAN2517FD14writeRegister8Ejh>
  //--- Wait for PLL is ready (wait max 2 ms)
    if (pll != 0) {
    2d2a:	ff 20       	and	r15, r15
    2d2c:	f9 f0       	breq	.+62     	; 0x2d6c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x294>
      bool wait = true ;
      const uint32_t deadline = millis () + 2 ;
    2d2e:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <millis>
    2d32:	2b 01       	movw	r4, r22
    2d34:	3c 01       	movw	r6, r24
    2d36:	22 e0       	ldi	r18, 0x02	; 2
    2d38:	42 0e       	add	r4, r18
    2d3a:	51 1c       	adc	r5, r1
    2d3c:	61 1c       	adc	r6, r1
    2d3e:	71 1c       	adc	r7, r1
      while (wait) {
        wait = (readRegister8 (OSC_REGISTER + 1) & 0x1) == 0 ;  // DS20005688B, page 16
    2d40:	61 e0       	ldi	r22, 0x01	; 1
    2d42:	7e e0       	ldi	r23, 0x0E	; 14
    2d44:	8a 81       	ldd	r24, Y+2	; 0x02
    2d46:	9b 81       	ldd	r25, Y+3	; 0x03
    2d48:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <_ZN10ACAN2517FD13readRegister8Ej>
        if (wait && (millis () >= deadline)) {
    2d4c:	98 2f       	mov	r25, r24
    2d4e:	91 70       	andi	r25, 0x01	; 1
    2d50:	80 fd       	sbrc	r24, 0
    2d52:	78 c2       	rjmp	.+1264   	; 0x3244 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x76c>
    2d54:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <millis>
    2d58:	64 15       	cp	r22, r4
    2d5a:	75 05       	cpc	r23, r5
    2d5c:	86 05       	cpc	r24, r6
    2d5e:	97 05       	cpc	r25, r7
    2d60:	78 f3       	brcs	.-34     	; 0x2d40 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x268>
          errorCode = kX10PLLNotReadyWithin1MS ;
    2d62:	81 2c       	mov	r8, r1
    2d64:	91 2c       	mov	r9, r1
    2d66:	a2 e0       	ldi	r26, 0x02	; 2
    2d68:	aa 2e       	mov	r10, r26
    2d6a:	b1 2c       	mov	r11, r1
        }
      }
    }
  }
//----------------------------------- Set full speed clock
  mSPISettings = SPISettings (inSettings.sysClock () / 2, MSBFIRST, SPI_MODE0) ;
    2d6c:	f8 01       	movw	r30, r16
    2d6e:	41 80       	ldd	r4, Z+1	; 0x01
    2d70:	52 80       	ldd	r5, Z+2	; 0x02
    2d72:	63 80       	ldd	r6, Z+3	; 0x03
    2d74:	74 80       	ldd	r7, Z+4	; 0x04
    2d76:	76 94       	lsr	r7
    2d78:	67 94       	ror	r6
    2d7a:	57 94       	ror	r5
    2d7c:	47 94       	ror	r4
    2d7e:	40 e0       	ldi	r20, 0x00	; 0
    2d80:	52 e1       	ldi	r21, 0x12	; 18
    2d82:	6a e7       	ldi	r22, 0x7A	; 122
    2d84:	70 e0       	ldi	r23, 0x00	; 0
    2d86:	90 e0       	ldi	r25, 0x00	; 0
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
    2d88:	44 16       	cp	r4, r20
    2d8a:	55 06       	cpc	r5, r21
    2d8c:	66 06       	cpc	r6, r22
    2d8e:	77 06       	cpc	r7, r23
    2d90:	40 f4       	brcc	.+16     	; 0x2da2 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x2ca>
        clockSetting /= 2;
    2d92:	76 95       	lsr	r23
    2d94:	67 95       	ror	r22
    2d96:	57 95       	ror	r21
    2d98:	47 95       	ror	r20
        clockDiv++;
    2d9a:	9f 5f       	subi	r25, 0xFF	; 255
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
    2d9c:	96 30       	cpi	r25, 0x06	; 6
    2d9e:	a1 f7       	brne	.-24     	; 0x2d88 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x2b0>
      }
    }

    // Compensate for the duplicate fosc/64
    if (clockDiv == 6)
    clockDiv = 7;
    2da0:	97 e0       	ldi	r25, 0x07	; 7

    // Invert the SPI2X bit
    clockDiv ^= 0x1;
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	89 27       	eor	r24, r25
    2da6:	98 2f       	mov	r25, r24
    2da8:	90 6a       	ori	r25, 0xA0	; 160
    2daa:	96 95       	lsr	r25
    2dac:	ea 81       	ldd	r30, Y+2	; 0x02
    2dae:	fb 81       	ldd	r31, Y+3	; 0x03
    2db0:	92 83       	std	Z+2, r25	; 0x02
    2db2:	81 70       	andi	r24, 0x01	; 1
    2db4:	83 83       	std	Z+3, r24	; 0x03
    2db6:	60 e2       	ldi	r22, 0x20	; 32
    2db8:	e6 2e       	mov	r14, r22
    2dba:	f1 2c       	mov	r15, r1
//----------------------------------- Checking SPI connection is on (with a full speed clock)
//    We write and read back 2517 RAM at address 0x400
  for (uint32_t i=1 ; (i != 0) && (errorCode == 0) ; i <<= 1) {
    2dbc:	41 2c       	mov	r4, r1
    2dbe:	51 2c       	mov	r5, r1
    2dc0:	32 01       	movw	r6, r4
    2dc2:	43 94       	inc	r4
    2dc4:	81 14       	cp	r8, r1
    2dc6:	91 04       	cpc	r9, r1
    2dc8:	a1 04       	cpc	r10, r1
    2dca:	b1 04       	cpc	r11, r1
    2dcc:	09 f0       	breq	.+2      	; 0x2dd0 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x2f8>
    2dce:	3e c2       	rjmp	.+1148   	; 0x324c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x774>
    writeRegister32 (0x400, i) ;
    2dd0:	a3 01       	movw	r20, r6
    2dd2:	92 01       	movw	r18, r4
    2dd4:	60 e0       	ldi	r22, 0x00	; 0
    2dd6:	74 e0       	ldi	r23, 0x04	; 4
    2dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dda:	9b 81       	ldd	r25, Y+3	; 0x03
    2ddc:	0e 94 14 15 	call	0x2a28	; 0x2a28 <_ZN10ACAN2517FD15writeRegister32Ejm>
    const uint32_t readBackValue = readRegister32 (0x400) ;
    2de0:	60 e0       	ldi	r22, 0x00	; 0
    2de2:	74 e0       	ldi	r23, 0x04	; 4
    2de4:	8a 81       	ldd	r24, Y+2	; 0x02
    2de6:	9b 81       	ldd	r25, Y+3	; 0x03
    2de8:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <_ZN10ACAN2517FD14readRegister32Ej>
    if (readBackValue != i) {
    2dec:	64 15       	cp	r22, r4
    2dee:	75 05       	cpc	r23, r5
    2df0:	86 05       	cpc	r24, r6
    2df2:	97 05       	cpc	r25, r7
    2df4:	29 f0       	breq	.+10     	; 0x2e00 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x328>
      errorCode = kReadBackErrorWithFullSpeedSPIClock ;
    2df6:	81 2c       	mov	r8, r1
    2df8:	91 2c       	mov	r9, r1
    2dfa:	54 e0       	ldi	r21, 0x04	; 4
    2dfc:	a5 2e       	mov	r10, r21
    2dfe:	b1 2c       	mov	r11, r1
  }
//----------------------------------- Set full speed clock
  mSPISettings = SPISettings (inSettings.sysClock () / 2, MSBFIRST, SPI_MODE0) ;
//----------------------------------- Checking SPI connection is on (with a full speed clock)
//    We write and read back 2517 RAM at address 0x400
  for (uint32_t i=1 ; (i != 0) && (errorCode == 0) ; i <<= 1) {
    2e00:	44 0c       	add	r4, r4
    2e02:	55 1c       	adc	r5, r5
    2e04:	66 1c       	adc	r6, r6
    2e06:	77 1c       	adc	r7, r7
    2e08:	f1 e0       	ldi	r31, 0x01	; 1
    2e0a:	ef 1a       	sub	r14, r31
    2e0c:	f1 08       	sbc	r15, r1
    2e0e:	d1 f6       	brne	.-76     	; 0x2dc4 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x2ec>
    if (readBackValue != i) {
      errorCode = kReadBackErrorWithFullSpeedSPIClock ;
    }
  }
//----------------------------------- Install interrupt, configure external interrupt
  if (errorCode == 0) {
    2e10:	81 14       	cp	r8, r1
    2e12:	91 04       	cpc	r9, r1
    2e14:	a1 04       	cpc	r10, r1
    2e16:	b1 04       	cpc	r11, r1
    2e18:	09 f0       	breq	.+2      	; 0x2e1c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x344>
    2e1a:	18 c2       	rjmp	.+1072   	; 0x324c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x774>
  //----------------------------------- Configure transmit and receive buffers
    mDriverTransmitBuffer.initWithSize (inSettings.mDriverTransmitFIFOSize) ;
    2e1c:	f8 01       	movw	r30, r16
    2e1e:	42 8d       	ldd	r20, Z+26	; 0x1a
    2e20:	53 8d       	ldd	r21, Z+27	; 0x1b
    2e22:	60 e0       	ldi	r22, 0x00	; 0
    2e24:	70 e0       	ldi	r23, 0x00	; 0
    2e26:	8a 81       	ldd	r24, Y+2	; 0x02
    2e28:	9b 81       	ldd	r25, Y+3	; 0x03
    2e2a:	86 96       	adiw	r24, 0x26	; 38
    2e2c:	0e 94 13 10 	call	0x2026	; 0x2026 <_ZN12ACANFDBuffer12initWithSizeEm>
    mDriverReceiveBuffer.initWithSize (inSettings.mDriverReceiveFIFOSize) ;
    2e30:	f8 01       	movw	r30, r16
    2e32:	44 a1       	ldd	r20, Z+36	; 0x24
    2e34:	55 a1       	ldd	r21, Z+37	; 0x25
    2e36:	60 e0       	ldi	r22, 0x00	; 0
    2e38:	70 e0       	ldi	r23, 0x00	; 0
    2e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e3e:	40 96       	adiw	r24, 0x10	; 16
    2e40:	0e 94 13 10 	call	0x2026	; 0x2026 <_ZN12ACANFDBuffer12initWithSizeEm>
  //----------------------------------- Reset RAM
    for (uint16_t address = 0x400 ; address < 0xC00 ; address += 4) {
    2e44:	e1 2c       	mov	r14, r1
    2e46:	34 e0       	ldi	r19, 0x04	; 4
    2e48:	f3 2e       	mov	r15, r19
      writeRegister32 (address, 0) ;
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	a9 01       	movw	r20, r18
    2e50:	b7 01       	movw	r22, r14
    2e52:	8a 81       	ldd	r24, Y+2	; 0x02
    2e54:	9b 81       	ldd	r25, Y+3	; 0x03
    2e56:	0e 94 14 15 	call	0x2a28	; 0x2a28 <_ZN10ACAN2517FD15writeRegister32Ejm>
  if (errorCode == 0) {
  //----------------------------------- Configure transmit and receive buffers
    mDriverTransmitBuffer.initWithSize (inSettings.mDriverTransmitFIFOSize) ;
    mDriverReceiveBuffer.initWithSize (inSettings.mDriverReceiveFIFOSize) ;
  //----------------------------------- Reset RAM
    for (uint16_t address = 0x400 ; address < 0xC00 ; address += 4) {
    2e5a:	f4 e0       	ldi	r31, 0x04	; 4
    2e5c:	ef 0e       	add	r14, r31
    2e5e:	f1 1c       	adc	r15, r1
    2e60:	e1 14       	cp	r14, r1
    2e62:	2c e0       	ldi	r18, 0x0C	; 12
    2e64:	f2 06       	cpc	r15, r18
    2e66:	89 f7       	brne	.-30     	; 0x2e4a <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x372>
      writeRegister32 (address, 0) ;
    }
  //----------------------------------- Configure CLKO pin
    uint8_t data8 = 0x03 ; // Respect PM1-PM0 default values
    if (inSettings.mCLKOPin == ACAN2517FDSettings::SOF) {
    2e68:	f8 01       	movw	r30, r16
    2e6a:	80 8d       	ldd	r24, Z+24	; 0x18
    2e6c:	84 30       	cpi	r24, 0x04	; 4
    2e6e:	11 f4       	brne	.+4      	; 0x2e74 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x39c>
      data8 |= 1 << 5 ; // SOF
    2e70:	43 e2       	ldi	r20, 0x23	; 35
    2e72:	01 c0       	rjmp	.+2      	; 0x2e76 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x39e>
  //----------------------------------- Reset RAM
    for (uint16_t address = 0x400 ; address < 0xC00 ; address += 4) {
      writeRegister32 (address, 0) ;
    }
  //----------------------------------- Configure CLKO pin
    uint8_t data8 = 0x03 ; // Respect PM1-PM0 default values
    2e74:	43 e0       	ldi	r20, 0x03	; 3
    if (inSettings.mCLKOPin == ACAN2517FDSettings::SOF) {
      data8 |= 1 << 5 ; // SOF
    }
    if (inSettings.mTXCANIsOpenDrain) {
    2e76:	f8 01       	movw	r30, r16
    2e78:	85 89       	ldd	r24, Z+21	; 0x15
    2e7a:	81 11       	cpse	r24, r1
      data8 |= 1 << 4 ; // TXCANOD
    2e7c:	40 61       	ori	r20, 0x10	; 16
    }
    if (inSettings.mINTIsOpenDrain) {
    2e7e:	f8 01       	movw	r30, r16
    2e80:	86 89       	ldd	r24, Z+22	; 0x16
    2e82:	81 11       	cpse	r24, r1
      data8 |= 1 << 6 ; // INTOD
    2e84:	40 64       	ori	r20, 0x40	; 64
    }
    writeRegister8 (IOCON_REGISTER + 3, data8) ; // DS20005688B, page 24
    2e86:	67 e0       	ldi	r22, 0x07	; 7
    2e88:	7e e0       	ldi	r23, 0x0E	; 14
    2e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e8e:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN10ACAN2517FD14writeRegister8Ejh>
  //----------------------------------- Configure ISO CRC Enable bit
    data8 = 1 << 6 ; // PXEDIS <-- 1
    if (inSettings.mISOCRCEnabled) {
    2e92:	f8 01       	movw	r30, r16
    2e94:	87 89       	ldd	r24, Z+23	; 0x17
    2e96:	88 23       	and	r24, r24
    2e98:	11 f0       	breq	.+4      	; 0x2e9e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x3c6>
      data8 |= 1 << 5 ; //  Enable ISO CRC in CAN FD Frames bit
    2e9a:	40 e6       	ldi	r20, 0x60	; 96
    2e9c:	01 c0       	rjmp	.+2      	; 0x2ea0 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x3c8>
    if (inSettings.mINTIsOpenDrain) {
      data8 |= 1 << 6 ; // INTOD
    }
    writeRegister8 (IOCON_REGISTER + 3, data8) ; // DS20005688B, page 24
  //----------------------------------- Configure ISO CRC Enable bit
    data8 = 1 << 6 ; // PXEDIS <-- 1
    2e9e:	40 e4       	ldi	r20, 0x40	; 64
    if (inSettings.mISOCRCEnabled) {
      data8 |= 1 << 5 ; //  Enable ISO CRC in CAN FD Frames bit
    }
    writeRegister8 (CON_REGISTER, data8) ; // DS20005688B, page 24
    2ea0:	60 e0       	ldi	r22, 0x00	; 0
    2ea2:	70 e0       	ldi	r23, 0x00	; 0
    2ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ea8:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN10ACAN2517FD14writeRegister8Ejh>
  //----------------------------------- Configure DTC (DS20005688B, page 29)
    uint32_t data32 = 1UL << 25 ; // Enable Edge Filtering during Bus Integration state bit (added in 1.1.4)
    data32 |= 1UL << 17 ; // Auto TDC
    const uint32_t TCDO = uint32_t (inSettings.mTDCO) & 0x7F ;
    data32 |= TCDO << 8 ;
    writeRegister32 (TDC_REGISTER, data32) ;
    2eac:	f8 01       	movw	r30, r16
    2eae:	24 89       	ldd	r18, Z+20	; 0x14
    2eb0:	2f 77       	andi	r18, 0x7F	; 127
    2eb2:	82 2f       	mov	r24, r18
    2eb4:	22 0f       	add	r18, r18
    2eb6:	99 0b       	sbc	r25, r25
    2eb8:	aa 0b       	sbc	r26, r26
    2eba:	bb 0b       	sbc	r27, r27
    2ebc:	ba 2f       	mov	r27, r26
    2ebe:	a9 2f       	mov	r26, r25
    2ec0:	98 2f       	mov	r25, r24
    2ec2:	88 27       	eor	r24, r24
    2ec4:	9c 01       	movw	r18, r24
    2ec6:	ad 01       	movw	r20, r26
    2ec8:	42 60       	ori	r20, 0x02	; 2
    2eca:	52 60       	ori	r21, 0x02	; 2
    2ecc:	6c e0       	ldi	r22, 0x0C	; 12
    2ece:	70 e0       	ldi	r23, 0x00	; 0
    2ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed4:	0e 94 14 15 	call	0x2a28	; 0x2a28 <_ZN10ACAN2517FD15writeRegister32Ejm>
  //----------------------------------- Configure TXQ
    data8 = inSettings.mControllerTXQBufferRetransmissionAttempts ;
    2ed8:	f8 01       	movw	r30, r16
    2eda:	43 a1       	ldd	r20, Z+35	; 0x23
    data8 <<= 5 ;
    2edc:	42 95       	swap	r20
    2ede:	44 0f       	add	r20, r20
    2ee0:	40 7e       	andi	r20, 0xE0	; 224
    data8 |= inSettings.mControllerTXQBufferPriority ;
    writeRegister8 (TXQCON_REGISTER + 2, data8) ; // DS20005688B, page 48
    2ee2:	82 a1       	ldd	r24, Z+34	; 0x22
    2ee4:	48 2b       	or	r20, r24
    2ee6:	62 e5       	ldi	r22, 0x52	; 82
    2ee8:	70 e0       	ldi	r23, 0x00	; 0
    2eea:	8a 81       	ldd	r24, Y+2	; 0x02
    2eec:	9b 81       	ldd	r25, Y+3	; 0x03
    2eee:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN10ACAN2517FD14writeRegister8Ejh>
  // Bit 5-7: Payload Size bits
  // Bit 4-0: TXQ size
    mUsesTXQ = inSettings.mControllerTXQSize > 0 ;
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	f8 01       	movw	r30, r16
    2ef6:	90 a1       	ldd	r25, Z+32	; 0x20
    2ef8:	91 11       	cpse	r25, r1
    2efa:	01 c0       	rjmp	.+2      	; 0x2efe <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x426>
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	ea 81       	ldd	r30, Y+2	; 0x02
    2f00:	fb 81       	ldd	r31, Y+3	; 0x03
    2f02:	80 87       	std	Z+8, r24	; 0x08
    data8 = inSettings.mControllerTXQSize - 1 ;
    data8 |= inSettings.mControllerTXQBufferPayload << 5 ; // Payload
    2f04:	f8 01       	movw	r30, r16
    2f06:	81 a1       	ldd	r24, Z+33	; 0x21
    2f08:	f0 e2       	ldi	r31, 0x20	; 32
    2f0a:	8f 9f       	mul	r24, r31
    2f0c:	c0 01       	movw	r24, r0
    2f0e:	11 24       	eor	r1, r1
    2f10:	f8 01       	movw	r30, r16
    2f12:	40 a1       	ldd	r20, Z+32	; 0x20
    2f14:	41 50       	subi	r20, 0x01	; 1
    2f16:	48 2b       	or	r20, r24
    writeRegister8 (TXQCON_REGISTER + 3, data8) ; // DS20005688B, page 48
    2f18:	63 e5       	ldi	r22, 0x53	; 83
    2f1a:	70 e0       	ldi	r23, 0x00	; 0
    2f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f20:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN10ACAN2517FD14writeRegister8Ejh>
    mTXQBufferPayload = ACAN2517FDSettings::objectSizeForPayload (inSettings.mControllerTXQBufferPayload) ;
    2f24:	f8 01       	movw	r30, r16
    2f26:	81 a1       	ldd	r24, Z+33	; 0x21
    2f28:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <_ZN18ACAN2517FDSettings20objectSizeForPayloadENS_11PayloadSizeE>
    2f2c:	ea 81       	ldd	r30, Y+2	; 0x02
    2f2e:	fb 81       	ldd	r31, Y+3	; 0x03
    2f30:	64 87       	std	Z+12, r22	; 0x0c
  //----------------------------------- Configure TXQ and TEF
  // Bit 4: Enable Transmit Queue bit ---> 1: Enable TXQ and reserves space in RAM
  // Bit 3: Store in Transmit Event FIFO bit ---> 0: Don’t save transmitted messages in TEF
  // Bit 0: RTXAT ---> 1: Enable CiFIFOCONm.TXAT to control retransmission attempts
    data8 = 0x01 ; // Enable RTXAT to limit retransmissions (Flole)
    data8 |= mUsesTXQ ? (1 << 4) : 0x00 ; // Bug fix in 1.1.4 (thanks to danielhenz)
    2f32:	80 85       	ldd	r24, Z+8	; 0x08
    2f34:	81 11       	cpse	r24, r1
    2f36:	02 c0       	rjmp	.+4      	; 0x2f3c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x464>
    2f38:	40 e0       	ldi	r20, 0x00	; 0
    2f3a:	01 c0       	rjmp	.+2      	; 0x2f3e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x466>
    2f3c:	40 e1       	ldi	r20, 0x10	; 16
    writeRegister8 (CON_REGISTER + 2, data8) ; // DS20005688B, page 24
    2f3e:	41 60       	ori	r20, 0x01	; 1
    2f40:	62 e0       	ldi	r22, 0x02	; 2
    2f42:	70 e0       	ldi	r23, 0x00	; 0
    2f44:	8a 81       	ldd	r24, Y+2	; 0x02
    2f46:	9b 81       	ldd	r25, Y+3	; 0x03
    2f48:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN10ACAN2517FD14writeRegister8Ejh>
  //----------------------------------- Configure RX FIFO (FIFOCON, DS20005688B, page 52)
    data8 = inSettings.mControllerReceiveFIFOSize - 1 ; // Set receive FIFO size
    data8 |= inSettings.mControllerReceiveFIFOPayload << 5 ; // Payload
    2f4c:	f8 01       	movw	r30, r16
    2f4e:	86 a1       	ldd	r24, Z+38	; 0x26
    2f50:	f0 e2       	ldi	r31, 0x20	; 32
    2f52:	8f 9f       	mul	r24, r31
    2f54:	c0 01       	movw	r24, r0
    2f56:	11 24       	eor	r1, r1
    2f58:	f8 01       	movw	r30, r16
    2f5a:	47 a1       	ldd	r20, Z+39	; 0x27
    2f5c:	41 50       	subi	r20, 0x01	; 1
    2f5e:	48 2b       	or	r20, r24
    writeRegister8 (FIFOCON_REGISTER (RECEIVE_FIFO_INDEX) + 3, data8) ;
    2f60:	6f e5       	ldi	r22, 0x5F	; 95
    2f62:	70 e0       	ldi	r23, 0x00	; 0
    2f64:	8a 81       	ldd	r24, Y+2	; 0x02
    2f66:	9b 81       	ldd	r25, Y+3	; 0x03
    2f68:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN10ACAN2517FD14writeRegister8Ejh>
    data8  = 1 << 0 ; // Interrupt Enabled for FIFO not Empty (TFNRFNIE)
    data8 |= 1 << 3 ; // Interrupt Enabled for FIFO Overflow (RXOVIE)
    writeRegister8 (FIFOCON_REGISTER (RECEIVE_FIFO_INDEX), data8) ;
    2f6c:	49 e0       	ldi	r20, 0x09	; 9
    2f6e:	6c e5       	ldi	r22, 0x5C	; 92
    2f70:	70 e0       	ldi	r23, 0x00	; 0
    2f72:	8a 81       	ldd	r24, Y+2	; 0x02
    2f74:	9b 81       	ldd	r25, Y+3	; 0x03
    2f76:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN10ACAN2517FD14writeRegister8Ejh>
    mReceiveFIFOPayload = ACAN2517FDSettings::objectSizeForPayload (inSettings.mControllerReceiveFIFOPayload) ;
    2f7a:	f8 01       	movw	r30, r16
    2f7c:	86 a1       	ldd	r24, Z+38	; 0x26
    2f7e:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <_ZN18ACAN2517FDSettings20objectSizeForPayloadENS_11PayloadSizeE>
    2f82:	ea 81       	ldd	r30, Y+2	; 0x02
    2f84:	fb 81       	ldd	r31, Y+3	; 0x03
    2f86:	65 87       	std	Z+13, r22	; 0x0d
  //----------------------------------- Configure TX FIFO (FIFOCON, DS20005688B, page 52)
    data8 = inSettings.mControllerTransmitFIFORetransmissionAttempts ;
    2f88:	f8 01       	movw	r30, r16
    2f8a:	47 8d       	ldd	r20, Z+31	; 0x1f
    data8 <<= 5 ;
    2f8c:	42 95       	swap	r20
    2f8e:	44 0f       	add	r20, r20
    2f90:	40 7e       	andi	r20, 0xE0	; 224
    data8 |= inSettings.mControllerTransmitFIFOPriority ;
    writeRegister8 (FIFOCON_REGISTER (TRANSMIT_FIFO_INDEX) + 2, data8) ;
    2f92:	86 8d       	ldd	r24, Z+30	; 0x1e
    2f94:	48 2b       	or	r20, r24
    2f96:	6a e6       	ldi	r22, 0x6A	; 106
    2f98:	70 e0       	ldi	r23, 0x00	; 0
    2f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f9e:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN10ACAN2517FD14writeRegister8Ejh>
    data8 = inSettings.mControllerTransmitFIFOSize - 1 ; // Set transmit FIFO size
    data8 |= inSettings.mControllerTransmitFIFOPayload << 5 ; // Payload
    2fa2:	f8 01       	movw	r30, r16
    2fa4:	85 8d       	ldd	r24, Z+29	; 0x1d
    2fa6:	f0 e2       	ldi	r31, 0x20	; 32
    2fa8:	8f 9f       	mul	r24, r31
    2faa:	c0 01       	movw	r24, r0
    2fac:	11 24       	eor	r1, r1
    2fae:	f8 01       	movw	r30, r16
    2fb0:	44 8d       	ldd	r20, Z+28	; 0x1c
    2fb2:	41 50       	subi	r20, 0x01	; 1
    2fb4:	48 2b       	or	r20, r24
    writeRegister8 (FIFOCON_REGISTER (TRANSMIT_FIFO_INDEX) + 3, data8) ;
    2fb6:	6b e6       	ldi	r22, 0x6B	; 107
    2fb8:	70 e0       	ldi	r23, 0x00	; 0
    2fba:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2fbe:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN10ACAN2517FD14writeRegister8Ejh>
    data8 = 1 << 7 ; // FIFO is a Tx FIFO
    data8 |= 1 << 4 ; // TXATIE ---> 1: Enable Transmit Attempts Exhausted Interrupt
    writeRegister8 (FIFOCON_REGISTER (TRANSMIT_FIFO_INDEX), data8) ;
    2fc2:	40 e9       	ldi	r20, 0x90	; 144
    2fc4:	68 e6       	ldi	r22, 0x68	; 104
    2fc6:	70 e0       	ldi	r23, 0x00	; 0
    2fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fca:	9b 81       	ldd	r25, Y+3	; 0x03
    2fcc:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN10ACAN2517FD14writeRegister8Ejh>
    mTransmitFIFOPayload = ACAN2517FDSettings::objectSizeForPayload (inSettings.mControllerTransmitFIFOPayload) ;
    2fd0:	f8 01       	movw	r30, r16
    2fd2:	85 8d       	ldd	r24, Z+29	; 0x1d
    2fd4:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <_ZN18ACAN2517FDSettings20objectSizeForPayloadENS_11PayloadSizeE>
    2fd8:	ea 81       	ldd	r30, Y+2	; 0x02
    2fda:	fb 81       	ldd	r31, Y+3	; 0x03
    2fdc:	63 87       	std	Z+11, r22	; 0x0b
  //----------------------------------- Configure receive filters
    uint8_t filterIndex = 0 ;
    ACAN2517FDFilters::Filter * filter = inFilters.mFirstFilter ;
    2fde:	f6 01       	movw	r30, r12
    2fe0:	e1 80       	ldd	r14, Z+1	; 0x01
    2fe2:	f2 80       	ldd	r15, Z+2	; 0x02
    2fe4:	80 81       	ld	r24, Z
    mCallBackFunctionArray = new ACANFDCallBackRoutine [inFilters.filterCount ()] ;
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	88 0f       	add	r24, r24
    2fea:	99 1f       	adc	r25, r25
    2fec:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <_Znaj>
    2ff0:	ea 81       	ldd	r30, Y+2	; 0x02
    2ff2:	fb 81       	ldd	r31, Y+3	; 0x03
    2ff4:	91 83       	std	Z+1, r25	; 0x01
    2ff6:	80 83       	st	Z, r24
    data8 = 1 << 7 ; // FIFO is a Tx FIFO
    data8 |= 1 << 4 ; // TXATIE ---> 1: Enable Transmit Attempts Exhausted Interrupt
    writeRegister8 (FIFOCON_REGISTER (TRANSMIT_FIFO_INDEX), data8) ;
    mTransmitFIFOPayload = ACAN2517FDSettings::objectSizeForPayload (inSettings.mControllerTransmitFIFOPayload) ;
  //----------------------------------- Configure receive filters
    uint8_t filterIndex = 0 ;
    2ff8:	51 2c       	mov	r5, r1
    ACAN2517FDFilters::Filter * filter = inFilters.mFirstFilter ;
    mCallBackFunctionArray = new ACANFDCallBackRoutine [inFilters.filterCount ()] ;
    while (NULL != filter) {
    2ffa:	e1 14       	cp	r14, r1
    2ffc:	f1 04       	cpc	r15, r1
    2ffe:	e1 f1       	breq	.+120    	; 0x3078 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x5a0>
      mCallBackFunctionArray [filterIndex] = filter->mCallBackRoutine ;
    3000:	f7 01       	movw	r30, r14
    3002:	42 85       	ldd	r20, Z+10	; 0x0a
    3004:	53 85       	ldd	r21, Z+11	; 0x0b
    3006:	c5 2c       	mov	r12, r5
    3008:	d1 2c       	mov	r13, r1
    300a:	c6 01       	movw	r24, r12
    300c:	88 0f       	add	r24, r24
    300e:	99 1f       	adc	r25, r25
    3010:	ea 81       	ldd	r30, Y+2	; 0x02
    3012:	fb 81       	ldd	r31, Y+3	; 0x03
    3014:	20 81       	ld	r18, Z
    3016:	31 81       	ldd	r19, Z+1	; 0x01
    3018:	f9 01       	movw	r30, r18
    301a:	e8 0f       	add	r30, r24
    301c:	f9 1f       	adc	r31, r25
    301e:	51 83       	std	Z+1, r21	; 0x01
    3020:	40 83       	st	Z, r20
}

//······················································································································

static uint16_t MASK_REGISTER (const uint16_t inFilterIndex) { // 0 ... 31 (DS20005688B, page 61)
  return 0x1F4 + 8 * inFilterIndex ;
    3022:	36 01       	movw	r6, r12
    3024:	f3 e0       	ldi	r31, 0x03	; 3
    3026:	66 0c       	add	r6, r6
    3028:	77 1c       	adc	r7, r7
    302a:	fa 95       	dec	r31
    302c:	e1 f7       	brne	.-8      	; 0x3026 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x54e>
    uint8_t filterIndex = 0 ;
    ACAN2517FDFilters::Filter * filter = inFilters.mFirstFilter ;
    mCallBackFunctionArray = new ACANFDCallBackRoutine [inFilters.filterCount ()] ;
    while (NULL != filter) {
      mCallBackFunctionArray [filterIndex] = filter->mCallBackRoutine ;
      writeRegister32 (MASK_REGISTER (filterIndex), filter->mFilterMask) ; // DS20005688B, page 61
    302e:	f7 01       	movw	r30, r14
    3030:	22 81       	ldd	r18, Z+2	; 0x02
    3032:	33 81       	ldd	r19, Z+3	; 0x03
    3034:	44 81       	ldd	r20, Z+4	; 0x04
    3036:	55 81       	ldd	r21, Z+5	; 0x05
    3038:	b3 01       	movw	r22, r6
    303a:	6c 50       	subi	r22, 0x0C	; 12
    303c:	7e 4f       	sbci	r23, 0xFE	; 254
    303e:	8a 81       	ldd	r24, Y+2	; 0x02
    3040:	9b 81       	ldd	r25, Y+3	; 0x03
    3042:	0e 94 14 15 	call	0x2a28	; 0x2a28 <_ZN10ACAN2517FD15writeRegister32Ejm>
      writeRegister32 (FLTOBJ_REGISTER (filterIndex), filter->mAcceptanceFilter) ; // DS20005688B, page 60
    3046:	f7 01       	movw	r30, r14
    3048:	26 81       	ldd	r18, Z+6	; 0x06
    304a:	37 81       	ldd	r19, Z+7	; 0x07
    304c:	40 85       	ldd	r20, Z+8	; 0x08
    304e:	51 85       	ldd	r21, Z+9	; 0x09
    3050:	b3 01       	movw	r22, r6
    3052:	60 51       	subi	r22, 0x10	; 16
    3054:	7e 4f       	sbci	r23, 0xFE	; 254
    3056:	8a 81       	ldd	r24, Y+2	; 0x02
    3058:	9b 81       	ldd	r25, Y+3	; 0x03
    305a:	0e 94 14 15 	call	0x2a28	; 0x2a28 <_ZN10ACAN2517FD15writeRegister32Ejm>
      data8 = 1 << 7 ; // Filter is enabled
      data8 |= 1 ; // Message matching filter is stored in FIFO1
      writeRegister8 (FLTCON_REGISTER (filterIndex), data8) ; // DS20005688B, page 58
    305e:	b6 01       	movw	r22, r12
    3060:	60 53       	subi	r22, 0x30	; 48
    3062:	7e 4f       	sbci	r23, 0xFE	; 254
    3064:	41 e8       	ldi	r20, 0x81	; 129
    3066:	8a 81       	ldd	r24, Y+2	; 0x02
    3068:	9b 81       	ldd	r25, Y+3	; 0x03
    306a:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN10ACAN2517FD14writeRegister8Ejh>
      filter = filter->mNextFilter ;
    306e:	f7 01       	movw	r30, r14
    3070:	e0 80       	ld	r14, Z
    3072:	f1 80       	ldd	r15, Z+1	; 0x01
      filterIndex += 1 ;
    3074:	53 94       	inc	r5
    mTransmitFIFOPayload = ACAN2517FDSettings::objectSizeForPayload (inSettings.mControllerTransmitFIFOPayload) ;
  //----------------------------------- Configure receive filters
    uint8_t filterIndex = 0 ;
    ACAN2517FDFilters::Filter * filter = inFilters.mFirstFilter ;
    mCallBackFunctionArray = new ACANFDCallBackRoutine [inFilters.filterCount ()] ;
    while (NULL != filter) {
    3076:	c1 cf       	rjmp	.-126    	; 0x2ffa <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x522>
      filterIndex += 1 ;
    }
  //----------------------------------- Activate interrupts (INT, DS20005688B page 34)
    data8  = (1 << 1) ; // Receive FIFO Interrupt Enable
    data8 |= (1 << 0) ; // Transmit FIFO Interrupt Enable
    writeRegister8 (INT_REGISTER + 2, data8) ;
    3078:	43 e0       	ldi	r20, 0x03	; 3
    307a:	6e e1       	ldi	r22, 0x1E	; 30
    307c:	70 e0       	ldi	r23, 0x00	; 0
    307e:	8a 81       	ldd	r24, Y+2	; 0x02
    3080:	9b 81       	ldd	r25, Y+3	; 0x03
    3082:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN10ACAN2517FD14writeRegister8Ejh>
    data8  = (1 << 2) ; // TXATIE ---> 1: Transmit Attempt Interrupt Enable bit
    writeRegister8 (INT_REGISTER + 3, data8) ;
    3086:	44 e0       	ldi	r20, 0x04	; 4
    3088:	6f e1       	ldi	r22, 0x1F	; 31
    308a:	70 e0       	ldi	r23, 0x00	; 0
    308c:	8a 81       	ldd	r24, Y+2	; 0x02
    308e:	9b 81       	ldd	r25, Y+3	; 0x03
    3090:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN10ACAN2517FD14writeRegister8Ejh>
  //  bits 23-16: TSEG1 - 1
  //  bit 15: unused
  //  bits 14-8: TSEG2 - 1
  //  bit 7: unused
  //  bits 6-0: SJW - 1
    uint32_t data = inSettings.mBitRatePrescaler - 1 ;
    3094:	f8 01       	movw	r30, r16
    3096:	25 85       	ldd	r18, Z+13	; 0x0d
    3098:	36 85       	ldd	r19, Z+14	; 0x0e
    309a:	21 50       	subi	r18, 0x01	; 1
    309c:	31 09       	sbc	r19, r1
    309e:	c9 01       	movw	r24, r18
    30a0:	a0 e0       	ldi	r26, 0x00	; 0
    30a2:	b0 e0       	ldi	r27, 0x00	; 0
    data <<= 8 ;
    30a4:	cc 24       	eor	r12, r12
    30a6:	d8 2e       	mov	r13, r24
    30a8:	e9 2e       	mov	r14, r25
    30aa:	fa 2e       	mov	r15, r26
    data |= inSettings.mArbitrationPhaseSegment1 - 1 ;
    30ac:	27 85       	ldd	r18, Z+15	; 0x0f
    30ae:	30 89       	ldd	r19, Z+16	; 0x10
    30b0:	21 50       	subi	r18, 0x01	; 1
    30b2:	31 09       	sbc	r19, r1
    30b4:	c9 01       	movw	r24, r18
    30b6:	a0 e0       	ldi	r26, 0x00	; 0
    30b8:	b0 e0       	ldi	r27, 0x00	; 0
    30ba:	8c 29       	or	r24, r12
    30bc:	9d 29       	or	r25, r13
    30be:	ae 29       	or	r26, r14
    30c0:	bf 29       	or	r27, r15
    data <<= 8 ;
    30c2:	44 27       	eor	r20, r20
    30c4:	58 2f       	mov	r21, r24
    30c6:	69 2f       	mov	r22, r25
    30c8:	7a 2f       	mov	r23, r26
    data |= inSettings.mArbitrationPhaseSegment2 - 1 ;
    30ca:	81 89       	ldd	r24, Z+17	; 0x11
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	01 97       	sbiw	r24, 0x01	; 1
    30d0:	09 2e       	mov	r0, r25
    30d2:	00 0c       	add	r0, r0
    30d4:	aa 0b       	sbc	r26, r26
    30d6:	bb 0b       	sbc	r27, r27
    30d8:	84 2b       	or	r24, r20
    30da:	95 2b       	or	r25, r21
    30dc:	a6 2b       	or	r26, r22
    30de:	b7 2b       	or	r27, r23
    data <<= 8 ;
    30e0:	ba 2f       	mov	r27, r26
    30e2:	a9 2f       	mov	r26, r25
    30e4:	98 2f       	mov	r25, r24
    30e6:	88 27       	eor	r24, r24
    data |= inSettings.mArbitrationSJW - 1 ;
    writeRegister32 (NBTCFG_REGISTER, data);
    30e8:	22 89       	ldd	r18, Z+18	; 0x12
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	21 50       	subi	r18, 0x01	; 1
    30ee:	31 09       	sbc	r19, r1
    30f0:	a9 01       	movw	r20, r18
    30f2:	33 0f       	add	r19, r19
    30f4:	66 0b       	sbc	r22, r22
    30f6:	77 0b       	sbc	r23, r23
    30f8:	9a 01       	movw	r18, r20
    30fa:	ab 01       	movw	r20, r22
    30fc:	28 2b       	or	r18, r24
    30fe:	39 2b       	or	r19, r25
    3100:	4a 2b       	or	r20, r26
    3102:	5b 2b       	or	r21, r27
    3104:	64 e0       	ldi	r22, 0x04	; 4
    3106:	70 e0       	ldi	r23, 0x00	; 0
    3108:	8a 81       	ldd	r24, Y+2	; 0x02
    310a:	9b 81       	ldd	r25, Y+3	; 0x03
    310c:	0e 94 14 15 	call	0x2a28	; 0x2a28 <_ZN10ACAN2517FD15writeRegister32Ejm>
  //  bits 20-16: TSEG1 - 1
  //  bits 15-12: unused
  //  bits 11-8: TSEG2 - 1
  //  bits 7-4: unused
  //  bits 3-0: SJW - 1
    mHasDataBitRate = inSettings.mDataBitRateFactor != ::DataBitRateFactor::x1 ;
    3110:	f8 01       	movw	r30, r16
    3112:	81 85       	ldd	r24, Z+9	; 0x09
    3114:	91 e0       	ldi	r25, 0x01	; 1
    3116:	81 30       	cpi	r24, 0x01	; 1
    3118:	09 f4       	brne	.+2      	; 0x311c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x644>
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	ea 81       	ldd	r30, Y+2	; 0x02
    311e:	fb 81       	ldd	r31, Y+3	; 0x03
    3120:	92 87       	std	Z+10, r25	; 0x0a
    if (mHasDataBitRate) {
    3122:	81 30       	cpi	r24, 0x01	; 1
    3124:	09 f4       	brne	.+2      	; 0x3128 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x650>
    3126:	3f c0       	rjmp	.+126    	; 0x31a6 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x6ce>
      data = inSettings.mBitRatePrescaler - 1 ;
    3128:	f8 01       	movw	r30, r16
    312a:	25 85       	ldd	r18, Z+13	; 0x0d
    312c:	36 85       	ldd	r19, Z+14	; 0x0e
    312e:	21 50       	subi	r18, 0x01	; 1
    3130:	31 09       	sbc	r19, r1
    3132:	c9 01       	movw	r24, r18
    3134:	a0 e0       	ldi	r26, 0x00	; 0
    3136:	b0 e0       	ldi	r27, 0x00	; 0
      data <<= 8 ;
    3138:	cc 24       	eor	r12, r12
    313a:	d8 2e       	mov	r13, r24
    313c:	e9 2e       	mov	r14, r25
    313e:	fa 2e       	mov	r15, r26
      data |= inSettings.mDataPhaseSegment1 - 1 ;
    3140:	22 85       	ldd	r18, Z+10	; 0x0a
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	21 50       	subi	r18, 0x01	; 1
    3146:	31 09       	sbc	r19, r1
    3148:	c9 01       	movw	r24, r18
    314a:	33 0f       	add	r19, r19
    314c:	aa 0b       	sbc	r26, r26
    314e:	bb 0b       	sbc	r27, r27
    3150:	8c 29       	or	r24, r12
    3152:	9d 29       	or	r25, r13
    3154:	ae 29       	or	r26, r14
    3156:	bf 29       	or	r27, r15
      data <<= 8 ;
    3158:	44 27       	eor	r20, r20
    315a:	58 2f       	mov	r21, r24
    315c:	69 2f       	mov	r22, r25
    315e:	7a 2f       	mov	r23, r26
      data |= inSettings.mDataPhaseSegment2 - 1 ;
    3160:	83 85       	ldd	r24, Z+11	; 0x0b
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	09 2e       	mov	r0, r25
    3168:	00 0c       	add	r0, r0
    316a:	aa 0b       	sbc	r26, r26
    316c:	bb 0b       	sbc	r27, r27
    316e:	84 2b       	or	r24, r20
    3170:	95 2b       	or	r25, r21
    3172:	a6 2b       	or	r26, r22
    3174:	b7 2b       	or	r27, r23
      data <<= 8 ;
    3176:	ba 2f       	mov	r27, r26
    3178:	a9 2f       	mov	r26, r25
    317a:	98 2f       	mov	r25, r24
    317c:	88 27       	eor	r24, r24
      data |= inSettings.mDataSJW - 1 ;
      writeRegister32 (DBTCFG_REGISTER, data) ;
    317e:	24 85       	ldd	r18, Z+12	; 0x0c
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	21 50       	subi	r18, 0x01	; 1
    3184:	31 09       	sbc	r19, r1
    3186:	a9 01       	movw	r20, r18
    3188:	33 0f       	add	r19, r19
    318a:	66 0b       	sbc	r22, r22
    318c:	77 0b       	sbc	r23, r23
    318e:	9a 01       	movw	r18, r20
    3190:	ab 01       	movw	r20, r22
    3192:	28 2b       	or	r18, r24
    3194:	39 2b       	or	r19, r25
    3196:	4a 2b       	or	r20, r26
    3198:	5b 2b       	or	r21, r27
    319a:	68 e0       	ldi	r22, 0x08	; 8
    319c:	70 e0       	ldi	r23, 0x00	; 0
    319e:	8a 81       	ldd	r24, Y+2	; 0x02
    31a0:	9b 81       	ldd	r25, Y+3	; 0x03
    31a2:	0e 94 14 15 	call	0x2a28	; 0x2a28 <_ZN10ACAN2517FD15writeRegister32Ejm>
    }
  //----------------------------------- Request mode (CON_REGISTER + 3, DS20005688B, page 24)
  //  bits 7-4: Transmit Bandwith Sharing Bits ---> 0
  //  bit 3: Abort All Pending Transmissions bit --> 0
    mTXBWS_RequestedMode = inSettings.mRequestedMode | (TXBWS << 4) ;
    31a6:	f8 01       	movw	r30, r16
    31a8:	41 8d       	ldd	r20, Z+25	; 0x19
    31aa:	ea 81       	ldd	r30, Y+2	; 0x02
    31ac:	fb 81       	ldd	r31, Y+3	; 0x03
    31ae:	46 87       	std	Z+14, r20	; 0x0e
    writeRegister8 (CON_REGISTER + 3, mTXBWS_RequestedMode);
    31b0:	63 e0       	ldi	r22, 0x03	; 3
    31b2:	70 e0       	ldi	r23, 0x00	; 0
    31b4:	cf 01       	movw	r24, r30
    31b6:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <_ZN10ACAN2517FD14writeRegister8Ejh>
  //----------------------------------- Wait (10 ms max) until requested mode is reached
    bool wait = true ;
    const uint32_t deadline = millis () + 10 ;
    31ba:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <millis>
    31be:	6b 01       	movw	r12, r22
    31c0:	7c 01       	movw	r14, r24
    31c2:	fa e0       	ldi	r31, 0x0A	; 10
    31c4:	cf 0e       	add	r12, r31
    31c6:	d1 1c       	adc	r13, r1
    31c8:	e1 1c       	adc	r14, r1
    31ca:	f1 1c       	adc	r15, r1
    while (wait) {
     const uint8_t actualMode = (readRegister8 (CON_REGISTER + 2) >> 5) & 0x07 ;
    31cc:	62 e0       	ldi	r22, 0x02	; 2
    31ce:	70 e0       	ldi	r23, 0x00	; 0
    31d0:	8a 81       	ldd	r24, Y+2	; 0x02
    31d2:	9b 81       	ldd	r25, Y+3	; 0x03
    31d4:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <_ZN10ACAN2517FD13readRegister8Ej>
      wait = actualMode != inSettings.mRequestedMode ;
      if (wait && (millis () >= deadline)) {
    31d8:	82 95       	swap	r24
    31da:	86 95       	lsr	r24
    31dc:	87 70       	andi	r24, 0x07	; 7
    31de:	f8 01       	movw	r30, r16
    31e0:	91 8d       	ldd	r25, Z+25	; 0x19
    31e2:	89 17       	cp	r24, r25
    31e4:	59 f0       	breq	.+22     	; 0x31fc <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x724>
    31e6:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <millis>
    31ea:	6c 15       	cp	r22, r12
    31ec:	7d 05       	cpc	r23, r13
    31ee:	8e 05       	cpc	r24, r14
    31f0:	9f 05       	cpc	r25, r15
    31f2:	60 f3       	brcs	.-40     	; 0x31cc <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x6f4>
        errorCode |= kRequestedModeTimeOut ;
    31f4:	81 2c       	mov	r8, r1
    31f6:	91 2c       	mov	r9, r1
    31f8:	54 01       	movw	r10, r8
    31fa:	a3 94       	inc	r10
      }
    }
    #ifdef ARDUINO_ARCH_ESP32
      xTaskCreate (myESP32Task, "ACAN2517Handler", 1024, this, 256, NULL) ;
    #endif
    if (mINT != 255) { // 255 means interrupt is not used
    31fc:	ea 81       	ldd	r30, Y+2	; 0x02
    31fe:	fb 81       	ldd	r31, Y+3	; 0x03
    3200:	87 81       	ldd	r24, Z+7	; 0x07
    3202:	8f 3f       	cpi	r24, 0xFF	; 255
    3204:	49 f0       	breq	.+18     	; 0x3218 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x740>
      #ifdef ARDUINO_ARCH_ESP32
        attachInterrupt (itPin, inInterruptServiceRoutine, FALLING) ;
      #else
        attachInterrupt (itPin, inInterruptServiceRoutine, LOW) ; // Thank to Flole998
    3206:	40 e0       	ldi	r20, 0x00	; 0
    3208:	50 e0       	ldi	r21, 0x00	; 0
    320a:	b1 01       	movw	r22, r2
    320c:	89 81       	ldd	r24, Y+1	; 0x01
    320e:	0e 94 11 20 	call	0x4022	; 0x4022 <attachInterrupt>
        mSPI.usingInterrupt (itPin) ; // usingInterrupt is not implemented in Arduino ESP32
    3212:	89 81       	ldd	r24, Y+1	; 0x01
    3214:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <_ZN8SPIClass14usingInterruptEh>

    /*
     * If you begin() multiple times without constructor,
     * mHardwareTxFIFOFull = true will block the transmitter.
     */
    mHardwareTxFIFOFull = false;
    3218:	ea 81       	ldd	r30, Y+2	; 0x02
    321a:	fb 81       	ldd	r31, Y+3	; 0x03
    321c:	11 86       	std	Z+9, r1	; 0x09
    mHardwareReceiveBufferOverflowCount = 0;
    321e:	17 86       	std	Z+15, r1	; 0x0f
  }
//---
  return errorCode ;
    3220:	15 c0       	rjmp	.+42     	; 0x324c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x774>
    3222:	ff ef       	ldi	r31, 0xFF	; 255
    3224:	f9 83       	std	Y+1, r31	; 0x01
    3226:	a0 cc       	rjmp	.-1728   	; 0x2b68 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x90>
  }
  if (inSettings.CANBitSettingConsistency () != 0) {
    errorCode |= kInconsistentBitRateSettings ;
  }
//----------------------------------- Check mINT has interrupt capability
  const int8_t itPin = digitalPinToInterrupt (mINT) ;
    3228:	2f ef       	ldi	r18, 0xFF	; 255
    322a:	29 83       	std	Y+1, r18	; 0x01
  if ((mINT != 255) && (itPin == NOT_AN_INTERRUPT)) {
    errorCode = kINTPinIsNotAnInterrupt ;
    322c:	80 e1       	ldi	r24, 0x10	; 16
    322e:	88 2e       	mov	r8, r24
    3230:	91 2c       	mov	r9, r1
    3232:	a1 2c       	mov	r10, r1
    3234:	b1 2c       	mov	r11, r1
  }
//----------------------------------- Check interrupt service routine is not null
  if ((mINT != 255) && (inInterruptServiceRoutine == NULL)) {
    3236:	21 14       	cp	r2, r1
    3238:	31 04       	cpc	r3, r1
    323a:	09 f0       	breq	.+2      	; 0x323e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x766>
    323c:	95 cc       	rjmp	.-1750   	; 0x2b68 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x90>
    errorCode |= kISRIsNull ;
    323e:	68 94       	set
    3240:	85 f8       	bld	r8, 5
    3242:	92 cc       	rjmp	.-1756   	; 0x2b68 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x90>
    writeRegister8 (OSC_REGISTER, osc) ; // DS20005688B, page 16
  //--- Wait for PLL is ready (wait max 2 ms)
    if (pll != 0) {
      bool wait = true ;
      const uint32_t deadline = millis () + 2 ;
      while (wait) {
    3244:	91 30       	cpi	r25, 0x01	; 1
    3246:	09 f0       	breq	.+2      	; 0x324a <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x772>
    3248:	7b cd       	rjmp	.-1290   	; 0x2d40 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x268>
    324a:	90 cd       	rjmp	.-1248   	; 0x2d6c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x294>
    mHardwareTxFIFOFull = false;
    mHardwareReceiveBufferOverflowCount = 0;
  }
//---
  return errorCode ;
}
    324c:	c5 01       	movw	r24, r10
    324e:	b4 01       	movw	r22, r8
    3250:	0f 90       	pop	r0
    3252:	0f 90       	pop	r0
    3254:	0f 90       	pop	r0
    3256:	df 91       	pop	r29
    3258:	cf 91       	pop	r28
    325a:	1f 91       	pop	r17
    325c:	0f 91       	pop	r16
    325e:	ff 90       	pop	r15
    3260:	ef 90       	pop	r14
    3262:	df 90       	pop	r13
    3264:	cf 90       	pop	r12
    3266:	bf 90       	pop	r11
    3268:	af 90       	pop	r10
    326a:	9f 90       	pop	r9
    326c:	8f 90       	pop	r8
    326e:	7f 90       	pop	r7
    3270:	6f 90       	pop	r6
    3272:	5f 90       	pop	r5
    3274:	4f 90       	pop	r4
    3276:	3f 90       	pop	r3
    3278:	2f 90       	pop	r2
    327a:	08 95       	ret

0000327c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvE>:
}

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FD::begin (const ACAN2517FDSettings & inSettings,
                            void (* inInterruptServiceRoutine) (void)) {
    327c:	cf 92       	push	r12
    327e:	df 92       	push	r13
    3280:	ef 92       	push	r14
    3282:	ff 92       	push	r15
    3284:	0f 93       	push	r16
    3286:	1f 93       	push	r17
    3288:	cf 93       	push	r28
    328a:	df 93       	push	r29
    328c:	cd b7       	in	r28, 0x3d	; 61
    328e:	de b7       	in	r29, 0x3e	; 62
    3290:	27 97       	sbiw	r28, 0x07	; 7
    3292:	0f b6       	in	r0, 0x3f	; 63
    3294:	f8 94       	cli
    3296:	de bf       	out	0x3e, r29	; 62
    3298:	0f be       	out	0x3f, r0	; 63
    329a:	cd bf       	out	0x3d, r28	; 61
    329c:	8c 01       	movw	r16, r24
    329e:	7b 01       	movw	r14, r22
    32a0:	6a 01       	movw	r12, r20

//······················································································································
//   CONSTRUCTOR
//······················································································································

  public: ACAN2517FDFilters (void) {}
    32a2:	19 82       	std	Y+1, r1	; 0x01
    32a4:	1b 82       	std	Y+3, r1	; 0x03
    32a6:	1a 82       	std	Y+2, r1	; 0x02
    32a8:	1d 82       	std	Y+5, r1	; 0x05
    32aa:	1c 82       	std	Y+4, r1	; 0x04
    32ac:	1e 82       	std	Y+6, r1	; 0x06
    32ae:	1f 82       	std	Y+7, r1	; 0x07
//······················································································································
//   RECEIVE FILTERS
//······················································································································

  public: void appendPassAllFilter (const ACANFDCallBackRoutine inCallBackRoutine) {  // Accept any frame
    Filter * f = new Filter (0, 0, inCallBackRoutine) ;
    32b0:	8c e0       	ldi	r24, 0x0C	; 12
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_Znwj>
    32b8:	fc 01       	movw	r30, r24
                    const uint32_t inAcceptanceFilter,
                    const ACANFDCallBackRoutine inCallBackRoutine) :
    mNextFilter (NULL),
    mFilterMask (inFilterMask),
    mAcceptanceFilter (inAcceptanceFilter),
    mCallBackRoutine (inCallBackRoutine) {
    32ba:	11 82       	std	Z+1, r1	; 0x01
    32bc:	10 82       	st	Z, r1
    32be:	12 82       	std	Z+2, r1	; 0x02
    32c0:	13 82       	std	Z+3, r1	; 0x03
    32c2:	14 82       	std	Z+4, r1	; 0x04
    32c4:	15 82       	std	Z+5, r1	; 0x05
    32c6:	16 82       	std	Z+6, r1	; 0x06
    32c8:	17 82       	std	Z+7, r1	; 0x07
    32ca:	10 86       	std	Z+8, r1	; 0x08
    32cc:	11 86       	std	Z+9, r1	; 0x09
    32ce:	13 86       	std	Z+11, r1	; 0x0b
    32d0:	12 86       	std	Z+10, r1	; 0x0a
//   RECEIVE FILTERS
//······················································································································

  public: void appendPassAllFilter (const ACANFDCallBackRoutine inCallBackRoutine) {  // Accept any frame
    Filter * f = new Filter (0, 0, inCallBackRoutine) ;
    if (mFirstFilter == NULL) {
    32d2:	8a 81       	ldd	r24, Y+2	; 0x02
    32d4:	9b 81       	ldd	r25, Y+3	; 0x03
    32d6:	89 2b       	or	r24, r25
    32d8:	19 f4       	brne	.+6      	; 0x32e0 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvE+0x64>
      mFirstFilter = f ;
    32da:	fb 83       	std	Y+3, r31	; 0x03
    32dc:	ea 83       	std	Y+2, r30	; 0x02
    32de:	04 c0       	rjmp	.+8      	; 0x32e8 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvE+0x6c>
    }else{
      mLastFilter->mNextFilter  = f ;
    32e0:	ac 81       	ldd	r26, Y+4	; 0x04
    32e2:	bd 81       	ldd	r27, Y+5	; 0x05
    32e4:	ed 93       	st	X+, r30
    32e6:	fc 93       	st	X, r31
    }
    mLastFilter = f ;
    32e8:	fd 83       	std	Y+5, r31	; 0x05
    32ea:	ec 83       	std	Y+4, r30	; 0x04
    mFilterCount += 1 ;
    32ec:	89 81       	ldd	r24, Y+1	; 0x01
    32ee:	8f 5f       	subi	r24, 0xFF	; 255
    32f0:	89 83       	std	Y+1, r24	; 0x01
//--- Add pass-all filter
  ACAN2517FDFilters filters ;
  filters.appendPassAllFilter (NULL) ;
//---
  return begin (inSettings, inInterruptServiceRoutine, filters) ;
    32f2:	9e 01       	movw	r18, r28
    32f4:	2f 5f       	subi	r18, 0xFF	; 255
    32f6:	3f 4f       	sbci	r19, 0xFF	; 255
    32f8:	a6 01       	movw	r20, r12
    32fa:	b7 01       	movw	r22, r14
    32fc:	c8 01       	movw	r24, r16
    32fe:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters>
    3302:	6b 01       	movw	r12, r22
    3304:	7c 01       	movw	r14, r24
//······················································································································
//   DESTRUCTOR
//······················································································································

  public: ~ ACAN2517FDFilters (void) {
    while (mFirstFilter != NULL) {
    3306:	8a 81       	ldd	r24, Y+2	; 0x02
    3308:	9b 81       	ldd	r25, Y+3	; 0x03
    330a:	00 97       	sbiw	r24, 0x00	; 0
    330c:	41 f0       	breq	.+16     	; 0x331e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvE+0xa2>
      Filter * next = mFirstFilter->mNextFilter ;
    330e:	fc 01       	movw	r30, r24
    3310:	00 81       	ld	r16, Z
    3312:	11 81       	ldd	r17, Z+1	; 0x01
      delete mFirstFilter ;
    3314:	0e 94 6d 0b 	call	0x16da	; 0x16da <_ZdlPv>
      mFirstFilter = next ;
    3318:	1b 83       	std	Y+3, r17	; 0x03
    331a:	0a 83       	std	Y+2, r16	; 0x02
    331c:	f4 cf       	rjmp	.-24     	; 0x3306 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvE+0x8a>
}
    331e:	c7 01       	movw	r24, r14
    3320:	b6 01       	movw	r22, r12
    3322:	27 96       	adiw	r28, 0x07	; 7
    3324:	0f b6       	in	r0, 0x3f	; 63
    3326:	f8 94       	cli
    3328:	de bf       	out	0x3e, r29	; 62
    332a:	0f be       	out	0x3f, r0	; 63
    332c:	cd bf       	out	0x3d, r28	; 61
    332e:	df 91       	pop	r29
    3330:	cf 91       	pop	r28
    3332:	1f 91       	pop	r17
    3334:	0f 91       	pop	r16
    3336:	ff 90       	pop	r15
    3338:	ef 90       	pop	r14
    333a:	df 90       	pop	r13
    333c:	cf 90       	pop	r12
    333e:	08 95       	ret

00003340 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm>:
uint32_t ACAN2517FDSettings::dataSamplePointFromBitStart (void) const {
  const uint32_t nominalTQCount = 1 /* Sync Seg */ + mDataPhaseSegment1 + mDataPhaseSegment2 ;
  const uint32_t samplePoint = 1 /* Sync Seg */ + mDataPhaseSegment1 ;
  const uint32_t partPerCent = 100 ;
  return (samplePoint * partPerCent) / nominalTQCount ;
}
    3340:	2f 92       	push	r2
    3342:	3f 92       	push	r3
    3344:	4f 92       	push	r4
    3346:	5f 92       	push	r5
    3348:	6f 92       	push	r6
    334a:	7f 92       	push	r7
    334c:	8f 92       	push	r8
    334e:	9f 92       	push	r9
    3350:	af 92       	push	r10
    3352:	bf 92       	push	r11
    3354:	cf 92       	push	r12
    3356:	df 92       	push	r13
    3358:	ef 92       	push	r14
    335a:	ff 92       	push	r15
    335c:	0f 93       	push	r16
    335e:	1f 93       	push	r17
    3360:	cf 93       	push	r28
    3362:	df 93       	push	r29
    3364:	cd b7       	in	r28, 0x3d	; 61
    3366:	de b7       	in	r29, 0x3e	; 62
    3368:	e2 97       	sbiw	r28, 0x32	; 50
    336a:	0f b6       	in	r0, 0x3f	; 63
    336c:	f8 94       	cli
    336e:	de bf       	out	0x3e, r29	; 62
    3370:	0f be       	out	0x3f, r0	; 63
    3372:	cd bf       	out	0x3d, r28	; 61
    3374:	9a a7       	std	Y+42, r25	; 0x2a
    3376:	89 a7       	std	Y+41, r24	; 0x29
    3378:	2d 87       	std	Y+13, r18	; 0x0d
    337a:	3e 87       	std	Y+14, r19	; 0x0e
    337c:	4f 87       	std	Y+15, r20	; 0x0f
    337e:	58 8b       	std	Y+16, r21	; 0x10
    3380:	c9 a2       	std	Y+33, r12	; 0x21
    3382:	da a2       	std	Y+34, r13	; 0x22
    3384:	eb a2       	std	Y+35, r14	; 0x23
    3386:	fc a2       	std	Y+36, r15	; 0x24
    3388:	dc 01       	movw	r26, r24
    338a:	6c 93       	st	X, r22
    338c:	68 30       	cpi	r22, 0x08	; 8
    338e:	78 f4       	brcc	.+30     	; 0x33ae <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x6e>
    3390:	b4 e0       	ldi	r27, 0x04	; 4
    3392:	6b 9f       	mul	r22, r27
    3394:	f0 01       	movw	r30, r0
    3396:	11 24       	eor	r1, r1
    3398:	eb 55       	subi	r30, 0x5B	; 91
    339a:	fd 4f       	sbci	r31, 0xFD	; 253
    339c:	20 81       	ld	r18, Z
    339e:	31 81       	ldd	r19, Z+1	; 0x01
    33a0:	42 81       	ldd	r20, Z+2	; 0x02
    33a2:	53 81       	ldd	r21, Z+3	; 0x03
    33a4:	29 83       	std	Y+1, r18	; 0x01
    33a6:	3a 83       	std	Y+2, r19	; 0x02
    33a8:	4b 83       	std	Y+3, r20	; 0x03
    33aa:	5c 83       	std	Y+4, r21	; 0x04
    33ac:	08 c0       	rjmp	.+16     	; 0x33be <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x7e>
    33ae:	40 e0       	ldi	r20, 0x00	; 0
    33b0:	5a e5       	ldi	r21, 0x5A	; 90
    33b2:	62 e6       	ldi	r22, 0x62	; 98
    33b4:	72 e0       	ldi	r23, 0x02	; 2
    33b6:	49 83       	std	Y+1, r20	; 0x01
    33b8:	5a 83       	std	Y+2, r21	; 0x02
    33ba:	6b 83       	std	Y+3, r22	; 0x03
    33bc:	7c 83       	std	Y+4, r23	; 0x04
    33be:	69 81       	ldd	r22, Y+1	; 0x01
    33c0:	7a 81       	ldd	r23, Y+2	; 0x02
    33c2:	8b 81       	ldd	r24, Y+3	; 0x03
    33c4:	9c 81       	ldd	r25, Y+4	; 0x04
    33c6:	a9 a5       	ldd	r26, Y+41	; 0x29
    33c8:	ba a5       	ldd	r27, Y+42	; 0x2a
    33ca:	11 96       	adiw	r26, 0x01	; 1
    33cc:	6d 93       	st	X+, r22
    33ce:	7d 93       	st	X+, r23
    33d0:	8d 93       	st	X+, r24
    33d2:	9c 93       	st	X, r25
    33d4:	14 97       	sbiw	r26, 0x04	; 4
    33d6:	2d 85       	ldd	r18, Y+13	; 0x0d
    33d8:	3e 85       	ldd	r19, Y+14	; 0x0e
    33da:	4f 85       	ldd	r20, Y+15	; 0x0f
    33dc:	58 89       	ldd	r21, Y+16	; 0x10
    33de:	15 96       	adiw	r26, 0x05	; 5
    33e0:	2d 93       	st	X+, r18
    33e2:	3d 93       	st	X+, r19
    33e4:	4d 93       	st	X+, r20
    33e6:	5c 93       	st	X, r21
    33e8:	18 97       	sbiw	r26, 0x08	; 8
    33ea:	19 96       	adiw	r26, 0x09	; 9
    33ec:	0c 93       	st	X, r16
    33ee:	19 97       	sbiw	r26, 0x09	; 9
    33f0:	1a 96       	adiw	r26, 0x0a	; 10
    33f2:	1c 92       	st	X, r1
    33f4:	1a 97       	sbiw	r26, 0x0a	; 10
    33f6:	1b 96       	adiw	r26, 0x0b	; 11
    33f8:	1c 92       	st	X, r1
    33fa:	1b 97       	sbiw	r26, 0x0b	; 11
    33fc:	1c 96       	adiw	r26, 0x0c	; 12
    33fe:	1c 92       	st	X, r1
    3400:	1c 97       	sbiw	r26, 0x0c	; 12
    3402:	1e 96       	adiw	r26, 0x0e	; 14
    3404:	1c 92       	st	X, r1
    3406:	1e 92       	st	-X, r1
    3408:	1d 97       	sbiw	r26, 0x0d	; 13
    340a:	50 96       	adiw	r26, 0x10	; 16
    340c:	1c 92       	st	X, r1
    340e:	1e 92       	st	-X, r1
    3410:	1f 97       	sbiw	r26, 0x0f	; 15
    3412:	51 96       	adiw	r26, 0x11	; 17
    3414:	1c 92       	st	X, r1
    3416:	51 97       	sbiw	r26, 0x11	; 17
    3418:	52 96       	adiw	r26, 0x12	; 18
    341a:	1c 92       	st	X, r1
    341c:	52 97       	sbiw	r26, 0x12	; 18
    341e:	53 96       	adiw	r26, 0x13	; 19
    3420:	1c 92       	st	X, r1
    3422:	53 97       	sbiw	r26, 0x13	; 19
    3424:	54 96       	adiw	r26, 0x14	; 20
    3426:	1c 92       	st	X, r1
    3428:	54 97       	sbiw	r26, 0x14	; 20
    342a:	55 96       	adiw	r26, 0x15	; 21
    342c:	1c 92       	st	X, r1
    342e:	55 97       	sbiw	r26, 0x15	; 21
    3430:	56 96       	adiw	r26, 0x16	; 22
    3432:	1c 92       	st	X, r1
    3434:	56 97       	sbiw	r26, 0x16	; 22
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	57 96       	adiw	r26, 0x17	; 23
    343a:	8c 93       	st	X, r24
    343c:	57 97       	sbiw	r26, 0x17	; 23
    343e:	93 e0       	ldi	r25, 0x03	; 3
    3440:	58 96       	adiw	r26, 0x18	; 24
    3442:	9c 93       	st	X, r25
    3444:	58 97       	sbiw	r26, 0x18	; 24
    3446:	59 96       	adiw	r26, 0x19	; 25
    3448:	1c 92       	st	X, r1
    344a:	59 97       	sbiw	r26, 0x19	; 25
    344c:	20 e1       	ldi	r18, 0x10	; 16
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	5b 96       	adiw	r26, 0x1b	; 27
    3452:	3c 93       	st	X, r19
    3454:	2e 93       	st	-X, r18
    3456:	5a 97       	sbiw	r26, 0x1a	; 26
    3458:	5c 96       	adiw	r26, 0x1c	; 28
    345a:	8c 93       	st	X, r24
    345c:	5c 97       	sbiw	r26, 0x1c	; 28
    345e:	87 e0       	ldi	r24, 0x07	; 7
    3460:	5d 96       	adiw	r26, 0x1d	; 29
    3462:	8c 93       	st	X, r24
    3464:	5d 97       	sbiw	r26, 0x1d	; 29
    3466:	5e 96       	adiw	r26, 0x1e	; 30
    3468:	1c 92       	st	X, r1
    346a:	5e 97       	sbiw	r26, 0x1e	; 30
    346c:	92 e0       	ldi	r25, 0x02	; 2
    346e:	5f 96       	adiw	r26, 0x1f	; 31
    3470:	9c 93       	st	X, r25
    3472:	5f 97       	sbiw	r26, 0x1f	; 31
    3474:	90 96       	adiw	r26, 0x20	; 32
    3476:	1c 92       	st	X, r1
    3478:	90 97       	sbiw	r26, 0x20	; 32
    347a:	91 96       	adiw	r26, 0x21	; 33
    347c:	8c 93       	st	X, r24
    347e:	91 97       	sbiw	r26, 0x21	; 33
    3480:	2f e1       	ldi	r18, 0x1F	; 31
    3482:	92 96       	adiw	r26, 0x22	; 34
    3484:	2c 93       	st	X, r18
    3486:	92 97       	sbiw	r26, 0x22	; 34
    3488:	93 96       	adiw	r26, 0x23	; 35
    348a:	9c 93       	st	X, r25
    348c:	93 97       	sbiw	r26, 0x23	; 35
    348e:	20 e2       	ldi	r18, 0x20	; 32
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	95 96       	adiw	r26, 0x25	; 37
    3494:	3c 93       	st	X, r19
    3496:	2e 93       	st	-X, r18
    3498:	94 97       	sbiw	r26, 0x24	; 36
    349a:	96 96       	adiw	r26, 0x26	; 38
    349c:	8c 93       	st	X, r24
    349e:	96 97       	sbiw	r26, 0x26	; 38
    34a0:	8b e1       	ldi	r24, 0x1B	; 27
    34a2:	97 96       	adiw	r26, 0x27	; 39
    34a4:	8c 93       	st	X, r24
    34a6:	01 30       	cpi	r16, 0x01	; 1
    34a8:	09 f0       	breq	.+2      	; 0x34ac <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x16c>
    34aa:	1a c1       	rjmp	.+564    	; 0x36e0 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x3a0>
    34ac:	69 81       	ldd	r22, Y+1	; 0x01
    34ae:	7a 81       	ldd	r23, Y+2	; 0x02
    34b0:	8b 81       	ldd	r24, Y+3	; 0x03
    34b2:	9c 81       	ldd	r25, Y+4	; 0x04
    34b4:	2d 85       	ldd	r18, Y+13	; 0x0d
    34b6:	3e 85       	ldd	r19, Y+14	; 0x0e
    34b8:	4f 85       	ldd	r20, Y+15	; 0x0f
    34ba:	58 89       	ldd	r21, Y+16	; 0x10
    34bc:	0e 94 64 24 	call	0x48c8	; 0x48c8 <__udivmodsi4>
    34c0:	2d 8b       	std	Y+21, r18	; 0x15
    34c2:	3e 8b       	std	Y+22, r19	; 0x16
    34c4:	4f 8b       	std	Y+23, r20	; 0x17
    34c6:	58 8f       	std	Y+24, r21	; 0x18
    34c8:	83 2e       	mov	r8, r19
    34ca:	94 2e       	mov	r9, r20
    34cc:	a5 2e       	mov	r10, r21
    34ce:	bb 24       	eor	r11, r11
    34d0:	2d 85       	ldd	r18, Y+13	; 0x0d
    34d2:	3e 85       	ldd	r19, Y+14	; 0x0e
    34d4:	4f 85       	ldd	r20, Y+15	; 0x0f
    34d6:	58 89       	ldd	r21, Y+16	; 0x10
    34d8:	00 27       	eor	r16, r16
    34da:	12 2f       	mov	r17, r18
    34dc:	23 2f       	mov	r18, r19
    34de:	34 2f       	mov	r19, r20
    34e0:	09 8b       	std	Y+17, r16	; 0x11
    34e2:	1a 8b       	std	Y+18, r17	; 0x12
    34e4:	2b 8b       	std	Y+19, r18	; 0x13
    34e6:	3c 8b       	std	Y+20, r19	; 0x14
    34e8:	b4 e0       	ldi	r27, 0x04	; 4
    34ea:	4b 2e       	mov	r4, r27
    34ec:	51 2c       	mov	r5, r1
    34ee:	61 2c       	mov	r6, r1
    34f0:	71 2c       	mov	r7, r1
    34f2:	01 e0       	ldi	r16, 0x01	; 1
    34f4:	10 e0       	ldi	r17, 0x00	; 0
    34f6:	21 2c       	mov	r2, r1
    34f8:	31 2c       	mov	r3, r1
    34fa:	4f ef       	ldi	r20, 0xFF	; 255
    34fc:	5f ef       	ldi	r21, 0xFF	; 255
    34fe:	ba 01       	movw	r22, r20
    3500:	49 87       	std	Y+9, r20	; 0x09
    3502:	5a 87       	std	Y+10, r21	; 0x0a
    3504:	6b 87       	std	Y+11, r22	; 0x0b
    3506:	7c 87       	std	Y+12, r23	; 0x0c
    3508:	c1 2c       	mov	r12, r1
    350a:	d1 2c       	mov	r13, r1
    350c:	76 01       	movw	r14, r12
    350e:	d3 94       	inc	r13
    3510:	32 e8       	ldi	r19, 0x82	; 130
    3512:	83 16       	cp	r8, r19
    3514:	31 e0       	ldi	r19, 0x01	; 1
    3516:	93 06       	cpc	r9, r19
    3518:	a1 04       	cpc	r10, r1
    351a:	b1 04       	cpc	r11, r1
    351c:	08 f0       	brcs	.+2      	; 0x3520 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x1e0>
    351e:	93 c0       	rjmp	.+294    	; 0x3646 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x306>
    3520:	c1 14       	cp	r12, r1
    3522:	d1 04       	cpc	r13, r1
    3524:	e1 04       	cpc	r14, r1
    3526:	f1 04       	cpc	r15, r1
    3528:	09 f4       	brne	.+2      	; 0x352c <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x1ec>
    352a:	8d c0       	rjmp	.+282    	; 0x3646 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x306>
    352c:	d5 01       	movw	r26, r10
    352e:	c4 01       	movw	r24, r8
    3530:	04 97       	sbiw	r24, 0x04	; 4
    3532:	a1 09       	sbc	r26, r1
    3534:	b1 09       	sbc	r27, r1
    3536:	8e 37       	cpi	r24, 0x7E	; 126
    3538:	91 40       	sbci	r25, 0x01	; 1
    353a:	a1 05       	cpc	r26, r1
    353c:	b1 05       	cpc	r27, r1
    353e:	48 f5       	brcc	.+82     	; 0x3592 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x252>
    3540:	a7 01       	movw	r20, r14
    3542:	96 01       	movw	r18, r12
    3544:	c5 01       	movw	r24, r10
    3546:	b4 01       	movw	r22, r8
    3548:	0e 94 54 24 	call	0x48a8	; 0x48a8 <__mulsi3>
    354c:	9b 01       	movw	r18, r22
    354e:	ac 01       	movw	r20, r24
    3550:	6d 85       	ldd	r22, Y+13	; 0x0d
    3552:	7e 85       	ldd	r23, Y+14	; 0x0e
    3554:	8f 85       	ldd	r24, Y+15	; 0x0f
    3556:	98 89       	ldd	r25, Y+16	; 0x10
    3558:	0e 94 54 24 	call	0x48a8	; 0x48a8 <__mulsi3>
    355c:	29 81       	ldd	r18, Y+1	; 0x01
    355e:	3a 81       	ldd	r19, Y+2	; 0x02
    3560:	4b 81       	ldd	r20, Y+3	; 0x03
    3562:	5c 81       	ldd	r21, Y+4	; 0x04
    3564:	26 1b       	sub	r18, r22
    3566:	37 0b       	sbc	r19, r23
    3568:	48 0b       	sbc	r20, r24
    356a:	59 0b       	sbc	r21, r25
    356c:	da 01       	movw	r26, r20
    356e:	c9 01       	movw	r24, r18
    3570:	49 85       	ldd	r20, Y+9	; 0x09
    3572:	5a 85       	ldd	r21, Y+10	; 0x0a
    3574:	6b 85       	ldd	r22, Y+11	; 0x0b
    3576:	7c 85       	ldd	r23, Y+12	; 0x0c
    3578:	48 17       	cp	r20, r24
    357a:	59 07       	cpc	r21, r25
    357c:	6a 07       	cpc	r22, r26
    357e:	7b 07       	cpc	r23, r27
    3580:	40 f0       	brcs	.+16     	; 0x3592 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x252>
    3582:	24 01       	movw	r4, r8
    3584:	35 01       	movw	r6, r10
    3586:	86 01       	movw	r16, r12
    3588:	17 01       	movw	r2, r14
    358a:	89 87       	std	Y+9, r24	; 0x09
    358c:	9a 87       	std	Y+10, r25	; 0x0a
    358e:	ab 87       	std	Y+11, r26	; 0x0b
    3590:	bc 87       	std	Y+12, r27	; 0x0c
    3592:	d5 01       	movw	r26, r10
    3594:	c4 01       	movw	r24, r8
    3596:	03 97       	sbiw	r24, 0x03	; 3
    3598:	a1 09       	sbc	r26, r1
    359a:	b1 09       	sbc	r27, r1
    359c:	8e 37       	cpi	r24, 0x7E	; 126
    359e:	91 40       	sbci	r25, 0x01	; 1
    35a0:	a1 05       	cpc	r26, r1
    35a2:	b1 05       	cpc	r27, r1
    35a4:	40 f5       	brcc	.+80     	; 0x35f6 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x2b6>
    35a6:	6f ef       	ldi	r22, 0xFF	; 255
    35a8:	86 1a       	sub	r8, r22
    35aa:	96 0a       	sbc	r9, r22
    35ac:	a6 0a       	sbc	r10, r22
    35ae:	b6 0a       	sbc	r11, r22
    35b0:	a5 01       	movw	r20, r10
    35b2:	94 01       	movw	r18, r8
    35b4:	69 89       	ldd	r22, Y+17	; 0x11
    35b6:	7a 89       	ldd	r23, Y+18	; 0x12
    35b8:	8b 89       	ldd	r24, Y+19	; 0x13
    35ba:	9c 89       	ldd	r25, Y+20	; 0x14
    35bc:	0e 94 54 24 	call	0x48a8	; 0x48a8 <__mulsi3>
    35c0:	dc 01       	movw	r26, r24
    35c2:	cb 01       	movw	r24, r22
    35c4:	29 81       	ldd	r18, Y+1	; 0x01
    35c6:	3a 81       	ldd	r19, Y+2	; 0x02
    35c8:	4b 81       	ldd	r20, Y+3	; 0x03
    35ca:	5c 81       	ldd	r21, Y+4	; 0x04
    35cc:	82 1b       	sub	r24, r18
    35ce:	93 0b       	sbc	r25, r19
    35d0:	a4 0b       	sbc	r26, r20
    35d2:	b5 0b       	sbc	r27, r21
    35d4:	49 85       	ldd	r20, Y+9	; 0x09
    35d6:	5a 85       	ldd	r21, Y+10	; 0x0a
    35d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    35da:	7c 85       	ldd	r23, Y+12	; 0x0c
    35dc:	48 17       	cp	r20, r24
    35de:	59 07       	cpc	r21, r25
    35e0:	6a 07       	cpc	r22, r26
    35e2:	7b 07       	cpc	r23, r27
    35e4:	40 f0       	brcs	.+16     	; 0x35f6 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x2b6>
    35e6:	24 01       	movw	r4, r8
    35e8:	35 01       	movw	r6, r10
    35ea:	86 01       	movw	r16, r12
    35ec:	17 01       	movw	r2, r14
    35ee:	89 87       	std	Y+9, r24	; 0x09
    35f0:	9a 87       	std	Y+10, r25	; 0x0a
    35f2:	ab 87       	std	Y+11, r26	; 0x0b
    35f4:	bc 87       	std	Y+12, r27	; 0x0c
    35f6:	51 e0       	ldi	r21, 0x01	; 1
    35f8:	c5 1a       	sub	r12, r21
    35fa:	d1 08       	sbc	r13, r1
    35fc:	e1 08       	sbc	r14, r1
    35fe:	f1 08       	sbc	r15, r1
    3600:	b9 f4       	brne	.+46     	; 0x3630 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x2f0>
    3602:	e2 e8       	ldi	r30, 0x82	; 130
    3604:	8e 2e       	mov	r8, r30
    3606:	99 24       	eor	r9, r9
    3608:	93 94       	inc	r9
    360a:	a1 2c       	mov	r10, r1
    360c:	b1 2c       	mov	r11, r1
    360e:	69 89       	ldd	r22, Y+17	; 0x11
    3610:	7a 89       	ldd	r23, Y+18	; 0x12
    3612:	8b 89       	ldd	r24, Y+19	; 0x13
    3614:	9c 89       	ldd	r25, Y+20	; 0x14
    3616:	2d 85       	ldd	r18, Y+13	; 0x0d
    3618:	3e 85       	ldd	r19, Y+14	; 0x0e
    361a:	4f 85       	ldd	r20, Y+15	; 0x0f
    361c:	58 89       	ldd	r21, Y+16	; 0x10
    361e:	62 1b       	sub	r22, r18
    3620:	73 0b       	sbc	r23, r19
    3622:	84 0b       	sbc	r24, r20
    3624:	95 0b       	sbc	r25, r21
    3626:	69 8b       	std	Y+17, r22	; 0x11
    3628:	7a 8b       	std	Y+18, r23	; 0x12
    362a:	8b 8b       	std	Y+19, r24	; 0x13
    362c:	9c 8b       	std	Y+20, r25	; 0x14
    362e:	70 cf       	rjmp	.-288    	; 0x3510 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x1d0>
    3630:	6d 89       	ldd	r22, Y+21	; 0x15
    3632:	7e 89       	ldd	r23, Y+22	; 0x16
    3634:	8f 89       	ldd	r24, Y+23	; 0x17
    3636:	98 8d       	ldd	r25, Y+24	; 0x18
    3638:	a7 01       	movw	r20, r14
    363a:	96 01       	movw	r18, r12
    363c:	0e 94 64 24 	call	0x48c8	; 0x48c8 <__udivmodsi4>
    3640:	49 01       	movw	r8, r18
    3642:	5a 01       	movw	r10, r20
    3644:	e4 cf       	rjmp	.-56     	; 0x360e <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x2ce>
    3646:	c3 01       	movw	r24, r6
    3648:	b2 01       	movw	r22, r4
    364a:	25 e0       	ldi	r18, 0x05	; 5
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	40 e0       	ldi	r20, 0x00	; 0
    3650:	50 e0       	ldi	r21, 0x00	; 0
    3652:	0e 94 64 24 	call	0x48c8	; 0x48c8 <__udivmodsi4>
    3656:	21 15       	cp	r18, r1
    3658:	31 05       	cpc	r19, r1
    365a:	41 05       	cpc	r20, r1
    365c:	51 05       	cpc	r21, r1
    365e:	21 f4       	brne	.+8      	; 0x3668 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x328>
    3660:	21 e0       	ldi	r18, 0x01	; 1
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	40 e0       	ldi	r20, 0x00	; 0
    3666:	50 e0       	ldi	r21, 0x00	; 0
    3668:	73 01       	movw	r14, r6
    366a:	62 01       	movw	r12, r4
    366c:	61 e0       	ldi	r22, 0x01	; 1
    366e:	c6 1a       	sub	r12, r22
    3670:	d1 08       	sbc	r13, r1
    3672:	e1 08       	sbc	r14, r1
    3674:	f1 08       	sbc	r15, r1
    3676:	c2 1a       	sub	r12, r18
    3678:	d3 0a       	sbc	r13, r19
    367a:	e4 0a       	sbc	r14, r20
    367c:	f5 0a       	sbc	r15, r21
    367e:	71 e0       	ldi	r23, 0x01	; 1
    3680:	c7 16       	cp	r12, r23
    3682:	d7 06       	cpc	r13, r23
    3684:	e1 04       	cpc	r14, r1
    3686:	f1 04       	cpc	r15, r1
    3688:	78 f0       	brcs	.+30     	; 0x36a8 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x368>
    368a:	da 01       	movw	r26, r20
    368c:	c9 01       	movw	r24, r18
    368e:	91 50       	subi	r25, 0x01	; 1
    3690:	a1 09       	sbc	r26, r1
    3692:	b1 09       	sbc	r27, r1
    3694:	a7 01       	movw	r20, r14
    3696:	96 01       	movw	r18, r12
    3698:	28 0f       	add	r18, r24
    369a:	39 1f       	adc	r19, r25
    369c:	4a 1f       	adc	r20, r26
    369e:	5b 1f       	adc	r21, r27
    36a0:	c1 2c       	mov	r12, r1
    36a2:	d1 2c       	mov	r13, r1
    36a4:	76 01       	movw	r14, r12
    36a6:	d3 94       	inc	r13
    36a8:	a9 a5       	ldd	r26, Y+41	; 0x29
    36aa:	ba a5       	ldd	r27, Y+42	; 0x2a
    36ac:	1e 96       	adiw	r26, 0x0e	; 14
    36ae:	1c 93       	st	X, r17
    36b0:	0e 93       	st	-X, r16
    36b2:	1d 97       	sbiw	r26, 0x0d	; 13
    36b4:	50 96       	adiw	r26, 0x10	; 16
    36b6:	dc 92       	st	X, r13
    36b8:	ce 92       	st	-X, r12
    36ba:	1f 97       	sbiw	r26, 0x0f	; 15
    36bc:	51 96       	adiw	r26, 0x11	; 17
    36be:	2c 93       	st	X, r18
    36c0:	51 97       	sbiw	r26, 0x11	; 17
    36c2:	52 96       	adiw	r26, 0x12	; 18
    36c4:	2c 93       	st	X, r18
    36c6:	98 01       	movw	r18, r16
    36c8:	a1 01       	movw	r20, r2
    36ca:	c3 01       	movw	r24, r6
    36cc:	b2 01       	movw	r22, r4
    36ce:	0e 94 54 24 	call	0x48a8	; 0x48a8 <__mulsi3>
    36d2:	9b 01       	movw	r18, r22
    36d4:	ac 01       	movw	r20, r24
    36d6:	6d 85       	ldd	r22, Y+13	; 0x0d
    36d8:	7e 85       	ldd	r23, Y+14	; 0x0e
    36da:	8f 85       	ldd	r24, Y+15	; 0x0f
    36dc:	98 89       	ldd	r25, Y+16	; 0x10
    36de:	74 c1       	rjmp	.+744    	; 0x39c8 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x688>
    36e0:	20 2f       	mov	r18, r16
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	40 e0       	ldi	r20, 0x00	; 0
    36e6:	50 e0       	ldi	r21, 0x00	; 0
    36e8:	2d 8f       	std	Y+29, r18	; 0x1d
    36ea:	3e 8f       	std	Y+30, r19	; 0x1e
    36ec:	4f 8f       	std	Y+31, r20	; 0x1f
    36ee:	58 a3       	std	Y+32, r21	; 0x20
    36f0:	2d 85       	ldd	r18, Y+13	; 0x0d
    36f2:	3e 85       	ldd	r19, Y+14	; 0x0e
    36f4:	4f 85       	ldd	r20, Y+15	; 0x0f
    36f6:	58 89       	ldd	r21, Y+16	; 0x10
    36f8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    36fa:	7e 8d       	ldd	r23, Y+30	; 0x1e
    36fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36fe:	98 a1       	ldd	r25, Y+32	; 0x20
    3700:	0e 94 54 24 	call	0x48a8	; 0x48a8 <__mulsi3>
    3704:	69 8f       	std	Y+25, r22	; 0x19
    3706:	7a 8f       	std	Y+26, r23	; 0x1a
    3708:	8b 8f       	std	Y+27, r24	; 0x1b
    370a:	9c 8f       	std	Y+28, r25	; 0x1c
    370c:	69 81       	ldd	r22, Y+1	; 0x01
    370e:	7a 81       	ldd	r23, Y+2	; 0x02
    3710:	8b 81       	ldd	r24, Y+3	; 0x03
    3712:	9c 81       	ldd	r25, Y+4	; 0x04
    3714:	29 8d       	ldd	r18, Y+25	; 0x19
    3716:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3718:	4b 8d       	ldd	r20, Y+27	; 0x1b
    371a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    371c:	0e 94 64 24 	call	0x48c8	; 0x48c8 <__udivmodsi4>
    3720:	2d a3       	std	Y+37, r18	; 0x25
    3722:	3e a3       	std	Y+38, r19	; 0x26
    3724:	4f a3       	std	Y+39, r20	; 0x27
    3726:	58 a7       	std	Y+40, r21	; 0x28
    3728:	69 01       	movw	r12, r18
    372a:	7a 01       	movw	r14, r20
    372c:	32 e0       	ldi	r19, 0x02	; 2
    372e:	f6 94       	lsr	r15
    3730:	e7 94       	ror	r14
    3732:	d7 94       	ror	r13
    3734:	c7 94       	ror	r12
    3736:	3a 95       	dec	r19
    3738:	d1 f7       	brne	.-12     	; 0x372e <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x3ee>
    373a:	09 8d       	ldd	r16, Y+25	; 0x19
    373c:	1a 8d       	ldd	r17, Y+26	; 0x1a
    373e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3740:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3742:	42 e0       	ldi	r20, 0x02	; 2
    3744:	00 0f       	add	r16, r16
    3746:	11 1f       	adc	r17, r17
    3748:	22 1f       	adc	r18, r18
    374a:	33 1f       	adc	r19, r19
    374c:	4a 95       	dec	r20
    374e:	d1 f7       	brne	.-12     	; 0x3744 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x404>
    3750:	0d 8b       	std	Y+21, r16	; 0x15
    3752:	1e 8b       	std	Y+22, r17	; 0x16
    3754:	2f 8b       	std	Y+23, r18	; 0x17
    3756:	38 8f       	std	Y+24, r19	; 0x18
    3758:	54 e0       	ldi	r21, 0x04	; 4
    375a:	45 2e       	mov	r4, r21
    375c:	51 2c       	mov	r5, r1
    375e:	61 2c       	mov	r6, r1
    3760:	71 2c       	mov	r7, r1
    3762:	60 e3       	ldi	r22, 0x30	; 48
    3764:	86 2e       	mov	r8, r22
    3766:	91 2c       	mov	r9, r1
    3768:	a1 2c       	mov	r10, r1
    376a:	b1 2c       	mov	r11, r1
    376c:	00 e0       	ldi	r16, 0x00	; 0
    376e:	11 e0       	ldi	r17, 0x01	; 1
    3770:	20 e0       	ldi	r18, 0x00	; 0
    3772:	30 e0       	ldi	r19, 0x00	; 0
    3774:	09 87       	std	Y+9, r16	; 0x09
    3776:	1a 87       	std	Y+10, r17	; 0x0a
    3778:	2b 87       	std	Y+11, r18	; 0x0b
    377a:	3c 87       	std	Y+12, r19	; 0x0c
    377c:	0f ef       	ldi	r16, 0xFF	; 255
    377e:	1f ef       	ldi	r17, 0xFF	; 255
    3780:	98 01       	movw	r18, r16
    3782:	09 8b       	std	Y+17, r16	; 0x11
    3784:	1a 8b       	std	Y+18, r17	; 0x12
    3786:	2b 8b       	std	Y+19, r18	; 0x13
    3788:	3c 8b       	std	Y+20, r19	; 0x14
    378a:	c1 14       	cp	r12, r1
    378c:	d1 04       	cpc	r13, r1
    378e:	e1 04       	cpc	r14, r1
    3790:	f1 04       	cpc	r15, r1
    3792:	09 f4       	brne	.+2      	; 0x3796 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x456>
    3794:	8a c0       	rjmp	.+276    	; 0x38aa <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x56a>
    3796:	11 e0       	ldi	r17, 0x01	; 1
    3798:	c1 16       	cp	r12, r17
    379a:	d1 06       	cpc	r13, r17
    379c:	e1 04       	cpc	r14, r1
    379e:	f1 04       	cpc	r15, r1
    37a0:	08 f0       	brcs	.+2      	; 0x37a4 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x464>
    37a2:	5d c0       	rjmp	.+186    	; 0x385e <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x51e>
    37a4:	2d 89       	ldd	r18, Y+21	; 0x15
    37a6:	3e 89       	ldd	r19, Y+22	; 0x16
    37a8:	4f 89       	ldd	r20, Y+23	; 0x17
    37aa:	58 8d       	ldd	r21, Y+24	; 0x18
    37ac:	c7 01       	movw	r24, r14
    37ae:	b6 01       	movw	r22, r12
    37b0:	0e 94 54 24 	call	0x48a8	; 0x48a8 <__mulsi3>
    37b4:	6f a7       	std	Y+47, r22	; 0x2f
    37b6:	78 ab       	std	Y+48, r23	; 0x30
    37b8:	89 ab       	std	Y+49, r24	; 0x31
    37ba:	9a ab       	std	Y+50, r25	; 0x32
    37bc:	09 81       	ldd	r16, Y+1	; 0x01
    37be:	1a 81       	ldd	r17, Y+2	; 0x02
    37c0:	2b 81       	ldd	r18, Y+3	; 0x03
    37c2:	3c 81       	ldd	r19, Y+4	; 0x04
    37c4:	06 1b       	sub	r16, r22
    37c6:	17 0b       	sbc	r17, r23
    37c8:	28 0b       	sbc	r18, r24
    37ca:	39 0b       	sbc	r19, r25
    37cc:	0b a7       	std	Y+43, r16	; 0x2b
    37ce:	1c a7       	std	Y+44, r17	; 0x2c
    37d0:	2d a7       	std	Y+45, r18	; 0x2d
    37d2:	3e a7       	std	Y+46, r19	; 0x2e
    37d4:	49 89       	ldd	r20, Y+17	; 0x11
    37d6:	5a 89       	ldd	r21, Y+18	; 0x12
    37d8:	6b 89       	ldd	r22, Y+19	; 0x13
    37da:	7c 89       	ldd	r23, Y+20	; 0x14
    37dc:	40 17       	cp	r20, r16
    37de:	51 07       	cpc	r21, r17
    37e0:	62 07       	cpc	r22, r18
    37e2:	73 07       	cpc	r23, r19
    37e4:	50 f0       	brcs	.+20     	; 0x37fa <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x4ba>
    37e6:	53 01       	movw	r10, r6
    37e8:	42 01       	movw	r8, r4
    37ea:	c9 86       	std	Y+9, r12	; 0x09
    37ec:	da 86       	std	Y+10, r13	; 0x0a
    37ee:	eb 86       	std	Y+11, r14	; 0x0b
    37f0:	fc 86       	std	Y+12, r15	; 0x0c
    37f2:	09 8b       	std	Y+17, r16	; 0x11
    37f4:	1a 8b       	std	Y+18, r17	; 0x12
    37f6:	2b 8b       	std	Y+19, r18	; 0x13
    37f8:	3c 8b       	std	Y+20, r19	; 0x14
    37fa:	c1 14       	cp	r12, r1
    37fc:	51 e0       	ldi	r21, 0x01	; 1
    37fe:	d5 06       	cpc	r13, r21
    3800:	e1 04       	cpc	r14, r1
    3802:	f1 04       	cpc	r15, r1
    3804:	61 f1       	breq	.+88     	; 0x385e <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x51e>
    3806:	6f ef       	ldi	r22, 0xFF	; 255
    3808:	c6 1a       	sub	r12, r22
    380a:	d6 0a       	sbc	r13, r22
    380c:	e6 0a       	sbc	r14, r22
    380e:	f6 0a       	sbc	r15, r22
    3810:	8d 89       	ldd	r24, Y+21	; 0x15
    3812:	9e 89       	ldd	r25, Y+22	; 0x16
    3814:	af 89       	ldd	r26, Y+23	; 0x17
    3816:	b8 8d       	ldd	r27, Y+24	; 0x18
    3818:	0f a5       	ldd	r16, Y+47	; 0x2f
    381a:	18 a9       	ldd	r17, Y+48	; 0x30
    381c:	29 a9       	ldd	r18, Y+49	; 0x31
    381e:	3a a9       	ldd	r19, Y+50	; 0x32
    3820:	80 0f       	add	r24, r16
    3822:	91 1f       	adc	r25, r17
    3824:	a2 1f       	adc	r26, r18
    3826:	b3 1f       	adc	r27, r19
    3828:	09 81       	ldd	r16, Y+1	; 0x01
    382a:	1a 81       	ldd	r17, Y+2	; 0x02
    382c:	2b 81       	ldd	r18, Y+3	; 0x03
    382e:	3c 81       	ldd	r19, Y+4	; 0x04
    3830:	80 1b       	sub	r24, r16
    3832:	91 0b       	sbc	r25, r17
    3834:	a2 0b       	sbc	r26, r18
    3836:	b3 0b       	sbc	r27, r19
    3838:	09 89       	ldd	r16, Y+17	; 0x11
    383a:	1a 89       	ldd	r17, Y+18	; 0x12
    383c:	2b 89       	ldd	r18, Y+19	; 0x13
    383e:	3c 89       	ldd	r19, Y+20	; 0x14
    3840:	08 17       	cp	r16, r24
    3842:	19 07       	cpc	r17, r25
    3844:	2a 07       	cpc	r18, r26
    3846:	3b 07       	cpc	r19, r27
    3848:	50 f0       	brcs	.+20     	; 0x385e <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x51e>
    384a:	53 01       	movw	r10, r6
    384c:	42 01       	movw	r8, r4
    384e:	c9 86       	std	Y+9, r12	; 0x09
    3850:	da 86       	std	Y+10, r13	; 0x0a
    3852:	eb 86       	std	Y+11, r14	; 0x0b
    3854:	fc 86       	std	Y+12, r15	; 0x0c
    3856:	89 8b       	std	Y+17, r24	; 0x11
    3858:	9a 8b       	std	Y+18, r25	; 0x12
    385a:	ab 8b       	std	Y+19, r26	; 0x13
    385c:	bc 8b       	std	Y+20, r27	; 0x14
    385e:	1f ef       	ldi	r17, 0xFF	; 255
    3860:	41 1a       	sub	r4, r17
    3862:	51 0a       	sbc	r5, r17
    3864:	61 0a       	sbc	r6, r17
    3866:	71 0a       	sbc	r7, r17
    3868:	6d a1       	ldd	r22, Y+37	; 0x25
    386a:	7e a1       	ldd	r23, Y+38	; 0x26
    386c:	8f a1       	ldd	r24, Y+39	; 0x27
    386e:	98 a5       	ldd	r25, Y+40	; 0x28
    3870:	a3 01       	movw	r20, r6
    3872:	92 01       	movw	r18, r4
    3874:	0e 94 64 24 	call	0x48c8	; 0x48c8 <__udivmodsi4>
    3878:	69 01       	movw	r12, r18
    387a:	7a 01       	movw	r14, r20
    387c:	0d 89       	ldd	r16, Y+21	; 0x15
    387e:	1e 89       	ldd	r17, Y+22	; 0x16
    3880:	2f 89       	ldd	r18, Y+23	; 0x17
    3882:	38 8d       	ldd	r19, Y+24	; 0x18
    3884:	49 8d       	ldd	r20, Y+25	; 0x19
    3886:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3888:	6b 8d       	ldd	r22, Y+27	; 0x1b
    388a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    388c:	04 0f       	add	r16, r20
    388e:	15 1f       	adc	r17, r21
    3890:	26 1f       	adc	r18, r22
    3892:	37 1f       	adc	r19, r23
    3894:	0d 8b       	std	Y+21, r16	; 0x15
    3896:	1e 8b       	std	Y+22, r17	; 0x16
    3898:	2f 8b       	std	Y+23, r18	; 0x17
    389a:	38 8f       	std	Y+24, r19	; 0x18
    389c:	51 e3       	ldi	r21, 0x31	; 49
    389e:	45 16       	cp	r4, r21
    38a0:	51 04       	cpc	r5, r1
    38a2:	61 04       	cpc	r6, r1
    38a4:	71 04       	cpc	r7, r1
    38a6:	09 f0       	breq	.+2      	; 0x38aa <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x56a>
    38a8:	70 cf       	rjmp	.-288    	; 0x378a <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x44a>
    38aa:	c5 01       	movw	r24, r10
    38ac:	b4 01       	movw	r22, r8
    38ae:	25 e0       	ldi	r18, 0x05	; 5
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	40 e0       	ldi	r20, 0x00	; 0
    38b4:	50 e0       	ldi	r21, 0x00	; 0
    38b6:	0e 94 64 24 	call	0x48c8	; 0x48c8 <__udivmodsi4>
    38ba:	21 15       	cp	r18, r1
    38bc:	31 05       	cpc	r19, r1
    38be:	41 05       	cpc	r20, r1
    38c0:	51 05       	cpc	r21, r1
    38c2:	21 f4       	brne	.+8      	; 0x38cc <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x58c>
    38c4:	21 e0       	ldi	r18, 0x01	; 1
    38c6:	30 e0       	ldi	r19, 0x00	; 0
    38c8:	40 e0       	ldi	r20, 0x00	; 0
    38ca:	50 e0       	ldi	r21, 0x00	; 0
    38cc:	d5 01       	movw	r26, r10
    38ce:	c4 01       	movw	r24, r8
    38d0:	01 97       	sbiw	r24, 0x01	; 1
    38d2:	a1 09       	sbc	r26, r1
    38d4:	b1 09       	sbc	r27, r1
    38d6:	82 1b       	sub	r24, r18
    38d8:	93 0b       	sbc	r25, r19
    38da:	a4 0b       	sbc	r26, r20
    38dc:	b5 0b       	sbc	r27, r21
    38de:	81 32       	cpi	r24, 0x21	; 33
    38e0:	91 05       	cpc	r25, r1
    38e2:	a1 05       	cpc	r26, r1
    38e4:	b1 05       	cpc	r27, r1
    38e6:	80 f0       	brcs	.+32     	; 0x3908 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x5c8>
    38e8:	ba 01       	movw	r22, r20
    38ea:	a9 01       	movw	r20, r18
    38ec:	40 52       	subi	r20, 0x20	; 32
    38ee:	51 09       	sbc	r21, r1
    38f0:	61 09       	sbc	r22, r1
    38f2:	71 09       	sbc	r23, r1
    38f4:	9a 01       	movw	r18, r20
    38f6:	ab 01       	movw	r20, r22
    38f8:	28 0f       	add	r18, r24
    38fa:	39 1f       	adc	r19, r25
    38fc:	4a 1f       	adc	r20, r26
    38fe:	5b 1f       	adc	r21, r27
    3900:	80 e2       	ldi	r24, 0x20	; 32
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	a0 e0       	ldi	r26, 0x00	; 0
    3906:	b0 e0       	ldi	r27, 0x00	; 0
    3908:	09 85       	ldd	r16, Y+9	; 0x09
    390a:	1a 85       	ldd	r17, Y+10	; 0x0a
    390c:	08 9f       	mul	r16, r24
    390e:	b0 01       	movw	r22, r0
    3910:	09 9f       	mul	r16, r25
    3912:	70 0d       	add	r23, r0
    3914:	18 9f       	mul	r17, r24
    3916:	70 0d       	add	r23, r0
    3918:	11 24       	eor	r1, r1
    391a:	60 34       	cpi	r22, 0x40	; 64
    391c:	71 05       	cpc	r23, r1
    391e:	08 f0       	brcs	.+2      	; 0x3922 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x5e2>
    3920:	6f e3       	ldi	r22, 0x3F	; 63
    3922:	e9 a5       	ldd	r30, Y+41	; 0x29
    3924:	fa a5       	ldd	r31, Y+42	; 0x2a
    3926:	64 8b       	std	Z+20, r22	; 0x14
    3928:	82 87       	std	Z+10, r24	; 0x0a
    392a:	23 87       	std	Z+11, r18	; 0x0b
    392c:	24 87       	std	Z+12, r18	; 0x0c
    392e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3930:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3932:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3934:	58 a1       	ldd	r21, Y+32	; 0x20
    3936:	c5 01       	movw	r24, r10
    3938:	b4 01       	movw	r22, r8
    393a:	0e 94 54 24 	call	0x48a8	; 0x48a8 <__mulsi3>
    393e:	6b 01       	movw	r12, r22
    3940:	7c 01       	movw	r14, r24
    3942:	25 e0       	ldi	r18, 0x05	; 5
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	40 e0       	ldi	r20, 0x00	; 0
    3948:	50 e0       	ldi	r21, 0x00	; 0
    394a:	0e 94 64 24 	call	0x48c8	; 0x48c8 <__udivmodsi4>
    394e:	21 15       	cp	r18, r1
    3950:	31 05       	cpc	r19, r1
    3952:	41 05       	cpc	r20, r1
    3954:	51 05       	cpc	r21, r1
    3956:	21 f4       	brne	.+8      	; 0x3960 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x620>
    3958:	21 e0       	ldi	r18, 0x01	; 1
    395a:	30 e0       	ldi	r19, 0x00	; 0
    395c:	40 e0       	ldi	r20, 0x00	; 0
    395e:	50 e0       	ldi	r21, 0x00	; 0
    3960:	d7 01       	movw	r26, r14
    3962:	c6 01       	movw	r24, r12
    3964:	01 97       	sbiw	r24, 0x01	; 1
    3966:	a1 09       	sbc	r26, r1
    3968:	b1 09       	sbc	r27, r1
    396a:	82 1b       	sub	r24, r18
    396c:	93 0b       	sbc	r25, r19
    396e:	a4 0b       	sbc	r26, r20
    3970:	b5 0b       	sbc	r27, r21
    3972:	81 30       	cpi	r24, 0x01	; 1
    3974:	f1 e0       	ldi	r31, 0x01	; 1
    3976:	9f 07       	cpc	r25, r31
    3978:	a1 05       	cpc	r26, r1
    397a:	b1 05       	cpc	r27, r1
    397c:	78 f0       	brcs	.+30     	; 0x399c <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x65c>
    397e:	ba 01       	movw	r22, r20
    3980:	a9 01       	movw	r20, r18
    3982:	51 50       	subi	r21, 0x01	; 1
    3984:	61 09       	sbc	r22, r1
    3986:	71 09       	sbc	r23, r1
    3988:	9a 01       	movw	r18, r20
    398a:	ab 01       	movw	r20, r22
    398c:	28 0f       	add	r18, r24
    398e:	39 1f       	adc	r19, r25
    3990:	4a 1f       	adc	r20, r26
    3992:	5b 1f       	adc	r21, r27
    3994:	80 e0       	ldi	r24, 0x00	; 0
    3996:	91 e0       	ldi	r25, 0x01	; 1
    3998:	a0 e0       	ldi	r26, 0x00	; 0
    399a:	b0 e0       	ldi	r27, 0x00	; 0
    399c:	e9 a5       	ldd	r30, Y+41	; 0x29
    399e:	fa a5       	ldd	r31, Y+42	; 0x2a
    39a0:	16 87       	std	Z+14, r17	; 0x0e
    39a2:	05 87       	std	Z+13, r16	; 0x0d
    39a4:	90 8b       	std	Z+16, r25	; 0x10
    39a6:	87 87       	std	Z+15, r24	; 0x0f
    39a8:	21 8b       	std	Z+17, r18	; 0x11
    39aa:	22 8b       	std	Z+18, r18	; 0x12
    39ac:	2d 85       	ldd	r18, Y+13	; 0x0d
    39ae:	3e 85       	ldd	r19, Y+14	; 0x0e
    39b0:	4f 85       	ldd	r20, Y+15	; 0x0f
    39b2:	58 89       	ldd	r21, Y+16	; 0x10
    39b4:	69 85       	ldd	r22, Y+9	; 0x09
    39b6:	7a 85       	ldd	r23, Y+10	; 0x0a
    39b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    39ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    39bc:	0e 94 54 24 	call	0x48a8	; 0x48a8 <__mulsi3>
    39c0:	9b 01       	movw	r18, r22
    39c2:	ac 01       	movw	r20, r24
    39c4:	c7 01       	movw	r24, r14
    39c6:	b6 01       	movw	r22, r12
    39c8:	0e 94 54 24 	call	0x48a8	; 0x48a8 <__mulsi3>
    39cc:	2b 01       	movw	r4, r22
    39ce:	3c 01       	movw	r6, r24
    39d0:	09 81       	ldd	r16, Y+1	; 0x01
    39d2:	1a 81       	ldd	r17, Y+2	; 0x02
    39d4:	2b 81       	ldd	r18, Y+3	; 0x03
    39d6:	3c 81       	ldd	r19, Y+4	; 0x04
    39d8:	60 17       	cp	r22, r16
    39da:	71 07       	cpc	r23, r17
    39dc:	82 07       	cpc	r24, r18
    39de:	93 07       	cpc	r25, r19
    39e0:	38 f4       	brcc	.+14     	; 0x39f0 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x6b0>
    39e2:	d9 01       	movw	r26, r18
    39e4:	c8 01       	movw	r24, r16
    39e6:	84 19       	sub	r24, r4
    39e8:	95 09       	sbc	r25, r5
    39ea:	a6 09       	sbc	r26, r6
    39ec:	b7 09       	sbc	r27, r7
    39ee:	0a c0       	rjmp	.+20     	; 0x3a04 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x6c4>
    39f0:	dc 01       	movw	r26, r24
    39f2:	cb 01       	movw	r24, r22
    39f4:	09 81       	ldd	r16, Y+1	; 0x01
    39f6:	1a 81       	ldd	r17, Y+2	; 0x02
    39f8:	2b 81       	ldd	r18, Y+3	; 0x03
    39fa:	3c 81       	ldd	r19, Y+4	; 0x04
    39fc:	80 1b       	sub	r24, r16
    39fe:	91 0b       	sbc	r25, r17
    3a00:	a2 0b       	sbc	r26, r18
    3a02:	b3 0b       	sbc	r27, r19
    3a04:	8c 01       	movw	r16, r24
    3a06:	9d 01       	movw	r18, r26
    3a08:	40 e0       	ldi	r20, 0x00	; 0
    3a0a:	50 e0       	ldi	r21, 0x00	; 0
    3a0c:	ba 01       	movw	r22, r20
    3a0e:	89 83       	std	Y+1, r24	; 0x01
    3a10:	1a 83       	std	Y+2, r17	; 0x02
    3a12:	2b 83       	std	Y+3, r18	; 0x03
    3a14:	3c 83       	std	Y+4, r19	; 0x04
    3a16:	4d 83       	std	Y+5, r20	; 0x05
    3a18:	5e 83       	std	Y+6, r21	; 0x06
    3a1a:	6f 83       	std	Y+7, r22	; 0x07
    3a1c:	78 87       	std	Y+8, r23	; 0x08
    3a1e:	80 e4       	ldi	r24, 0x40	; 64
    3a20:	a8 2e       	mov	r10, r24
    3a22:	92 e4       	ldi	r25, 0x42	; 66
    3a24:	b9 2e       	mov	r11, r25
    3a26:	2f e0       	ldi	r18, 0x0F	; 15
    3a28:	c2 2e       	mov	r12, r18
    3a2a:	d1 2c       	mov	r13, r1
    3a2c:	e1 2c       	mov	r14, r1
    3a2e:	f1 2c       	mov	r15, r1
    3a30:	00 e0       	ldi	r16, 0x00	; 0
    3a32:	10 e0       	ldi	r17, 0x00	; 0
    3a34:	29 81       	ldd	r18, Y+1	; 0x01
    3a36:	3a 81       	ldd	r19, Y+2	; 0x02
    3a38:	4b 81       	ldd	r20, Y+3	; 0x03
    3a3a:	5c 81       	ldd	r21, Y+4	; 0x04
    3a3c:	6d 81       	ldd	r22, Y+5	; 0x05
    3a3e:	7e 81       	ldd	r23, Y+6	; 0x06
    3a40:	8f 81       	ldd	r24, Y+7	; 0x07
    3a42:	98 85       	ldd	r25, Y+8	; 0x08
    3a44:	0e 94 a7 24 	call	0x494e	; 0x494e <__muldi3>
    3a48:	79 01       	movw	r14, r18
    3a4a:	8a 01       	movw	r16, r20
    3a4c:	1b 01       	movw	r2, r22
    3a4e:	4c 01       	movw	r8, r24
    3a50:	c3 01       	movw	r24, r6
    3a52:	b2 01       	movw	r22, r4
    3a54:	29 a1       	ldd	r18, Y+33	; 0x21
    3a56:	3a a1       	ldd	r19, Y+34	; 0x22
    3a58:	4b a1       	ldd	r20, Y+35	; 0x23
    3a5a:	5c a1       	ldd	r21, Y+36	; 0x24
    3a5c:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__umulsidi3>
    3a60:	59 01       	movw	r10, r18
    3a62:	6a 01       	movw	r12, r20
    3a64:	76 2e       	mov	r7, r22
    3a66:	b7 2f       	mov	r27, r23
    3a68:	a8 2f       	mov	r26, r24
    3a6a:	f9 2f       	mov	r31, r25
    3a6c:	e1 e0       	ldi	r30, 0x01	; 1
    3a6e:	97 01       	movw	r18, r14
    3a70:	a8 01       	movw	r20, r16
    3a72:	b1 01       	movw	r22, r2
    3a74:	c4 01       	movw	r24, r8
    3a76:	e7 2c       	mov	r14, r7
    3a78:	fb 2e       	mov	r15, r27
    3a7a:	0a 2f       	mov	r16, r26
    3a7c:	1f 2f       	mov	r17, r31
    3a7e:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <__cmpdi2>
    3a82:	11 f0       	breq	.+4      	; 0x3a88 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x748>
    3a84:	08 f0       	brcs	.+2      	; 0x3a88 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x748>
    3a86:	e0 e0       	ldi	r30, 0x00	; 0
    3a88:	a9 a5       	ldd	r26, Y+41	; 0x29
    3a8a:	ba a5       	ldd	r27, Y+42	; 0x2a
    3a8c:	53 96       	adiw	r26, 0x13	; 19
    3a8e:	ec 93       	st	X, r30
    3a90:	e2 96       	adiw	r28, 0x32	; 50
    3a92:	0f b6       	in	r0, 0x3f	; 63
    3a94:	f8 94       	cli
    3a96:	de bf       	out	0x3e, r29	; 62
    3a98:	0f be       	out	0x3f, r0	; 63
    3a9a:	cd bf       	out	0x3d, r28	; 61
    3a9c:	df 91       	pop	r29
    3a9e:	cf 91       	pop	r28
    3aa0:	1f 91       	pop	r17
    3aa2:	0f 91       	pop	r16
    3aa4:	ff 90       	pop	r15
    3aa6:	ef 90       	pop	r14
    3aa8:	df 90       	pop	r13
    3aaa:	cf 90       	pop	r12
    3aac:	bf 90       	pop	r11
    3aae:	af 90       	pop	r10
    3ab0:	9f 90       	pop	r9
    3ab2:	8f 90       	pop	r8
    3ab4:	7f 90       	pop	r7
    3ab6:	6f 90       	pop	r6
    3ab8:	5f 90       	pop	r5
    3aba:	4f 90       	pop	r4
    3abc:	3f 90       	pop	r3
    3abe:	2f 90       	pop	r2
    3ac0:	08 95       	ret

00003ac2 <_ZNK18ACAN2517FDSettings42dataBitRateIsAMultipleOfArbitrationBitRateEv>:
    3ac2:	cf 92       	push	r12
    3ac4:	df 92       	push	r13
    3ac6:	ef 92       	push	r14
    3ac8:	ff 92       	push	r15
    3aca:	fc 01       	movw	r30, r24
    3acc:	21 85       	ldd	r18, Z+9	; 0x09
    3ace:	21 30       	cpi	r18, 0x01	; 1
    3ad0:	d9 f0       	breq	.+54     	; 0x3b08 <_ZNK18ACAN2517FDSettings42dataBitRateIsAMultipleOfArbitrationBitRateEv+0x46>
    3ad2:	a2 85       	ldd	r26, Z+10	; 0x0a
    3ad4:	b0 e0       	ldi	r27, 0x00	; 0
    3ad6:	11 96       	adiw	r26, 0x01	; 1
    3ad8:	83 85       	ldd	r24, Z+11	; 0x0b
    3ada:	a8 0f       	add	r26, r24
    3adc:	b1 1d       	adc	r27, r1
    3ade:	30 e0       	ldi	r19, 0x00	; 0
    3ae0:	0e 94 95 24 	call	0x492a	; 0x492a <__usmulhisi3>
    3ae4:	47 85       	ldd	r20, Z+15	; 0x0f
    3ae6:	50 89       	ldd	r21, Z+16	; 0x10
    3ae8:	4f 5f       	subi	r20, 0xFF	; 255
    3aea:	5f 4f       	sbci	r21, 0xFF	; 255
    3aec:	21 89       	ldd	r18, Z+17	; 0x11
    3aee:	42 0f       	add	r20, r18
    3af0:	51 1d       	adc	r21, r1
    3af2:	6a 01       	movw	r12, r20
    3af4:	e1 2c       	mov	r14, r1
    3af6:	f1 2c       	mov	r15, r1
    3af8:	21 e0       	ldi	r18, 0x01	; 1
    3afa:	6c 15       	cp	r22, r12
    3afc:	7d 05       	cpc	r23, r13
    3afe:	8e 05       	cpc	r24, r14
    3b00:	9f 05       	cpc	r25, r15
    3b02:	19 f0       	breq	.+6      	; 0x3b0a <_ZNK18ACAN2517FDSettings42dataBitRateIsAMultipleOfArbitrationBitRateEv+0x48>
    3b04:	20 e0       	ldi	r18, 0x00	; 0
    3b06:	01 c0       	rjmp	.+2      	; 0x3b0a <_ZNK18ACAN2517FDSettings42dataBitRateIsAMultipleOfArbitrationBitRateEv+0x48>
    3b08:	21 e0       	ldi	r18, 0x01	; 1
    3b0a:	82 2f       	mov	r24, r18
    3b0c:	ff 90       	pop	r15
    3b0e:	ef 90       	pop	r14
    3b10:	df 90       	pop	r13
    3b12:	cf 90       	pop	r12
    3b14:	08 95       	ret

00003b16 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv>:

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::CANBitSettingConsistency (void) const {
    3b16:	cf 92       	push	r12
    3b18:	df 92       	push	r13
    3b1a:	ef 92       	push	r14
    3b1c:	ff 92       	push	r15
    3b1e:	cf 93       	push	r28
    3b20:	df 93       	push	r29
    3b22:	fc 01       	movw	r30, r24
  uint32_t errorCode = 0 ; // Means no error
//--- Bit rate prescaler
  if (mBitRatePrescaler == 0) {
    3b24:	85 85       	ldd	r24, Z+13	; 0x0d
    3b26:	96 85       	ldd	r25, Z+14	; 0x0e
    3b28:	00 97       	sbiw	r24, 0x00	; 0
    3b2a:	49 f0       	breq	.+18     	; 0x3b3e <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x28>
    errorCode |= kBitRatePrescalerIsZero ;
  }else if (mBitRatePrescaler > MAX_BRP) {
    3b2c:	81 30       	cpi	r24, 0x01	; 1
    3b2e:	91 40       	sbci	r25, 0x01	; 1
    3b30:	58 f0       	brcs	.+22     	; 0x3b48 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x32>
    errorCode |= kBitRatePrescalerIsGreaterThan256 ;
    3b32:	92 e0       	ldi	r25, 0x02	; 2
    3b34:	c9 2e       	mov	r12, r25
    3b36:	d1 2c       	mov	r13, r1
    3b38:	e1 2c       	mov	r14, r1
    3b3a:	f1 2c       	mov	r15, r1
    3b3c:	08 c0       	rjmp	.+16     	; 0x3b4e <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x38>

uint32_t ACAN2517FDSettings::CANBitSettingConsistency (void) const {
  uint32_t errorCode = 0 ; // Means no error
//--- Bit rate prescaler
  if (mBitRatePrescaler == 0) {
    errorCode |= kBitRatePrescalerIsZero ;
    3b3e:	c1 2c       	mov	r12, r1
    3b40:	d1 2c       	mov	r13, r1
    3b42:	76 01       	movw	r14, r12
    3b44:	c3 94       	inc	r12
    3b46:	03 c0       	rjmp	.+6      	; 0x3b4e <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x38>
}

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::CANBitSettingConsistency (void) const {
  uint32_t errorCode = 0 ; // Means no error
    3b48:	c1 2c       	mov	r12, r1
    3b4a:	d1 2c       	mov	r13, r1
    3b4c:	76 01       	movw	r14, r12
    errorCode |= kBitRatePrescalerIsZero ;
  }else if (mBitRatePrescaler > MAX_BRP) {
    errorCode |= kBitRatePrescalerIsGreaterThan256 ;
  }
//--- Arbitration Phase Segment 1
  if (mArbitrationPhaseSegment1 < 2) {
    3b4e:	27 85       	ldd	r18, Z+15	; 0x0f
    3b50:	30 89       	ldd	r19, Z+16	; 0x10
    3b52:	22 30       	cpi	r18, 0x02	; 2
    3b54:	31 05       	cpc	r19, r1
    3b56:	18 f4       	brcc	.+6      	; 0x3b5e <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x48>
    errorCode |= kArbitrationPhaseSegment1IsLowerThan2 ;
    3b58:	68 94       	set
    3b5a:	c2 f8       	bld	r12, 2
    3b5c:	06 c0       	rjmp	.+12     	; 0x3b6a <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x54>
  }else if (mArbitrationPhaseSegment1 > MAX_ARBITRATION_PHASE_SEGMENT_1) {
    3b5e:	21 30       	cpi	r18, 0x01	; 1
    3b60:	81 e0       	ldi	r24, 0x01	; 1
    3b62:	38 07       	cpc	r19, r24
    3b64:	10 f0       	brcs	.+4      	; 0x3b6a <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x54>
    errorCode |= kArbitrationPhaseSegment1IsGreaterThan256 ;
    3b66:	68 94       	set
    3b68:	c3 f8       	bld	r12, 3
  }
//--- Arbitration Phase Segment 2
  if (mArbitrationPhaseSegment2 == 0) {
    3b6a:	91 89       	ldd	r25, Z+17	; 0x11
    3b6c:	91 11       	cpse	r25, r1
    3b6e:	03 c0       	rjmp	.+6      	; 0x3b76 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x60>
    errorCode |= kArbitrationPhaseSegment2IsZero ;
    3b70:	68 94       	set
    3b72:	c4 f8       	bld	r12, 4
    3b74:	04 c0       	rjmp	.+8      	; 0x3b7e <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x68>
  }else if (mArbitrationPhaseSegment2 > MAX_ARBITRATION_PHASE_SEGMENT_2) {
    3b76:	91 38       	cpi	r25, 0x81	; 129
    3b78:	10 f0       	brcs	.+4      	; 0x3b7e <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x68>
    errorCode |= kArbitrationPhaseSegment2IsGreaterThan128 ;
    3b7a:	68 94       	set
    3b7c:	c5 f8       	bld	r12, 5
  }
//--- Arbitration SJW
  if (mArbitrationSJW == 0) {
    3b7e:	82 89       	ldd	r24, Z+18	; 0x12
    3b80:	81 11       	cpse	r24, r1
    3b82:	03 c0       	rjmp	.+6      	; 0x3b8a <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x74>
    errorCode |= kArbitrationSJWIsZero ;
    3b84:	68 94       	set
    3b86:	c6 f8       	bld	r12, 6
    3b88:	04 c0       	rjmp	.+8      	; 0x3b92 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x7c>
  }else if (mArbitrationSJW > MAX_ARBITRATION_SJW) {
    3b8a:	81 38       	cpi	r24, 0x81	; 129
    3b8c:	10 f0       	brcs	.+4      	; 0x3b92 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x7c>
    errorCode |= kArbitrationSJWIsGreaterThan128 ;
    3b8e:	68 94       	set
    3b90:	c7 f8       	bld	r12, 7
  }
  if (mArbitrationSJW > mArbitrationPhaseSegment1) {
    3b92:	48 2f       	mov	r20, r24
    3b94:	50 e0       	ldi	r21, 0x00	; 0
    3b96:	24 17       	cp	r18, r20
    3b98:	35 07       	cpc	r19, r21
    3b9a:	10 f4       	brcc	.+4      	; 0x3ba0 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x8a>
    errorCode |= kArbitrationSJWIsGreaterThanPhaseSegment1 ;
    3b9c:	68 94       	set
    3b9e:	d0 f8       	bld	r13, 0
  }
  if (mArbitrationSJW > mArbitrationPhaseSegment2) {
    3ba0:	98 17       	cp	r25, r24
    3ba2:	10 f4       	brcc	.+4      	; 0x3ba8 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x92>
    errorCode |= kArbitrationSJWIsGreaterThanPhaseSegment2 ;
    3ba4:	68 94       	set
    3ba6:	d1 f8       	bld	r13, 1
  }
//--- Data bit rate ?
  if (mDataBitRateFactor != DataBitRateFactor::x1) {
    3ba8:	81 85       	ldd	r24, Z+9	; 0x09
    3baa:	81 30       	cpi	r24, 0x01	; 1
    3bac:	71 f1       	breq	.+92     	; 0x3c0a <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xf4>
    3bae:	ef 01       	movw	r28, r30
    if (! dataBitRateIsAMultipleOfArbitrationBitRate ()) {
    3bb0:	cf 01       	movw	r24, r30
    3bb2:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <_ZNK18ACAN2517FDSettings42dataBitRateIsAMultipleOfArbitrationBitRateEv>
    3bb6:	81 11       	cpse	r24, r1
    3bb8:	02 c0       	rjmp	.+4      	; 0x3bbe <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xa8>
      errorCode |= kArbitrationTQCountNotDivisibleByDataBitRateFactor ;
    3bba:	68 94       	set
    3bbc:	d2 f8       	bld	r13, 2
    }
  //--- Data Phase Segment 1
    if (mDataPhaseSegment1 < 2) {
    3bbe:	2a 85       	ldd	r18, Y+10	; 0x0a
    3bc0:	22 30       	cpi	r18, 0x02	; 2
    3bc2:	18 f4       	brcc	.+6      	; 0x3bca <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xb4>
      errorCode |= kDataPhaseSegment1IsLowerThan2 ;
    3bc4:	68 94       	set
    3bc6:	d3 f8       	bld	r13, 3
    3bc8:	04 c0       	rjmp	.+8      	; 0x3bd2 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xbc>
    }else if (mDataPhaseSegment1 > MAX_DATA_PHASE_SEGMENT_1) {
    3bca:	21 32       	cpi	r18, 0x21	; 33
    3bcc:	10 f0       	brcs	.+4      	; 0x3bd2 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xbc>
      errorCode |= kDataPhaseSegment1IsGreaterThan32 ;
    3bce:	68 94       	set
    3bd0:	d4 f8       	bld	r13, 4
    }
  //--- Data Phase Segment 2
    if (mDataPhaseSegment2 == 0) {
    3bd2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bd4:	91 11       	cpse	r25, r1
    3bd6:	03 c0       	rjmp	.+6      	; 0x3bde <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xc8>
      errorCode |= kDataPhaseSegment2IsZero ;
    3bd8:	68 94       	set
    3bda:	d5 f8       	bld	r13, 5
    3bdc:	04 c0       	rjmp	.+8      	; 0x3be6 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xd0>
    }else if (mDataPhaseSegment2 > MAX_DATA_PHASE_SEGMENT_2) {
    3bde:	91 31       	cpi	r25, 0x11	; 17
    3be0:	10 f0       	brcs	.+4      	; 0x3be6 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xd0>
      errorCode |= kDataPhaseSegment2IsGreaterThan16 ;
    3be2:	68 94       	set
    3be4:	d6 f8       	bld	r13, 6
    }
  //--- Data SJW
    if (mDataSJW == 0) {
    3be6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3be8:	81 11       	cpse	r24, r1
    3bea:	03 c0       	rjmp	.+6      	; 0x3bf2 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xdc>
      errorCode |= kDataSJWIsZero ;
    3bec:	68 94       	set
    3bee:	d7 f8       	bld	r13, 7
    3bf0:	0c c0       	rjmp	.+24     	; 0x3c0a <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xf4>
    }else if (mDataSJW > MAX_DATA_SJW) {
    3bf2:	81 31       	cpi	r24, 0x11	; 17
    3bf4:	10 f0       	brcs	.+4      	; 0x3bfa <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xe4>
      errorCode |= kDataSJWIsGreaterThan16 ;
    3bf6:	68 94       	set
    3bf8:	e0 f8       	bld	r14, 0
    }
    if (mDataSJW > mDataPhaseSegment1) {
    3bfa:	28 17       	cp	r18, r24
    3bfc:	10 f4       	brcc	.+4      	; 0x3c02 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xec>
      errorCode |= kDataSJWIsGreaterThanPhaseSegment1 ;
    3bfe:	68 94       	set
    3c00:	e1 f8       	bld	r14, 1
    }
    if (mDataSJW > mDataPhaseSegment2) {
    3c02:	98 17       	cp	r25, r24
    3c04:	10 f4       	brcc	.+4      	; 0x3c0a <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xf4>
      errorCode |= kDataSJWIsGreaterThanPhaseSegment2 ;
    3c06:	68 94       	set
    3c08:	e2 f8       	bld	r14, 2
    }
  }
//---
  return errorCode ;
}
    3c0a:	c7 01       	movw	r24, r14
    3c0c:	b6 01       	movw	r22, r12
    3c0e:	df 91       	pop	r29
    3c10:	cf 91       	pop	r28
    3c12:	ff 90       	pop	r15
    3c14:	ef 90       	pop	r14
    3c16:	df 90       	pop	r13
    3c18:	cf 90       	pop	r12
    3c1a:	08 95       	ret

00003c1c <_ZNK18ACAN2517FDSettings8ramUsageEv>:

//----------------------------------------------------------------------------------------------------------------------
//   RAM USAGE
//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::ramUsage (void) const {
    3c1c:	cf 92       	push	r12
    3c1e:	df 92       	push	r13
    3c20:	ef 92       	push	r14
    3c22:	ff 92       	push	r15
    3c24:	cf 93       	push	r28
    3c26:	df 93       	push	r29
    3c28:	fc 01       	movw	r30, r24

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::objectSizeForPayload (const PayloadSize inPayload) {
  static const uint8_t kPayload [8] = {16, 20, 24, 28, 32, 40, 56, 72} ;
  return kPayload [inPayload] ;
    3c2a:	a1 a1       	ldd	r26, Z+33	; 0x21
    3c2c:	b0 e0       	ldi	r27, 0x00	; 0
    3c2e:	ab 53       	subi	r26, 0x3B	; 59
    3c30:	bd 4f       	sbci	r27, 0xFD	; 253
    3c32:	ac 91       	ld	r26, X
//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::ramUsage (void) const {
  uint32_t result = 0 ;
//--- TXQ
  result += objectSizeForPayload (mControllerTXQBufferPayload) * mControllerTXQSize ;
    3c34:	20 a1       	ldd	r18, Z+32	; 0x20

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::objectSizeForPayload (const PayloadSize inPayload) {
  static const uint8_t kPayload [8] = {16, 20, 24, 28, 32, 40, 56, 72} ;
  return kPayload [inPayload] ;
    3c36:	c6 a1       	ldd	r28, Z+38	; 0x26
    3c38:	d0 e0       	ldi	r29, 0x00	; 0
    3c3a:	cb 53       	subi	r28, 0x3B	; 59
    3c3c:	dd 4f       	sbci	r29, 0xFD	; 253
    3c3e:	48 81       	ld	r20, Y
uint32_t ACAN2517FDSettings::ramUsage (void) const {
  uint32_t result = 0 ;
//--- TXQ
  result += objectSizeForPayload (mControllerTXQBufferPayload) * mControllerTXQSize ;
//--- Receive FIFO (FIFO #1)
  result += objectSizeForPayload (mControllerReceiveFIFOPayload) * mControllerReceiveFIFOSize ;
    3c40:	57 a1       	ldd	r21, Z+39	; 0x27
    3c42:	30 e0       	ldi	r19, 0x00	; 0
    3c44:	b0 e0       	ldi	r27, 0x00	; 0
    3c46:	0e 94 86 24 	call	0x490c	; 0x490c <__umulhisi3>
    3c4a:	6b 01       	movw	r12, r22
    3c4c:	7c 01       	movw	r14, r24
    3c4e:	25 2f       	mov	r18, r21
    3c50:	30 e0       	ldi	r19, 0x00	; 0
    3c52:	a4 2f       	mov	r26, r20
    3c54:	b0 e0       	ldi	r27, 0x00	; 0
    3c56:	0e 94 86 24 	call	0x490c	; 0x490c <__umulhisi3>
    3c5a:	c6 0e       	add	r12, r22
    3c5c:	d7 1e       	adc	r13, r23
    3c5e:	e8 1e       	adc	r14, r24
    3c60:	f9 1e       	adc	r15, r25

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::objectSizeForPayload (const PayloadSize inPayload) {
  static const uint8_t kPayload [8] = {16, 20, 24, 28, 32, 40, 56, 72} ;
  return kPayload [inPayload] ;
    3c62:	a5 8d       	ldd	r26, Z+29	; 0x1d
    3c64:	b0 e0       	ldi	r27, 0x00	; 0
    3c66:	ab 53       	subi	r26, 0x3B	; 59
    3c68:	bd 4f       	sbci	r27, 0xFD	; 253
    3c6a:	2c 91       	ld	r18, X
//--- TXQ
  result += objectSizeForPayload (mControllerTXQBufferPayload) * mControllerTXQSize ;
//--- Receive FIFO (FIFO #1)
  result += objectSizeForPayload (mControllerReceiveFIFOPayload) * mControllerReceiveFIFOSize ;
//--- Send FIFO (FIFO #2)
  result += objectSizeForPayload (mControllerTransmitFIFOPayload) * mControllerTransmitFIFOSize ;
    3c6c:	a4 8d       	ldd	r26, Z+28	; 0x1c
//---
  return result ;
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	b0 e0       	ldi	r27, 0x00	; 0
    3c72:	0e 94 86 24 	call	0x490c	; 0x490c <__umulhisi3>
    3c76:	6c 0d       	add	r22, r12
    3c78:	7d 1d       	adc	r23, r13
    3c7a:	8e 1d       	adc	r24, r14
    3c7c:	9f 1d       	adc	r25, r15
}
    3c7e:	df 91       	pop	r29
    3c80:	cf 91       	pop	r28
    3c82:	ff 90       	pop	r15
    3c84:	ef 90       	pop	r14
    3c86:	df 90       	pop	r13
    3c88:	cf 90       	pop	r12
    3c8a:	08 95       	ret

00003c8c <_ZN18ACAN2517FDSettings20objectSizeForPayloadENS_11PayloadSizeE>:

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::objectSizeForPayload (const PayloadSize inPayload) {
  static const uint8_t kPayload [8] = {16, 20, 24, 28, 32, 40, 56, 72} ;
  return kPayload [inPayload] ;
    3c8c:	e8 2f       	mov	r30, r24
    3c8e:	f0 e0       	ldi	r31, 0x00	; 0
    3c90:	eb 53       	subi	r30, 0x3B	; 59
    3c92:	fd 4f       	sbci	r31, 0xFD	; 253
    3c94:	60 81       	ld	r22, Z
    3c96:	70 e0       	ldi	r23, 0x00	; 0
    3c98:	80 e0       	ldi	r24, 0x00	; 0
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
}
    3c9c:	08 95       	ret

00003c9e <_ZN8SPIClass5beginEv>:
    interruptMode = 0;
    #ifdef SPI_TRANSACTION_MISMATCH_LED
    inTransactionFlag = 0;
    #endif
  }
  SREG = sreg;
    3c9e:	cf 93       	push	r28
    3ca0:	cf b7       	in	r28, 0x3f	; 63
    3ca2:	f8 94       	cli
    3ca4:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <_ZN8SPIClass11initializedE>
    3ca8:	81 11       	cpse	r24, r1
    3caa:	27 c0       	rjmp	.+78     	; 0x3cfa <_ZN8SPIClass5beginEv+0x5c>
    3cac:	e1 e3       	ldi	r30, 0x31	; 49
    3cae:	f1 e0       	ldi	r31, 0x01	; 1
    3cb0:	84 91       	lpm	r24, Z
    3cb2:	ed e1       	ldi	r30, 0x1D	; 29
    3cb4:	f1 e0       	ldi	r31, 0x01	; 1
    3cb6:	94 91       	lpm	r25, Z
    3cb8:	e8 2f       	mov	r30, r24
    3cba:	f0 e0       	ldi	r31, 0x00	; 0
    3cbc:	ee 0f       	add	r30, r30
    3cbe:	ff 1f       	adc	r31, r31
    3cc0:	eb 5b       	subi	r30, 0xBB	; 187
    3cc2:	fe 4f       	sbci	r31, 0xFE	; 254
    3cc4:	a5 91       	lpm	r26, Z+
    3cc6:	b4 91       	lpm	r27, Z
    3cc8:	ec 91       	ld	r30, X
    3cca:	e9 23       	and	r30, r25
    3ccc:	21 f4       	brne	.+8      	; 0x3cd6 <_ZN8SPIClass5beginEv+0x38>
    3cce:	61 e0       	ldi	r22, 0x01	; 1
    3cd0:	8a e0       	ldi	r24, 0x0A	; 10
    3cd2:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <digitalWrite>
    3cd6:	61 e0       	ldi	r22, 0x01	; 1
    3cd8:	8a e0       	ldi	r24, 0x0A	; 10
    3cda:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <pinMode>
    3cde:	8c b5       	in	r24, 0x2c	; 44
    3ce0:	80 61       	ori	r24, 0x10	; 16
    3ce2:	8c bd       	out	0x2c, r24	; 44
    3ce4:	8c b5       	in	r24, 0x2c	; 44
    3ce6:	80 64       	ori	r24, 0x40	; 64
    3ce8:	8c bd       	out	0x2c, r24	; 44
    3cea:	61 e0       	ldi	r22, 0x01	; 1
    3cec:	8d e0       	ldi	r24, 0x0D	; 13
    3cee:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <pinMode>
    3cf2:	61 e0       	ldi	r22, 0x01	; 1
    3cf4:	8b e0       	ldi	r24, 0x0B	; 11
    3cf6:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <pinMode>
    3cfa:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <_ZN8SPIClass11initializedE>
    3cfe:	8f 5f       	subi	r24, 0xFF	; 255
    3d00:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <_ZN8SPIClass11initializedE>
    3d04:	cf bf       	out	0x3f, r28	; 63
    3d06:	cf 91       	pop	r28
    3d08:	08 95       	ret

00003d0a <_ZN8SPIClass14usingInterruptEh>:
#endif

void SPIClass::usingInterrupt(uint8_t interruptNumber)
{
  uint8_t mask = 0;
  uint8_t sreg = SREG;
    3d0a:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    3d0c:	f8 94       	cli
  switch (interruptNumber) {
    3d0e:	88 23       	and	r24, r24
    3d10:	49 f0       	breq	.+18     	; 0x3d24 <_ZN8SPIClass14usingInterruptEh+0x1a>
    3d12:	81 30       	cpi	r24, 0x01	; 1
    3d14:	11 f4       	brne	.+4      	; 0x3d1a <_ZN8SPIClass14usingInterruptEh+0x10>
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
  #endif
  #ifdef SPI_INT1_MASK
  case 1: mask = SPI_INT1_MASK; break;
    3d16:	82 e0       	ldi	r24, 0x02	; 2
    3d18:	06 c0       	rjmp	.+12     	; 0x3d26 <_ZN8SPIClass14usingInterruptEh+0x1c>
  #endif
  #ifdef SPI_INT7_MASK
  case 7: mask = SPI_INT7_MASK; break;
  #endif
  default:
    interruptMode = 2;
    3d1a:	82 e0       	ldi	r24, 0x02	; 2
    3d1c:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <_ZN8SPIClass13interruptModeE>
  #endif
#endif

void SPIClass::usingInterrupt(uint8_t interruptNumber)
{
  uint8_t mask = 0;
    3d20:	80 e0       	ldi	r24, 0x00	; 0
  #ifdef SPI_INT7_MASK
  case 7: mask = SPI_INT7_MASK; break;
  #endif
  default:
    interruptMode = 2;
    break;
    3d22:	01 c0       	rjmp	.+2      	; 0x3d26 <_ZN8SPIClass14usingInterruptEh+0x1c>
  uint8_t mask = 0;
  uint8_t sreg = SREG;
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
  switch (interruptNumber) {
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
    3d24:	81 e0       	ldi	r24, 0x01	; 1
  #endif
  default:
    interruptMode = 2;
    break;
  }
  interruptMask |= mask;
    3d26:	20 91 7a 05 	lds	r18, 0x057A	; 0x80057a <_ZN8SPIClass13interruptMaskE>
    3d2a:	82 2b       	or	r24, r18
    3d2c:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <_ZN8SPIClass13interruptMaskE>
  if (!interruptMode)
    3d30:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <_ZN8SPIClass13interruptModeE>
    3d34:	81 11       	cpse	r24, r1
    3d36:	03 c0       	rjmp	.+6      	; 0x3d3e <_ZN8SPIClass14usingInterruptEh+0x34>
    interruptMode = 1;
    3d38:	81 e0       	ldi	r24, 0x01	; 1
    3d3a:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <_ZN8SPIClass13interruptModeE>
  SREG = sreg;
    3d3e:	9f bf       	out	0x3f, r25	; 63
    3d40:	08 95       	ret

00003d42 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    3d42:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <_ZN7TwoWire14rxBufferLengthE>
    3d46:	90 e0       	ldi	r25, 0x00	; 0
    3d48:	20 91 b3 05 	lds	r18, 0x05B3	; 0x8005b3 <_ZN7TwoWire13rxBufferIndexE>
    3d4c:	82 1b       	sub	r24, r18
    3d4e:	91 09       	sbc	r25, r1
    3d50:	08 95       	ret

00003d52 <_ZN7TwoWire4readEv>:
    3d52:	90 91 b3 05 	lds	r25, 0x05B3	; 0x8005b3 <_ZN7TwoWire13rxBufferIndexE>
    3d56:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <_ZN7TwoWire14rxBufferLengthE>
    3d5a:	98 17       	cp	r25, r24
    3d5c:	50 f4       	brcc	.+20     	; 0x3d72 <_ZN7TwoWire4readEv+0x20>
    3d5e:	e9 2f       	mov	r30, r25
    3d60:	f0 e0       	ldi	r31, 0x00	; 0
    3d62:	ec 54       	subi	r30, 0x4C	; 76
    3d64:	fa 4f       	sbci	r31, 0xFA	; 250
    3d66:	20 81       	ld	r18, Z
    3d68:	30 e0       	ldi	r19, 0x00	; 0
    3d6a:	9f 5f       	subi	r25, 0xFF	; 255
    3d6c:	90 93 b3 05 	sts	0x05B3, r25	; 0x8005b3 <_ZN7TwoWire13rxBufferIndexE>
    3d70:	02 c0       	rjmp	.+4      	; 0x3d76 <_ZN7TwoWire4readEv+0x24>
    3d72:	2f ef       	ldi	r18, 0xFF	; 255
    3d74:	3f ef       	ldi	r19, 0xFF	; 255
    3d76:	c9 01       	movw	r24, r18
    3d78:	08 95       	ret

00003d7a <_ZN7TwoWire4peekEv>:
    3d7a:	e0 91 b3 05 	lds	r30, 0x05B3	; 0x8005b3 <_ZN7TwoWire13rxBufferIndexE>
    3d7e:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <_ZN7TwoWire14rxBufferLengthE>
    3d82:	e8 17       	cp	r30, r24
    3d84:	30 f4       	brcc	.+12     	; 0x3d92 <_ZN7TwoWire4peekEv+0x18>
    3d86:	f0 e0       	ldi	r31, 0x00	; 0
    3d88:	ec 54       	subi	r30, 0x4C	; 76
    3d8a:	fa 4f       	sbci	r31, 0xFA	; 250
    3d8c:	80 81       	ld	r24, Z
    3d8e:	90 e0       	ldi	r25, 0x00	; 0
    3d90:	08 95       	ret
    3d92:	8f ef       	ldi	r24, 0xFF	; 255
    3d94:	9f ef       	ldi	r25, 0xFF	; 255
    3d96:	08 95       	ret

00003d98 <_ZN7TwoWire5flushEv>:
    3d98:	08 95       	ret

00003d9a <_ZN7TwoWire16onReceiveServiceEPhi>:
    3d9a:	cf 93       	push	r28
    3d9c:	df 93       	push	r29
    3d9e:	ec 01       	movw	r28, r24
    3da0:	e0 91 8a 05 	lds	r30, 0x058A	; 0x80058a <_ZN7TwoWire14user_onReceiveE>
    3da4:	f0 91 8b 05 	lds	r31, 0x058B	; 0x80058b <_ZN7TwoWire14user_onReceiveE+0x1>
    3da8:	30 97       	sbiw	r30, 0x00	; 0
    3daa:	f1 f0       	breq	.+60     	; 0x3de8 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3dac:	90 91 b3 05 	lds	r25, 0x05B3	; 0x8005b3 <_ZN7TwoWire13rxBufferIndexE>
    3db0:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <_ZN7TwoWire14rxBufferLengthE>
    3db4:	98 17       	cp	r25, r24
    3db6:	c0 f0       	brcs	.+48     	; 0x3de8 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	29 2f       	mov	r18, r25
    3dbc:	30 e0       	ldi	r19, 0x00	; 0
    3dbe:	26 17       	cp	r18, r22
    3dc0:	37 07       	cpc	r19, r23
    3dc2:	54 f4       	brge	.+20     	; 0x3dd8 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    3dc4:	de 01       	movw	r26, r28
    3dc6:	a2 0f       	add	r26, r18
    3dc8:	b3 1f       	adc	r27, r19
    3dca:	4c 91       	ld	r20, X
    3dcc:	d9 01       	movw	r26, r18
    3dce:	ac 54       	subi	r26, 0x4C	; 76
    3dd0:	ba 4f       	sbci	r27, 0xFA	; 250
    3dd2:	4c 93       	st	X, r20
    3dd4:	9f 5f       	subi	r25, 0xFF	; 255
    3dd6:	f1 cf       	rjmp	.-30     	; 0x3dba <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    3dd8:	10 92 b3 05 	sts	0x05B3, r1	; 0x8005b3 <_ZN7TwoWire13rxBufferIndexE>
    3ddc:	60 93 b2 05 	sts	0x05B2, r22	; 0x8005b2 <_ZN7TwoWire14rxBufferLengthE>
    3de0:	cb 01       	movw	r24, r22
    3de2:	df 91       	pop	r29
    3de4:	cf 91       	pop	r28
    3de6:	09 94       	ijmp
    3de8:	df 91       	pop	r29
    3dea:	cf 91       	pop	r28
    3dec:	08 95       	ret

00003dee <_ZN7TwoWire16onRequestServiceEv>:
    3dee:	e0 91 8c 05 	lds	r30, 0x058C	; 0x80058c <_ZN7TwoWire14user_onRequestE>
    3df2:	f0 91 8d 05 	lds	r31, 0x058D	; 0x80058d <_ZN7TwoWire14user_onRequestE+0x1>
    3df6:	30 97       	sbiw	r30, 0x00	; 0
    3df8:	29 f0       	breq	.+10     	; 0x3e04 <_ZN7TwoWire16onRequestServiceEv+0x16>
    3dfa:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <_ZN7TwoWire13txBufferIndexE>
    3dfe:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <_ZN7TwoWire14txBufferLengthE>
    3e02:	09 94       	ijmp
    3e04:	08 95       	ret

00003e06 <_ZN7TwoWire5writeEPKhj>:
    3e06:	cf 92       	push	r12
    3e08:	df 92       	push	r13
    3e0a:	ef 92       	push	r14
    3e0c:	ff 92       	push	r15
    3e0e:	0f 93       	push	r16
    3e10:	1f 93       	push	r17
    3e12:	cf 93       	push	r28
    3e14:	df 93       	push	r29
    3e16:	7c 01       	movw	r14, r24
    3e18:	cb 01       	movw	r24, r22
    3e1a:	8a 01       	movw	r16, r20
    3e1c:	20 91 8e 05 	lds	r18, 0x058E	; 0x80058e <_ZN7TwoWire12transmittingE>
    3e20:	22 23       	and	r18, r18
    3e22:	89 f0       	breq	.+34     	; 0x3e46 <_ZN7TwoWire5writeEPKhj+0x40>
    3e24:	eb 01       	movw	r28, r22
    3e26:	6b 01       	movw	r12, r22
    3e28:	c4 0e       	add	r12, r20
    3e2a:	d5 1e       	adc	r13, r21
    3e2c:	cc 15       	cp	r28, r12
    3e2e:	dd 05       	cpc	r29, r13
    3e30:	69 f0       	breq	.+26     	; 0x3e4c <_ZN7TwoWire5writeEPKhj+0x46>
    3e32:	69 91       	ld	r22, Y+
    3e34:	d7 01       	movw	r26, r14
    3e36:	ed 91       	ld	r30, X+
    3e38:	fc 91       	ld	r31, X
    3e3a:	01 90       	ld	r0, Z+
    3e3c:	f0 81       	ld	r31, Z
    3e3e:	e0 2d       	mov	r30, r0
    3e40:	c7 01       	movw	r24, r14
    3e42:	09 95       	icall
    3e44:	f3 cf       	rjmp	.-26     	; 0x3e2c <_ZN7TwoWire5writeEPKhj+0x26>
    3e46:	64 2f       	mov	r22, r20
    3e48:	0e 94 be 20 	call	0x417c	; 0x417c <twi_transmit>
    3e4c:	c8 01       	movw	r24, r16
    3e4e:	df 91       	pop	r29
    3e50:	cf 91       	pop	r28
    3e52:	1f 91       	pop	r17
    3e54:	0f 91       	pop	r16
    3e56:	ff 90       	pop	r15
    3e58:	ef 90       	pop	r14
    3e5a:	df 90       	pop	r13
    3e5c:	cf 90       	pop	r12
    3e5e:	08 95       	ret

00003e60 <_ZN7TwoWire5writeEh>:
    3e60:	cf 93       	push	r28
    3e62:	df 93       	push	r29
    3e64:	1f 92       	push	r1
    3e66:	cd b7       	in	r28, 0x3d	; 61
    3e68:	de b7       	in	r29, 0x3e	; 62
    3e6a:	69 83       	std	Y+1, r22	; 0x01
    3e6c:	20 91 8e 05 	lds	r18, 0x058E	; 0x80058e <_ZN7TwoWire12transmittingE>
    3e70:	22 23       	and	r18, r18
    3e72:	d1 f0       	breq	.+52     	; 0x3ea8 <_ZN7TwoWire5writeEh+0x48>
    3e74:	20 91 8f 05 	lds	r18, 0x058F	; 0x80058f <_ZN7TwoWire14txBufferLengthE>
    3e78:	20 32       	cpi	r18, 0x20	; 32
    3e7a:	40 f0       	brcs	.+16     	; 0x3e8c <_ZN7TwoWire5writeEh+0x2c>
    3e7c:	21 e0       	ldi	r18, 0x01	; 1
    3e7e:	30 e0       	ldi	r19, 0x00	; 0
    3e80:	fc 01       	movw	r30, r24
    3e82:	33 83       	std	Z+3, r19	; 0x03
    3e84:	22 83       	std	Z+2, r18	; 0x02
    3e86:	80 e0       	ldi	r24, 0x00	; 0
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	15 c0       	rjmp	.+42     	; 0x3eb6 <_ZN7TwoWire5writeEh+0x56>
    3e8c:	80 91 90 05 	lds	r24, 0x0590	; 0x800590 <_ZN7TwoWire13txBufferIndexE>
    3e90:	e8 2f       	mov	r30, r24
    3e92:	f0 e0       	ldi	r31, 0x00	; 0
    3e94:	ef 56       	subi	r30, 0x6F	; 111
    3e96:	fa 4f       	sbci	r31, 0xFA	; 250
    3e98:	99 81       	ldd	r25, Y+1	; 0x01
    3e9a:	90 83       	st	Z, r25
    3e9c:	8f 5f       	subi	r24, 0xFF	; 255
    3e9e:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <_ZN7TwoWire13txBufferIndexE>
    3ea2:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <_ZN7TwoWire14txBufferLengthE>
    3ea6:	05 c0       	rjmp	.+10     	; 0x3eb2 <_ZN7TwoWire5writeEh+0x52>
    3ea8:	61 e0       	ldi	r22, 0x01	; 1
    3eaa:	ce 01       	movw	r24, r28
    3eac:	01 96       	adiw	r24, 0x01	; 1
    3eae:	0e 94 be 20 	call	0x417c	; 0x417c <twi_transmit>
    3eb2:	81 e0       	ldi	r24, 0x01	; 1
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	0f 90       	pop	r0
    3eb8:	df 91       	pop	r29
    3eba:	cf 91       	pop	r28
    3ebc:	08 95       	ret

00003ebe <_ZN7TwoWireC1Ev>:
    3ebe:	fc 01       	movw	r30, r24
    3ec0:	13 82       	std	Z+3, r1	; 0x03
    3ec2:	12 82       	std	Z+2, r1	; 0x02
    3ec4:	88 ee       	ldi	r24, 0xE8	; 232
    3ec6:	93 e0       	ldi	r25, 0x03	; 3
    3ec8:	a0 e0       	ldi	r26, 0x00	; 0
    3eca:	b0 e0       	ldi	r27, 0x00	; 0
    3ecc:	84 83       	std	Z+4, r24	; 0x04
    3ece:	95 83       	std	Z+5, r25	; 0x05
    3ed0:	a6 83       	std	Z+6, r26	; 0x06
    3ed2:	b7 83       	std	Z+7, r27	; 0x07
    3ed4:	81 ed       	ldi	r24, 0xD1	; 209
    3ed6:	92 e0       	ldi	r25, 0x02	; 2
    3ed8:	91 83       	std	Z+1, r25	; 0x01
    3eda:	80 83       	st	Z, r24
    3edc:	08 95       	ret

00003ede <_ZN7TwoWire5beginEv>:
    3ede:	10 92 b3 05 	sts	0x05B3, r1	; 0x8005b3 <_ZN7TwoWire13rxBufferIndexE>
    3ee2:	10 92 b2 05 	sts	0x05B2, r1	; 0x8005b2 <_ZN7TwoWire14rxBufferLengthE>
    3ee6:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <_ZN7TwoWire13txBufferIndexE>
    3eea:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <_ZN7TwoWire14txBufferLengthE>
    3eee:	0e 94 7f 20 	call	0x40fe	; 0x40fe <twi_init>
    3ef2:	87 ef       	ldi	r24, 0xF7	; 247
    3ef4:	9e e1       	ldi	r25, 0x1E	; 30
    3ef6:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <twi_attachSlaveTxEvent>
    3efa:	8d ec       	ldi	r24, 0xCD	; 205
    3efc:	9e e1       	ldi	r25, 0x1E	; 30
    3efe:	0c 94 e6 20 	jmp	0x41cc	; 0x41cc <twi_attachSlaveRxEvent>

00003f02 <_ZN7TwoWire8setClockEm>:
    3f02:	cb 01       	movw	r24, r22
    3f04:	ba 01       	movw	r22, r20
    3f06:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <twi_setFrequency>

00003f0a <_ZN7TwoWire17beginTransmissionEh>:
    3f0a:	81 e0       	ldi	r24, 0x01	; 1
    3f0c:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <_ZN7TwoWire12transmittingE>
    3f10:	60 93 b1 05 	sts	0x05B1, r22	; 0x8005b1 <_ZN7TwoWire9txAddressE>
    3f14:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <_ZN7TwoWire13txBufferIndexE>
    3f18:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <_ZN7TwoWire14txBufferLengthE>
    3f1c:	08 95       	ret

00003f1e <_ZN7TwoWire15endTransmissionEh>:
    3f1e:	0f 93       	push	r16
    3f20:	06 2f       	mov	r16, r22
    3f22:	21 e0       	ldi	r18, 0x01	; 1
    3f24:	40 91 8f 05 	lds	r20, 0x058F	; 0x80058f <_ZN7TwoWire14txBufferLengthE>
    3f28:	61 e9       	ldi	r22, 0x91	; 145
    3f2a:	75 e0       	ldi	r23, 0x05	; 5
    3f2c:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <_ZN7TwoWire9txAddressE>
    3f30:	0e 94 f5 21 	call	0x43ea	; 0x43ea <twi_writeTo>
    3f34:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <_ZN7TwoWire13txBufferIndexE>
    3f38:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <_ZN7TwoWire14txBufferLengthE>
    3f3c:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <_ZN7TwoWire12transmittingE>
    3f40:	0f 91       	pop	r16
    3f42:	08 95       	ret

00003f44 <_ZN7TwoWire11requestFromEhhmhh>:
    3f44:	4f 92       	push	r4
    3f46:	5f 92       	push	r5
    3f48:	6f 92       	push	r6
    3f4a:	7f 92       	push	r7
    3f4c:	af 92       	push	r10
    3f4e:	bf 92       	push	r11
    3f50:	cf 92       	push	r12
    3f52:	ef 92       	push	r14
    3f54:	ff 92       	push	r15
    3f56:	0f 93       	push	r16
    3f58:	1f 93       	push	r17
    3f5a:	cf 93       	push	r28
    3f5c:	df 93       	push	r29
    3f5e:	5c 01       	movw	r10, r24
    3f60:	f6 2e       	mov	r15, r22
    3f62:	d4 2f       	mov	r29, r20
    3f64:	28 01       	movw	r4, r16
    3f66:	39 01       	movw	r6, r18
    3f68:	ee 20       	and	r14, r14
    3f6a:	21 f1       	breq	.+72     	; 0x3fb4 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    3f6c:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <_ZN7TwoWire17beginTransmissionEh>
    3f70:	ce 2d       	mov	r28, r14
    3f72:	c4 30       	cpi	r28, 0x04	; 4
    3f74:	08 f0       	brcs	.+2      	; 0x3f78 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    3f76:	c3 e0       	ldi	r28, 0x03	; 3
    3f78:	c1 50       	subi	r28, 0x01	; 1
    3f7a:	c0 f0       	brcs	.+48     	; 0x3fac <_ZN7TwoWire11requestFromEhhmhh+0x68>
    3f7c:	28 e0       	ldi	r18, 0x08	; 8
    3f7e:	c2 9f       	mul	r28, r18
    3f80:	c0 01       	movw	r24, r0
    3f82:	11 24       	eor	r1, r1
    3f84:	a3 01       	movw	r20, r6
    3f86:	92 01       	movw	r18, r4
    3f88:	04 c0       	rjmp	.+8      	; 0x3f92 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    3f8a:	56 95       	lsr	r21
    3f8c:	47 95       	ror	r20
    3f8e:	37 95       	ror	r19
    3f90:	27 95       	ror	r18
    3f92:	8a 95       	dec	r24
    3f94:	d2 f7       	brpl	.-12     	; 0x3f8a <_ZN7TwoWire11requestFromEhhmhh+0x46>
    3f96:	ca 01       	movw	r24, r20
    3f98:	b9 01       	movw	r22, r18
    3f9a:	d5 01       	movw	r26, r10
    3f9c:	ed 91       	ld	r30, X+
    3f9e:	fc 91       	ld	r31, X
    3fa0:	01 90       	ld	r0, Z+
    3fa2:	f0 81       	ld	r31, Z
    3fa4:	e0 2d       	mov	r30, r0
    3fa6:	c5 01       	movw	r24, r10
    3fa8:	09 95       	icall
    3faa:	e6 cf       	rjmp	.-52     	; 0x3f78 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    3fac:	60 e0       	ldi	r22, 0x00	; 0
    3fae:	c5 01       	movw	r24, r10
    3fb0:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <_ZN7TwoWire15endTransmissionEh>
    3fb4:	4d 2f       	mov	r20, r29
    3fb6:	d1 32       	cpi	r29, 0x21	; 33
    3fb8:	08 f0       	brcs	.+2      	; 0x3fbc <_ZN7TwoWire11requestFromEhhmhh+0x78>
    3fba:	40 e2       	ldi	r20, 0x20	; 32
    3fbc:	2c 2d       	mov	r18, r12
    3fbe:	64 eb       	ldi	r22, 0xB4	; 180
    3fc0:	75 e0       	ldi	r23, 0x05	; 5
    3fc2:	8f 2d       	mov	r24, r15
    3fc4:	0e 94 0c 21 	call	0x4218	; 0x4218 <twi_readFrom>
    3fc8:	10 92 b3 05 	sts	0x05B3, r1	; 0x8005b3 <_ZN7TwoWire13rxBufferIndexE>
    3fcc:	80 93 b2 05 	sts	0x05B2, r24	; 0x8005b2 <_ZN7TwoWire14rxBufferLengthE>
    3fd0:	df 91       	pop	r29
    3fd2:	cf 91       	pop	r28
    3fd4:	1f 91       	pop	r17
    3fd6:	0f 91       	pop	r16
    3fd8:	ff 90       	pop	r15
    3fda:	ef 90       	pop	r14
    3fdc:	cf 90       	pop	r12
    3fde:	bf 90       	pop	r11
    3fe0:	af 90       	pop	r10
    3fe2:	7f 90       	pop	r7
    3fe4:	6f 90       	pop	r6
    3fe6:	5f 90       	pop	r5
    3fe8:	4f 90       	pop	r4
    3fea:	08 95       	ret

00003fec <_ZN7TwoWire11requestFromEhhh>:
    3fec:	cf 92       	push	r12
    3fee:	ef 92       	push	r14
    3ff0:	0f 93       	push	r16
    3ff2:	1f 93       	push	r17
    3ff4:	c2 2e       	mov	r12, r18
    3ff6:	e1 2c       	mov	r14, r1
    3ff8:	00 e0       	ldi	r16, 0x00	; 0
    3ffa:	10 e0       	ldi	r17, 0x00	; 0
    3ffc:	98 01       	movw	r18, r16
    3ffe:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <_ZN7TwoWire11requestFromEhhmhh>
    4002:	1f 91       	pop	r17
    4004:	0f 91       	pop	r16
    4006:	ef 90       	pop	r14
    4008:	cf 90       	pop	r12
    400a:	08 95       	ret

0000400c <_ZN7TwoWire11requestFromEhh>:
    400c:	21 e0       	ldi	r18, 0x01	; 1
    400e:	0c 94 f6 1f 	jmp	0x3fec	; 0x3fec <_ZN7TwoWire11requestFromEhhh>

00004012 <_ZN7TwoWire15endTransmissionEv>:
    4012:	61 e0       	ldi	r22, 0x01	; 1
    4014:	0c 94 8f 1f 	jmp	0x3f1e	; 0x3f1e <_ZN7TwoWire15endTransmissionEh>

00004018 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    4018:	8e e7       	ldi	r24, 0x7E	; 126
    401a:	95 e0       	ldi	r25, 0x05	; 5
    401c:	0c 94 5f 1f 	jmp	0x3ebe	; 0x3ebe <_ZN7TwoWireC1Ev>

00004020 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    4020:	08 95       	ret

00004022 <attachInterrupt>:
    4022:	82 30       	cpi	r24, 0x02	; 2
    4024:	e8 f4       	brcc	.+58     	; 0x4060 <attachInterrupt+0x3e>
    4026:	e8 2f       	mov	r30, r24
    4028:	f0 e0       	ldi	r31, 0x00	; 0
    402a:	ee 0f       	add	r30, r30
    402c:	ff 1f       	adc	r31, r31
    402e:	ec 5d       	subi	r30, 0xDC	; 220
    4030:	fe 4f       	sbci	r31, 0xFE	; 254
    4032:	71 83       	std	Z+1, r23	; 0x01
    4034:	60 83       	st	Z, r22
    4036:	81 30       	cpi	r24, 0x01	; 1
    4038:	41 f0       	breq	.+16     	; 0x404a <attachInterrupt+0x28>
    403a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    403e:	8c 7f       	andi	r24, 0xFC	; 252
    4040:	48 2b       	or	r20, r24
    4042:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    4046:	e8 9a       	sbi	0x1d, 0	; 29
    4048:	08 95       	ret
    404a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    404e:	83 7f       	andi	r24, 0xF3	; 243
    4050:	44 0f       	add	r20, r20
    4052:	55 1f       	adc	r21, r21
    4054:	44 0f       	add	r20, r20
    4056:	55 1f       	adc	r21, r21
    4058:	48 2b       	or	r20, r24
    405a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    405e:	e9 9a       	sbi	0x1d, 1	; 29
    4060:	08 95       	ret

00004062 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    4062:	1f 92       	push	r1
    4064:	0f 92       	push	r0
    4066:	0f b6       	in	r0, 0x3f	; 63
    4068:	0f 92       	push	r0
    406a:	11 24       	eor	r1, r1
    406c:	2f 93       	push	r18
    406e:	3f 93       	push	r19
    4070:	4f 93       	push	r20
    4072:	5f 93       	push	r21
    4074:	6f 93       	push	r22
    4076:	7f 93       	push	r23
    4078:	8f 93       	push	r24
    407a:	9f 93       	push	r25
    407c:	af 93       	push	r26
    407e:	bf 93       	push	r27
    4080:	ef 93       	push	r30
    4082:	ff 93       	push	r31
    4084:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <intFunc>
    4088:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <intFunc+0x1>
    408c:	09 95       	icall
    408e:	ff 91       	pop	r31
    4090:	ef 91       	pop	r30
    4092:	bf 91       	pop	r27
    4094:	af 91       	pop	r26
    4096:	9f 91       	pop	r25
    4098:	8f 91       	pop	r24
    409a:	7f 91       	pop	r23
    409c:	6f 91       	pop	r22
    409e:	5f 91       	pop	r21
    40a0:	4f 91       	pop	r20
    40a2:	3f 91       	pop	r19
    40a4:	2f 91       	pop	r18
    40a6:	0f 90       	pop	r0
    40a8:	0f be       	out	0x3f, r0	; 63
    40aa:	0f 90       	pop	r0
    40ac:	1f 90       	pop	r1
    40ae:	18 95       	reti

000040b0 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    40b0:	1f 92       	push	r1
    40b2:	0f 92       	push	r0
    40b4:	0f b6       	in	r0, 0x3f	; 63
    40b6:	0f 92       	push	r0
    40b8:	11 24       	eor	r1, r1
    40ba:	2f 93       	push	r18
    40bc:	3f 93       	push	r19
    40be:	4f 93       	push	r20
    40c0:	5f 93       	push	r21
    40c2:	6f 93       	push	r22
    40c4:	7f 93       	push	r23
    40c6:	8f 93       	push	r24
    40c8:	9f 93       	push	r25
    40ca:	af 93       	push	r26
    40cc:	bf 93       	push	r27
    40ce:	ef 93       	push	r30
    40d0:	ff 93       	push	r31
    40d2:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <intFunc+0x2>
    40d6:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <intFunc+0x3>
    40da:	09 95       	icall
    40dc:	ff 91       	pop	r31
    40de:	ef 91       	pop	r30
    40e0:	bf 91       	pop	r27
    40e2:	af 91       	pop	r26
    40e4:	9f 91       	pop	r25
    40e6:	8f 91       	pop	r24
    40e8:	7f 91       	pop	r23
    40ea:	6f 91       	pop	r22
    40ec:	5f 91       	pop	r21
    40ee:	4f 91       	pop	r20
    40f0:	3f 91       	pop	r19
    40f2:	2f 91       	pop	r18
    40f4:	0f 90       	pop	r0
    40f6:	0f be       	out	0x3f, r0	; 63
    40f8:	0f 90       	pop	r0
    40fa:	1f 90       	pop	r1
    40fc:	18 95       	reti

000040fe <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    40fe:	10 92 47 06 	sts	0x0647, r1	; 0x800647 <twi_state>
    4102:	81 e0       	ldi	r24, 0x01	; 1
    4104:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <twi_sendStop>
    4108:	10 92 44 06 	sts	0x0644, r1	; 0x800644 <twi_inRepStart>
    410c:	61 e0       	ldi	r22, 0x01	; 1
    410e:	82 e1       	ldi	r24, 0x12	; 18
    4110:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <digitalWrite>
    4114:	61 e0       	ldi	r22, 0x01	; 1
    4116:	83 e1       	ldi	r24, 0x13	; 19
    4118:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <digitalWrite>
    411c:	e9 eb       	ldi	r30, 0xB9	; 185
    411e:	f0 e0       	ldi	r31, 0x00	; 0
    4120:	80 81       	ld	r24, Z
    4122:	8e 7f       	andi	r24, 0xFE	; 254
    4124:	80 83       	st	Z, r24
    4126:	80 81       	ld	r24, Z
    4128:	8d 7f       	andi	r24, 0xFD	; 253
    412a:	80 83       	st	Z, r24
    412c:	88 e4       	ldi	r24, 0x48	; 72
    412e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    4132:	85 e4       	ldi	r24, 0x45	; 69
    4134:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4138:	08 95       	ret

0000413a <twi_disable>:
    413a:	ec eb       	ldi	r30, 0xBC	; 188
    413c:	f0 e0       	ldi	r31, 0x00	; 0
    413e:	80 81       	ld	r24, Z
    4140:	8a 7b       	andi	r24, 0xBA	; 186
    4142:	80 83       	st	Z, r24
    4144:	60 e0       	ldi	r22, 0x00	; 0
    4146:	82 e1       	ldi	r24, 0x12	; 18
    4148:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <digitalWrite>
    414c:	60 e0       	ldi	r22, 0x00	; 0
    414e:	83 e1       	ldi	r24, 0x13	; 19
    4150:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <digitalWrite>

00004154 <twi_setFrequency>:
    4154:	9b 01       	movw	r18, r22
    4156:	ac 01       	movw	r20, r24
    4158:	60 e0       	ldi	r22, 0x00	; 0
    415a:	74 e2       	ldi	r23, 0x24	; 36
    415c:	84 ef       	ldi	r24, 0xF4	; 244
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	0e 94 64 24 	call	0x48c8	; 0x48c8 <__udivmodsi4>
    4164:	da 01       	movw	r26, r20
    4166:	c9 01       	movw	r24, r18
    4168:	40 97       	sbiw	r24, 0x10	; 16
    416a:	a1 09       	sbc	r26, r1
    416c:	b1 09       	sbc	r27, r1
    416e:	b6 95       	lsr	r27
    4170:	a7 95       	ror	r26
    4172:	97 95       	ror	r25
    4174:	87 95       	ror	r24
    4176:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    417a:	08 95       	ret

0000417c <twi_transmit>:
    417c:	40 91 f6 05 	lds	r20, 0x05F6	; 0x8005f6 <twi_txBufferLength>
    4180:	26 2f       	mov	r18, r22
    4182:	30 e0       	ldi	r19, 0x00	; 0
    4184:	24 0f       	add	r18, r20
    4186:	31 1d       	adc	r19, r1
    4188:	21 32       	cpi	r18, 0x21	; 33
    418a:	31 05       	cpc	r19, r1
    418c:	dc f4       	brge	.+54     	; 0x41c4 <twi_transmit+0x48>
    418e:	20 91 47 06 	lds	r18, 0x0647	; 0x800647 <twi_state>
    4192:	24 30       	cpi	r18, 0x04	; 4
    4194:	c9 f4       	brne	.+50     	; 0x41c8 <twi_transmit+0x4c>
    4196:	fc 01       	movw	r30, r24
    4198:	80 e0       	ldi	r24, 0x00	; 0
    419a:	90 e0       	ldi	r25, 0x00	; 0
    419c:	86 17       	cp	r24, r22
    419e:	58 f4       	brcc	.+22     	; 0x41b6 <twi_transmit+0x3a>
    41a0:	30 91 f6 05 	lds	r19, 0x05F6	; 0x8005f6 <twi_txBufferLength>
    41a4:	21 91       	ld	r18, Z+
    41a6:	dc 01       	movw	r26, r24
    41a8:	a8 50       	subi	r26, 0x08	; 8
    41aa:	ba 4f       	sbci	r27, 0xFA	; 250
    41ac:	a3 0f       	add	r26, r19
    41ae:	b1 1d       	adc	r27, r1
    41b0:	2c 93       	st	X, r18
    41b2:	01 96       	adiw	r24, 0x01	; 1
    41b4:	f3 cf       	rjmp	.-26     	; 0x419c <twi_transmit+0x20>
    41b6:	80 91 f6 05 	lds	r24, 0x05F6	; 0x8005f6 <twi_txBufferLength>
    41ba:	68 0f       	add	r22, r24
    41bc:	60 93 f6 05 	sts	0x05F6, r22	; 0x8005f6 <twi_txBufferLength>
    41c0:	80 e0       	ldi	r24, 0x00	; 0
    41c2:	08 95       	ret
    41c4:	81 e0       	ldi	r24, 0x01	; 1
    41c6:	08 95       	ret
    41c8:	82 e0       	ldi	r24, 0x02	; 2
    41ca:	08 95       	ret

000041cc <twi_attachSlaveRxEvent>:
    41cc:	90 93 3b 06 	sts	0x063B, r25	; 0x80063b <twi_onSlaveReceive+0x1>
    41d0:	80 93 3a 06 	sts	0x063A, r24	; 0x80063a <twi_onSlaveReceive>
    41d4:	08 95       	ret

000041d6 <twi_attachSlaveTxEvent>:
    41d6:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <twi_onSlaveTransmit+0x1>
    41da:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <twi_onSlaveTransmit>
    41de:	08 95       	ret

000041e0 <twi_releaseBus>:
    41e0:	85 ec       	ldi	r24, 0xC5	; 197
    41e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    41e6:	10 92 47 06 	sts	0x0647, r1	; 0x800647 <twi_state>
    41ea:	08 95       	ret

000041ec <twi_handleTimeout>:
    41ec:	cf 93       	push	r28
    41ee:	df 93       	push	r29
    41f0:	91 e0       	ldi	r25, 0x01	; 1
    41f2:	90 93 3f 06 	sts	0x063F, r25	; 0x80063f <twi_timed_out_flag>
    41f6:	88 23       	and	r24, r24
    41f8:	61 f0       	breq	.+24     	; 0x4212 <twi_handleTimeout+0x26>
    41fa:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    41fe:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
    4202:	0e 94 9d 20 	call	0x413a	; 0x413a <twi_disable>
    4206:	0e 94 7f 20 	call	0x40fe	; 0x40fe <twi_init>
    420a:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
    420e:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    4212:	df 91       	pop	r29
    4214:	cf 91       	pop	r28
    4216:	08 95       	ret

00004218 <twi_readFrom>:
    4218:	4f 92       	push	r4
    421a:	5f 92       	push	r5
    421c:	6f 92       	push	r6
    421e:	7f 92       	push	r7
    4220:	8f 92       	push	r8
    4222:	9f 92       	push	r9
    4224:	af 92       	push	r10
    4226:	bf 92       	push	r11
    4228:	cf 92       	push	r12
    422a:	df 92       	push	r13
    422c:	ef 92       	push	r14
    422e:	ff 92       	push	r15
    4230:	0f 93       	push	r16
    4232:	1f 93       	push	r17
    4234:	cf 93       	push	r28
    4236:	df 93       	push	r29
    4238:	f8 2e       	mov	r15, r24
    423a:	16 2f       	mov	r17, r22
    423c:	07 2f       	mov	r16, r23
    423e:	c4 2f       	mov	r28, r20
    4240:	e2 2e       	mov	r14, r18
    4242:	41 32       	cpi	r20, 0x21	; 33
    4244:	08 f0       	brcs	.+2      	; 0x4248 <twi_readFrom+0x30>
    4246:	be c0       	rjmp	.+380    	; 0x43c4 <twi_readFrom+0x1ac>
    4248:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <micros>
    424c:	4b 01       	movw	r8, r22
    424e:	5c 01       	movw	r10, r24
    4250:	d0 91 47 06 	lds	r29, 0x0647	; 0x800647 <twi_state>
    4254:	dd 23       	and	r29, r29
    4256:	31 f1       	breq	.+76     	; 0x42a4 <twi_readFrom+0x8c>
    4258:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <twi_timeout_us>
    425c:	90 91 41 06 	lds	r25, 0x0641	; 0x800641 <twi_timeout_us+0x1>
    4260:	a0 91 42 06 	lds	r26, 0x0642	; 0x800642 <twi_timeout_us+0x2>
    4264:	b0 91 43 06 	lds	r27, 0x0643	; 0x800643 <twi_timeout_us+0x3>
    4268:	89 2b       	or	r24, r25
    426a:	8a 2b       	or	r24, r26
    426c:	8b 2b       	or	r24, r27
    426e:	81 f3       	breq	.-32     	; 0x4250 <twi_readFrom+0x38>
    4270:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <micros>
    4274:	40 90 40 06 	lds	r4, 0x0640	; 0x800640 <twi_timeout_us>
    4278:	50 90 41 06 	lds	r5, 0x0641	; 0x800641 <twi_timeout_us+0x1>
    427c:	60 90 42 06 	lds	r6, 0x0642	; 0x800642 <twi_timeout_us+0x2>
    4280:	70 90 43 06 	lds	r7, 0x0643	; 0x800643 <twi_timeout_us+0x3>
    4284:	dc 01       	movw	r26, r24
    4286:	cb 01       	movw	r24, r22
    4288:	88 19       	sub	r24, r8
    428a:	99 09       	sbc	r25, r9
    428c:	aa 09       	sbc	r26, r10
    428e:	bb 09       	sbc	r27, r11
    4290:	48 16       	cp	r4, r24
    4292:	59 06       	cpc	r5, r25
    4294:	6a 06       	cpc	r6, r26
    4296:	7b 06       	cpc	r7, r27
    4298:	d8 f6       	brcc	.-74     	; 0x4250 <twi_readFrom+0x38>
    429a:	80 91 3e 06 	lds	r24, 0x063E	; 0x80063e <twi_do_reset_on_timeout>
    429e:	0e 94 f6 20 	call	0x41ec	; 0x41ec <twi_handleTimeout>
    42a2:	90 c0       	rjmp	.+288    	; 0x43c4 <twi_readFrom+0x1ac>
    42a4:	81 e0       	ldi	r24, 0x01	; 1
    42a6:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <twi_state>
    42aa:	e0 92 45 06 	sts	0x0645, r14	; 0x800645 <twi_sendStop>
    42ae:	9f ef       	ldi	r25, 0xFF	; 255
    42b0:	90 93 d4 05 	sts	0x05D4, r25	; 0x8005d4 <twi_error>
    42b4:	10 92 19 06 	sts	0x0619, r1	; 0x800619 <twi_masterBufferIndex>
    42b8:	9c 0f       	add	r25, r28
    42ba:	90 93 18 06 	sts	0x0618, r25	; 0x800618 <twi_masterBufferLength>
    42be:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <twi_slarw>
    42c2:	90 91 46 06 	lds	r25, 0x0646	; 0x800646 <twi_slarw>
    42c6:	8f 2d       	mov	r24, r15
    42c8:	88 0f       	add	r24, r24
    42ca:	89 2b       	or	r24, r25
    42cc:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <twi_slarw>
    42d0:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <twi_inRepStart>
    42d4:	81 30       	cpi	r24, 0x01	; 1
    42d6:	89 f5       	brne	.+98     	; 0x433a <twi_readFrom+0x122>
    42d8:	10 92 44 06 	sts	0x0644, r1	; 0x800644 <twi_inRepStart>
    42dc:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <micros>
    42e0:	6b 01       	movw	r12, r22
    42e2:	7c 01       	movw	r14, r24
    42e4:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <twi_slarw>
    42e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    42ec:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <twi_timeout_us>
    42f0:	90 91 41 06 	lds	r25, 0x0641	; 0x800641 <twi_timeout_us+0x1>
    42f4:	a0 91 42 06 	lds	r26, 0x0642	; 0x800642 <twi_timeout_us+0x2>
    42f8:	b0 91 43 06 	lds	r27, 0x0643	; 0x800643 <twi_timeout_us+0x3>
    42fc:	89 2b       	or	r24, r25
    42fe:	8a 2b       	or	r24, r26
    4300:	8b 2b       	or	r24, r27
    4302:	a9 f0       	breq	.+42     	; 0x432e <twi_readFrom+0x116>
    4304:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <micros>
    4308:	80 90 40 06 	lds	r8, 0x0640	; 0x800640 <twi_timeout_us>
    430c:	90 90 41 06 	lds	r9, 0x0641	; 0x800641 <twi_timeout_us+0x1>
    4310:	a0 90 42 06 	lds	r10, 0x0642	; 0x800642 <twi_timeout_us+0x2>
    4314:	b0 90 43 06 	lds	r11, 0x0643	; 0x800643 <twi_timeout_us+0x3>
    4318:	dc 01       	movw	r26, r24
    431a:	cb 01       	movw	r24, r22
    431c:	8c 19       	sub	r24, r12
    431e:	9d 09       	sbc	r25, r13
    4320:	ae 09       	sbc	r26, r14
    4322:	bf 09       	sbc	r27, r15
    4324:	88 16       	cp	r8, r24
    4326:	99 06       	cpc	r9, r25
    4328:	aa 06       	cpc	r10, r26
    432a:	bb 06       	cpc	r11, r27
    432c:	90 f1       	brcs	.+100    	; 0x4392 <twi_readFrom+0x17a>
    432e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4332:	83 fd       	sbrc	r24, 3
    4334:	d7 cf       	rjmp	.-82     	; 0x42e4 <twi_readFrom+0xcc>
    4336:	85 ec       	ldi	r24, 0xC5	; 197
    4338:	01 c0       	rjmp	.+2      	; 0x433c <twi_readFrom+0x124>
    433a:	85 ee       	ldi	r24, 0xE5	; 229
    433c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4340:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <micros>
    4344:	6b 01       	movw	r12, r22
    4346:	7c 01       	movw	r14, r24
    4348:	80 91 47 06 	lds	r24, 0x0647	; 0x800647 <twi_state>
    434c:	81 30       	cpi	r24, 0x01	; 1
    434e:	31 f5       	brne	.+76     	; 0x439c <twi_readFrom+0x184>
    4350:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <twi_timeout_us>
    4354:	90 91 41 06 	lds	r25, 0x0641	; 0x800641 <twi_timeout_us+0x1>
    4358:	a0 91 42 06 	lds	r26, 0x0642	; 0x800642 <twi_timeout_us+0x2>
    435c:	b0 91 43 06 	lds	r27, 0x0643	; 0x800643 <twi_timeout_us+0x3>
    4360:	89 2b       	or	r24, r25
    4362:	8a 2b       	or	r24, r26
    4364:	8b 2b       	or	r24, r27
    4366:	81 f3       	breq	.-32     	; 0x4348 <twi_readFrom+0x130>
    4368:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <micros>
    436c:	80 90 40 06 	lds	r8, 0x0640	; 0x800640 <twi_timeout_us>
    4370:	90 90 41 06 	lds	r9, 0x0641	; 0x800641 <twi_timeout_us+0x1>
    4374:	a0 90 42 06 	lds	r10, 0x0642	; 0x800642 <twi_timeout_us+0x2>
    4378:	b0 90 43 06 	lds	r11, 0x0643	; 0x800643 <twi_timeout_us+0x3>
    437c:	dc 01       	movw	r26, r24
    437e:	cb 01       	movw	r24, r22
    4380:	8c 19       	sub	r24, r12
    4382:	9d 09       	sbc	r25, r13
    4384:	ae 09       	sbc	r26, r14
    4386:	bf 09       	sbc	r27, r15
    4388:	88 16       	cp	r8, r24
    438a:	99 06       	cpc	r9, r25
    438c:	aa 06       	cpc	r10, r26
    438e:	bb 06       	cpc	r11, r27
    4390:	d8 f6       	brcc	.-74     	; 0x4348 <twi_readFrom+0x130>
    4392:	80 91 3e 06 	lds	r24, 0x063E	; 0x80063e <twi_do_reset_on_timeout>
    4396:	0e 94 f6 20 	call	0x41ec	; 0x41ec <twi_handleTimeout>
    439a:	15 c0       	rjmp	.+42     	; 0x43c6 <twi_readFrom+0x1ae>
    439c:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <twi_masterBufferIndex>
    43a0:	8c 17       	cp	r24, r28
    43a2:	10 f4       	brcc	.+4      	; 0x43a8 <twi_readFrom+0x190>
    43a4:	c0 91 19 06 	lds	r28, 0x0619	; 0x800619 <twi_masterBufferIndex>
    43a8:	aa e1       	ldi	r26, 0x1A	; 26
    43aa:	b6 e0       	ldi	r27, 0x06	; 6
    43ac:	91 2f       	mov	r25, r17
    43ae:	e1 2f       	mov	r30, r17
    43b0:	f0 2f       	mov	r31, r16
    43b2:	8e 2f       	mov	r24, r30
    43b4:	89 1b       	sub	r24, r25
    43b6:	8c 17       	cp	r24, r28
    43b8:	18 f4       	brcc	.+6      	; 0x43c0 <twi_readFrom+0x1a8>
    43ba:	8d 91       	ld	r24, X+
    43bc:	81 93       	st	Z+, r24
    43be:	f9 cf       	rjmp	.-14     	; 0x43b2 <twi_readFrom+0x19a>
    43c0:	dc 2f       	mov	r29, r28
    43c2:	01 c0       	rjmp	.+2      	; 0x43c6 <twi_readFrom+0x1ae>
    43c4:	d0 e0       	ldi	r29, 0x00	; 0
    43c6:	8d 2f       	mov	r24, r29
    43c8:	df 91       	pop	r29
    43ca:	cf 91       	pop	r28
    43cc:	1f 91       	pop	r17
    43ce:	0f 91       	pop	r16
    43d0:	ff 90       	pop	r15
    43d2:	ef 90       	pop	r14
    43d4:	df 90       	pop	r13
    43d6:	cf 90       	pop	r12
    43d8:	bf 90       	pop	r11
    43da:	af 90       	pop	r10
    43dc:	9f 90       	pop	r9
    43de:	8f 90       	pop	r8
    43e0:	7f 90       	pop	r7
    43e2:	6f 90       	pop	r6
    43e4:	5f 90       	pop	r5
    43e6:	4f 90       	pop	r4
    43e8:	08 95       	ret

000043ea <twi_writeTo>:
    43ea:	4f 92       	push	r4
    43ec:	5f 92       	push	r5
    43ee:	6f 92       	push	r6
    43f0:	7f 92       	push	r7
    43f2:	8f 92       	push	r8
    43f4:	9f 92       	push	r9
    43f6:	af 92       	push	r10
    43f8:	bf 92       	push	r11
    43fa:	cf 92       	push	r12
    43fc:	df 92       	push	r13
    43fe:	ef 92       	push	r14
    4400:	ff 92       	push	r15
    4402:	0f 93       	push	r16
    4404:	1f 93       	push	r17
    4406:	cf 93       	push	r28
    4408:	df 93       	push	r29
    440a:	41 32       	cpi	r20, 0x21	; 33
    440c:	08 f0       	brcs	.+2      	; 0x4410 <twi_writeTo+0x26>
    440e:	c6 c0       	rjmp	.+396    	; 0x459c <twi_writeTo+0x1b2>
    4410:	12 2f       	mov	r17, r18
    4412:	f4 2e       	mov	r15, r20
    4414:	d7 2e       	mov	r13, r23
    4416:	e6 2e       	mov	r14, r22
    4418:	d8 2f       	mov	r29, r24
    441a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <micros>
    441e:	4b 01       	movw	r8, r22
    4420:	5c 01       	movw	r10, r24
    4422:	c0 91 47 06 	lds	r28, 0x0647	; 0x800647 <twi_state>
    4426:	cc 23       	and	r28, r28
    4428:	11 f1       	breq	.+68     	; 0x446e <twi_writeTo+0x84>
    442a:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <twi_timeout_us>
    442e:	90 91 41 06 	lds	r25, 0x0641	; 0x800641 <twi_timeout_us+0x1>
    4432:	a0 91 42 06 	lds	r26, 0x0642	; 0x800642 <twi_timeout_us+0x2>
    4436:	b0 91 43 06 	lds	r27, 0x0643	; 0x800643 <twi_timeout_us+0x3>
    443a:	89 2b       	or	r24, r25
    443c:	8a 2b       	or	r24, r26
    443e:	8b 2b       	or	r24, r27
    4440:	81 f3       	breq	.-32     	; 0x4422 <twi_writeTo+0x38>
    4442:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <micros>
    4446:	40 90 40 06 	lds	r4, 0x0640	; 0x800640 <twi_timeout_us>
    444a:	50 90 41 06 	lds	r5, 0x0641	; 0x800641 <twi_timeout_us+0x1>
    444e:	60 90 42 06 	lds	r6, 0x0642	; 0x800642 <twi_timeout_us+0x2>
    4452:	70 90 43 06 	lds	r7, 0x0643	; 0x800643 <twi_timeout_us+0x3>
    4456:	dc 01       	movw	r26, r24
    4458:	cb 01       	movw	r24, r22
    445a:	88 19       	sub	r24, r8
    445c:	99 09       	sbc	r25, r9
    445e:	aa 09       	sbc	r26, r10
    4460:	bb 09       	sbc	r27, r11
    4462:	48 16       	cp	r4, r24
    4464:	59 06       	cpc	r5, r25
    4466:	6a 06       	cpc	r6, r26
    4468:	7b 06       	cpc	r7, r27
    446a:	d8 f6       	brcc	.-74     	; 0x4422 <twi_writeTo+0x38>
    446c:	83 c0       	rjmp	.+262    	; 0x4574 <twi_writeTo+0x18a>
    446e:	82 e0       	ldi	r24, 0x02	; 2
    4470:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <twi_state>
    4474:	00 93 45 06 	sts	0x0645, r16	; 0x800645 <twi_sendStop>
    4478:	8f ef       	ldi	r24, 0xFF	; 255
    447a:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <twi_error>
    447e:	10 92 19 06 	sts	0x0619, r1	; 0x800619 <twi_masterBufferIndex>
    4482:	f0 92 18 06 	sts	0x0618, r15	; 0x800618 <twi_masterBufferLength>
    4486:	9e 2d       	mov	r25, r14
    4488:	aa e1       	ldi	r26, 0x1A	; 26
    448a:	b6 e0       	ldi	r27, 0x06	; 6
    448c:	ee 2d       	mov	r30, r14
    448e:	fd 2d       	mov	r31, r13
    4490:	8e 2f       	mov	r24, r30
    4492:	89 1b       	sub	r24, r25
    4494:	8f 15       	cp	r24, r15
    4496:	18 f4       	brcc	.+6      	; 0x449e <twi_writeTo+0xb4>
    4498:	81 91       	ld	r24, Z+
    449a:	8d 93       	st	X+, r24
    449c:	f9 cf       	rjmp	.-14     	; 0x4490 <twi_writeTo+0xa6>
    449e:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <twi_slarw>
    44a2:	90 91 46 06 	lds	r25, 0x0646	; 0x800646 <twi_slarw>
    44a6:	dd 0f       	add	r29, r29
    44a8:	d9 2b       	or	r29, r25
    44aa:	d0 93 46 06 	sts	0x0646, r29	; 0x800646 <twi_slarw>
    44ae:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <twi_inRepStart>
    44b2:	81 30       	cpi	r24, 0x01	; 1
    44b4:	89 f5       	brne	.+98     	; 0x4518 <twi_writeTo+0x12e>
    44b6:	10 92 44 06 	sts	0x0644, r1	; 0x800644 <twi_inRepStart>
    44ba:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <micros>
    44be:	6b 01       	movw	r12, r22
    44c0:	7c 01       	movw	r14, r24
    44c2:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <twi_slarw>
    44c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    44ca:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <twi_timeout_us>
    44ce:	90 91 41 06 	lds	r25, 0x0641	; 0x800641 <twi_timeout_us+0x1>
    44d2:	a0 91 42 06 	lds	r26, 0x0642	; 0x800642 <twi_timeout_us+0x2>
    44d6:	b0 91 43 06 	lds	r27, 0x0643	; 0x800643 <twi_timeout_us+0x3>
    44da:	89 2b       	or	r24, r25
    44dc:	8a 2b       	or	r24, r26
    44de:	8b 2b       	or	r24, r27
    44e0:	a9 f0       	breq	.+42     	; 0x450c <twi_writeTo+0x122>
    44e2:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <micros>
    44e6:	80 90 40 06 	lds	r8, 0x0640	; 0x800640 <twi_timeout_us>
    44ea:	90 90 41 06 	lds	r9, 0x0641	; 0x800641 <twi_timeout_us+0x1>
    44ee:	a0 90 42 06 	lds	r10, 0x0642	; 0x800642 <twi_timeout_us+0x2>
    44f2:	b0 90 43 06 	lds	r11, 0x0643	; 0x800643 <twi_timeout_us+0x3>
    44f6:	dc 01       	movw	r26, r24
    44f8:	cb 01       	movw	r24, r22
    44fa:	8c 19       	sub	r24, r12
    44fc:	9d 09       	sbc	r25, r13
    44fe:	ae 09       	sbc	r26, r14
    4500:	bf 09       	sbc	r27, r15
    4502:	88 16       	cp	r8, r24
    4504:	99 06       	cpc	r9, r25
    4506:	aa 06       	cpc	r10, r26
    4508:	bb 06       	cpc	r11, r27
    450a:	a0 f1       	brcs	.+104    	; 0x4574 <twi_writeTo+0x18a>
    450c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4510:	83 fd       	sbrc	r24, 3
    4512:	d7 cf       	rjmp	.-82     	; 0x44c2 <twi_writeTo+0xd8>
    4514:	85 ec       	ldi	r24, 0xC5	; 197
    4516:	01 c0       	rjmp	.+2      	; 0x451a <twi_writeTo+0x130>
    4518:	85 ee       	ldi	r24, 0xE5	; 229
    451a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    451e:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <micros>
    4522:	6b 01       	movw	r12, r22
    4524:	7c 01       	movw	r14, r24
    4526:	11 23       	and	r17, r17
    4528:	59 f1       	breq	.+86     	; 0x4580 <twi_writeTo+0x196>
    452a:	80 91 47 06 	lds	r24, 0x0647	; 0x800647 <twi_state>
    452e:	82 30       	cpi	r24, 0x02	; 2
    4530:	39 f5       	brne	.+78     	; 0x4580 <twi_writeTo+0x196>
    4532:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <twi_timeout_us>
    4536:	90 91 41 06 	lds	r25, 0x0641	; 0x800641 <twi_timeout_us+0x1>
    453a:	a0 91 42 06 	lds	r26, 0x0642	; 0x800642 <twi_timeout_us+0x2>
    453e:	b0 91 43 06 	lds	r27, 0x0643	; 0x800643 <twi_timeout_us+0x3>
    4542:	89 2b       	or	r24, r25
    4544:	8a 2b       	or	r24, r26
    4546:	8b 2b       	or	r24, r27
    4548:	71 f3       	breq	.-36     	; 0x4526 <twi_writeTo+0x13c>
    454a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <micros>
    454e:	80 90 40 06 	lds	r8, 0x0640	; 0x800640 <twi_timeout_us>
    4552:	90 90 41 06 	lds	r9, 0x0641	; 0x800641 <twi_timeout_us+0x1>
    4556:	a0 90 42 06 	lds	r10, 0x0642	; 0x800642 <twi_timeout_us+0x2>
    455a:	b0 90 43 06 	lds	r11, 0x0643	; 0x800643 <twi_timeout_us+0x3>
    455e:	dc 01       	movw	r26, r24
    4560:	cb 01       	movw	r24, r22
    4562:	8c 19       	sub	r24, r12
    4564:	9d 09       	sbc	r25, r13
    4566:	ae 09       	sbc	r26, r14
    4568:	bf 09       	sbc	r27, r15
    456a:	88 16       	cp	r8, r24
    456c:	99 06       	cpc	r9, r25
    456e:	aa 06       	cpc	r10, r26
    4570:	bb 06       	cpc	r11, r27
    4572:	c8 f6       	brcc	.-78     	; 0x4526 <twi_writeTo+0x13c>
    4574:	80 91 3e 06 	lds	r24, 0x063E	; 0x80063e <twi_do_reset_on_timeout>
    4578:	0e 94 f6 20 	call	0x41ec	; 0x41ec <twi_handleTimeout>
    457c:	c5 e0       	ldi	r28, 0x05	; 5
    457e:	13 c0       	rjmp	.+38     	; 0x45a6 <twi_writeTo+0x1bc>
    4580:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <twi_error>
    4584:	8f 3f       	cpi	r24, 0xFF	; 255
    4586:	79 f0       	breq	.+30     	; 0x45a6 <twi_writeTo+0x1bc>
    4588:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <twi_error>
    458c:	80 32       	cpi	r24, 0x20	; 32
    458e:	41 f0       	breq	.+16     	; 0x45a0 <twi_writeTo+0x1b6>
    4590:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <twi_error>
    4594:	80 33       	cpi	r24, 0x30	; 48
    4596:	31 f0       	breq	.+12     	; 0x45a4 <twi_writeTo+0x1ba>
    4598:	c4 e0       	ldi	r28, 0x04	; 4
    459a:	05 c0       	rjmp	.+10     	; 0x45a6 <twi_writeTo+0x1bc>
    459c:	c1 e0       	ldi	r28, 0x01	; 1
    459e:	03 c0       	rjmp	.+6      	; 0x45a6 <twi_writeTo+0x1bc>
    45a0:	c2 e0       	ldi	r28, 0x02	; 2
    45a2:	01 c0       	rjmp	.+2      	; 0x45a6 <twi_writeTo+0x1bc>
    45a4:	c3 e0       	ldi	r28, 0x03	; 3
    45a6:	8c 2f       	mov	r24, r28
    45a8:	df 91       	pop	r29
    45aa:	cf 91       	pop	r28
    45ac:	1f 91       	pop	r17
    45ae:	0f 91       	pop	r16
    45b0:	ff 90       	pop	r15
    45b2:	ef 90       	pop	r14
    45b4:	df 90       	pop	r13
    45b6:	cf 90       	pop	r12
    45b8:	bf 90       	pop	r11
    45ba:	af 90       	pop	r10
    45bc:	9f 90       	pop	r9
    45be:	8f 90       	pop	r8
    45c0:	7f 90       	pop	r7
    45c2:	6f 90       	pop	r6
    45c4:	5f 90       	pop	r5
    45c6:	4f 90       	pop	r4
    45c8:	08 95       	ret

000045ca <twi_stop>:
    45ca:	85 ed       	ldi	r24, 0xD5	; 213
    45cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    45d0:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <twi_timeout_us>
    45d4:	90 91 41 06 	lds	r25, 0x0641	; 0x800641 <twi_timeout_us+0x1>
    45d8:	a0 91 42 06 	lds	r26, 0x0642	; 0x800642 <twi_timeout_us+0x2>
    45dc:	b0 91 43 06 	lds	r27, 0x0643	; 0x800643 <twi_timeout_us+0x3>
    45e0:	07 96       	adiw	r24, 0x07	; 7
    45e2:	a1 1d       	adc	r26, r1
    45e4:	b1 1d       	adc	r27, r1
    45e6:	23 e0       	ldi	r18, 0x03	; 3
    45e8:	b6 95       	lsr	r27
    45ea:	a7 95       	ror	r26
    45ec:	97 95       	ror	r25
    45ee:	87 95       	ror	r24
    45f0:	2a 95       	dec	r18
    45f2:	d1 f7       	brne	.-12     	; 0x45e8 <twi_stop+0x1e>
    45f4:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    45f8:	24 ff       	sbrs	r18, 4
    45fa:	1c c0       	rjmp	.+56     	; 0x4634 <twi_stop+0x6a>
    45fc:	40 91 40 06 	lds	r20, 0x0640	; 0x800640 <twi_timeout_us>
    4600:	50 91 41 06 	lds	r21, 0x0641	; 0x800641 <twi_timeout_us+0x1>
    4604:	60 91 42 06 	lds	r22, 0x0642	; 0x800642 <twi_timeout_us+0x2>
    4608:	70 91 43 06 	lds	r23, 0x0643	; 0x800643 <twi_timeout_us+0x3>
    460c:	45 2b       	or	r20, r21
    460e:	46 2b       	or	r20, r22
    4610:	47 2b       	or	r20, r23
    4612:	81 f3       	breq	.-32     	; 0x45f4 <twi_stop+0x2a>
    4614:	00 97       	sbiw	r24, 0x00	; 0
    4616:	a1 05       	cpc	r26, r1
    4618:	b1 05       	cpc	r27, r1
    461a:	41 f0       	breq	.+16     	; 0x462c <twi_stop+0x62>
    461c:	25 e3       	ldi	r18, 0x35	; 53
    461e:	2a 95       	dec	r18
    4620:	f1 f7       	brne	.-4      	; 0x461e <twi_stop+0x54>
    4622:	00 00       	nop
    4624:	01 97       	sbiw	r24, 0x01	; 1
    4626:	a1 09       	sbc	r26, r1
    4628:	b1 09       	sbc	r27, r1
    462a:	e4 cf       	rjmp	.-56     	; 0x45f4 <twi_stop+0x2a>
    462c:	80 91 3e 06 	lds	r24, 0x063E	; 0x80063e <twi_do_reset_on_timeout>
    4630:	0c 94 f6 20 	jmp	0x41ec	; 0x41ec <twi_handleTimeout>
    4634:	10 92 47 06 	sts	0x0647, r1	; 0x800647 <twi_state>
    4638:	08 95       	ret

0000463a <__vector_24>:

ISR(TWI_vect)
{
    463a:	1f 92       	push	r1
    463c:	0f 92       	push	r0
    463e:	0f b6       	in	r0, 0x3f	; 63
    4640:	0f 92       	push	r0
    4642:	11 24       	eor	r1, r1
    4644:	2f 93       	push	r18
    4646:	3f 93       	push	r19
    4648:	4f 93       	push	r20
    464a:	5f 93       	push	r21
    464c:	6f 93       	push	r22
    464e:	7f 93       	push	r23
    4650:	8f 93       	push	r24
    4652:	9f 93       	push	r25
    4654:	af 93       	push	r26
    4656:	bf 93       	push	r27
    4658:	ef 93       	push	r30
    465a:	ff 93       	push	r31
  switch(TW_STATUS){
    465c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    4660:	88 7f       	andi	r24, 0xF8	; 248
    4662:	80 36       	cpi	r24, 0x60	; 96
    4664:	09 f4       	brne	.+2      	; 0x4668 <__vector_24+0x2e>
    4666:	9e c0       	rjmp	.+316    	; 0x47a4 <__vector_24+0x16a>
    4668:	78 f5       	brcc	.+94     	; 0x46c8 <__vector_24+0x8e>
    466a:	88 32       	cpi	r24, 0x28	; 40
    466c:	09 f4       	brne	.+2      	; 0x4670 <__vector_24+0x36>
    466e:	5d c0       	rjmp	.+186    	; 0x472a <__vector_24+0xf0>
    4670:	90 f4       	brcc	.+36     	; 0x4696 <__vector_24+0x5c>
    4672:	80 31       	cpi	r24, 0x10	; 16
    4674:	09 f4       	brne	.+2      	; 0x4678 <__vector_24+0x3e>
    4676:	56 c0       	rjmp	.+172    	; 0x4724 <__vector_24+0xea>
    4678:	38 f4       	brcc	.+14     	; 0x4688 <__vector_24+0x4e>
    467a:	88 23       	and	r24, r24
    467c:	09 f4       	brne	.+2      	; 0x4680 <__vector_24+0x46>
    467e:	f5 c0       	rjmp	.+490    	; 0x486a <__vector_24+0x230>
    4680:	88 30       	cpi	r24, 0x08	; 8
    4682:	09 f4       	brne	.+2      	; 0x4686 <__vector_24+0x4c>
    4684:	4f c0       	rjmp	.+158    	; 0x4724 <__vector_24+0xea>
    4686:	f5 c0       	rjmp	.+490    	; 0x4872 <__vector_24+0x238>
    4688:	88 31       	cpi	r24, 0x18	; 24
    468a:	09 f4       	brne	.+2      	; 0x468e <__vector_24+0x54>
    468c:	4e c0       	rjmp	.+156    	; 0x472a <__vector_24+0xf0>
    468e:	80 32       	cpi	r24, 0x20	; 32
    4690:	09 f4       	brne	.+2      	; 0x4694 <__vector_24+0x5a>
    4692:	5f c0       	rjmp	.+190    	; 0x4752 <__vector_24+0x118>
    4694:	ee c0       	rjmp	.+476    	; 0x4872 <__vector_24+0x238>
    4696:	80 34       	cpi	r24, 0x40	; 64
    4698:	09 f4       	brne	.+2      	; 0x469c <__vector_24+0x62>
    469a:	6a c0       	rjmp	.+212    	; 0x4770 <__vector_24+0x136>
    469c:	58 f4       	brcc	.+22     	; 0x46b4 <__vector_24+0x7a>
    469e:	80 33       	cpi	r24, 0x30	; 48
    46a0:	09 f4       	brne	.+2      	; 0x46a4 <__vector_24+0x6a>
    46a2:	57 c0       	rjmp	.+174    	; 0x4752 <__vector_24+0x118>
    46a4:	88 33       	cpi	r24, 0x38	; 56
    46a6:	09 f0       	breq	.+2      	; 0x46aa <__vector_24+0x70>
    46a8:	e4 c0       	rjmp	.+456    	; 0x4872 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    46aa:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <twi_error>
      twi_releaseBus();
    46ae:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <twi_releaseBus>
      break;
    46b2:	df c0       	rjmp	.+446    	; 0x4872 <__vector_24+0x238>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    46b4:	80 35       	cpi	r24, 0x50	; 80
    46b6:	09 f4       	brne	.+2      	; 0x46ba <__vector_24+0x80>
    46b8:	4f c0       	rjmp	.+158    	; 0x4758 <__vector_24+0x11e>
    46ba:	88 35       	cpi	r24, 0x58	; 88
    46bc:	09 f4       	brne	.+2      	; 0x46c0 <__vector_24+0x86>
    46be:	5d c0       	rjmp	.+186    	; 0x477a <__vector_24+0x140>
    46c0:	88 34       	cpi	r24, 0x48	; 72
    46c2:	09 f0       	breq	.+2      	; 0x46c6 <__vector_24+0x8c>
    46c4:	d6 c0       	rjmp	.+428    	; 0x4872 <__vector_24+0x238>
    46c6:	d3 c0       	rjmp	.+422    	; 0x486e <__vector_24+0x234>
    46c8:	88 39       	cpi	r24, 0x98	; 152
    46ca:	09 f4       	brne	.+2      	; 0x46ce <__vector_24+0x94>
    46cc:	c4 c0       	rjmp	.+392    	; 0x4856 <__vector_24+0x21c>
    46ce:	a8 f4       	brcc	.+42     	; 0x46fa <__vector_24+0xc0>
    46d0:	88 37       	cpi	r24, 0x78	; 120
    46d2:	09 f4       	brne	.+2      	; 0x46d6 <__vector_24+0x9c>
    46d4:	67 c0       	rjmp	.+206    	; 0x47a4 <__vector_24+0x16a>
    46d6:	38 f4       	brcc	.+14     	; 0x46e6 <__vector_24+0xac>
    46d8:	88 36       	cpi	r24, 0x68	; 104
    46da:	09 f4       	brne	.+2      	; 0x46de <__vector_24+0xa4>
    46dc:	63 c0       	rjmp	.+198    	; 0x47a4 <__vector_24+0x16a>
    46de:	80 37       	cpi	r24, 0x70	; 112
    46e0:	09 f4       	brne	.+2      	; 0x46e4 <__vector_24+0xaa>
    46e2:	60 c0       	rjmp	.+192    	; 0x47a4 <__vector_24+0x16a>
    46e4:	c6 c0       	rjmp	.+396    	; 0x4872 <__vector_24+0x238>
    46e6:	88 38       	cpi	r24, 0x88	; 136
    46e8:	09 f4       	brne	.+2      	; 0x46ec <__vector_24+0xb2>
    46ea:	b5 c0       	rjmp	.+362    	; 0x4856 <__vector_24+0x21c>
    46ec:	80 39       	cpi	r24, 0x90	; 144
    46ee:	09 f4       	brne	.+2      	; 0x46f2 <__vector_24+0xb8>
    46f0:	5f c0       	rjmp	.+190    	; 0x47b0 <__vector_24+0x176>
    46f2:	80 38       	cpi	r24, 0x80	; 128
    46f4:	09 f0       	breq	.+2      	; 0x46f8 <__vector_24+0xbe>
    46f6:	bd c0       	rjmp	.+378    	; 0x4872 <__vector_24+0x238>
    46f8:	5b c0       	rjmp	.+182    	; 0x47b0 <__vector_24+0x176>
    46fa:	80 3b       	cpi	r24, 0xB0	; 176
    46fc:	09 f4       	brne	.+2      	; 0x4700 <__vector_24+0xc6>
    46fe:	83 c0       	rjmp	.+262    	; 0x4806 <__vector_24+0x1cc>
    4700:	38 f4       	brcc	.+14     	; 0x4710 <__vector_24+0xd6>
    4702:	80 3a       	cpi	r24, 0xA0	; 160
    4704:	09 f4       	brne	.+2      	; 0x4708 <__vector_24+0xce>
    4706:	66 c0       	rjmp	.+204    	; 0x47d4 <__vector_24+0x19a>
    4708:	88 3a       	cpi	r24, 0xA8	; 168
    470a:	09 f4       	brne	.+2      	; 0x470e <__vector_24+0xd4>
    470c:	7c c0       	rjmp	.+248    	; 0x4806 <__vector_24+0x1cc>
    470e:	b1 c0       	rjmp	.+354    	; 0x4872 <__vector_24+0x238>
    4710:	80 3c       	cpi	r24, 0xC0	; 192
    4712:	09 f4       	brne	.+2      	; 0x4716 <__vector_24+0xdc>
    4714:	a4 c0       	rjmp	.+328    	; 0x485e <__vector_24+0x224>
    4716:	88 3c       	cpi	r24, 0xC8	; 200
    4718:	09 f4       	brne	.+2      	; 0x471c <__vector_24+0xe2>
    471a:	a1 c0       	rjmp	.+322    	; 0x485e <__vector_24+0x224>
    471c:	88 3b       	cpi	r24, 0xB8	; 184
    471e:	09 f4       	brne	.+2      	; 0x4722 <__vector_24+0xe8>
    4720:	87 c0       	rjmp	.+270    	; 0x4830 <__vector_24+0x1f6>
    4722:	a7 c0       	rjmp	.+334    	; 0x4872 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4724:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <twi_slarw>
    4728:	10 c0       	rjmp	.+32     	; 0x474a <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    472a:	90 91 19 06 	lds	r25, 0x0619	; 0x800619 <twi_masterBufferIndex>
    472e:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <twi_masterBufferLength>
    4732:	98 17       	cp	r25, r24
    4734:	70 f5       	brcc	.+92     	; 0x4792 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4736:	e0 91 19 06 	lds	r30, 0x0619	; 0x800619 <twi_masterBufferIndex>
    473a:	81 e0       	ldi	r24, 0x01	; 1
    473c:	8e 0f       	add	r24, r30
    473e:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <twi_masterBufferIndex>
    4742:	f0 e0       	ldi	r31, 0x00	; 0
    4744:	e6 5e       	subi	r30, 0xE6	; 230
    4746:	f9 4f       	sbci	r31, 0xF9	; 249
    4748:	80 81       	ld	r24, Z
    474a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    474e:	85 ec       	ldi	r24, 0xC5	; 197
    4750:	83 c0       	rjmp	.+262    	; 0x4858 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4752:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <twi_error>
    4756:	8b c0       	rjmp	.+278    	; 0x486e <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4758:	e0 91 19 06 	lds	r30, 0x0619	; 0x800619 <twi_masterBufferIndex>
    475c:	81 e0       	ldi	r24, 0x01	; 1
    475e:	8e 0f       	add	r24, r30
    4760:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <twi_masterBufferIndex>
    4764:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    4768:	f0 e0       	ldi	r31, 0x00	; 0
    476a:	e6 5e       	subi	r30, 0xE6	; 230
    476c:	f9 4f       	sbci	r31, 0xF9	; 249
    476e:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4770:	90 91 19 06 	lds	r25, 0x0619	; 0x800619 <twi_masterBufferIndex>
    4774:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <twi_masterBufferLength>
    4778:	6b c0       	rjmp	.+214    	; 0x4850 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    477a:	e0 91 19 06 	lds	r30, 0x0619	; 0x800619 <twi_masterBufferIndex>
    477e:	81 e0       	ldi	r24, 0x01	; 1
    4780:	8e 0f       	add	r24, r30
    4782:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <twi_masterBufferIndex>
    4786:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    478a:	f0 e0       	ldi	r31, 0x00	; 0
    478c:	e6 5e       	subi	r30, 0xE6	; 230
    478e:	f9 4f       	sbci	r31, 0xF9	; 249
    4790:	80 83       	st	Z, r24
      if (twi_sendStop){
    4792:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <twi_sendStop>
    4796:	81 11       	cpse	r24, r1
    4798:	6a c0       	rjmp	.+212    	; 0x486e <__vector_24+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    479a:	81 e0       	ldi	r24, 0x01	; 1
    479c:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    47a0:	84 ea       	ldi	r24, 0xA4	; 164
    47a2:	5e c0       	rjmp	.+188    	; 0x4860 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    47a4:	83 e0       	ldi	r24, 0x03	; 3
    47a6:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    47aa:	10 92 d5 05 	sts	0x05D5, r1	; 0x8005d5 <twi_rxBufferIndex>
    47ae:	cf cf       	rjmp	.-98     	; 0x474e <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    47b0:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <twi_rxBufferIndex>
    47b4:	80 32       	cpi	r24, 0x20	; 32
    47b6:	08 f0       	brcs	.+2      	; 0x47ba <__vector_24+0x180>
    47b8:	4e c0       	rjmp	.+156    	; 0x4856 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    47ba:	e0 91 d5 05 	lds	r30, 0x05D5	; 0x8005d5 <twi_rxBufferIndex>
    47be:	81 e0       	ldi	r24, 0x01	; 1
    47c0:	8e 0f       	add	r24, r30
    47c2:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <twi_rxBufferIndex>
    47c6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    47ca:	f0 e0       	ldi	r31, 0x00	; 0
    47cc:	ea 52       	subi	r30, 0x2A	; 42
    47ce:	fa 4f       	sbci	r31, 0xFA	; 250
    47d0:	80 83       	st	Z, r24
    47d2:	bd cf       	rjmp	.-134    	; 0x474e <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    47d4:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    47d8:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <twi_rxBufferIndex>
    47dc:	80 32       	cpi	r24, 0x20	; 32
    47de:	30 f4       	brcc	.+12     	; 0x47ec <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    47e0:	e0 91 d5 05 	lds	r30, 0x05D5	; 0x8005d5 <twi_rxBufferIndex>
    47e4:	f0 e0       	ldi	r31, 0x00	; 0
    47e6:	ea 52       	subi	r30, 0x2A	; 42
    47e8:	fa 4f       	sbci	r31, 0xFA	; 250
    47ea:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    47ec:	60 91 d5 05 	lds	r22, 0x05D5	; 0x8005d5 <twi_rxBufferIndex>
    47f0:	70 e0       	ldi	r23, 0x00	; 0
    47f2:	e0 91 3a 06 	lds	r30, 0x063A	; 0x80063a <twi_onSlaveReceive>
    47f6:	f0 91 3b 06 	lds	r31, 0x063B	; 0x80063b <twi_onSlaveReceive+0x1>
    47fa:	86 ed       	ldi	r24, 0xD6	; 214
    47fc:	95 e0       	ldi	r25, 0x05	; 5
    47fe:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4800:	10 92 d5 05 	sts	0x05D5, r1	; 0x8005d5 <twi_rxBufferIndex>
      break;
    4804:	36 c0       	rjmp	.+108    	; 0x4872 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4806:	84 e0       	ldi	r24, 0x04	; 4
    4808:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    480c:	10 92 f7 05 	sts	0x05F7, r1	; 0x8005f7 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4810:	10 92 f6 05 	sts	0x05F6, r1	; 0x8005f6 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4814:	e0 91 3c 06 	lds	r30, 0x063C	; 0x80063c <twi_onSlaveTransmit>
    4818:	f0 91 3d 06 	lds	r31, 0x063D	; 0x80063d <twi_onSlaveTransmit+0x1>
    481c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    481e:	80 91 f6 05 	lds	r24, 0x05F6	; 0x8005f6 <twi_txBufferLength>
    4822:	81 11       	cpse	r24, r1
    4824:	05 c0       	rjmp	.+10     	; 0x4830 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    4826:	81 e0       	ldi	r24, 0x01	; 1
    4828:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    482c:	10 92 f8 05 	sts	0x05F8, r1	; 0x8005f8 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4830:	e0 91 f7 05 	lds	r30, 0x05F7	; 0x8005f7 <twi_txBufferIndex>
    4834:	81 e0       	ldi	r24, 0x01	; 1
    4836:	8e 0f       	add	r24, r30
    4838:	80 93 f7 05 	sts	0x05F7, r24	; 0x8005f7 <twi_txBufferIndex>
    483c:	f0 e0       	ldi	r31, 0x00	; 0
    483e:	e8 50       	subi	r30, 0x08	; 8
    4840:	fa 4f       	sbci	r31, 0xFA	; 250
    4842:	80 81       	ld	r24, Z
    4844:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4848:	90 91 f7 05 	lds	r25, 0x05F7	; 0x8005f7 <twi_txBufferIndex>
    484c:	80 91 f6 05 	lds	r24, 0x05F6	; 0x8005f6 <twi_txBufferLength>
    4850:	98 17       	cp	r25, r24
    4852:	08 f4       	brcc	.+2      	; 0x4856 <__vector_24+0x21c>
    4854:	7c cf       	rjmp	.-264    	; 0x474e <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4856:	85 e8       	ldi	r24, 0x85	; 133
    4858:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    485c:	0a c0       	rjmp	.+20     	; 0x4872 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    485e:	85 ec       	ldi	r24, 0xC5	; 197
    4860:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    4864:	10 92 47 06 	sts	0x0647, r1	; 0x800647 <twi_state>
      break;
    4868:	04 c0       	rjmp	.+8      	; 0x4872 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    486a:	10 92 d4 05 	sts	0x05D4, r1	; 0x8005d4 <twi_error>
      twi_stop();
    486e:	0e 94 e5 22 	call	0x45ca	; 0x45ca <twi_stop>
      break;
  }
}
    4872:	ff 91       	pop	r31
    4874:	ef 91       	pop	r30
    4876:	bf 91       	pop	r27
    4878:	af 91       	pop	r26
    487a:	9f 91       	pop	r25
    487c:	8f 91       	pop	r24
    487e:	7f 91       	pop	r23
    4880:	6f 91       	pop	r22
    4882:	5f 91       	pop	r21
    4884:	4f 91       	pop	r20
    4886:	3f 91       	pop	r19
    4888:	2f 91       	pop	r18
    488a:	0f 90       	pop	r0
    488c:	0f be       	out	0x3f, r0	; 63
    488e:	0f 90       	pop	r0
    4890:	1f 90       	pop	r1
    4892:	18 95       	reti

00004894 <__cmpsf2>:
    4894:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__fp_cmp>
    4898:	08 f4       	brcc	.+2      	; 0x489c <__cmpsf2+0x8>
    489a:	81 e0       	ldi	r24, 0x01	; 1
    489c:	08 95       	ret

0000489e <__unordsf2>:
    489e:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__fp_cmp>
    48a2:	88 0b       	sbc	r24, r24
    48a4:	99 0b       	sbc	r25, r25
    48a6:	08 95       	ret

000048a8 <__mulsi3>:
    48a8:	db 01       	movw	r26, r22
    48aa:	8f 93       	push	r24
    48ac:	9f 93       	push	r25
    48ae:	0e 94 9c 24 	call	0x4938	; 0x4938 <__muluhisi3>
    48b2:	bf 91       	pop	r27
    48b4:	af 91       	pop	r26
    48b6:	a2 9f       	mul	r26, r18
    48b8:	80 0d       	add	r24, r0
    48ba:	91 1d       	adc	r25, r1
    48bc:	a3 9f       	mul	r26, r19
    48be:	90 0d       	add	r25, r0
    48c0:	b2 9f       	mul	r27, r18
    48c2:	90 0d       	add	r25, r0
    48c4:	11 24       	eor	r1, r1
    48c6:	08 95       	ret

000048c8 <__udivmodsi4>:
    48c8:	a1 e2       	ldi	r26, 0x21	; 33
    48ca:	1a 2e       	mov	r1, r26
    48cc:	aa 1b       	sub	r26, r26
    48ce:	bb 1b       	sub	r27, r27
    48d0:	fd 01       	movw	r30, r26
    48d2:	0d c0       	rjmp	.+26     	; 0x48ee <__udivmodsi4_ep>

000048d4 <__udivmodsi4_loop>:
    48d4:	aa 1f       	adc	r26, r26
    48d6:	bb 1f       	adc	r27, r27
    48d8:	ee 1f       	adc	r30, r30
    48da:	ff 1f       	adc	r31, r31
    48dc:	a2 17       	cp	r26, r18
    48de:	b3 07       	cpc	r27, r19
    48e0:	e4 07       	cpc	r30, r20
    48e2:	f5 07       	cpc	r31, r21
    48e4:	20 f0       	brcs	.+8      	; 0x48ee <__udivmodsi4_ep>
    48e6:	a2 1b       	sub	r26, r18
    48e8:	b3 0b       	sbc	r27, r19
    48ea:	e4 0b       	sbc	r30, r20
    48ec:	f5 0b       	sbc	r31, r21

000048ee <__udivmodsi4_ep>:
    48ee:	66 1f       	adc	r22, r22
    48f0:	77 1f       	adc	r23, r23
    48f2:	88 1f       	adc	r24, r24
    48f4:	99 1f       	adc	r25, r25
    48f6:	1a 94       	dec	r1
    48f8:	69 f7       	brne	.-38     	; 0x48d4 <__udivmodsi4_loop>
    48fa:	60 95       	com	r22
    48fc:	70 95       	com	r23
    48fe:	80 95       	com	r24
    4900:	90 95       	com	r25
    4902:	9b 01       	movw	r18, r22
    4904:	ac 01       	movw	r20, r24
    4906:	bd 01       	movw	r22, r26
    4908:	cf 01       	movw	r24, r30
    490a:	08 95       	ret

0000490c <__umulhisi3>:
    490c:	a2 9f       	mul	r26, r18
    490e:	b0 01       	movw	r22, r0
    4910:	b3 9f       	mul	r27, r19
    4912:	c0 01       	movw	r24, r0
    4914:	a3 9f       	mul	r26, r19
    4916:	70 0d       	add	r23, r0
    4918:	81 1d       	adc	r24, r1
    491a:	11 24       	eor	r1, r1
    491c:	91 1d       	adc	r25, r1
    491e:	b2 9f       	mul	r27, r18
    4920:	70 0d       	add	r23, r0
    4922:	81 1d       	adc	r24, r1
    4924:	11 24       	eor	r1, r1
    4926:	91 1d       	adc	r25, r1
    4928:	08 95       	ret

0000492a <__usmulhisi3>:
    492a:	0e 94 86 24 	call	0x490c	; 0x490c <__umulhisi3>

0000492e <__usmulhisi3_tail>:
    492e:	b7 ff       	sbrs	r27, 7
    4930:	08 95       	ret
    4932:	82 1b       	sub	r24, r18
    4934:	93 0b       	sbc	r25, r19
    4936:	08 95       	ret

00004938 <__muluhisi3>:
    4938:	0e 94 86 24 	call	0x490c	; 0x490c <__umulhisi3>
    493c:	a5 9f       	mul	r26, r21
    493e:	90 0d       	add	r25, r0
    4940:	b4 9f       	mul	r27, r20
    4942:	90 0d       	add	r25, r0
    4944:	a4 9f       	mul	r26, r20
    4946:	80 0d       	add	r24, r0
    4948:	91 1d       	adc	r25, r1
    494a:	11 24       	eor	r1, r1
    494c:	08 95       	ret

0000494e <__muldi3>:
    494e:	df 93       	push	r29
    4950:	cf 93       	push	r28
    4952:	1f 93       	push	r17
    4954:	0f 93       	push	r16
    4956:	9a 9d       	mul	r25, r10
    4958:	f0 2d       	mov	r31, r0
    495a:	21 9f       	mul	r18, r17
    495c:	f0 0d       	add	r31, r0
    495e:	8b 9d       	mul	r24, r11
    4960:	f0 0d       	add	r31, r0
    4962:	8a 9d       	mul	r24, r10
    4964:	e0 2d       	mov	r30, r0
    4966:	f1 0d       	add	r31, r1
    4968:	03 9f       	mul	r16, r19
    496a:	f0 0d       	add	r31, r0
    496c:	02 9f       	mul	r16, r18
    496e:	e0 0d       	add	r30, r0
    4970:	f1 1d       	adc	r31, r1
    4972:	4e 9d       	mul	r20, r14
    4974:	e0 0d       	add	r30, r0
    4976:	f1 1d       	adc	r31, r1
    4978:	5e 9d       	mul	r21, r14
    497a:	f0 0d       	add	r31, r0
    497c:	4f 9d       	mul	r20, r15
    497e:	f0 0d       	add	r31, r0
    4980:	7f 93       	push	r23
    4982:	6f 93       	push	r22
    4984:	bf 92       	push	r11
    4986:	af 92       	push	r10
    4988:	5f 93       	push	r21
    498a:	4f 93       	push	r20
    498c:	d5 01       	movw	r26, r10
    498e:	0e 94 86 24 	call	0x490c	; 0x490c <__umulhisi3>
    4992:	8b 01       	movw	r16, r22
    4994:	ac 01       	movw	r20, r24
    4996:	d7 01       	movw	r26, r14
    4998:	0e 94 86 24 	call	0x490c	; 0x490c <__umulhisi3>
    499c:	eb 01       	movw	r28, r22
    499e:	e8 0f       	add	r30, r24
    49a0:	f9 1f       	adc	r31, r25
    49a2:	d6 01       	movw	r26, r12
    49a4:	0e 94 f7 24 	call	0x49ee	; 0x49ee <__muldi3_6>
    49a8:	2f 91       	pop	r18
    49aa:	3f 91       	pop	r19
    49ac:	d6 01       	movw	r26, r12
    49ae:	0e 94 86 24 	call	0x490c	; 0x490c <__umulhisi3>
    49b2:	c6 0f       	add	r28, r22
    49b4:	d7 1f       	adc	r29, r23
    49b6:	e8 1f       	adc	r30, r24
    49b8:	f9 1f       	adc	r31, r25
    49ba:	af 91       	pop	r26
    49bc:	bf 91       	pop	r27
    49be:	0e 94 f7 24 	call	0x49ee	; 0x49ee <__muldi3_6>
    49c2:	2f 91       	pop	r18
    49c4:	3f 91       	pop	r19
    49c6:	0e 94 86 24 	call	0x490c	; 0x490c <__umulhisi3>
    49ca:	c6 0f       	add	r28, r22
    49cc:	d7 1f       	adc	r29, r23
    49ce:	e8 1f       	adc	r30, r24
    49d0:	f9 1f       	adc	r31, r25
    49d2:	d6 01       	movw	r26, r12
    49d4:	0e 94 86 24 	call	0x490c	; 0x490c <__umulhisi3>
    49d8:	e6 0f       	add	r30, r22
    49da:	f7 1f       	adc	r31, r23
    49dc:	98 01       	movw	r18, r16
    49de:	be 01       	movw	r22, r28
    49e0:	cf 01       	movw	r24, r30
    49e2:	11 24       	eor	r1, r1
    49e4:	0f 91       	pop	r16
    49e6:	1f 91       	pop	r17
    49e8:	cf 91       	pop	r28
    49ea:	df 91       	pop	r29
    49ec:	08 95       	ret

000049ee <__muldi3_6>:
    49ee:	0e 94 86 24 	call	0x490c	; 0x490c <__umulhisi3>
    49f2:	46 0f       	add	r20, r22
    49f4:	57 1f       	adc	r21, r23
    49f6:	c8 1f       	adc	r28, r24
    49f8:	d9 1f       	adc	r29, r25
    49fa:	08 f4       	brcc	.+2      	; 0x49fe <__muldi3_6+0x10>
    49fc:	31 96       	adiw	r30, 0x01	; 1
    49fe:	08 95       	ret

00004a00 <__umulsidi3>:
    4a00:	e8 94       	clt

00004a02 <__umulsidi3_helper>:
    4a02:	df 93       	push	r29
    4a04:	cf 93       	push	r28
    4a06:	fc 01       	movw	r30, r24
    4a08:	db 01       	movw	r26, r22
    4a0a:	0e 94 86 24 	call	0x490c	; 0x490c <__umulhisi3>
    4a0e:	7f 93       	push	r23
    4a10:	6f 93       	push	r22
    4a12:	e9 01       	movw	r28, r18
    4a14:	9a 01       	movw	r18, r20
    4a16:	ac 01       	movw	r20, r24
    4a18:	bf 93       	push	r27
    4a1a:	af 93       	push	r26
    4a1c:	3f 93       	push	r19
    4a1e:	2f 93       	push	r18
    4a20:	df 01       	movw	r26, r30
    4a22:	0e 94 86 24 	call	0x490c	; 0x490c <__umulhisi3>
    4a26:	26 f4       	brtc	.+8      	; 0x4a30 <__umulsidi3_helper+0x2e>
    4a28:	6c 1b       	sub	r22, r28
    4a2a:	7d 0b       	sbc	r23, r29
    4a2c:	82 0b       	sbc	r24, r18
    4a2e:	93 0b       	sbc	r25, r19
    4a30:	9e 01       	movw	r18, r28
    4a32:	eb 01       	movw	r28, r22
    4a34:	fc 01       	movw	r30, r24
    4a36:	0e 94 f7 24 	call	0x49ee	; 0x49ee <__muldi3_6>
    4a3a:	af 91       	pop	r26
    4a3c:	bf 91       	pop	r27
    4a3e:	2f 91       	pop	r18
    4a40:	3f 91       	pop	r19
    4a42:	0e 94 f7 24 	call	0x49ee	; 0x49ee <__muldi3_6>
    4a46:	be 01       	movw	r22, r28
    4a48:	cf 01       	movw	r24, r30
    4a4a:	f9 01       	movw	r30, r18
    4a4c:	2f 91       	pop	r18
    4a4e:	3f 91       	pop	r19
    4a50:	cf 91       	pop	r28
    4a52:	df 91       	pop	r29
    4a54:	08 95       	ret

00004a56 <__cmpdi2>:
    4a56:	2a 15       	cp	r18, r10
    4a58:	3b 05       	cpc	r19, r11
    4a5a:	4c 05       	cpc	r20, r12
    4a5c:	5d 05       	cpc	r21, r13
    4a5e:	6e 05       	cpc	r22, r14
    4a60:	7f 05       	cpc	r23, r15
    4a62:	80 07       	cpc	r24, r16
    4a64:	91 07       	cpc	r25, r17
    4a66:	08 95       	ret

00004a68 <__tablejump2__>:
    4a68:	ee 0f       	add	r30, r30
    4a6a:	ff 1f       	adc	r31, r31
    4a6c:	05 90       	lpm	r0, Z+
    4a6e:	f4 91       	lpm	r31, Z
    4a70:	e0 2d       	mov	r30, r0
    4a72:	09 94       	ijmp

00004a74 <malloc>:
    4a74:	0f 93       	push	r16
    4a76:	1f 93       	push	r17
    4a78:	cf 93       	push	r28
    4a7a:	df 93       	push	r29
    4a7c:	82 30       	cpi	r24, 0x02	; 2
    4a7e:	91 05       	cpc	r25, r1
    4a80:	10 f4       	brcc	.+4      	; 0x4a86 <malloc+0x12>
    4a82:	82 e0       	ldi	r24, 0x02	; 2
    4a84:	90 e0       	ldi	r25, 0x00	; 0
    4a86:	e0 91 4a 06 	lds	r30, 0x064A	; 0x80064a <__flp>
    4a8a:	f0 91 4b 06 	lds	r31, 0x064B	; 0x80064b <__flp+0x1>
    4a8e:	20 e0       	ldi	r18, 0x00	; 0
    4a90:	30 e0       	ldi	r19, 0x00	; 0
    4a92:	a0 e0       	ldi	r26, 0x00	; 0
    4a94:	b0 e0       	ldi	r27, 0x00	; 0
    4a96:	30 97       	sbiw	r30, 0x00	; 0
    4a98:	19 f1       	breq	.+70     	; 0x4ae0 <malloc+0x6c>
    4a9a:	40 81       	ld	r20, Z
    4a9c:	51 81       	ldd	r21, Z+1	; 0x01
    4a9e:	02 81       	ldd	r16, Z+2	; 0x02
    4aa0:	13 81       	ldd	r17, Z+3	; 0x03
    4aa2:	48 17       	cp	r20, r24
    4aa4:	59 07       	cpc	r21, r25
    4aa6:	c8 f0       	brcs	.+50     	; 0x4ada <malloc+0x66>
    4aa8:	84 17       	cp	r24, r20
    4aaa:	95 07       	cpc	r25, r21
    4aac:	69 f4       	brne	.+26     	; 0x4ac8 <malloc+0x54>
    4aae:	10 97       	sbiw	r26, 0x00	; 0
    4ab0:	31 f0       	breq	.+12     	; 0x4abe <malloc+0x4a>
    4ab2:	12 96       	adiw	r26, 0x02	; 2
    4ab4:	0c 93       	st	X, r16
    4ab6:	12 97       	sbiw	r26, 0x02	; 2
    4ab8:	13 96       	adiw	r26, 0x03	; 3
    4aba:	1c 93       	st	X, r17
    4abc:	27 c0       	rjmp	.+78     	; 0x4b0c <malloc+0x98>
    4abe:	00 93 4a 06 	sts	0x064A, r16	; 0x80064a <__flp>
    4ac2:	10 93 4b 06 	sts	0x064B, r17	; 0x80064b <__flp+0x1>
    4ac6:	22 c0       	rjmp	.+68     	; 0x4b0c <malloc+0x98>
    4ac8:	21 15       	cp	r18, r1
    4aca:	31 05       	cpc	r19, r1
    4acc:	19 f0       	breq	.+6      	; 0x4ad4 <malloc+0x60>
    4ace:	42 17       	cp	r20, r18
    4ad0:	53 07       	cpc	r21, r19
    4ad2:	18 f4       	brcc	.+6      	; 0x4ada <malloc+0x66>
    4ad4:	9a 01       	movw	r18, r20
    4ad6:	bd 01       	movw	r22, r26
    4ad8:	ef 01       	movw	r28, r30
    4ada:	df 01       	movw	r26, r30
    4adc:	f8 01       	movw	r30, r16
    4ade:	db cf       	rjmp	.-74     	; 0x4a96 <malloc+0x22>
    4ae0:	21 15       	cp	r18, r1
    4ae2:	31 05       	cpc	r19, r1
    4ae4:	f9 f0       	breq	.+62     	; 0x4b24 <malloc+0xb0>
    4ae6:	28 1b       	sub	r18, r24
    4ae8:	39 0b       	sbc	r19, r25
    4aea:	24 30       	cpi	r18, 0x04	; 4
    4aec:	31 05       	cpc	r19, r1
    4aee:	80 f4       	brcc	.+32     	; 0x4b10 <malloc+0x9c>
    4af0:	8a 81       	ldd	r24, Y+2	; 0x02
    4af2:	9b 81       	ldd	r25, Y+3	; 0x03
    4af4:	61 15       	cp	r22, r1
    4af6:	71 05       	cpc	r23, r1
    4af8:	21 f0       	breq	.+8      	; 0x4b02 <malloc+0x8e>
    4afa:	fb 01       	movw	r30, r22
    4afc:	93 83       	std	Z+3, r25	; 0x03
    4afe:	82 83       	std	Z+2, r24	; 0x02
    4b00:	04 c0       	rjmp	.+8      	; 0x4b0a <malloc+0x96>
    4b02:	90 93 4b 06 	sts	0x064B, r25	; 0x80064b <__flp+0x1>
    4b06:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <__flp>
    4b0a:	fe 01       	movw	r30, r28
    4b0c:	32 96       	adiw	r30, 0x02	; 2
    4b0e:	44 c0       	rjmp	.+136    	; 0x4b98 <malloc+0x124>
    4b10:	fe 01       	movw	r30, r28
    4b12:	e2 0f       	add	r30, r18
    4b14:	f3 1f       	adc	r31, r19
    4b16:	81 93       	st	Z+, r24
    4b18:	91 93       	st	Z+, r25
    4b1a:	22 50       	subi	r18, 0x02	; 2
    4b1c:	31 09       	sbc	r19, r1
    4b1e:	39 83       	std	Y+1, r19	; 0x01
    4b20:	28 83       	st	Y, r18
    4b22:	3a c0       	rjmp	.+116    	; 0x4b98 <malloc+0x124>
    4b24:	20 91 48 06 	lds	r18, 0x0648	; 0x800648 <__brkval>
    4b28:	30 91 49 06 	lds	r19, 0x0649	; 0x800649 <__brkval+0x1>
    4b2c:	23 2b       	or	r18, r19
    4b2e:	41 f4       	brne	.+16     	; 0x4b40 <malloc+0xcc>
    4b30:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4b34:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4b38:	30 93 49 06 	sts	0x0649, r19	; 0x800649 <__brkval+0x1>
    4b3c:	20 93 48 06 	sts	0x0648, r18	; 0x800648 <__brkval>
    4b40:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    4b44:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4b48:	21 15       	cp	r18, r1
    4b4a:	31 05       	cpc	r19, r1
    4b4c:	41 f4       	brne	.+16     	; 0x4b5e <malloc+0xea>
    4b4e:	2d b7       	in	r18, 0x3d	; 61
    4b50:	3e b7       	in	r19, 0x3e	; 62
    4b52:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4b56:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4b5a:	24 1b       	sub	r18, r20
    4b5c:	35 0b       	sbc	r19, r21
    4b5e:	e0 91 48 06 	lds	r30, 0x0648	; 0x800648 <__brkval>
    4b62:	f0 91 49 06 	lds	r31, 0x0649	; 0x800649 <__brkval+0x1>
    4b66:	e2 17       	cp	r30, r18
    4b68:	f3 07       	cpc	r31, r19
    4b6a:	a0 f4       	brcc	.+40     	; 0x4b94 <malloc+0x120>
    4b6c:	2e 1b       	sub	r18, r30
    4b6e:	3f 0b       	sbc	r19, r31
    4b70:	28 17       	cp	r18, r24
    4b72:	39 07       	cpc	r19, r25
    4b74:	78 f0       	brcs	.+30     	; 0x4b94 <malloc+0x120>
    4b76:	ac 01       	movw	r20, r24
    4b78:	4e 5f       	subi	r20, 0xFE	; 254
    4b7a:	5f 4f       	sbci	r21, 0xFF	; 255
    4b7c:	24 17       	cp	r18, r20
    4b7e:	35 07       	cpc	r19, r21
    4b80:	48 f0       	brcs	.+18     	; 0x4b94 <malloc+0x120>
    4b82:	4e 0f       	add	r20, r30
    4b84:	5f 1f       	adc	r21, r31
    4b86:	50 93 49 06 	sts	0x0649, r21	; 0x800649 <__brkval+0x1>
    4b8a:	40 93 48 06 	sts	0x0648, r20	; 0x800648 <__brkval>
    4b8e:	81 93       	st	Z+, r24
    4b90:	91 93       	st	Z+, r25
    4b92:	02 c0       	rjmp	.+4      	; 0x4b98 <malloc+0x124>
    4b94:	e0 e0       	ldi	r30, 0x00	; 0
    4b96:	f0 e0       	ldi	r31, 0x00	; 0
    4b98:	cf 01       	movw	r24, r30
    4b9a:	df 91       	pop	r29
    4b9c:	cf 91       	pop	r28
    4b9e:	1f 91       	pop	r17
    4ba0:	0f 91       	pop	r16
    4ba2:	08 95       	ret

00004ba4 <free>:
    4ba4:	cf 93       	push	r28
    4ba6:	df 93       	push	r29
    4ba8:	00 97       	sbiw	r24, 0x00	; 0
    4baa:	09 f4       	brne	.+2      	; 0x4bae <free+0xa>
    4bac:	81 c0       	rjmp	.+258    	; 0x4cb0 <free+0x10c>
    4bae:	fc 01       	movw	r30, r24
    4bb0:	32 97       	sbiw	r30, 0x02	; 2
    4bb2:	13 82       	std	Z+3, r1	; 0x03
    4bb4:	12 82       	std	Z+2, r1	; 0x02
    4bb6:	a0 91 4a 06 	lds	r26, 0x064A	; 0x80064a <__flp>
    4bba:	b0 91 4b 06 	lds	r27, 0x064B	; 0x80064b <__flp+0x1>
    4bbe:	10 97       	sbiw	r26, 0x00	; 0
    4bc0:	81 f4       	brne	.+32     	; 0x4be2 <free+0x3e>
    4bc2:	20 81       	ld	r18, Z
    4bc4:	31 81       	ldd	r19, Z+1	; 0x01
    4bc6:	82 0f       	add	r24, r18
    4bc8:	93 1f       	adc	r25, r19
    4bca:	20 91 48 06 	lds	r18, 0x0648	; 0x800648 <__brkval>
    4bce:	30 91 49 06 	lds	r19, 0x0649	; 0x800649 <__brkval+0x1>
    4bd2:	28 17       	cp	r18, r24
    4bd4:	39 07       	cpc	r19, r25
    4bd6:	51 f5       	brne	.+84     	; 0x4c2c <free+0x88>
    4bd8:	f0 93 49 06 	sts	0x0649, r31	; 0x800649 <__brkval+0x1>
    4bdc:	e0 93 48 06 	sts	0x0648, r30	; 0x800648 <__brkval>
    4be0:	67 c0       	rjmp	.+206    	; 0x4cb0 <free+0x10c>
    4be2:	ed 01       	movw	r28, r26
    4be4:	20 e0       	ldi	r18, 0x00	; 0
    4be6:	30 e0       	ldi	r19, 0x00	; 0
    4be8:	ce 17       	cp	r28, r30
    4bea:	df 07       	cpc	r29, r31
    4bec:	40 f4       	brcc	.+16     	; 0x4bfe <free+0x5a>
    4bee:	4a 81       	ldd	r20, Y+2	; 0x02
    4bf0:	5b 81       	ldd	r21, Y+3	; 0x03
    4bf2:	9e 01       	movw	r18, r28
    4bf4:	41 15       	cp	r20, r1
    4bf6:	51 05       	cpc	r21, r1
    4bf8:	f1 f0       	breq	.+60     	; 0x4c36 <free+0x92>
    4bfa:	ea 01       	movw	r28, r20
    4bfc:	f5 cf       	rjmp	.-22     	; 0x4be8 <free+0x44>
    4bfe:	d3 83       	std	Z+3, r29	; 0x03
    4c00:	c2 83       	std	Z+2, r28	; 0x02
    4c02:	40 81       	ld	r20, Z
    4c04:	51 81       	ldd	r21, Z+1	; 0x01
    4c06:	84 0f       	add	r24, r20
    4c08:	95 1f       	adc	r25, r21
    4c0a:	c8 17       	cp	r28, r24
    4c0c:	d9 07       	cpc	r29, r25
    4c0e:	59 f4       	brne	.+22     	; 0x4c26 <free+0x82>
    4c10:	88 81       	ld	r24, Y
    4c12:	99 81       	ldd	r25, Y+1	; 0x01
    4c14:	84 0f       	add	r24, r20
    4c16:	95 1f       	adc	r25, r21
    4c18:	02 96       	adiw	r24, 0x02	; 2
    4c1a:	91 83       	std	Z+1, r25	; 0x01
    4c1c:	80 83       	st	Z, r24
    4c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c20:	9b 81       	ldd	r25, Y+3	; 0x03
    4c22:	93 83       	std	Z+3, r25	; 0x03
    4c24:	82 83       	std	Z+2, r24	; 0x02
    4c26:	21 15       	cp	r18, r1
    4c28:	31 05       	cpc	r19, r1
    4c2a:	29 f4       	brne	.+10     	; 0x4c36 <free+0x92>
    4c2c:	f0 93 4b 06 	sts	0x064B, r31	; 0x80064b <__flp+0x1>
    4c30:	e0 93 4a 06 	sts	0x064A, r30	; 0x80064a <__flp>
    4c34:	3d c0       	rjmp	.+122    	; 0x4cb0 <free+0x10c>
    4c36:	e9 01       	movw	r28, r18
    4c38:	fb 83       	std	Y+3, r31	; 0x03
    4c3a:	ea 83       	std	Y+2, r30	; 0x02
    4c3c:	49 91       	ld	r20, Y+
    4c3e:	59 91       	ld	r21, Y+
    4c40:	c4 0f       	add	r28, r20
    4c42:	d5 1f       	adc	r29, r21
    4c44:	ec 17       	cp	r30, r28
    4c46:	fd 07       	cpc	r31, r29
    4c48:	61 f4       	brne	.+24     	; 0x4c62 <free+0xbe>
    4c4a:	80 81       	ld	r24, Z
    4c4c:	91 81       	ldd	r25, Z+1	; 0x01
    4c4e:	84 0f       	add	r24, r20
    4c50:	95 1f       	adc	r25, r21
    4c52:	02 96       	adiw	r24, 0x02	; 2
    4c54:	e9 01       	movw	r28, r18
    4c56:	99 83       	std	Y+1, r25	; 0x01
    4c58:	88 83       	st	Y, r24
    4c5a:	82 81       	ldd	r24, Z+2	; 0x02
    4c5c:	93 81       	ldd	r25, Z+3	; 0x03
    4c5e:	9b 83       	std	Y+3, r25	; 0x03
    4c60:	8a 83       	std	Y+2, r24	; 0x02
    4c62:	e0 e0       	ldi	r30, 0x00	; 0
    4c64:	f0 e0       	ldi	r31, 0x00	; 0
    4c66:	12 96       	adiw	r26, 0x02	; 2
    4c68:	8d 91       	ld	r24, X+
    4c6a:	9c 91       	ld	r25, X
    4c6c:	13 97       	sbiw	r26, 0x03	; 3
    4c6e:	00 97       	sbiw	r24, 0x00	; 0
    4c70:	19 f0       	breq	.+6      	; 0x4c78 <free+0xd4>
    4c72:	fd 01       	movw	r30, r26
    4c74:	dc 01       	movw	r26, r24
    4c76:	f7 cf       	rjmp	.-18     	; 0x4c66 <free+0xc2>
    4c78:	8d 91       	ld	r24, X+
    4c7a:	9c 91       	ld	r25, X
    4c7c:	11 97       	sbiw	r26, 0x01	; 1
    4c7e:	9d 01       	movw	r18, r26
    4c80:	2e 5f       	subi	r18, 0xFE	; 254
    4c82:	3f 4f       	sbci	r19, 0xFF	; 255
    4c84:	82 0f       	add	r24, r18
    4c86:	93 1f       	adc	r25, r19
    4c88:	20 91 48 06 	lds	r18, 0x0648	; 0x800648 <__brkval>
    4c8c:	30 91 49 06 	lds	r19, 0x0649	; 0x800649 <__brkval+0x1>
    4c90:	28 17       	cp	r18, r24
    4c92:	39 07       	cpc	r19, r25
    4c94:	69 f4       	brne	.+26     	; 0x4cb0 <free+0x10c>
    4c96:	30 97       	sbiw	r30, 0x00	; 0
    4c98:	29 f4       	brne	.+10     	; 0x4ca4 <free+0x100>
    4c9a:	10 92 4b 06 	sts	0x064B, r1	; 0x80064b <__flp+0x1>
    4c9e:	10 92 4a 06 	sts	0x064A, r1	; 0x80064a <__flp>
    4ca2:	02 c0       	rjmp	.+4      	; 0x4ca8 <free+0x104>
    4ca4:	13 82       	std	Z+3, r1	; 0x03
    4ca6:	12 82       	std	Z+2, r1	; 0x02
    4ca8:	b0 93 49 06 	sts	0x0649, r27	; 0x800649 <__brkval+0x1>
    4cac:	a0 93 48 06 	sts	0x0648, r26	; 0x800648 <__brkval>
    4cb0:	df 91       	pop	r29
    4cb2:	cf 91       	pop	r28
    4cb4:	08 95       	ret

00004cb6 <__do_global_dtors>:
    4cb6:	10 e0       	ldi	r17, 0x00	; 0
    4cb8:	cb ea       	ldi	r28, 0xAB	; 171
    4cba:	d0 e0       	ldi	r29, 0x00	; 0
    4cbc:	04 c0       	rjmp	.+8      	; 0x4cc6 <__do_global_dtors+0x10>
    4cbe:	fe 01       	movw	r30, r28
    4cc0:	0e 94 34 25 	call	0x4a68	; 0x4a68 <__tablejump2__>
    4cc4:	21 96       	adiw	r28, 0x01	; 1
    4cc6:	cc 3a       	cpi	r28, 0xAC	; 172
    4cc8:	d1 07       	cpc	r29, r17
    4cca:	c9 f7       	brne	.-14     	; 0x4cbe <__do_global_dtors+0x8>
    4ccc:	f8 94       	cli

00004cce <__stop_program>:
    4cce:	ff cf       	rjmp	.-2      	; 0x4cce <__stop_program>
